import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.minus(readablePeriod2);
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime3.toString(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-21T14:49:32.443Z" + "'", str6, "2022-02-21T14:49:32.443Z");
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setSecondOfMinute(52);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = dateMidnight17.getZone();
        org.joda.time.DateTime dateTime19 = localDate11.toDateTimeAtMidnight(dateTimeZone18);
        boolean boolean21 = dateTimeZone18.isStandardOffset((long) (byte) 10);
        mutableDateTime1.setZone(dateTimeZone18);
        int int23 = mutableDateTime1.getWeekyear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.DateTime dateTime13 = localDate5.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight24, readableDuration25);
        org.joda.time.Duration duration27 = period21.toDurationTo((org.joda.time.ReadableInstant) dateMidnight24);
        mutableDateTime14.add((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime30 = instant29.toMutableDateTime();
        mutableDateTime30.setSecondOfMinute((int) (byte) 1);
        mutableDateTime30.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime30.year();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime30.secondOfDay();
        mutableDateTime14.setMillis((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.DateTime dateTime38 = localDate5.toDateTime((org.joda.time.ReadableInstant) mutableDateTime30);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime30.setDayOfWeek(4441178);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4441178 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTime();
        mutableDateTime7.setSecondOfMinute((int) (byte) 1);
        mutableDateTime7.setSecondOfMinute(52);
        org.joda.time.DateTime dateTime12 = mutableDateTime7.toDateTimeISO();
        int int13 = mutableDateTime7.getMillisOfSecond();
        boolean boolean14 = mutableDateTime7.isAfterNow();
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime16 = instant15.toMutableDateTime();
        mutableDateTime16.setSecondOfMinute((int) (byte) 1);
        mutableDateTime16.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime16.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime16.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property22.getFieldType();
        mutableDateTime7.set(dateTimeFieldType23, 31);
        boolean boolean26 = dateMidnight2.isSupported(dateTimeFieldType23);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(49);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight2, dateTimeZone28);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 498 + "'", int13 == 498);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(53221996, 178, 719);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 178 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.clear();
        calendar0.clear();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"4437072\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        int int1 = localTime0.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 49 + "'", int1 == 49);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime localTime13 = localTime11.withSecondOfMinute(0);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime16 = property14.addCopy(0L);
        org.joda.time.LocalTime.Property property17 = localTime16.millisOfSecond();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDate19.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.LocalDate.Property property22 = localDate19.dayOfYear();
        org.joda.time.LocalDate localDate23 = property22.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate25 = localDate23.withDayOfYear((int) 'a');
        org.joda.time.LocalDate.Property property26 = localDate23.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) localDate23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.util.Date date5 = new java.util.Date(2, (int) '#', (int) '#');
        calendar1.setTime(date5);
        calendar1.set((int) (short) -1, (int) (byte) 100, (int) (short) 1, (int) (byte) -1, 17);
        org.joda.time.YearMonthDay yearMonthDay13 = org.joda.time.YearMonthDay.fromCalendarFields(calendar1);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = calendar1.get(53273563);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53273563");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-61936101780000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"4437072\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=7,MONTH=3,WEEK_OF_YEAR=17,WEEK_OF_MONTH=4,DAY_OF_MONTH=30,DAY_OF_YEAR=120,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=17,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Wed Jan 04 00:00:00 GMT+00:00 1905");
        org.junit.Assert.assertNotNull(yearMonthDay13);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        org.joda.time.Chronology chronology16 = localDate12.getChronology();
        org.joda.time.LocalDate localDate18 = localDate12.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = localDate18.getFieldType(1);
        org.joda.time.DateMidnight.Property property21 = dateMidnight2.property(dateTimeFieldType20);
        org.joda.time.DateMidnight dateMidnight22 = property21.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plusMonths(53221032);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusDays((-143999));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight28 = dateMidnight24.withEra(212);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 212 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight26);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        long long12 = dateTimeZone5.previousTransition((long) 10);
        boolean boolean13 = dateTimeZone5.isFixed();
        java.lang.String str15 = dateTimeZone5.getShortName(1645454854107L);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.Chronology chronology19 = timeOfDay18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.millisOfSecond();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.eras();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) dateTimeZone5, chronology19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.minutes();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        long long14 = durationField11.subtract((long) 2, (long) 1970);
        int int17 = durationField11.getDifference((long) 52, (long) 24);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1968L) + "'", long14 == (-1968L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 28 + "'", int17 == 28);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.year();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight12, readableDuration13);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType16 = periodType15.withSecondsRemoved();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight9, (org.joda.time.ReadableInstant) dateMidnight12, periodType16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight9.year();
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.lang.String str20 = property18.getAsText(locale19);
        int int21 = property6.getMaximumShortTextLength(locale19);
        org.joda.time.MutableDateTime mutableDateTime23 = property6.set(53221407);
        int int24 = mutableDateTime23.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime23.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime27 = property25.set("2022-02-21T14:47:50.386");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:47:50.386\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970" + "'", str20, "1970");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 11 + "'", int24 == 11);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(0, 607);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 607 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        int int3 = localDateTime2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str5 = dateTimeFieldType4.toString();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.property(dateTimeFieldType4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withWeekOfWeekyear(47);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "weekyear" + "'", str5, "weekyear");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = dateMidnight7.getZone();
        int int10 = dateTimeZone8.getStandardOffset((long) 32769);
        java.util.Locale locale12 = java.util.Locale.US;
        java.lang.String str13 = dateTimeZone8.getShortName((long) 1970, locale12);
        org.joda.time.DateTime dateTime14 = dateMidnight2.toDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime16 = dateTime14.withYear(53221515);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, readableDuration20);
        int int22 = period21.size();
        java.lang.String str23 = period21.toString();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.Period period26 = period21.withField(durationFieldType24, 0);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight32, readableDuration33);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight29, (org.joda.time.ReadableInstant) dateMidnight32, periodType36);
        org.joda.time.PeriodType periodType38 = periodType36.withWeeksRemoved();
        org.joda.time.PeriodType periodType39 = periodType36.withMillisRemoved();
        org.joda.time.PeriodType periodType40 = periodType36.withWeeksRemoved();
        org.joda.time.Period period41 = period26.normalizedStandard(periodType36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period42 = new org.joda.time.Period((java.lang.Object) dateTime14, periodType36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT0S" + "'", str23, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period41);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property18 = dateMidnight14.dayOfMonth();
        org.joda.time.Period period19 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod20 = period19.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight14.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.withField(dateTimeFieldType27, (int) 'a');
        boolean boolean30 = dateMidnight21.isSupported(dateTimeFieldType27);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime11.withField(dateTimeFieldType27, (int) (byte) 100);
        org.joda.time.LocalDateTime.Property property33 = localDateTime4.property(dateTimeFieldType27);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime4.minusMonths(0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime4.minusHours(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime39 = localDateTime4.withDayOfYear(53221186);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53221186 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.dayOfMonth();
        org.joda.time.DurationField durationField21 = property20.getDurationField();
        long long23 = durationField21.getValueAsLong(1645454940300L);
        boolean boolean24 = durationField21.isSupported();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 19044L + "'", long23 == 19044L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) 'a');
        int int8 = dateMidnight7.getYearOfCentury();
        java.util.GregorianCalendar gregorianCalendar9 = dateMidnight7.toGregorianCalendar();
        org.joda.time.TimeOfDay timeOfDay10 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar9);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = gregorianCalendar9.getLeastMaximum((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertNotNull(gregorianCalendar9);
        org.junit.Assert.assertNotNull(timeOfDay10);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime14 = property12.setCopy(53221515);
        org.joda.time.LocalTime localTime15 = property12.getLocalTime();
        int int16 = property12.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 86399999 + "'", int16 == 86399999);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.minutes();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = chronology9.getDateTimeMillis((long) 616, 0, 720, 53341307, 53221407);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 720 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        java.util.Locale locale2 = new java.util.Locale("Mon Feb 21 14:47:55 GMT+00:00 2022", "8 Jun 150344 01:10:11 GMT");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale2.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for 8 JUN 150344 01:10:11 GMT");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "mon feb 21 14:47:55 gmt+00:00 2022_8 JUN 150344 01:10:11 GMT");
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        int int0 = java.util.Calendar.PM;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, 605);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 605 for minuteOfHour must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = dateTimeField11.getType();
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime15 = instant14.toMutableDateTime();
        mutableDateTime15.setSecondOfMinute((int) (byte) 1);
        mutableDateTime15.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime15.year();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime15.era();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.DateTimeField dateTimeField25 = localDate23.getField(1);
        java.lang.String str27 = dateTimeField25.getAsShortText((long) '4');
        int int28 = mutableDateTime15.get(dateTimeField25);
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.DateMidnight.Property property34 = dateMidnight33.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight33.minusDays((int) 'a');
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.lang.String str39 = locale38.toLanguageTag();
        java.lang.String str40 = dateMidnight33.toString("+00:00", locale38);
        java.lang.String str41 = locale30.getDisplayVariant(locale38);
        java.lang.String str42 = dateTimeField25.getAsText((int) (short) 10, locale38);
        java.lang.String str43 = dateTimeField11.getAsShortText((long) 8, locale38);
        long long45 = dateTimeField11.roundHalfCeiling((long) 53221186);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField25);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "gen" + "'", str27, "gen");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "en" + "'", str39, "en");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "October" + "'", str42, "October");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0" + "'", str43, "0");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 53220000L + "'", long45 == 53220000L);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        org.joda.time.LocalDate localDate11 = dateMidnight5.toLocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear(9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType15 = localDate11.getFieldType(53319979);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 53319979");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        org.joda.time.Chronology chronology16 = localDate12.getChronology();
        org.joda.time.LocalDate localDate18 = localDate12.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = localDate18.getFieldType(1);
        org.joda.time.DateMidnight.Property property21 = dateMidnight2.property(dateTimeFieldType20);
        org.joda.time.DateMidnight dateMidnight22 = property21.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight23 = property21.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight25 = property21.setCopy("Property[secondOfMinute]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[secondOfMinute]\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight23);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        long long7 = durationField4.add((long) (byte) 10, (long) (byte) 1);
        long long10 = durationField4.subtract((long) 726, 20);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 86400010L + "'", long7 == 86400010L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1727999274L) + "'", long10 == (-1727999274L));
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        java.util.Date date3 = new java.util.Date(32769, 53341129, 53221660);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Jan 15 00:00:00 GMT+00:00 4625479");
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis(4);
        org.joda.time.Period period11 = new org.joda.time.Period();
        org.joda.time.Period period13 = period11.minusMonths((int) '#');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.withPeriodAdded((org.joda.time.ReadablePeriod) period13, 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(3, 11, 2);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.weekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.minusDays(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime26 = localDateTime21.withMonthOfYear(53281723);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53281723 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = localDate5.toInterval(dateTimeZone9);
        java.lang.String str11 = interval10.toString();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.Period period20 = period18.plusYears(8);
        org.joda.time.Interval interval21 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate25, (org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = localDate28.isSupported(dateTimeFieldType30);
        org.joda.time.Chronology chronology32 = localDate28.getChronology();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 7, chronology32);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.Interval interval35 = interval10.withChronology(chronology32);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTimeAtCurrentTime(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 'a', dateTimeZone45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate43, (org.joda.time.ReadablePartial) localDate46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(1L, dateTimeZone49);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight50, readableDuration51);
        org.joda.time.Duration duration53 = period47.toDurationTo((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(1L, dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(1L, dateTimeZone58);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight59, readableDuration60);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType63 = periodType62.withSecondsRemoved();
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight56, (org.joda.time.ReadableInstant) dateMidnight59, periodType63);
        org.joda.time.PeriodType periodType65 = periodType63.withWeeksRemoved();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableDuration) duration53, periodType63);
        org.joda.time.Interval interval67 = new org.joda.time.Interval(readableInstant36, (org.joda.time.ReadableDuration) duration53);
        org.joda.time.Chronology chronology68 = interval67.getChronology();
        long long69 = interval67.getEndMillis();
        org.joda.time.Period period70 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod71 = period70.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) 'a', dateTimeZone75);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate((long) 'a', dateTimeZone78);
        org.joda.time.Period period80 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate76, (org.joda.time.ReadablePartial) localDate79);
        org.joda.time.LocalDate localDate82 = localDate76.withDayOfMonth(13);
        org.joda.time.Chronology chronology83 = localDate82.getChronology();
        mutablePeriod71.setPeriod((long) 10, (-599990L), chronology83);
        mutablePeriod71.addSeconds(13);
        mutablePeriod71.clear();
        org.joda.time.Interval interval88 = interval67.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.Interval interval89 = interval10.gap((org.joda.time.ReadableInterval) interval88);
        org.joda.time.PeriodType periodType90 = org.joda.time.PeriodType.months();
        boolean boolean91 = interval10.equals((java.lang.Object) periodType90);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str11, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(chronology68);
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1645454973917L + "'", long69 == 1645454973917L);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(mutablePeriod71);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((int) (byte) 100, 53221515, (int) (byte) 100, 53221161, 3, (int) 'a', (int) (byte) 100, 8);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay19.plus((org.joda.time.ReadablePeriod) mutablePeriod28);
        java.lang.String str30 = yearMonthDay29.toString();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours(9);
        org.joda.time.DateMidnight dateMidnight33 = yearMonthDay29.toDateMidnight(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 'a', dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate36, (org.joda.time.ReadablePartial) localDate39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        boolean boolean42 = localDate39.isSupported(dateTimeFieldType41);
        org.joda.time.Chronology chronology43 = localDate39.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.dayOfYear();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.dayOfYear();
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay29.withChronologyRetainFields(chronology43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType48 = yearMonthDay29.getFieldType(850);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 850");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "4582910-11-03" + "'", str30, "4582910-11-03");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(yearMonthDay46);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = localDate16.isSupported(dateTimeFieldType18);
        org.joda.time.Chronology chronology20 = localDate16.getChronology();
        org.joda.time.LocalDate localDate22 = localDate16.minusDays(100);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight5.withFields((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusMonths(53221235);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight28, readableDuration29);
        int int31 = period30.size();
        java.lang.String str32 = period30.toString();
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.Period period35 = period30.withField(durationFieldType33, 0);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 'a', dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 'a', dateTimeZone40);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate38, (org.joda.time.ReadablePartial) localDate41);
        org.joda.time.LocalDate localDate44 = localDate38.withDayOfMonth(13);
        org.joda.time.Chronology chronology45 = localDate44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.hourOfHalfday();
        org.joda.time.DurationField durationField47 = durationFieldType33.getField(chronology45);
        org.joda.time.DateTimeField dateTimeField48 = chronology45.weekyear();
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight23.withChronology(chronology45);
        org.joda.time.Instant instant50 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime51 = instant50.toMutableDateTime();
        mutableDateTime51.setSecondOfMinute((int) (byte) 1);
        mutableDateTime51.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime51.year();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(1L, dateTimeZone58);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(1L, dateTimeZone61);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight62, readableDuration63);
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType66 = periodType65.withSecondsRemoved();
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight59, (org.joda.time.ReadableInstant) dateMidnight62, periodType66);
        org.joda.time.DateMidnight.Property property68 = dateMidnight59.year();
        java.util.Locale locale69 = java.util.Locale.ITALIAN;
        java.lang.String str70 = property68.getAsText(locale69);
        int int71 = property56.getMaximumShortTextLength(locale69);
        org.joda.time.MutableDateTime mutableDateTime73 = property56.add((long) 914);
        mutableDateTime73.setMillisOfDay(954);
        mutableDateTime73.setYear(36);
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime73.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime79 = property78.roundHalfFloor();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean81 = mutableDateTime79.isSupported(dateTimeFieldType80);
        int int82 = dateMidnight49.get(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT0S" + "'", str32, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1970" + "'", str70, "1970");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 9 + "'", int71 == 9);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(0L);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone.setDefault(timeZone0);
        boolean boolean2 = timeZone0.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        int int5 = instant0.compareTo((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTime();
        int int9 = dateTime8.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.DateTimeField dateTimeField11 = localDate9.getField(1);
        boolean boolean12 = strSet6.remove((java.lang.Object) 1);
        java.lang.Object obj13 = null;
        boolean boolean14 = strSet6.contains(obj13);
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet6);
        java.util.stream.Stream<java.lang.String> strStream16 = strSet6.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream17 = strSet6.stream();
        java.lang.String[] strArray18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray19 = strSet6.toArray(strArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertNotNull(strStream17);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("en_US");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"en_US\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime14 = property12.addNoWrapToCopy((int) (byte) 100);
        org.joda.time.LocalTime localTime16 = property12.addCopy(366);
        org.joda.time.LocalTime localTime18 = property12.addCopy(596);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((java.lang.Object) localTime18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate9 = localDate3.withDayOfMonth(13);
        org.joda.time.Chronology chronology10 = localDate9.getChronology();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now(chronology10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((java.lang.Object) "gen", chronology10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"gen\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        org.joda.time.Period period0 = new org.joda.time.Period();
        org.joda.time.Period period2 = period0.minusYears(10);
        org.joda.time.Period period4 = period0.plusHours((int) (byte) 0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight7, readableDuration8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateMidnight.Property property11 = dateMidnight7.property(dateTimeFieldType10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight7.plusMonths((int) 'a');
        org.joda.time.DateMidnight.Property property14 = dateMidnight7.monthOfYear();
        org.joda.time.DateMidnight dateMidnight16 = property14.addToCopy(25);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight16);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Period period8 = period5.plusDays((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod9 = period5.toMutablePeriod();
        mutablePeriod9.setPeriod(27, 24, 6, 2035, 100, 0, 5, 0);
        mutablePeriod9.add(53221186, 18, 9, 804, 53221766, 53221996, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod28 = mutablePeriod9.toMutablePeriod();
        mutablePeriod28.setSeconds(53221550);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(mutablePeriod28);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale locale2 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale2);
        java.util.Locale locale4 = locale2.stripExtensions();
        java.lang.String str5 = locale0.getDisplayLanguage(locale4);
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "italiano" + "'", str5, "italiano");
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.dayOfMonth();
        java.lang.String str21 = property20.getAsShortText();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.LocalDate localDate26 = dateTime25.toLocalDate();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight31 = dateTime30.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = dateMidnight36.getZone();
        org.joda.time.DateTime dateTime38 = dateTime30.toDateTime(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = dateTime25.withZoneRetainFields(dateTimeZone37);
        org.joda.time.DateTime.Property property40 = dateTime39.monthOfYear();
        org.joda.time.DateTime dateTime41 = property40.getDateTime();
        org.joda.time.DateTime dateTime43 = property40.addToCopy((long) 53221848);
        org.joda.time.DateTime dateTime45 = dateTime43.withMillisOfDay(53253508);
        boolean boolean46 = property20.equals((java.lang.Object) dateTime45);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) dateMidnight23, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration17, periodType27);
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((java.lang.Object) interval31);
        org.joda.time.Duration duration34 = interval31.toDuration();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 'a', dateTimeZone44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate42, (org.joda.time.ReadablePartial) localDate45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(1L, dateTimeZone48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight49, readableDuration50);
        org.joda.time.Duration duration52 = period46.toDurationTo((org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(1L, dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(1L, dateTimeZone57);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight58, readableDuration59);
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType62 = periodType61.withSecondsRemoved();
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight55, (org.joda.time.ReadableInstant) dateMidnight58, periodType62);
        org.joda.time.PeriodType periodType64 = periodType62.withWeeksRemoved();
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration52, periodType62);
        org.joda.time.Interval interval66 = new org.joda.time.Interval(readableInstant35, (org.joda.time.ReadableDuration) duration52);
        org.joda.time.Interval interval67 = interval31.withDurationAfterStart((org.joda.time.ReadableDuration) duration52);
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod(18, 53221660, 53221515, 25);
        org.joda.time.Interval interval73 = interval31.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod72);
        long long74 = interval31.getStartMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(interval73);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1645454975267L + "'", long74 == 1645454975267L);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDayOfMonth((int) (short) 1);
        int int7 = dateMidnight4.getWeekyear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.plusDays((int) (short) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight14 = dateTime13.toDateMidnight();
        boolean boolean15 = dateMidnight9.equals((java.lang.Object) dateMidnight14);
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(1679506596172800000L);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight14.withFields((org.joda.time.ReadablePartial) yearMonthDay17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight14.weekyear();
        org.joda.time.Period period20 = new org.joda.time.Period();
        org.joda.time.Period period22 = period20.multipliedBy((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight14.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plusMonths(2022);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight28 = dateMidnight23.withDurationAdded(3214372500000L, 53281601);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 3214372500000 * 53281601");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight25);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withField(dateTimeFieldType9, (int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime3.withField(dateTimeFieldType9, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        org.joda.time.DateTime dateTime20 = dateTime13.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate23, (org.joda.time.ReadablePartial) localDate26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = localDate26.isSupported(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = localDate26.getChronology();
        org.joda.time.LocalDate localDate32 = localDate26.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = localDate32.getFieldType(1);
        boolean boolean35 = dateTime13.isSupported(dateTimeFieldType34);
        org.joda.time.DateTime dateTime37 = dateTime13.minusDays(1961);
        org.joda.time.DateTime.Property property38 = dateTime37.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusMonths((int) (byte) 10);
        org.joda.time.DateMidnight.Property property46 = dateMidnight43.era();
        org.joda.time.DateMidnight dateMidnight47 = property46.roundHalfCeilingCopy();
        long long48 = property38.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight47);
        java.util.Locale.Builder builder50 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder50.clearExtensions();
        java.util.Locale locale52 = builder50.build();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = dateMidnight47.toString("", locale52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateMidnight47);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-6L) + "'", long48 == (-6L));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        int int5 = instant0.compareTo((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        boolean boolean14 = localDate11.isSupported(dateTimeFieldType13);
        org.joda.time.Chronology chronology15 = localDate11.getChronology();
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(chronology15);
        org.joda.time.DateTime.Property property17 = dateTime4.era();
        org.joda.time.DateTime dateTime18 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes(41);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate23, (org.joda.time.ReadablePartial) localDate26);
        org.joda.time.LocalDate localDate29 = localDate23.withDayOfMonth(13);
        org.joda.time.Chronology chronology30 = localDate29.getChronology();
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.now(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 'a', dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 'a', dateTimeZone37);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate35, (org.joda.time.ReadablePartial) localDate38);
        org.joda.time.LocalDate localDate41 = localDate35.withDayOfMonth(13);
        org.joda.time.Chronology chronology42 = localDate41.getChronology();
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.now(chronology42);
        int int44 = localDate43.getYearOfCentury();
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(locale45);
        java.lang.String str47 = dateTimeField32.getAsShortText((org.joda.time.ReadablePartial) localDate43, locale45);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(1L, dateTimeZone49);
        org.joda.time.DateMidnight.Property property51 = dateMidnight50.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight50.minusDays((int) 'a');
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime55 = instant54.toMutableDateTime();
        mutableDateTime55.setSecondOfMinute((int) (byte) 1);
        mutableDateTime55.setSecondOfMinute(52);
        org.joda.time.DateTime dateTime60 = mutableDateTime55.toDateTimeISO();
        int int61 = mutableDateTime55.getMillisOfSecond();
        boolean boolean62 = mutableDateTime55.isAfterNow();
        org.joda.time.Instant instant63 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime64 = instant63.toMutableDateTime();
        mutableDateTime64.setSecondOfMinute((int) (byte) 1);
        mutableDateTime64.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime64.year();
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime64.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property70.getFieldType();
        mutableDateTime55.set(dateTimeFieldType71, 31);
        boolean boolean74 = dateMidnight50.isSupported(dateTimeFieldType71);
        boolean boolean75 = localDate43.isSupported(dateTimeFieldType71);
        int int76 = dateTime20.get(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1645454975419,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"4437072\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=49,SECOND=35,MILLISECOND=419,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Feb" + "'", str47, "Feb");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 419 + "'", int61 == 419);
// flaky:         org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 83940 + "'", int76 == 83940);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeFormatter9.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = dateMidnight16.getZone();
        int int19 = dateTimeZone17.getStandardOffset((long) 32769);
        java.util.Locale locale21 = java.util.Locale.US;
        java.lang.String str22 = dateTimeZone17.getShortName((long) 1970, locale21);
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now(dateTimeZone17);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone17);
        long long27 = dateTimeZone17.convertLocalToUTC((long) 1961, false);
        java.lang.String str28 = dateTimeZone17.toString();
        long long30 = dateTimeZone17.nextTransition((long) (byte) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter9.withZone(dateTimeZone17);
        java.util.TimeZone timeZone32 = dateTimeZone17.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(687, 53221147, (-101), 53221593, 53281067, 53221102, 32, dateTimeZone17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53221593 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1961L + "'", long27 == 1961L);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Tempo universale coordinato");
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 862);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(53279438);
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((int) (byte) 100, 53221515, (int) (byte) 100, 53221161, 3, (int) 'a', (int) (byte) 100, 8);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay19.plus((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay19.withDayOfMonth(4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType33 = yearMonthDay19.getFieldType(53281332);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53281332");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.DateTimeField dateTimeField11 = localDate9.getField(1);
        boolean boolean12 = strSet6.remove((java.lang.Object) 1);
        java.lang.Object obj13 = null;
        boolean boolean14 = strSet6.contains(obj13);
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet6);
        java.util.stream.Stream<java.lang.String> strStream16 = strSet6.parallelStream();
        boolean boolean18 = strSet6.add("dayOfYear");
        java.util.Iterator<java.lang.String> strItor19 = strSet6.iterator();
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.lang.String[] strArray25 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.DateTimeField dateTimeField31 = localDate29.getField(1);
        boolean boolean32 = strSet26.remove((java.lang.Object) 1);
        java.lang.Object obj33 = null;
        boolean boolean34 = strSet26.contains(obj33);
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strSet26);
        java.util.Locale.LanguageRange languageRange37 = new java.util.Locale.LanguageRange("coreano");
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] { languageRange37 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.lang.String[] strArray60 = new java.lang.String[] { "\ubbf8\uad6d", "", "java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z", "DurationField[days]", "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z", "weekyear-gregory", "it", "-0033-08-30T00:00:00.000Z", "weekyear-gregory", "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z", "53221655", "java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", "java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", "dayOfYear", "inglese (Stati Uniti)", "weekyear-gregory", "java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", "UTC" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        java.util.List<java.lang.String> strList63 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.lang.String>) strList61);
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList61);
        boolean boolean65 = strSet6.containsAll((java.util.Collection<java.lang.String>) strList64);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = dateMidnight16.getZone();
        int int19 = dateTimeZone17.getStandardOffset((long) 32769);
        java.util.Locale locale21 = java.util.Locale.US;
        java.lang.String str22 = dateTimeZone17.getShortName((long) 1970, locale21);
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now(dateTimeZone17);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone17);
        long long27 = dateTimeZone17.convertLocalToUTC((long) 1961, false);
        java.lang.String str28 = dateTimeZone17.toString();
        long long30 = dateTimeZone17.nextTransition((long) (byte) 1);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(1645454882020L, dateTimeZone17);
        org.joda.time.LocalTime localTime33 = localTime31.minusSeconds(53281723);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, readableDuration37);
        int int39 = period38.size();
        java.lang.String str40 = period38.toString();
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.Period period43 = period38.withField(durationFieldType41, 0);
        org.joda.time.LocalTime localTime45 = localTime33.withFieldAdded(durationFieldType41, 53221032);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate47 = localDate8.withFieldAdded(durationFieldType41, 721437);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'halfdays' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1961L + "'", long27 == 1961L);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT0S" + "'", str40, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(localTime45);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(1961, (-19092), 11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1961 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = localDate10.getField(1);
        boolean boolean13 = strSet7.remove((java.lang.Object) 1);
        java.lang.Object obj14 = null;
        boolean boolean15 = strSet7.contains(obj14);
        java.util.List<java.lang.String> strList16 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet7);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.lang.String[] strArray22 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.DateTimeField dateTimeField28 = localDate26.getField(1);
        boolean boolean29 = strSet23.remove((java.lang.Object) 1);
        java.lang.Object obj30 = null;
        boolean boolean31 = strSet23.contains(obj30);
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet23);
        java.lang.String str33 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strList32);
        java.util.Set<java.lang.String> strSet34 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String str35 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = java.util.Locale.lookupTag(languageRangeList0, (java.util.Collection<java.lang.String>) strSet34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime14 = property12.setCopy(53221515);
        org.joda.time.LocalTime localTime16 = property12.addCopy(53221515);
        org.joda.time.LocalTime localTime18 = localTime16.minusHours(100);
        int int19 = localTime18.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate23, (org.joda.time.ReadablePartial) localDate26);
        org.joda.time.LocalDate localDate29 = localDate23.withDayOfMonth(13);
        java.util.Locale locale31 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale31);
        java.util.Set<java.lang.String> strSet33 = locale31.getUnicodeLocaleAttributes();
        java.lang.String str34 = localDate23.toString("+00:00", locale31);
        java.util.Locale locale35 = java.util.Locale.ITALIAN;
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight38.minusDays((int) 'a');
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        java.lang.String str44 = locale43.toLanguageTag();
        java.lang.String str45 = dateMidnight38.toString("+00:00", locale43);
        java.lang.String str46 = locale35.getDisplayVariant(locale43);
        java.lang.String str47 = locale31.getDisplayLanguage(locale43);
        java.lang.String str48 = locale43.getLanguage();
        java.util.Locale locale49 = java.util.Locale.JAPAN;
        java.lang.String str50 = locale43.getDisplayScript(locale49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = localTime18.toString("German", locale43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: r");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "en" + "'", str44, "en");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Italian" + "'", str47, "Italian");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "en" + "'", str48, "en");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType2 = periodType1.withSecondsRemoved();
        java.lang.String str3 = periodType1.getName();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 26, periodType1);
        mutablePeriod4.addMillis(0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "YearDayTime" + "'", str3, "YearDayTime");
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime localTime13 = localTime11.withSecondOfMinute(0);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime16 = property14.addCopy(0L);
        org.joda.time.LocalTime.Property property17 = localTime16.millisOfSecond();
        org.joda.time.LocalTime localTime19 = localTime16.plusSeconds((-19092));
        org.joda.time.LocalTime localTime21 = localTime16.withMillisOfDay(39);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(0, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        int int11 = dateTimeZone9.getStandardOffset((long) 32769);
        java.util.Locale locale13 = java.util.Locale.US;
        java.lang.String str14 = dateTimeZone9.getShortName((long) 1970, locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale13.getDisplayCountry(locale15);
        java.util.Calendar.Builder builder17 = builder0.setLocale(locale15);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.Calendar.Builder builder19 = builder17.setTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate22, (org.joda.time.ReadablePartial) localDate25);
        org.joda.time.LocalDate localDate28 = localDate22.withDayOfMonth(13);
        org.joda.time.Chronology chronology29 = localDate28.getChronology();
        long long33 = chronology29.add((long) (short) -1, (long) 1961, 15);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.standard();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 'a', dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 'a', dateTimeZone40);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate38, (org.joda.time.ReadablePartial) localDate41);
        org.joda.time.LocalDate localDate44 = localDate38.withDayOfMonth(13);
        org.joda.time.Chronology chronology45 = localDate44.getChronology();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 0, periodType35, chronology45);
        int[] intArray49 = chronology29.get((org.joda.time.ReadablePeriod) mutablePeriod46, (long) 596, (long) 53221161);
        java.util.Calendar.Builder builder50 = builder17.setFields(intArray49);
        java.util.Calendar.Builder builder54 = builder17.setWeekDate(304, (int) ' ', 1970);
        java.util.Calendar.Builder builder58 = builder54.setDate(10, 43, 687);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ubbf8\uad6d" + "'", str16, "\ubbf8\uad6d");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 29414L + "'", long33 == 29414L);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 0, 0, 14, 47, 0, 565]");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute(3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        long long6 = property5.remainder();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 53343620L + "'", long6 == 53343620L);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType1 = periodType0.withSecondsRemoved();
        java.lang.String str2 = periodType0.toString();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PeriodType[YearDayTime]" + "'", str2, "PeriodType[YearDayTime]");
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight9, readableDuration10);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType13 = periodType12.withSecondsRemoved();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight6, (org.joda.time.ReadableInstant) dateMidnight9, periodType13);
        org.joda.time.PeriodType periodType15 = periodType13.withWeeksRemoved();
        org.joda.time.PeriodType periodType16 = periodType13.withMillisRemoved();
        org.joda.time.PeriodType periodType17 = periodType13.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight23.getZone();
        int int26 = dateTimeZone24.getStandardOffset((long) 32769);
        java.util.Locale locale28 = java.util.Locale.US;
        java.lang.String str29 = dateTimeZone24.getShortName((long) 1970, locale28);
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.now(dateTimeZone24);
        org.joda.time.LocalTime localTime32 = localTime30.withSecondOfMinute(0);
        int int33 = localTime30.getSecondOfMinute();
        org.joda.time.Chronology chronology34 = localTime30.getChronology();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) '#', chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.minuteOfDay();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 11, periodType17, chronology34);
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay(4, 12, 59, chronology34);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay38.minusMillis(100);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(1L, dateTimeZone42);
        org.joda.time.DateMidnight.Property property44 = dateMidnight43.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight43.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property47 = dateMidnight43.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 'a', dateTimeZone52);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate50, (org.joda.time.ReadablePartial) localDate53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        boolean boolean56 = localDate53.isSupported(dateTimeFieldType55);
        org.joda.time.Chronology chronology57 = localDate53.getChronology();
        org.joda.time.LocalDate localDate59 = localDate53.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = localDate59.getFieldType(1);
        org.joda.time.DateMidnight.Property property62 = dateMidnight43.property(dateTimeFieldType61);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay64 = timeOfDay38.withField(dateTimeFieldType61, 53341062);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 36 + "'", int33 == 36);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusMonths((int) (byte) 10);
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime8 = instant7.toMutableDateTime();
        mutableDateTime8.setSecondOfMinute((int) (byte) 1);
        int int11 = mutableDateTime8.getMillisOfDay();
        int int12 = mutableDateTime8.getHourOfDay();
        int int13 = dateMidnight6.compareTo((org.joda.time.ReadableInstant) mutableDateTime8);
        boolean boolean15 = dateMidnight6.isAfter((long) 13);
        org.joda.time.DateMidnight.Property property16 = dateMidnight6.dayOfYear();
        int int17 = dateMidnight6.getMonthOfYear();
        int int18 = dateMidnight6.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53341028 + "'", int11 == 53341028);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 14 + "'", int12 == 14);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = localTime0.withMillisOfSecond(53221407);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53221407 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtCurrentTime(dateTimeZone4);
        int int6 = instant1.compareTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute(0);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, readableDuration20);
        org.joda.time.Duration duration22 = period16.toDurationTo((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.Instant instant23 = instant9.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period25 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateTime5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = dateTime5.withDayOfMonth((int) '#');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant23);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("8 JUN 150344 01:10:11 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"8 JUN 150344 01:10:11 GMT\" is malformed at \" JUN 150344 01:10:11 GMT\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) dateMidnight23, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration17, periodType27);
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        boolean boolean33 = interval31.isAfterNow();
        org.joda.time.Chronology chronology34 = interval31.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.seconds();
        long long38 = durationField35.subtract((long) 721437, 58);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 663437L + "'", long38 == 663437L);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = localDate5.toInterval(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType20 = periodType19.withSecondsRemoved();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, (org.joda.time.ReadableInstant) dateMidnight16, periodType20);
        int int22 = dateMidnight16.getMillisOfSecond();
        boolean boolean23 = localDate5.equals((java.lang.Object) int22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDate5.toDateTimeAtStartOfDay(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMinutes(673);
        int int28 = dateTime27.getEra();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setSecondOfMinute(52);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = dateMidnight17.getZone();
        org.joda.time.DateTime dateTime19 = localDate11.toDateTimeAtMidnight(dateTimeZone18);
        boolean boolean21 = dateTimeZone18.isStandardOffset((long) (byte) 10);
        mutableDateTime1.setZone(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.millisOfSecond();
        org.joda.time.Instant instant24 = mutableDateTime1.toInstant();
        org.joda.time.Period period25 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod26 = period25.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 'a', dateTimeZone33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate31, (org.joda.time.ReadablePartial) localDate34);
        org.joda.time.LocalDate localDate37 = localDate31.withDayOfMonth(13);
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        mutablePeriod26.setPeriod((long) 10, (-599990L), chronology38);
        mutableDateTime1.setChronology(chronology38);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime1.year();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDate(53341146, 53341657, 889);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53341657 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withPivotYear(53221684);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.parse("2022-02-21T14:49:09.601Z/2022-02-21T14:49:09.601Z", dateTimeFormatter7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 10);
        int int2 = mutablePeriod1.getWeeks();
        int int3 = mutablePeriod1.getYears();
        mutablePeriod1.setPeriod(0, 11, 10, (int) (byte) 100, (int) '4', 53221777, 18, 53281708);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        org.joda.time.Period period2 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate localDate14 = localDate8.withDayOfMonth(13);
        org.joda.time.Chronology chronology15 = localDate14.getChronology();
        mutablePeriod3.setPeriod((long) 10, (-599990L), chronology15);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((-1968L), chronology15);
        org.joda.time.DateTimeZone dateTimeZone18 = chronology15.getZone();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(1645454844652L, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight20 = org.joda.time.DateMidnight.now(dateTimeZone18);
        int int22 = dateTimeZone18.getOffsetFromLocal(1645454849451L);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        org.joda.time.DateTime dateTime11 = dateTime3.toDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight17 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = dateMidnight22.getZone();
        org.joda.time.DateTime dateTime24 = dateTime16.toDateTime(dateTimeZone23);
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(dateTimeZone23);
        long long27 = dateTimeZone23.previousTransition((long) 436);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(dateTimeZone23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeZone10, dateTimeZone23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 436L + "'", long27 == 436L);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate9.withDayOfMonth(13);
        org.joda.time.Chronology chronology16 = localDate15.getChronology();
        int int17 = localDate5.compareTo((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean19 = localDate5.isSupported(dateTimeFieldType18);
        org.joda.time.DurationFieldType durationFieldType20 = dateTimeFieldType18.getRangeDurationType();
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(durationFieldType20);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.util.Date date5 = new java.util.Date(2, (int) '#', (int) '#');
        calendar1.setTime(date5);
        long long7 = date5.getTime();
        int int8 = date5.getDay();
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.fromDateFields(date5);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-2050963200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"4437072\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1905,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=4,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Wed Jan 04 00:00:00 GMT+00:00 1905");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-2050963200000L) + "'", long7 == (-2050963200000L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(timeOfDay9);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone.setDefault(timeZone0);
        timeZone0.setID("4437072");
        java.util.Calendar.Builder builder4 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder7 = builder4.set(0, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        int int15 = dateTimeZone13.getStandardOffset((long) 32769);
        java.util.Locale locale17 = java.util.Locale.US;
        java.lang.String str18 = dateTimeZone13.getShortName((long) 1970, locale17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale17.getDisplayCountry(locale19);
        java.util.Calendar.Builder builder21 = builder4.setLocale(locale19);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.Calendar.Builder builder23 = builder21.setTimeZone(timeZone22);
        int int24 = timeZone22.getRawOffset();
        boolean boolean25 = timeZone0.hasSameRules(timeZone22);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = timeZone22.getOffset(366, 53281154, 53279438, 25, 2022, 53221440);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ubbf8\uad6d" + "'", str20, "\ubbf8\uad6d");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) (short) 10);
        org.joda.time.LocalTime localTime8 = localTime6.minusMillis(493);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = dateTimeFormatter2.print((org.joda.time.ReadablePartial) localTime6);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = dateTimeFormatter2.parseDateTime("GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(locale4);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        int int21 = dateTimeZone19.getStandardOffset((long) 32769);
        java.util.Locale locale23 = java.util.Locale.US;
        java.lang.String str24 = dateTimeZone19.getShortName((long) 1970, locale23);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 53221660, dateTimeZone19);
        org.joda.time.Period period26 = org.joda.time.Period.ZERO;
        int int27 = period26.getYears();
        org.joda.time.LocalTime localTime28 = localTime25.plus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.LocalTime localTime29 = localTime11.withFields((org.joda.time.ReadablePartial) localTime28);
        int int30 = localTime11.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 49 + "'", int30 == 49);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(53221161, 1931, 53341956, 1964, 0, 174, 32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1964 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes(53221655);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay1.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType14 = periodType13.withSecondsRemoved();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, (org.joda.time.ReadableInstant) dateMidnight10, periodType14);
        org.joda.time.DateMidnight.Property property16 = dateMidnight7.year();
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = property16.getAsText(locale17);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime20 = instant19.toMutableDateTime();
        mutableDateTime20.setSecondOfMinute((int) (byte) 1);
        mutableDateTime20.setSecondOfMinute(52);
        mutableDateTime20.setMillisOfSecond((int) ' ');
        long long27 = property16.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = dateMidnight32.getZone();
        mutableDateTime20.setZoneRetainFields(dateTimeZone33);
        long long36 = dateTimeZone33.convertUTCToLocal((long) 5);
        boolean boolean37 = property4.equals((java.lang.Object) long36);
        int int38 = property4.get();
        org.joda.time.TimeOfDay timeOfDay39 = property4.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay41 = property4.addWrapFieldToCopy((-19092));
        int int42 = timeOfDay41.getHourOfDay();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970" + "'", str18, "1970");
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-52L) + "'", long27 == (-52L));
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 5L + "'", long36 == 5L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) dateMidnight23, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration17, periodType27);
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        long long33 = interval31.getEndMillis();
        org.joda.time.Period period34 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod35 = period34.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 'a', dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate40, (org.joda.time.ReadablePartial) localDate43);
        org.joda.time.LocalDate localDate46 = localDate40.withDayOfMonth(13);
        org.joda.time.Chronology chronology47 = localDate46.getChronology();
        mutablePeriod35.setPeriod((long) 10, (-599990L), chronology47);
        mutablePeriod35.addSeconds(13);
        mutablePeriod35.clear();
        org.joda.time.Interval interval52 = interval31.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod35);
        boolean boolean54 = interval31.isAfter((long) 'u');
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 'a', dateTimeZone56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) 'a', dateTimeZone59);
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate57, (org.joda.time.ReadablePartial) localDate60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(1L, dateTimeZone63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone67 = dateMidnight66.getZone();
        org.joda.time.DateTime dateTime68 = localDate60.toDateTimeAtMidnight(dateTimeZone67);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval69 = interval31.withEnd((org.joda.time.ReadableInstant) dateTime68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(chronology32);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645454978668L + "'", long33 == 1645454978668L);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime68);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = dateMidnight16.getZone();
        org.joda.time.DateTime dateTime18 = localDate10.toDateTimeAtMidnight(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now(dateTimeZone17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter3.withZone(dateTimeZone17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 36);
        org.joda.time.Chronology chronology23 = dateTimeFormatter22.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.parse("java.io.IOException: 53221655", dateTimeFormatter22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(chronology23);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.year();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight12, readableDuration13);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType16 = periodType15.withSecondsRemoved();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight9, (org.joda.time.ReadableInstant) dateMidnight12, periodType16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight9.year();
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.lang.String str20 = property18.getAsText(locale19);
        int int21 = property6.getMaximumShortTextLength(locale19);
        org.joda.time.MutableDateTime mutableDateTime23 = property6.set(53221407);
        org.joda.time.MutableDateTime mutableDateTime24 = property6.roundHalfCeiling();
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder26.clearExtensions();
        java.util.Locale.Builder builder29 = builder26.setLanguageTag("UTC");
        java.util.Locale locale30 = builder29.build();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime31 = property6.set("minuteOfDay", locale30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"minuteOfDay\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970" + "'", str20, "1970");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "utc");
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        long long12 = dateTimeZone5.previousTransition((long) 10);
        boolean boolean13 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setSecondOfMinute(52);
        org.joda.time.DateTime dateTime6 = mutableDateTime1.toDateTimeISO();
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.LocalDate localDate20 = localDate14.withDayOfMonth(13);
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        mutablePeriod9.setPeriod((long) 10, (-599990L), chronology21);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((-1968L), chronology21);
        mutableDateTime1.setChronology(chronology21);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate28, (org.joda.time.ReadablePartial) localDate31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        boolean boolean34 = localDate31.isSupported(dateTimeFieldType33);
        org.joda.time.Chronology chronology35 = localDate31.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.minutes();
        java.lang.String str37 = chronology35.toString();
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) 6, chronology35);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime40 = instant39.toMutableDateTime();
        mutableDateTime40.setSecondOfMinute((int) (byte) 1);
        mutableDateTime40.setSecondOfMinute(52);
        org.joda.time.DateTime dateTime45 = mutableDateTime40.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 'a', dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 'a', dateTimeZone50);
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate48, (org.joda.time.ReadablePartial) localDate51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(1L, dateTimeZone54);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight55, readableDuration56);
        org.joda.time.Duration duration58 = period52.toDurationTo((org.joda.time.ReadableInstant) dateMidnight55);
        mutableDateTime40.add((org.joda.time.ReadableDuration) duration58, 53221515);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight38.plus((org.joda.time.ReadableDuration) duration58);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration58);
        mutableDateTime1.addDays(532237);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDateTime(53281119, 13, 58, 53281627, 607, 53221180, 53221197);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53281627 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[UTC]" + "'", str37, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(dateMidnight61);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 10);
        int int3 = mutablePeriod2.getWeeks();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay0.plus((org.joda.time.ReadablePeriod) mutablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, readableDuration8);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = period9.normalizedStandard(periodType10);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay4.minus((org.joda.time.ReadablePeriod) period11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType14 = timeOfDay4.getFieldType(1964);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1964");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(timeOfDay12);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = dateMidnight16.getZone();
        org.joda.time.DateTime dateTime18 = localDate10.toDateTimeAtMidnight(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now(dateTimeZone17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter3.withZone(dateTimeZone17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.parse("", dateTimeFormatter22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusMillis(10);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.minuteOfHour();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property4.getAsShortText(locale5);
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.minusMillis(10);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay13 = property12.withMaximumValue();
        java.lang.String str14 = property12.getAsString();
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.lang.String str16 = property12.getAsShortText(locale15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.dayOfMonth();
        org.joda.time.DurationField durationField21 = property20.getDurationField();
        org.joda.time.DateMidnight dateMidnight22 = property20.roundHalfEvenCopy();
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        int int25 = property20.getMaximumShortTextLength(locale23);
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.lang.String str27 = locale26.toLanguageTag();
        java.util.Set<java.lang.String> strSet28 = locale26.getUnicodeLocaleKeys();
        java.lang.String str29 = locale23.getDisplayLanguage(locale26);
        java.lang.String str30 = locale15.getDisplayCountry(locale23);
        java.lang.String str32 = locale23.getUnicodeLocaleType("13");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay33 = property4.setCopy("8 May 53223415 00:00:00 GMT", locale23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"8 May 53223415 00:00:00 GMT\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0" + "'", str6, "0");
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "en" + "'", str27, "en");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "German" + "'", str29, "German");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "China" + "'", str30, "China");
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property13 = dateMidnight9.dayOfMonth();
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight9.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.withField(dateTimeFieldType22, (int) 'a');
        boolean boolean25 = dateMidnight16.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime6.withField(dateTimeFieldType22, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withYear(7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = localDateTime27.toDate();
// flaky:             org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -987 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        java.lang.String[] strArray0 = java.util.TimeZone.getAvailableIDs();
        org.junit.Assert.assertNotNull(strArray0);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = org.joda.time.Period.parse("2035-02-21T14:47:41.423", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        org.joda.time.DateMidnight.Property property11 = dateMidnight2.year();
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.lang.String str13 = property11.getAsText(locale12);
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime15 = instant14.toMutableDateTime();
        mutableDateTime15.setSecondOfMinute((int) (byte) 1);
        mutableDateTime15.setSecondOfMinute(52);
        mutableDateTime15.setMillisOfSecond((int) ' ');
        long long22 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = dateMidnight27.getZone();
        mutableDateTime15.setZoneRetainFields(dateTimeZone28);
        long long31 = dateTimeZone28.convertUTCToLocal((long) 5);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight33 = org.joda.time.DateMidnight.now(dateTimeZone28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.withDayOfMonth(100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970" + "'", str13, "1970");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-52L) + "'", long22 == (-52L));
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 5L + "'", long31 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight33);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        java.util.Date date3 = new java.util.Date(26, 178, 42);
        java.lang.String str4 = date3.toGMTString();
        date3.setMinutes(53221796);
        int int7 = date3.getYear();
        org.junit.Assert.assertEquals(date3.toString(), "Wed Feb 19 13:56:00 GMT+00:00 2042");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "12 Dec 1940 00:00:00 GMT" + "'", str4, "12 Dec 1940 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 142 + "'", int7 == 142);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withField(dateTimeFieldType9, (int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime3.withField(dateTimeFieldType9, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        org.joda.time.DateTime dateTime20 = dateTime13.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate23, (org.joda.time.ReadablePartial) localDate26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = localDate26.isSupported(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = localDate26.getChronology();
        org.joda.time.LocalDate localDate32 = localDate26.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = localDate32.getFieldType(1);
        boolean boolean35 = dateTime13.isSupported(dateTimeFieldType34);
        org.joda.time.DateTime dateTime37 = dateTime13.minusDays(1961);
        org.joda.time.DateTime.Property property38 = dateTime37.yearOfEra();
        org.joda.time.DateTime dateTime40 = property38.addToCopy((-1L));
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 'a', dateTimeZone45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate43, (org.joda.time.ReadablePartial) localDate46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(1L, dateTimeZone49);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone53 = dateMidnight52.getZone();
        org.joda.time.DateTime dateTime54 = localDate46.toDateTimeAtMidnight(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.withYear(596);
        org.joda.time.DateTime.Property property57 = dateTime56.yearOfEra();
        org.joda.time.DateTime dateTime58 = property57.getDateTime();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime60 = dateTime40.toDateTimeISO();
        int int61 = dateTime60.getYear();
        org.joda.time.DateTime dateTime63 = dateTime60.plusMinutes((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime65 = dateTime60.withEra(53221848);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53221848 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-7) + "'", int61 == (-7));
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronolgy();
        boolean boolean5 = dateTimeFormatter2.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = dateTimeFormatter2.parseLocalDate("05:34:23.314");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeField dateTimeField3 = localDate1.getField(1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        boolean boolean11 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate localDate23 = localDate17.withDayOfMonth(13);
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        mutablePeriod13.add((long) ' ', chronology24);
        org.joda.time.LocalDate localDate26 = localDate1.minus((org.joda.time.ReadablePeriod) mutablePeriod13);
        mutablePeriod13.addMonths(53281689);
        mutablePeriod13.addHours(1439);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDate26);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.minusDays((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.property(dateTimeFieldType9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusMinutes(464);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.minusWeeks(23);
        org.joda.time.LocalDateTime.Property property15 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime8.withHourOfDay(0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        java.util.Date date6 = new java.util.Date((int) (byte) -1, 32769, 4, (int) (byte) 1, (int) (short) 10, 11);
        date6.setDate(53221197);
        java.lang.String str9 = date6.toGMTString();
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jun 08 01:10:11 GMT+00:00 150344");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "8 Jun 150344 01:10:11 GMT" + "'", str9, "8 Jun 150344 01:10:11 GMT");
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        java.util.Date date3 = new java.util.Date(10, (int) (short) 100, 178);
        org.joda.time.TimeOfDay timeOfDay4 = org.joda.time.TimeOfDay.fromDateFields(date3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.withMillisOfSecond(53341146);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53341146 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date3.toString(), "Fri Oct 25 00:00:00 GMT+00:00 1918");
        org.junit.Assert.assertNotNull(timeOfDay4);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight10 = dateTime9.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.withDayOfMonth((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTimeISO();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight4, (org.joda.time.ReadableInstant) dateMidnight12);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 'a', dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate19, (org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight26, readableDuration27);
        org.joda.time.Duration duration29 = period23.toDurationTo((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.Instant instant30 = instant16.minus((org.joda.time.ReadableDuration) duration29);
        mutableDateTime15.add((org.joda.time.ReadableDuration) duration29, (int) (short) 100);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight12.withDurationAdded((org.joda.time.ReadableDuration) duration29, 58);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateMidnight34);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusMonths((int) (byte) 10);
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime8 = instant7.toMutableDateTime();
        mutableDateTime8.setSecondOfMinute((int) (byte) 1);
        int int11 = mutableDateTime8.getMillisOfDay();
        int int12 = mutableDateTime8.getHourOfDay();
        int int13 = dateMidnight6.compareTo((org.joda.time.ReadableInstant) mutableDateTime8);
        int int14 = mutableDateTime8.getEra();
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime16 = instant15.toMutableDateTime();
        mutableDateTime16.setSecondOfMinute((int) (byte) 1);
        mutableDateTime16.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime16.year();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundFloor();
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate26, (org.joda.time.ReadablePartial) localDate29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight33, readableDuration34);
        org.joda.time.Duration duration36 = period30.toDurationTo((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Instant instant37 = instant23.minus((org.joda.time.ReadableDuration) duration36);
        mutableDateTime22.add((org.joda.time.ReadableDuration) duration36);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration36, 721437);
        org.joda.time.Chronology chronology41 = null;
        mutableDateTime8.setChronology(chronology41);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime8.setMinuteOfHour(605);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 605 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53341043 + "'", int11 == 53341043);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 14 + "'", int12 == 14);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(instant37);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(53221684);
        boolean boolean7 = dateTimeFormatter6.isParser();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = dateTimeFormatter6.print((long) 11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        org.joda.time.Period period0 = new org.joda.time.Period();
        org.joda.time.Period period1 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod2 = period1.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate localDate13 = localDate7.withDayOfMonth(13);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        mutablePeriod2.setPeriod((long) 10, (-599990L), chronology14);
        mutablePeriod2.addSeconds(13);
        mutablePeriod2.clear();
        org.joda.time.Period period19 = period0.minus((org.joda.time.ReadablePeriod) mutablePeriod2);
        org.joda.time.Minutes minutes20 = period19.toStandardMinutes();
        org.joda.time.Period period21 = new org.joda.time.Period();
        org.joda.time.Period period22 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod23 = period22.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate28, (org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate localDate34 = localDate28.withDayOfMonth(13);
        org.joda.time.Chronology chronology35 = localDate34.getChronology();
        mutablePeriod23.setPeriod((long) 10, (-599990L), chronology35);
        mutablePeriod23.addSeconds(13);
        mutablePeriod23.clear();
        org.joda.time.Period period40 = period21.minus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.Minutes minutes41 = period40.toStandardMinutes();
        org.joda.time.Period period42 = period19.withFields((org.joda.time.ReadablePeriod) period40);
        int int43 = period40.getMillis();
        org.joda.time.format.PeriodFormatter periodFormatter44 = null;
        java.lang.String str45 = period40.toString(periodFormatter44);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT0S" + "'", str45, "PT0S");
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder1.addUnicodeLocaleAttribute("gregory");
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.lang.String str7 = locale5.getISO3Country();
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.getDefault(category8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone10.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone10);
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale13);
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone10, locale13);
        java.util.Locale.setDefault(category8, locale13);
        java.lang.String str18 = locale5.getDisplayVariant(locale13);
        java.util.Locale.Builder builder19 = builder4.setLocale(locale5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder4.setExtension('x', "12-dic-1940 0.00.00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 1940 0.00.00 [at index 7]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "cinese" + "'", str6, "cinese");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CHN" + "'", str7, "CHN");
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645454980932,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=49,SECOND=40,MILLISECOND=932,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        java.util.Date date6 = new java.util.Date((int) (byte) -1, 32769, 4, (int) (byte) 1, (int) (short) 10, 11);
        date6.setDate(53221197);
        int int9 = date6.getTimezoneOffset();
        date6.setTime(8L);
        date6.setSeconds(53281616);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        int int16 = localDate15.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime18.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate23, (org.joda.time.ReadablePartial) localDate26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = localDate26.isSupported(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = localDate26.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfYear();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.dayOfMonth();
        org.joda.time.DateTime dateTime33 = dateTime20.toDateTime(chronology30);
        org.joda.time.DurationField durationField34 = chronology30.minutes();
        boolean boolean35 = date6.equals((java.lang.Object) durationField34);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Sep 09 16:26:56 GMT+00:00 1971");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeField dateTimeField3 = localDate1.getField(1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        boolean boolean11 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate9);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property13 = localDate9.centuryOfEra();
        org.joda.time.LocalDate localDate14 = property13.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = dateMidnight26.getZone();
        org.joda.time.DateTime dateTime28 = localDate20.toDateTimeAtMidnight(dateTimeZone27);
        org.joda.time.Interval interval29 = localDate14.toInterval(dateTimeZone27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = localDate14.get(dateTimeFieldType30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfHour' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.dayOfMonth();
        org.joda.time.DurationField durationField21 = property20.getDurationField();
        java.lang.String str22 = property20.getAsText();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.DateTime dateTime13 = localDate5.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(dateTimeZone12);
        java.util.Date date16 = new java.util.Date((-52L));
        boolean boolean17 = dateTimeZone12.equals((java.lang.Object) date16);
        java.util.Date date21 = new java.util.Date(10, (int) (short) 100, 178);
        date21.setYear(33);
        int int24 = date16.compareTo(date21);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:59:59 GMT+00:00 1969");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Oct 25 00:00:00 GMT+00:00 1933");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDayOfMonth((int) (short) 1);
        int int7 = dateMidnight4.getWeekyear();
        java.lang.String str9 = dateMidnight4.toString("+00:00");
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate localDate21 = localDate15.withDayOfMonth(13);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        mutablePeriod11.add((long) ' ', chronology22);
        org.joda.time.DurationField durationField24 = chronology22.weekyears();
        org.joda.time.DateTime dateTime25 = dateMidnight4.toDateTime(chronology22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = localDate27.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight34.withField(dateTimeFieldType35, (int) 'a');
        org.joda.time.DateTime dateTime39 = dateTime29.withField(dateTimeFieldType35, (int) (short) 0);
        org.joda.time.DateTime dateTime41 = dateTime29.plusHours((int) (short) 1);
        int int42 = dateTime41.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property43 = dateTime41.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int45 = dateTime41.get(dateTimeFieldType44);
        org.joda.time.DateTime dateTime47 = dateTime41.plusSeconds(464);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 'a', dateTimeZone52);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate50, (org.joda.time.ReadablePartial) localDate53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        boolean boolean56 = localDate53.isSupported(dateTimeFieldType55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.Interval interval58 = localDate53.toInterval(dateTimeZone57);
        java.lang.String str59 = interval58.toString();
        org.joda.time.Chronology chronology60 = interval58.getChronology();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate(chronology61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = localDate62.toDateTimeAtCurrentTime(dateTimeZone63);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((long) 'a', dateTimeZone66);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((long) 'a', dateTimeZone69);
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate67, (org.joda.time.ReadablePartial) localDate70);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight(1L, dateTimeZone73);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight74, readableDuration75);
        org.joda.time.Duration duration77 = period71.toDurationTo((org.joda.time.ReadableInstant) dateMidnight74);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateMidnight dateMidnight80 = new org.joda.time.DateMidnight(1L, dateTimeZone79);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateMidnight dateMidnight83 = new org.joda.time.DateMidnight(1L, dateTimeZone82);
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight83, readableDuration84);
        org.joda.time.PeriodType periodType86 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType87 = periodType86.withSecondsRemoved();
        org.joda.time.Period period88 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight80, (org.joda.time.ReadableInstant) dateMidnight83, periodType87);
        org.joda.time.PeriodType periodType89 = periodType87.withWeeksRemoved();
        org.joda.time.Period period90 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableDuration) duration77, periodType87);
        org.joda.time.Interval interval91 = interval58.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration77);
        org.joda.time.DateTime dateTime92 = dateTime41.plus((org.joda.time.ReadableDuration) duration77);
        org.joda.time.DateMidnight dateMidnight93 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration77);
        org.joda.time.Duration duration94 = duration77.toDuration();
        org.joda.time.ReadableDuration readableDuration95 = null;
        boolean boolean96 = duration94.isEqual(readableDuration95);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 41 + "'", int45 == 41);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str59, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateMidnight93);
        org.junit.Assert.assertNotNull(duration94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        java.util.Date date1 = new java.util.Date((long) 53221032);
        java.lang.Object obj2 = date1.clone();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 14:47:01 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "Thu Jan 01 14:47:01 GMT+00:00 1970");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "Thu Jan 01 14:47:01 GMT+00:00 1970");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "Thu Jan 01 14:47:01 GMT+00:00 1970");
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(0, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        int int11 = dateTimeZone9.getStandardOffset((long) 32769);
        java.util.Locale locale13 = java.util.Locale.US;
        java.lang.String str14 = dateTimeZone9.getShortName((long) 1970, locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale13.getDisplayCountry(locale15);
        java.util.Calendar.Builder builder17 = builder0.setLocale(locale15);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.Calendar.Builder builder19 = builder17.setTimeZone(timeZone18);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone20.observesDaylightTime();
        boolean boolean22 = timeZone18.hasSameRules(timeZone20);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = timeZone20.getOffset(212, 419, 640, 53332, 436, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ubbf8\uad6d" + "'", str16, "\ubbf8\uad6d");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        long long12 = dateTimeZone5.previousTransition((long) 10);
        boolean boolean13 = dateTimeZone5.isFixed();
        java.lang.String str15 = dateTimeZone5.getShortName(1645454854107L);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        java.lang.Object obj17 = null;
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime19 = instant18.toMutableDateTime();
        mutableDateTime19.setSecondOfMinute((int) (byte) 1);
        mutableDateTime19.setSecondOfMinute(52);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate26, (org.joda.time.ReadablePartial) localDate29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = dateMidnight35.getZone();
        org.joda.time.DateTime dateTime37 = localDate29.toDateTimeAtMidnight(dateTimeZone36);
        boolean boolean39 = dateTimeZone36.isStandardOffset((long) (byte) 10);
        mutableDateTime19.setZone(dateTimeZone36);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime19.millisOfSecond();
        org.joda.time.Instant instant42 = mutableDateTime19.toInstant();
        org.joda.time.Period period43 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod44 = period43.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 'a', dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 'a', dateTimeZone51);
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate49, (org.joda.time.ReadablePartial) localDate52);
        org.joda.time.LocalDate localDate55 = localDate49.withDayOfMonth(13);
        org.joda.time.Chronology chronology56 = localDate55.getChronology();
        mutablePeriod44.setPeriod((long) 10, (-599990L), chronology56);
        mutableDateTime19.setChronology(chronology56);
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(obj17, chronology56);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((java.lang.Object) dateTimeZone5, chronology56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(mutablePeriod44);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(chronology56);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime3 = dateTime1.withMillisOfSecond(53281896);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53281896 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType1 = periodType0.withWeeksRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.withYear(178);
        org.joda.time.Period period22 = new org.joda.time.Period();
        org.joda.time.Period period24 = period22.multipliedBy((int) (short) 10);
        org.joda.time.format.PeriodFormatter periodFormatter25 = null;
        java.lang.String str26 = period24.toString(periodFormatter25);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay21.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTimeAtCurrentTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = dateTime31.toDateMidnight();
        org.joda.time.DateTime dateTime34 = dateTime31.plusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime31.getZone();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.dayOfMonth();
        org.joda.time.DurationField durationField40 = property39.getDurationField();
        boolean boolean41 = dateTimeZone35.equals((java.lang.Object) durationField40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((java.lang.Object) yearMonthDay21, dateTimeZone35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0S" + "'", str26, "PT0S");
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.DateTime dateTime13 = localDate5.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight24, readableDuration25);
        org.joda.time.Duration duration27 = period21.toDurationTo((org.joda.time.ReadableInstant) dateMidnight24);
        mutableDateTime14.add((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime30 = instant29.toMutableDateTime();
        mutableDateTime30.setSecondOfMinute((int) (byte) 1);
        mutableDateTime30.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime30.year();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime30.secondOfDay();
        mutableDateTime14.setMillis((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.DateTime dateTime38 = localDate5.toDateTime((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime30.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime41 = property39.set("2022-02-21T14:49:08.845Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:49:08.845Z\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(53341657, 9, 2000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53341657 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.toPeriod();
        org.joda.time.PeriodType periodType2 = period1.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((java.lang.Object) periodType2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = localDate5.toInterval(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType20 = periodType19.withSecondsRemoved();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, (org.joda.time.ReadableInstant) dateMidnight16, periodType20);
        int int22 = dateMidnight16.getMillisOfSecond();
        boolean boolean23 = localDate5.equals((java.lang.Object) int22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate25 = localDate5.withMonthOfYear(48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 48 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        java.lang.String[] strArray2 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField8 = localDate6.getField(1);
        boolean boolean9 = strSet3.remove((java.lang.Object) 1);
        java.util.stream.Stream<java.lang.String> strStream10 = strSet3.stream();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strStream10);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 100);
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.Chronology chronology7 = timeOfDay6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withChronology(chronology7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = dateTimeFormatter8.print((long) 53221777);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getWeeksInWeekYear();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone.setDefault(timeZone3);
        calendar1.setTimeZone(timeZone3);
        // The following exception was thrown during execution in test generation
        try {
            calendar1.setWeekDate(53281546, 53221102, 53341304);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 53341304");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645454981688,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=49,SECOND=41,MILLISECOND=688,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight17, readableDuration18);
        org.joda.time.Duration duration20 = period14.toDurationTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.Instant instant21 = instant7.minus((org.joda.time.ReadableDuration) duration20);
        boolean boolean22 = dateMidnight5.isAfter((org.joda.time.ReadableInstant) instant7);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        int int33 = dateTimeZone31.getStandardOffset((long) 32769);
        java.util.Locale locale35 = java.util.Locale.US;
        java.lang.String str36 = dateTimeZone31.getShortName((long) 1970, locale35);
        org.joda.time.DateTime dateTime37 = dateMidnight25.toDateTime(dateTimeZone31);
        boolean boolean38 = instant7.isEqual((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime.Property property39 = dateTime37.era();
        int int40 = dateTime37.getDayOfYear();
        org.joda.time.DateTime.Property property41 = dateTime37.year();
        int int42 = property41.get();
        org.joda.time.DateTime dateTime43 = property41.roundCeilingCopy();
        org.joda.time.DateTime dateTime44 = property41.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime45 = property41.withMinimumValue();
        org.joda.time.DateTime dateTime47 = dateTime45.withDayOfMonth(9);
        java.util.Locale locale49 = java.util.Locale.SIMPLIFIED_CHINESE;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = dateTime45.toString("PT0S", locale49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) dateMidnight23, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration17, periodType27);
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 'a', dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 'a', dateTimeZone37);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate35, (org.joda.time.ReadablePartial) localDate38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        boolean boolean41 = localDate38.isSupported(dateTimeFieldType40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.Interval interval43 = localDate38.toInterval(dateTimeZone42);
        java.lang.String str44 = interval43.toString();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 'a', dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate47, (org.joda.time.ReadablePartial) localDate50);
        org.joda.time.Period period53 = period51.plusYears(8);
        org.joda.time.Interval interval54 = interval43.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period53);
        boolean boolean55 = interval31.isAfter((org.joda.time.ReadableInterval) interval54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(1L, dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(1L, dateTimeZone60);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight61, readableDuration62);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType65 = periodType64.withSecondsRemoved();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight58, (org.joda.time.ReadableInstant) dateMidnight61, periodType65);
        int int67 = dateMidnight61.getMillisOfSecond();
        int int68 = dateMidnight61.getSecondOfDay();
        boolean boolean69 = interval54.isAfter((org.joda.time.ReadableInstant) dateMidnight61);
        boolean boolean70 = interval54.isAfterNow();
        org.joda.time.Interval interval72 = interval54.withStartMillis((long) 43);
        long long73 = interval54.getStartMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str44, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-252374400000L) + "'", long73 == (-252374400000L));
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        int int7 = durationField4.getValue((long) ' ', (long) 52);
        // The following exception was thrown during execution in test generation
        try {
            long long9 = durationField4.getMillis(1645454977995L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645454977995 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(0, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        int int11 = dateTimeZone9.getStandardOffset((long) 32769);
        java.util.Locale locale13 = java.util.Locale.US;
        java.lang.String str14 = dateTimeZone9.getShortName((long) 1970, locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale13.getDisplayCountry(locale15);
        java.util.Calendar.Builder builder17 = builder0.setLocale(locale15);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.Calendar.Builder builder19 = builder17.setTimeZone(timeZone18);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone20.observesDaylightTime();
        boolean boolean22 = timeZone18.hasSameRules(timeZone20);
        int int24 = timeZone20.getOffset((long) 53221655);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay28.minusMillis(10);
        org.joda.time.TimeOfDay.Property property31 = timeOfDay30.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay32 = property31.withMaximumValue();
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.lang.String str34 = property31.getAsShortText(locale33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = timeZone20.getDisplayName(false, 234, locale33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 234");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ubbf8\uad6d" + "'", str16, "\ubbf8\uad6d");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645454975267L);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("P-97D");
        org.junit.Assert.assertNotNull(languageRangeList1);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        org.joda.time.Period period0 = new org.joda.time.Period();
        org.joda.time.Period period1 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod2 = period1.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate localDate13 = localDate7.withDayOfMonth(13);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        mutablePeriod2.setPeriod((long) 10, (-599990L), chronology14);
        mutablePeriod2.addSeconds(13);
        mutablePeriod2.clear();
        org.joda.time.Period period19 = period0.minus((org.joda.time.ReadablePeriod) mutablePeriod2);
        org.joda.time.Minutes minutes20 = period19.toStandardMinutes();
        org.joda.time.Period period21 = new org.joda.time.Period();
        org.joda.time.Period period22 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod23 = period22.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate28, (org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate localDate34 = localDate28.withDayOfMonth(13);
        org.joda.time.Chronology chronology35 = localDate34.getChronology();
        mutablePeriod23.setPeriod((long) 10, (-599990L), chronology35);
        mutablePeriod23.addSeconds(13);
        mutablePeriod23.clear();
        org.joda.time.Period period40 = period21.minus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.Minutes minutes41 = period40.toStandardMinutes();
        org.joda.time.Period period42 = period19.withFields((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Period period44 = period19.withDays(12);
        org.joda.time.Period period45 = period19.toPeriod();
        org.joda.time.Period period47 = period19.minusWeeks((int) (short) 10);
        org.joda.time.Period period49 = period47.withMinutes(53221);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(1L, dateTimeZone51);
        org.joda.time.DateMidnight.Property property53 = dateMidnight52.dayOfMonth();
        org.joda.time.DurationField durationField54 = property53.getDurationField();
        int int55 = property53.getMinimumValue();
        java.lang.String str56 = property53.getName();
        org.joda.time.DateMidnight dateMidnight57 = property53.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period49, (org.joda.time.ReadableInstant) dateMidnight57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "dayOfMonth" + "'", str56, "dayOfMonth");
        org.junit.Assert.assertNotNull(dateMidnight57);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        int int5 = instant0.compareTo((org.joda.time.ReadableInstant) dateTime4);
        long long6 = instant0.getMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645454981955L + "'", long6 == 1645454981955L);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withField(dateTimeFieldType9, (int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime3.withField(dateTimeFieldType9, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        org.joda.time.DateTime dateTime20 = dateTime13.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate23, (org.joda.time.ReadablePartial) localDate26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = localDate26.isSupported(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = localDate26.getChronology();
        org.joda.time.LocalDate localDate32 = localDate26.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = localDate32.getFieldType(1);
        boolean boolean35 = dateTime13.isSupported(dateTimeFieldType34);
        org.joda.time.DateTime dateTime37 = dateTime13.minusDays(1961);
        org.joda.time.DateTime.Property property38 = dateTime37.yearOfEra();
        org.joda.time.DateTime dateTime40 = property38.addToCopy((-1L));
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 'a', dateTimeZone45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate43, (org.joda.time.ReadablePartial) localDate46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(1L, dateTimeZone49);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone53 = dateMidnight52.getZone();
        org.joda.time.DateTime dateTime54 = localDate46.toDateTimeAtMidnight(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.withYear(596);
        org.joda.time.DateTime.Property property57 = dateTime56.yearOfEra();
        org.joda.time.DateTime dateTime58 = property57.getDateTime();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime60 = dateTime40.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight(1L, dateTimeZone62);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight63, readableDuration64);
        int int66 = period65.size();
        java.lang.String str67 = period65.toString();
        int int68 = period65.getMonths();
        org.joda.time.Period period70 = period65.minusMonths(53221235);
        org.joda.time.Interval interval71 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadablePeriod) period65);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 8 + "'", int66 == 8);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "PT0S" + "'", str67, "PT0S");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(period70);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeField dateTimeField3 = localDate1.getField(1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        boolean boolean11 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate9);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property13 = localDate9.centuryOfEra();
        org.joda.time.LocalDate localDate14 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate15 = property13.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getWeeksInWeekYear();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone.setDefault(timeZone3);
        calendar1.setTimeZone(timeZone3);
        java.lang.Object obj6 = timeZone3.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645454982045,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=49,SECOND=42,MILLISECOND=45,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(obj6);
// flaky:         org.junit.Assert.assertEquals(obj6.toString(), "sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale locale4 = builder0.build();
        java.util.Locale.Builder builder5 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setLanguage("2022-02-21T14:49:08.693Z/2022-02-21T14:49:08.693Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-21T14:49:08.693Z/2022-02-21T14:49:08.693Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        mutableDateTime1.setMillis((long) ' ');
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.secondOfDay();
        mutableDateTime1.setMillisOfDay(53341304);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(61, (-292275054), 22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("coreano");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray24 = new java.lang.String[] { "\ubbf8\uad6d", "", "java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z", "DurationField[days]", "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z", "weekyear-gregory", "it", "-0033-08-30T00:00:00.000Z", "weekyear-gregory", "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z", "53221655", "java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", "java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", "dayOfYear", "inglese (Stati Uniti)", "weekyear-gregory", "java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", "UTC" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList25);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray33 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology36);
        org.joda.time.DateTimeField dateTimeField39 = localDate37.getField(1);
        boolean boolean40 = strSet34.remove((java.lang.Object) 1);
        java.lang.Object obj41 = null;
        boolean boolean42 = strSet34.contains(obj41);
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strSet34);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.lang.String[] strArray49 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(chronology52);
        org.joda.time.DateTimeField dateTimeField55 = localDate53.getField(1);
        boolean boolean56 = strSet50.remove((java.lang.Object) 1);
        java.lang.Object obj57 = null;
        boolean boolean58 = strSet50.contains(obj57);
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strSet50);
        java.util.Locale.LanguageRange[] languageRangeArray60 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList61 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList61, languageRangeArray60);
        java.lang.String[] strArray65 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(chronology68);
        org.joda.time.DateTimeField dateTimeField71 = localDate69.getField(1);
        boolean boolean72 = strSet66.remove((java.lang.Object) 1);
        java.lang.Object obj73 = null;
        boolean boolean74 = strSet66.contains(obj73);
        java.util.List<java.lang.String> strList75 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.lang.String>) strSet66);
        java.lang.String str76 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strList75);
        java.lang.String[] strArray79 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate(chronology82);
        org.joda.time.DateTimeField dateTimeField85 = localDate83.getField(1);
        boolean boolean86 = strSet80.remove((java.lang.Object) 1);
        java.lang.Object obj87 = null;
        boolean boolean88 = strSet80.contains(obj87);
        boolean boolean89 = strSet80.isEmpty();
        java.util.List<java.lang.String> strList90 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strSet80);
        java.util.Locale.FilteringMode filteringMode91 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList92 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strSet80, filteringMode91);
        java.util.List<java.lang.String> strList93 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strSet80);
        java.util.Locale locale94 = java.util.Locale.PRC;
        java.util.Set<java.lang.String> strSet95 = locale94.getUnicodeLocaleKeys();
        boolean boolean96 = strSet95.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray97 = new java.util.Locale.LanguageRange[] {};
        java.util.Locale.LanguageRange[] languageRangeArray98 = strSet95.toArray(languageRangeArray97);
        boolean boolean99 = strSet80.addAll((java.util.Collection<java.lang.String>) strSet95);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(languageRangeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertTrue("'" + filteringMode91 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode91.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList92);
        org.junit.Assert.assertNotNull(strList93);
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(languageRangeArray97);
        org.junit.Assert.assertNotNull(languageRangeArray98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withSecondOfMinute(53352);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53352 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale locale3 = builder1.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter3.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        int int13 = dateTimeZone11.getStandardOffset((long) 32769);
        java.util.Locale locale15 = java.util.Locale.US;
        java.lang.String str16 = dateTimeZone11.getShortName((long) 1970, locale15);
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.now(dateTimeZone11);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone11);
        long long21 = dateTimeZone11.convertLocalToUTC((long) 1961, false);
        java.lang.String str22 = dateTimeZone11.toString();
        long long24 = dateTimeZone11.nextTransition((long) (byte) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter3.withZone(dateTimeZone11);
        boolean boolean26 = dateTimeFormatter3.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.parse("4437072", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1961L + "'", long21 == 1961L);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        int int5 = property3.getMaximumTextLength(locale4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight10 = dateTime9.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        org.joda.time.DateTime dateTime17 = dateTime9.toDateTime(dateTimeZone16);
        org.joda.time.Instant instant18 = dateTime9.toInstant();
        long long19 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight21 = property3.setCopy("8 Nov 53223415 00:00:00 GMT");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"8 Nov 53223415 00:00:00 GMT\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-19044L) + "'", long19 == (-19044L));
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((int) (byte) 100, 53221515, (int) (byte) 100, 53221161, 3, (int) 'a', (int) (byte) 100, 8);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay19.plus((org.joda.time.ReadablePeriod) mutablePeriod28);
        java.lang.String str30 = yearMonthDay29.toString();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours(9);
        org.joda.time.DateMidnight dateMidnight33 = yearMonthDay29.toDateMidnight(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 'a', dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate36, (org.joda.time.ReadablePartial) localDate39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        boolean boolean42 = localDate39.isSupported(dateTimeFieldType41);
        org.joda.time.Chronology chronology43 = localDate39.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.dayOfYear();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.dayOfYear();
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay29.withChronologyRetainFields(chronology43);
        org.joda.time.DurationField durationField47 = chronology43.weeks();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "4582910-11-03" + "'", str30, "4582910-11-03");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(durationField47);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        int int4 = mutableDateTime1.getMillisOfDay();
        int int5 = mutableDateTime1.getHourOfDay();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.roundCeiling();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        boolean boolean18 = localDate15.isSupported(dateTimeFieldType17);
        org.joda.time.Chronology chronology19 = localDate15.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.minutes();
        java.lang.String str21 = chronology19.toString();
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) 6, chronology19);
        org.joda.time.DateTimeField dateTimeField23 = chronology19.era();
        mutableDateTime8.setChronology(chronology19);
        int int25 = mutableDateTime8.getDayOfYear();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime8.dayOfMonth();
        org.junit.Assert.assertNotNull(mutableDateTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53341861 + "'", int4 == 53341861);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 14 + "'", int5 == 14);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = dateMidnight7.getZone();
        int int10 = dateTimeZone8.getStandardOffset((long) 32769);
        java.util.Locale locale12 = java.util.Locale.US;
        java.lang.String str13 = dateTimeZone8.getShortName((long) 1970, locale12);
        org.joda.time.DateTime dateTime14 = dateMidnight2.toDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime16 = dateTime14.withYear(53221515);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = dateTime16.toString("PT14H48M1.154S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(53221440, 97, 100, 42, 60, 53221807, 862, 53221235);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 'a', dateTimeZone18);
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate16, (org.joda.time.ReadablePartial) localDate19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.Duration duration26 = period20.toDurationTo((org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight32, readableDuration33);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight29, (org.joda.time.ReadableInstant) dateMidnight32, periodType36);
        org.joda.time.PeriodType periodType38 = periodType36.withWeeksRemoved();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration26, periodType36);
        org.joda.time.Interval interval40 = new org.joda.time.Interval(readableInstant9, (org.joda.time.ReadableDuration) duration26);
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((java.lang.Object) interval40);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod42);
        mutablePeriod42.addYears(53341304);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(chronology41);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) dateMidnight23, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration17, periodType27);
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadableDuration) duration17);
        long long32 = interval31.getEndMillis();
        org.joda.time.Period period33 = interval31.toPeriod();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = localDate36.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 'a', dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 'a', dateTimeZone43);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate41, (org.joda.time.ReadablePartial) localDate44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(1L, dateTimeZone47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight48, readableDuration49);
        org.joda.time.Duration duration51 = period45.toDurationTo((org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(1L, dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(1L, dateTimeZone56);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight57, readableDuration58);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType61 = periodType60.withSecondsRemoved();
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight54, (org.joda.time.ReadableInstant) dateMidnight57, periodType61);
        org.joda.time.PeriodType periodType63 = periodType61.withWeeksRemoved();
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration51, periodType61);
        org.joda.time.Interval interval65 = new org.joda.time.Interval(readableInstant34, (org.joda.time.ReadableDuration) duration51);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate(chronology66);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = localDate67.toDateTimeAtCurrentTime(dateTimeZone68);
        org.joda.time.DateMidnight dateMidnight70 = dateTime69.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight(1L, dateTimeZone72);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight73.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone76 = dateMidnight75.getZone();
        org.joda.time.DateTime dateTime77 = dateTime69.toDateTime(dateTimeZone76);
        org.joda.time.Interval interval78 = interval65.withEnd((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Duration duration79 = interval65.toDuration();
        org.joda.time.Period period80 = new org.joda.time.Period();
        org.joda.time.Period period82 = period80.minusMonths((int) '#');
        boolean boolean83 = interval65.equals((java.lang.Object) '#');
        boolean boolean84 = interval31.overlaps((org.joda.time.ReadableInterval) interval65);
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((long) 10);
        int int87 = mutablePeriod86.getWeeks();
        org.joda.time.DateTimeZone dateTimeZone89 = null;
        org.joda.time.DateMidnight dateMidnight90 = new org.joda.time.DateMidnight(1L, dateTimeZone89);
        org.joda.time.DateMidnight.Property property91 = dateMidnight90.dayOfMonth();
        org.joda.time.DurationField durationField92 = property91.getDurationField();
        long long95 = durationField92.add((long) (byte) 10, (long) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime96 = new org.joda.time.MutableDateTime((java.lang.Object) long95);
        org.joda.time.Duration duration97 = mutablePeriod86.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime96);
        org.joda.time.Interval interval98 = interval31.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod86);
        boolean boolean99 = interval31.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1645454982967L + "'", long32 == 1645454982967L);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 86400010L + "'", long95 == 86400010L);
        org.junit.Assert.assertNotNull(duration97);
        org.junit.Assert.assertNotNull(interval98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.util.Date date5 = new java.util.Date(2, (int) '#', (int) '#');
        calendar1.setTime(date5);
        calendar1.set((int) (short) -1, (int) (byte) 100, (int) (short) 1, (int) (byte) -1, 17);
        org.joda.time.YearMonthDay yearMonthDay13 = org.joda.time.YearMonthDay.fromCalendarFields(calendar1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.withDayOfMonth(53221304);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53221304 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-61936101780000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=7,MONTH=3,WEEK_OF_YEAR=17,WEEK_OF_MONTH=4,DAY_OF_MONTH=30,DAY_OF_YEAR=120,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=17,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date5.toString(), "Wed Jan 04 00:00:00 GMT+00:00 1905");
        org.junit.Assert.assertNotNull(yearMonthDay13);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) dateMidnight23, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration17, periodType27);
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = localDate33.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight36 = dateTime35.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(1L, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = dateMidnight41.getZone();
        org.joda.time.DateTime dateTime43 = dateTime35.toDateTime(dateTimeZone42);
        org.joda.time.Interval interval44 = interval31.withEnd((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration45 = interval31.toDuration();
        long long46 = interval31.getStartMillis();
        java.util.Calendar calendar47 = java.util.Calendar.getInstance();
        boolean boolean48 = interval31.equals((java.lang.Object) calendar47);
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.fromCalendarFields(calendar47);
        calendar47.setLenient(true);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(duration45);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1645454983097L + "'", long46 == 1645454983097L);
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1645454983097,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=49,SECOND=43,MILLISECOND=97,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDate49);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.dayOfMonth();
        java.lang.String str21 = property20.getAsShortText();
        org.joda.time.YearMonthDay yearMonthDay23 = property20.addWrapFieldToCopy(53221078);
        org.joda.time.Interval interval24 = yearMonthDay23.toInterval();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(interval24);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(12, 53281627);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53281627 for minuteOfHour must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime14 = property12.setCopy(53221515);
        org.joda.time.LocalTime localTime15 = property12.getLocalTime();
        org.joda.time.LocalTime localTime17 = property12.addWrapFieldToCopy(640);
        org.joda.time.LocalTime localTime19 = localTime17.minusSeconds(53221917);
        org.joda.time.TimeOfDay timeOfDay21 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property22 = timeOfDay21.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.minusMillis(10);
        org.joda.time.TimeOfDay.Property property27 = timeOfDay26.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay28 = property27.withMaximumValue();
        java.lang.String str29 = property27.getAsString();
        java.util.Locale locale30 = java.util.Locale.CHINA;
        java.lang.String str31 = property27.getAsShortText(locale30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.dayOfMonth();
        org.joda.time.DurationField durationField36 = property35.getDurationField();
        org.joda.time.DateMidnight dateMidnight37 = property35.roundHalfEvenCopy();
        java.util.Locale locale38 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        int int40 = property35.getMaximumShortTextLength(locale38);
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.lang.String str42 = locale41.toLanguageTag();
        java.util.Set<java.lang.String> strSet43 = locale41.getUnicodeLocaleKeys();
        java.lang.String str44 = locale38.getDisplayLanguage(locale41);
        java.lang.String str45 = locale30.getDisplayCountry(locale38);
        java.lang.String str47 = locale38.getUnicodeLocaleType("13");
        int int48 = property22.getMaximumTextLength(locale38);
        java.util.Locale locale49 = locale38.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = localTime19.toString("java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", locale49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: j");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0" + "'", str29, "0");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0" + "'", str31, "0");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "en" + "'", str42, "en");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "German" + "'", str44, "German");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "China" + "'", str45, "China");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = localDate16.isSupported(dateTimeFieldType18);
        org.joda.time.Chronology chronology20 = localDate16.getChronology();
        org.joda.time.LocalDate localDate22 = localDate16.minusDays(100);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight5.withFields((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withDurationAdded(0L, (int) (byte) 100);
        org.joda.time.DateMidnight.Property property27 = dateMidnight23.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight29 = property27.setCopy(53281708);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53281708 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        org.joda.time.Period period0 = new org.joda.time.Period();
        org.joda.time.Period period2 = period0.minusYears(10);
        org.joda.time.PeriodType periodType3 = period0.getPeriodType();
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(periodType3);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.lang.String str2 = locale0.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate9 = localDate3.withDayOfMonth(13);
        org.joda.time.Chronology chronology10 = localDate9.getChronology();
        long long14 = chronology10.add((long) (short) -1, (long) 1961, 15);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.standard();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 'a', dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate19, (org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate localDate25 = localDate19.withDayOfMonth(13);
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 0, periodType16, chronology26);
        int[] intArray30 = chronology10.get((org.joda.time.ReadablePeriod) mutablePeriod27, (long) 596, (long) 53221161);
        boolean boolean31 = dateTimeFieldType0.isSupported(chronology10);
        org.joda.time.Period period33 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod34 = period33.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate39, (org.joda.time.ReadablePartial) localDate42);
        org.joda.time.LocalDate localDate45 = localDate39.withDayOfMonth(13);
        org.joda.time.Chronology chronology46 = localDate45.getChronology();
        mutablePeriod34.setPeriod((long) 10, (-599990L), chronology46);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((-1968L), chronology46);
        org.joda.time.DateTimeZone dateTimeZone49 = chronology46.getZone();
        org.joda.time.DateTimeField dateTimeField50 = chronology46.year();
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType0.getField(chronology46);
        org.joda.time.DurationField durationField52 = dateTimeField51.getLeapDurationField();
        long long54 = dateTimeField51.roundFloor(3193325041504L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 29414L + "'", long14 == 29414L);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 14, 47, 0, 565]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 3187036800000L + "'", long54 == 3187036800000L);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(0, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        int int11 = dateTimeZone9.getStandardOffset((long) 32769);
        java.util.Locale locale13 = java.util.Locale.US;
        java.lang.String str14 = dateTimeZone9.getShortName((long) 1970, locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale13.getDisplayCountry(locale15);
        java.util.Calendar.Builder builder17 = builder0.setLocale(locale15);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.Calendar.Builder builder19 = builder17.setTimeZone(timeZone18);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone20.observesDaylightTime();
        boolean boolean22 = timeZone18.hasSameRules(timeZone20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '0' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ubbf8\uad6d" + "'", str16, "\ubbf8\uad6d");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        java.util.Date date3 = new java.util.Date(53221515, (int) (byte) 1, (int) 'a');
        long long4 = date3.getTime();
        java.lang.String str5 = date3.toGMTString();
        java.lang.Object obj6 = null;
        boolean boolean7 = date3.equals(obj6);
        org.junit.Assert.assertEquals(date3.toString(), "Mon May 08 00:00:00 GMT+00:00 53223415");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1679506596172800000L + "'", long4 == 1679506596172800000L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "8 May 53223415 00:00:00 GMT" + "'", str5, "8 May 53223415 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusMillis(10);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay5 = property4.withMaximumValue();
        java.lang.String str6 = property4.getAsString();
        org.joda.time.TimeOfDay timeOfDay8 = property4.addToCopy((int) '#');
        int int9 = property4.get();
        org.joda.time.DateTimeField dateTimeField10 = property4.getField();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0" + "'", str6, "0");
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setSecondOfMinute(52);
        org.joda.time.DateTime dateTime6 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17);
        org.joda.time.Duration duration19 = period13.toDurationTo((org.joda.time.ReadableInstant) dateMidnight16);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration19, 53221515);
        mutableDateTime1.addHours(53221235);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.weeks();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate29, (org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = localDate32.isSupported(dateTimeFieldType34);
        org.joda.time.Chronology chronology36 = localDate32.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.dayOfYear();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 493, (long) 53221161, periodType26, chronology36);
        org.joda.time.DateTimeField dateTimeField41 = chronology36.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology36.getZone();
        mutableDateTime1.setChronology(chronology36);
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime1.copy();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(mutableDateTime44);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Period period8 = period5.plusDays((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod9 = period5.toMutablePeriod();
        mutablePeriod9.setPeriod(27, 24, 6, 2035, 100, 0, 5, 0);
        mutablePeriod9.add(53221186, 18, 9, 804, 53221766, 53221996, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod28 = mutablePeriod9.toMutablePeriod();
        int int29 = mutablePeriod9.getHours();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 53221866 + "'", int29 == 53221866);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(53221550, (-7), 53221626, 53341517, 53221212);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53341517 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("monthOfYear");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"monthOfYear\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.Chronology chronology12 = localTime11.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.plusMinutes(53221655);
        int int17 = localTime11.compareTo((org.joda.time.ReadablePartial) timeOfDay14);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay14.plusMinutes(0);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType21 = periodType20.withSecondsRemoved();
        java.lang.String str22 = periodType20.getName();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType24 = periodType23.withSecondsRemoved();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        int int26 = localDateTime25.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str28 = dateTimeFieldType27.toString();
        int int29 = localDateTime25.get(dateTimeFieldType27);
        boolean boolean30 = periodType24.equals((java.lang.Object) int29);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.centuries();
        int int32 = periodType24.indexOf(durationFieldType31);
        int int33 = periodType20.indexOf(durationFieldType31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay35 = timeOfDay19.withFieldAdded(durationFieldType31, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'centuries' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "YearDayTime" + "'", str22, "YearDayTime");
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 550 + "'", int26 == 550);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "weekyear" + "'", str28, "weekyear");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("halfdays");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withDayOfMonth((int) (short) 1);
        int int12 = dateMidnight9.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight9.plusDays((int) (short) 10);
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        java.util.Calendar calendar17 = dateMidnight14.toCalendar(locale15);
        java.util.Locale.Builder builder18 = builder4.setLocale(locale15);
        java.util.Locale.Builder builder21 = builder4.setExtension('x', "");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder23 = builder21.addUnicodeLocaleAttribute("4582910-11-03");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 4582910-11-03 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645454983573,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=49,SECOND=43,MILLISECOND=573,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1646265600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=62,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(0, (int) (short) -1);
        java.util.Calendar.Builder builder6 = builder0.set(0, 32);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone("DurationField[days]");
        java.util.Calendar.Builder builder9 = builder6.setTimeZone(timeZone8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = timeZone8.getDisplayName(false, 53221098);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 53221098");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("2022-02-21T14:47:49.804");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T14:47:49.804\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusMillis(10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay3.plusMillis(2022);
        org.joda.time.DateTime dateTime7 = timeOfDay3.toDateTimeToday();
        org.joda.time.DateTime dateTime9 = dateTime7.plusDays(419);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusMillis(10);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.minuteOfHour();
        int int5 = property4.getMaximumValueOverall();
        org.joda.time.TimeOfDay timeOfDay7 = property4.addWrapFieldToCopy(2);
        int int8 = property4.getMaximumValue();
        int int9 = property4.getMaximumValueOverall();
        java.lang.String str10 = property4.getAsText();
        java.lang.String str11 = property4.toString();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 59 + "'", int8 == 59);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 59 + "'", int9 == 59);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[minuteOfHour]" + "'", str11, "Property[minuteOfHour]");
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.standard();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate localDate18 = localDate12.withDayOfMonth(13);
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 0, periodType9, chronology19);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0, 26, 244, 0, (int) '#', 47, 53221283, 120, periodType9);
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(periodType9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType24 = periodType9.getFieldType((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = dateMidnight7.getZone();
        int int10 = dateTimeZone8.getStandardOffset((long) 32769);
        java.util.Locale locale12 = java.util.Locale.US;
        java.lang.String str13 = dateTimeZone8.getShortName((long) 1970, locale12);
        org.joda.time.DateTime dateTime14 = dateMidnight2.toDateTime(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight2.withCenturyOfEra((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight18 = dateMidnight2.withWeekOfWeekyear(53221848);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53221848 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight16);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setSecondOfMinute(52);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = dateMidnight17.getZone();
        org.joda.time.DateTime dateTime19 = localDate11.toDateTimeAtMidnight(dateTimeZone18);
        boolean boolean21 = dateTimeZone18.isStandardOffset((long) (byte) 10);
        mutableDateTime1.setZone(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.lang.String str30 = dateTimeFieldType29.toString();
        int int31 = dateMidnight28.get(dateTimeFieldType29);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType29.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime23.set(dateTimeFieldType29, 53221407);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53221407 for weekyearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "weekyearOfCentury" + "'", str30, "weekyearOfCentury");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 61 + "'", int31 == 61);
        org.junit.Assert.assertNotNull(durationFieldType32);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfYear();
        org.joda.time.LocalDate localDate5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate7 = localDate5.withDayOfYear((int) 'a');
        org.joda.time.Chronology chronology8 = localDate7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight13.getZone();
        int int16 = dateTimeZone14.getStandardOffset((long) 32769);
        java.util.Locale locale18 = java.util.Locale.US;
        java.lang.String str19 = dateTimeZone14.getShortName((long) 1970, locale18);
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.now(dateTimeZone14);
        org.joda.time.LocalTime.Property property21 = localTime20.millisOfDay();
        org.joda.time.LocalTime localTime23 = property21.setCopy(53221515);
        org.joda.time.DateTimeField dateTimeField24 = property21.getField();
        org.joda.time.LocalTime localTime26 = property21.addCopy(1970);
        org.joda.time.LocalTime localTime27 = property21.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            int int28 = localDate7.compareTo((org.joda.time.ReadablePartial) localTime27);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime27);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        int int7 = localDateTime6.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withDate(53221796, 0, 914);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDayOfMonth((int) (short) 1);
        int int7 = dateMidnight4.getWeekyear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.plusDays((int) (short) 10);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        java.util.Calendar calendar12 = dateMidnight9.toCalendar(locale10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight18, readableDuration19);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType22 = periodType21.withSecondsRemoved();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight15, (org.joda.time.ReadableInstant) dateMidnight18, periodType22);
        org.joda.time.PeriodType periodType24 = periodType22.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(1L, dateTimeZone26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight27, readableDuration28);
        int int30 = period29.size();
        java.lang.String str31 = period29.toString();
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.Period period34 = period29.withField(durationFieldType32, 0);
        boolean boolean35 = periodType22.isSupported(durationFieldType32);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight9.withFieldAdded(durationFieldType32, 25);
        int int38 = dateMidnight9.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645454984234,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=49,SECOND=44,MILLISECOND=234,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1646265600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=62,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT0S" + "'", str31, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withField(dateTimeFieldType9, (int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime3.withField(dateTimeFieldType9, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        org.joda.time.DateTime dateTime20 = dateTime13.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate23, (org.joda.time.ReadablePartial) localDate26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = localDate26.isSupported(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = localDate26.getChronology();
        org.joda.time.LocalDate localDate32 = localDate26.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = localDate32.getFieldType(1);
        boolean boolean35 = dateTime13.isSupported(dateTimeFieldType34);
        org.joda.time.DateTime dateTime37 = dateTime13.plusMillis(53281711);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(1L, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minusMonths((int) (short) 100);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 'a', dateTimeZone52);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate50, (org.joda.time.ReadablePartial) localDate53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(1L, dateTimeZone56);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight57, readableDuration58);
        org.joda.time.Duration duration60 = period54.toDurationTo((org.joda.time.ReadableInstant) dateMidnight57);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight(1L, dateTimeZone62);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(1L, dateTimeZone65);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight66, readableDuration67);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType70 = periodType69.withSecondsRemoved();
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight63, (org.joda.time.ReadableInstant) dateMidnight66, periodType70);
        org.joda.time.PeriodType periodType72 = periodType70.withWeeksRemoved();
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableDuration) duration60, periodType70);
        org.joda.time.Interval interval74 = new org.joda.time.Interval(readableInstant43, (org.joda.time.ReadableDuration) duration60);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate(chronology75);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateTime dateTime78 = localDate76.toDateTimeAtCurrentTime(dateTimeZone77);
        org.joda.time.DateMidnight dateMidnight79 = dateTime78.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateMidnight dateMidnight82 = new org.joda.time.DateMidnight(1L, dateTimeZone81);
        org.joda.time.DateMidnight dateMidnight84 = dateMidnight82.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone85 = dateMidnight84.getZone();
        org.joda.time.DateTime dateTime86 = dateTime78.toDateTime(dateTimeZone85);
        org.joda.time.Interval interval87 = interval74.withEnd((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.Duration duration88 = interval74.toDuration();
        org.joda.time.Duration duration89 = duration88.toDuration();
        org.joda.time.DateMidnight dateMidnight91 = dateMidnight40.withDurationAdded((org.joda.time.ReadableDuration) duration88, 53281361);
        boolean boolean92 = dateTime13.equals((java.lang.Object) 53281361);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertNotNull(dateMidnight91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute(3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DurationField durationField6 = property5.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNull(durationField6);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        java.lang.String[] strArray2 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField8 = localDate6.getField(1);
        boolean boolean9 = strSet3.remove((java.lang.Object) 1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        mutableDateTime11.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.year();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime11.year();
        int int18 = mutableDateTime11.getMillisOfDay();
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime20 = instant19.toMutableDateTime();
        mutableDateTime20.setSecondOfMinute((int) (byte) 1);
        mutableDateTime20.setSecondOfMinute(52);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 'a', dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 'a', dateTimeZone29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate27, (org.joda.time.ReadablePartial) localDate30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = dateMidnight36.getZone();
        org.joda.time.DateTime dateTime38 = localDate30.toDateTimeAtMidnight(dateTimeZone37);
        boolean boolean40 = dateTimeZone37.isStandardOffset((long) (byte) 10);
        mutableDateTime20.setZone(dateTimeZone37);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(dateTimeZone37);
        mutableDateTime42.setSecondOfDay(2);
        boolean boolean45 = mutableDateTime11.isAfter((org.joda.time.ReadableInstant) mutableDateTime42);
        boolean boolean46 = strSet3.contains((java.lang.Object) boolean45);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.year();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusDays((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDateTime11.getFieldType(1999);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1999");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (short) 10);
        org.joda.time.LocalTime localTime3 = localTime1.minusMillis(493);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, readableDuration8);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMillis(4);
        org.joda.time.Period period15 = new org.joda.time.Period();
        org.joda.time.Period period17 = period15.minusMonths((int) '#');
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.withPeriodAdded((org.joda.time.ReadablePeriod) period17, 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(3, 11, 2);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight30.withField(dateTimeFieldType31, (int) 'a');
        java.lang.String str34 = dateTimeFieldType31.getName();
        org.joda.time.LocalDateTime.Property property35 = localDateTime25.property(dateTimeFieldType31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property36 = localTime3.property(dateTimeFieldType31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "weekyear" + "'", str34, "weekyear");
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) dateMidnight23, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration17, periodType27);
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = localDate33.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight36 = dateTime35.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(1L, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = dateMidnight41.getZone();
        org.joda.time.DateTime dateTime43 = dateTime35.toDateTime(dateTimeZone42);
        org.joda.time.Interval interval44 = interval31.withEnd((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration45 = interval31.toDuration();
        long long46 = interval31.getStartMillis();
        java.util.Calendar calendar47 = java.util.Calendar.getInstance();
        boolean boolean48 = interval31.equals((java.lang.Object) calendar47);
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.fromCalendarFields(calendar47);
        calendar47.clear(0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(duration45);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1645454984516L + "'", long46 == 1645454984516L);
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=49,SECOND=44,MILLISECOND=516,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDate49);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.dayOfMonth();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight25 = dateTime24.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        org.joda.time.DateTime dateTime32 = dateTime24.toDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = yearMonthDay19.toDateTimeAtMidnight(dateTimeZone31);
        org.joda.time.YearMonthDay.Property property34 = yearMonthDay19.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType36 = yearMonthDay19.getFieldType((-101));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -101");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        java.util.Date date3 = new java.util.Date(53221515, (int) (byte) 1, (int) 'a');
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.fromDateFields(date3);
        date3.setMonth((int) (byte) 10);
        java.lang.String str7 = date3.toGMTString();
        java.time.Instant instant8 = date3.toInstant();
        long long9 = date3.getTime();
        long long10 = date3.getTime();
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Nov 08 00:00:00 UTC 53223415");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "8 Nov 53223415 00:00:00 GMT" + "'", str7, "8 Nov 53223415 00:00:00 GMT");
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1679506612070400000L + "'", long9 == 1679506612070400000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1679506612070400000L + "'", long10 == 1679506612070400000L);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(22, 43, 436, 6, 53281180, 17, 6, chronology8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53281180 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology8);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, readableDuration14);
        org.joda.time.Duration duration16 = period10.toDurationTo((org.joda.time.ReadableInstant) dateMidnight13);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight22, readableDuration23);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType26 = periodType25.withSecondsRemoved();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, (org.joda.time.ReadableInstant) dateMidnight22, periodType26);
        org.joda.time.PeriodType periodType28 = periodType26.withWeeksRemoved();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableDuration) duration16, periodType26);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 'a', dateTimeZone34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate32, (org.joda.time.ReadablePartial) localDate35);
        org.joda.time.Period period37 = period29.plus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 'a', dateTimeZone45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate43, (org.joda.time.ReadablePartial) localDate46);
        org.joda.time.LocalDate localDate49 = localDate43.withDayOfMonth(13);
        org.joda.time.Chronology chronology50 = localDate49.getChronology();
        org.joda.time.Period period51 = new org.joda.time.Period((long) (short) -1, (long) 'a', periodType40, chronology50);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((java.lang.Object) period29, chronology50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(chronology53);
        int int55 = localDate54.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = localDate54.toDateTimeAtStartOfDay(dateTimeZone56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(1L, dateTimeZone59);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight60, readableDuration61);
        int int63 = period62.size();
        java.lang.String str64 = period62.toString();
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.Period period67 = period62.withField(durationFieldType65, 0);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((long) 'a', dateTimeZone69);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) 'a', dateTimeZone72);
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate70, (org.joda.time.ReadablePartial) localDate73);
        org.joda.time.LocalDate localDate76 = localDate70.withDayOfMonth(13);
        org.joda.time.Chronology chronology77 = localDate76.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.hourOfHalfday();
        org.joda.time.DurationField durationField79 = durationFieldType65.getField(chronology77);
        boolean boolean80 = localDate54.isSupported(durationFieldType65);
        int int81 = period29.indexOf(durationFieldType65);
        org.joda.time.PeriodType periodType82 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType83 = periodType82.withSecondsRemoved();
        org.joda.time.PeriodType periodType84 = periodType82.withDaysRemoved();
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.LocalDate localDate87 = new org.joda.time.LocalDate((long) 'a', dateTimeZone86);
        org.joda.time.DateTimeZone dateTimeZone89 = null;
        org.joda.time.LocalDate localDate90 = new org.joda.time.LocalDate((long) 'a', dateTimeZone89);
        org.joda.time.Period period91 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate87, (org.joda.time.ReadablePartial) localDate90);
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = null;
        boolean boolean93 = localDate90.isSupported(dateTimeFieldType92);
        org.joda.time.Chronology chronology94 = localDate90.getChronology();
        org.joda.time.DurationField durationField95 = chronology94.minutes();
        java.lang.String str96 = chronology94.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period97 = new org.joda.time.Period((java.lang.Object) durationFieldType65, periodType84, chronology94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DurationFieldType$StandardDurationFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 8 + "'", int63 == 8);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PT0S" + "'", str64, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(durationField95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "ISOChronology[UTC]" + "'", str96, "ISOChronology[UTC]");
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        org.joda.time.Period period1 = org.joda.time.Period.millis(22);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusMonths((int) (byte) 10);
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime8 = instant7.toMutableDateTime();
        mutableDateTime8.setSecondOfMinute((int) (byte) 1);
        int int11 = mutableDateTime8.getMillisOfDay();
        int int12 = mutableDateTime8.getHourOfDay();
        int int13 = dateMidnight6.compareTo((org.joda.time.ReadableInstant) mutableDateTime8);
        mutableDateTime8.addWeeks(2000);
        int int16 = mutableDateTime8.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53341898 + "'", int11 == 53341898);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 14 + "'", int12 == 14);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant18 = instant4.minus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Instant instant20 = instant18.minus((long) ' ');
        org.joda.time.MutableDateTime mutableDateTime21 = instant18.toMutableDateTime();
        org.joda.time.Chronology chronology22 = mutableDateTime21.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(53221655, 953, 22, 53281295, chronology22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53221655 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getWeeksInWeekYear();
        java.util.Date date3 = calendar1.getTime();
        int int4 = date3.getYear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645454984926,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=49,SECOND=44,MILLISECOND=926,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Feb 21 14:49:44 UTC 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 122 + "'", int4 == 122);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds((-1));
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay1.plusMillis(18);
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        int int7 = period6.getYears();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay5.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay5.minusMillis(17);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay5.minusMillis(365);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType14 = timeOfDay12.getFieldType(53341307);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53341307");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight5 = dateTime4.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        org.joda.time.DateTime dateTime12 = dateTime4.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight17 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = dateMidnight22.getZone();
        org.joda.time.DateTime dateTime24 = dateTime16.toDateTime(dateTimeZone23);
        int int25 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) 8, dateTimeZone11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("halfdays");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withDayOfMonth((int) (short) 1);
        int int12 = dateMidnight9.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight9.plusDays((int) (short) 10);
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        java.util.Calendar calendar17 = dateMidnight14.toCalendar(locale15);
        java.util.Locale.Builder builder18 = builder4.setLocale(locale15);
        java.util.Locale.Builder builder21 = builder4.setExtension('x', "");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder23 = builder4.setRegion("eng");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: eng [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645454985037,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=49,SECOND=45,MILLISECOND=37,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1646265600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=62,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(30, 503, 53341898, 122, 53221887, 605);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 122 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusMonths((int) (byte) 10);
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime8 = instant7.toMutableDateTime();
        mutableDateTime8.setSecondOfMinute((int) (byte) 1);
        int int11 = mutableDateTime8.getMillisOfDay();
        int int12 = mutableDateTime8.getHourOfDay();
        int int13 = dateMidnight6.compareTo((org.joda.time.ReadableInstant) mutableDateTime8);
        int int14 = dateMidnight6.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight16 = dateMidnight6.withDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,366]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53341113 + "'", int11 == 53341113);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 14 + "'", int12 == 14);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 60 + "'", int14 == 60);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime14 = property12.addNoWrapToCopy((int) (byte) 100);
        org.joda.time.LocalTime localTime16 = property12.addCopy(366);
        org.joda.time.LocalTime localTime18 = property12.addWrapFieldToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withField(dateTimeFieldType24, (int) 'a');
        boolean boolean27 = localTime18.isSupported(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        int int12 = dateTimeZone10.getStandardOffset((long) 32769);
        java.util.Locale locale14 = java.util.Locale.US;
        java.lang.String str15 = dateTimeZone10.getShortName((long) 1970, locale14);
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.now(dateTimeZone10);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone10);
        long long20 = dateTimeZone10.convertLocalToUTC((long) 1961, false);
        java.lang.String str21 = dateTimeZone10.toString();
        long long23 = dateTimeZone10.nextTransition((long) (byte) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withZone(dateTimeZone10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime26 = dateTimeFormatter2.parseLocalTime("2022-02-21T14:48:22.293Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1961L + "'", long20 == 1961L);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        org.joda.time.DateTime dateTime17 = localDate9.toDateTimeAtMidnight(dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(dateTimeZone16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withZone(dateTimeZone16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTimeAtCurrentTime(dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight24 = dateTime23.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(1L, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = dateMidnight29.getZone();
        org.joda.time.DateTime dateTime31 = dateTime23.toDateTime(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter2.withZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 'a', dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 'a', dateTimeZone37);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate35, (org.joda.time.ReadablePartial) localDate38);
        org.joda.time.LocalDate localDate41 = localDate35.withDayOfMonth(13);
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale43);
        java.util.Set<java.lang.String> strSet45 = locale43.getUnicodeLocaleAttributes();
        java.lang.String str46 = localDate35.toString("+00:00", locale43);
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(1L, dateTimeZone49);
        org.joda.time.DateMidnight.Property property51 = dateMidnight50.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight50.minusDays((int) 'a');
        java.util.Locale locale55 = java.util.Locale.ENGLISH;
        java.lang.String str56 = locale55.toLanguageTag();
        java.lang.String str57 = dateMidnight50.toString("+00:00", locale55);
        java.lang.String str58 = locale47.getDisplayVariant(locale55);
        java.lang.String str59 = locale43.getDisplayLanguage(locale55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter2.withLocale(locale55);
        int int61 = dateTimeFormatter60.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime63 = dateTimeFormatter60.parseMutableDateTime("2022-02-21T14:49:04.298Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "en" + "'", str56, "en");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Italian" + "'", str59, "Italian");
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2000 + "'", int61 == 2000);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusMillis(10);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.minuteOfHour();
        int int5 = property4.getMaximumValueOverall();
        org.joda.time.TimeOfDay timeOfDay7 = property4.addWrapFieldToCopy(2);
        int int8 = property4.getMaximumValue();
        java.lang.String str9 = property4.getAsShortText();
        org.joda.time.DateTimeField dateTimeField10 = property4.getField();
        boolean boolean11 = dateTimeField10.isLenient();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 59 + "'", int8 == 59);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate localDate16 = localDate10.withDayOfMonth(13);
        org.joda.time.Chronology chronology17 = localDate16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType7.getField(chronology17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(53261499, 122, 32772, 6, 53221440, 520, 53341644, chronology17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53221440 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        java.util.Date date3 = new java.util.Date(10, (int) (short) 100, 178);
        date3.setYear(33);
        int int6 = date3.getMinutes();
        date3.setYear(53281711);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Oct 25 00:00:00 UTC 53283611");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.yearOfEra();
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale15);
        java.lang.String str17 = dateTimeField13.getAsText(19, locale15);
        long long20 = dateTimeField13.set((long) 53221243, 53221848);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "19" + "'", str17, "19");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1679457135509221243L + "'", long20 == 1679457135509221243L);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusMonths((int) (byte) 10);
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime8 = instant7.toMutableDateTime();
        mutableDateTime8.setSecondOfMinute((int) (byte) 1);
        int int11 = mutableDateTime8.getMillisOfDay();
        int int12 = mutableDateTime8.getHourOfDay();
        int int13 = dateMidnight6.compareTo((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime8.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundHalfFloor();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53341329 + "'", int11 == 53341329);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 14 + "'", int12 == 14);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(0, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        int int11 = dateTimeZone9.getStandardOffset((long) 32769);
        java.util.Locale locale13 = java.util.Locale.US;
        java.lang.String str14 = dateTimeZone9.getShortName((long) 1970, locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale13.getDisplayCountry(locale15);
        java.util.Calendar.Builder builder17 = builder0.setLocale(locale15);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.Calendar.Builder builder19 = builder17.setTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = dateMidnight24.getZone();
        int int27 = dateTimeZone25.getStandardOffset((long) 32769);
        java.util.Locale locale29 = java.util.Locale.US;
        java.lang.String str30 = dateTimeZone25.getShortName((long) 1970, locale29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale29.getDisplayCountry(locale31);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone18, locale29);
        // The following exception was thrown during execution in test generation
        try {
            calendar33.set(30, 53332);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 30");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ubbf8\uad6d" + "'", str16, "\ubbf8\uad6d");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ubbf8\uad6d" + "'", str32, "\ubbf8\uad6d");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645454985354,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=49,SECOND=45,MILLISECOND=354,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        org.joda.time.Chronology chronology16 = localDate12.getChronology();
        org.joda.time.LocalDate localDate18 = localDate12.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = localDate18.getFieldType(1);
        org.joda.time.DateMidnight.Property property21 = dateMidnight2.property(dateTimeFieldType20);
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight24 = property21.setCopy("ko");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"ko\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        java.util.Date date6 = new java.util.Date((int) (byte) -1, 32769, 4, (int) (byte) 1, (int) (short) 10, 11);
        date6.setHours((int) (short) -1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date6);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = localDate9.getValue(53221777);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 53221777");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sat Oct 03 23:10:11 UTC 4629");
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property18 = dateMidnight14.dayOfMonth();
        org.joda.time.Period period19 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod20 = period19.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight14.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.withField(dateTimeFieldType27, (int) 'a');
        boolean boolean30 = dateMidnight21.isSupported(dateTimeFieldType27);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime11.withField(dateTimeFieldType27, (int) (byte) 100);
        org.joda.time.LocalDateTime.Property property33 = localDateTime4.property(dateTimeFieldType27);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime4.minusMonths(0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime4.minusHours(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime39 = localDateTime4.withSecondOfMinute(53341329);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53341329 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.hours();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType20 = periodType19.withSecondsRemoved();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, (org.joda.time.ReadableInstant) dateMidnight16, periodType20);
        org.joda.time.DateMidnight.Property property22 = dateMidnight13.year();
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str24 = property22.getAsText(locale23);
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime26 = instant25.toMutableDateTime();
        mutableDateTime26.setSecondOfMinute((int) (byte) 1);
        mutableDateTime26.setSecondOfMinute(52);
        mutableDateTime26.setMillisOfSecond((int) ' ');
        long long33 = property22.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone39 = dateMidnight38.getZone();
        mutableDateTime26.setZoneRetainFields(dateTimeZone39);
        long long42 = dateTimeZone39.convertUTCToLocal((long) 5);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight44 = org.joda.time.DateMidnight.now(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusYears(13);
        int int48 = localDateTime47.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withMillisOfSecond(3);
        org.joda.time.DateTime dateTime51 = localDateTime50.toDateTime();
        boolean boolean52 = dateTimeZone39.isLocalDateTimeGap(localDateTime50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((java.lang.Object) durationField10, dateTimeZone39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.field.PreciseDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970" + "'", str24, "1970");
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-52L) + "'", long33 == (-52L));
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 5L + "'", long42 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        org.joda.time.Chronology chronology16 = localDate12.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(0, 53341496, 31, 58, 53221240, 47, 493, chronology16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 58 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight17, readableDuration18);
        org.joda.time.Duration duration20 = period14.toDurationTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.Instant instant21 = instant7.minus((org.joda.time.ReadableDuration) duration20);
        boolean boolean22 = dateMidnight5.isAfter((org.joda.time.ReadableInstant) instant7);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        int int33 = dateTimeZone31.getStandardOffset((long) 32769);
        java.util.Locale locale35 = java.util.Locale.US;
        java.lang.String str36 = dateTimeZone31.getShortName((long) 1970, locale35);
        org.joda.time.DateTime dateTime37 = dateMidnight25.toDateTime(dateTimeZone31);
        boolean boolean38 = instant7.isEqual((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime.Property property39 = dateTime37.era();
        int int40 = dateTime37.getDayOfYear();
        org.joda.time.DateTime.Property property41 = dateTime37.year();
        int int42 = property41.get();
        org.joda.time.DateTime dateTime43 = property41.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(1L, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone50 = dateMidnight49.getZone();
        int int52 = dateTimeZone50.getStandardOffset((long) 32769);
        java.util.Locale locale54 = java.util.Locale.US;
        java.lang.String str55 = dateTimeZone50.getShortName((long) 1970, locale54);
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale54.getDisplayCountry(locale56);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = dateTime43.toString("3 Oct 4629 23:10:11 GMT", locale54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: O");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\ubbf8\uad6d" + "'", str57, "\ubbf8\uad6d");
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getWeeksInWeekYear();
        java.util.Date date3 = calendar1.getTime();
        org.joda.time.TimeOfDay timeOfDay4 = org.joda.time.TimeOfDay.fromCalendarFields(calendar1);
        // The following exception was thrown during execution in test generation
        try {
            calendar1.setWeekDate((int) '#', 53221235, 1970);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 1970");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645454985685,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"4437072\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=49,SECOND=45,MILLISECOND=685,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Feb 21 14:49:45 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(timeOfDay4);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.DateTime dateTime13 = localDate5.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight24, readableDuration25);
        org.joda.time.Duration duration27 = period21.toDurationTo((org.joda.time.ReadableInstant) dateMidnight24);
        mutableDateTime14.add((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime30 = instant29.toMutableDateTime();
        mutableDateTime30.setSecondOfMinute((int) (byte) 1);
        mutableDateTime30.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime30.year();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime30.secondOfDay();
        mutableDateTime14.setMillis((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.DateTime dateTime38 = localDate5.toDateTime((org.joda.time.ReadableInstant) mutableDateTime30);
        int int39 = localDate5.getWeekyear();
        int int40 = localDate5.getEra();
        // The following exception was thrown during execution in test generation
        try {
            int int42 = localDate5.getValue(48);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 48");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime localTime13 = localTime11.withSecondOfMinute(0);
        int int14 = localTime11.getSecondOfMinute();
        org.joda.time.Chronology chronology15 = localTime11.getChronology();
        org.joda.time.LocalTime localTime17 = localTime11.minusHours(366);
        int int18 = localTime17.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 45 + "'", int14 == 45);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 769 + "'", int18 == 769);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withField(dateTimeFieldType9, (int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime3.withField(dateTimeFieldType9, (int) (short) 0);
        org.joda.time.DateTime dateTime15 = dateTime3.plusHours((int) (short) 1);
        int int16 = dateTime15.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property17 = dateTime15.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int19 = dateTime15.get(dateTimeFieldType18);
        boolean boolean21 = dateTime15.isAfter(1645454854107L);
        org.joda.time.DateTime dateTime23 = dateTime15.plusDays(14);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfCentury();
        org.joda.time.DateTime.Property property25 = dateTime23.millisOfDay();
        org.joda.time.DateTime dateTime27 = property25.addToCopy(53221550);
        org.joda.time.DateTime dateTime28 = property25.getDateTime();
        int int29 = property25.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 45 + "'", int19 == 45);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 86399999 + "'", int29 == 86399999);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("cinese");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"cinese\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateTime dateTime6 = dateTime3.minus(2678400000L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.withField(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTime dateTime22 = dateTime12.withField(dateTimeFieldType18, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = dateMidnight27.getZone();
        org.joda.time.DateTime dateTime29 = dateTime22.withZoneRetainFields(dateTimeZone28);
        java.lang.String str30 = dateTimeZone28.getID();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 53221161, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) 53221626, dateTimeZone28);
        org.joda.time.DateTime dateTime33 = dateTime6.withZone(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime33.getZone();
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime37 = instant36.toMutableDateTime();
        mutableDateTime37.setSecondOfMinute((int) (byte) 1);
        int int40 = mutableDateTime37.getMillisOfDay();
        int int41 = mutableDateTime37.getHourOfDay();
        org.joda.time.Period period43 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod44 = period43.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 'a', dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 'a', dateTimeZone51);
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate49, (org.joda.time.ReadablePartial) localDate52);
        org.joda.time.LocalDate localDate55 = localDate49.withDayOfMonth(13);
        org.joda.time.Chronology chronology56 = localDate55.getChronology();
        mutablePeriod44.setPeriod((long) 10, (-599990L), chronology56);
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((-1968L), chronology56);
        org.joda.time.DateTimeZone dateTimeZone59 = chronology56.getZone();
        mutableDateTime37.setZoneRetainFields(dateTimeZone59);
        long long64 = dateTimeZone59.convertLocalToUTC((long) 59, false, (long) 15);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) 36, dateTimeZone59);
        org.joda.time.DateTime dateTime66 = dateTime33.toDateTime(dateTimeZone59);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate(chronology69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = localDate70.toDateTimeAtCurrentTime(dateTimeZone71);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight(1L, dateTimeZone74);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight75.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight77.withField(dateTimeFieldType78, (int) 'a');
        org.joda.time.DateTime dateTime82 = dateTime72.withField(dateTimeFieldType78, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.DateMidnight dateMidnight85 = new org.joda.time.DateMidnight(1L, dateTimeZone84);
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight85.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone88 = dateMidnight87.getZone();
        org.joda.time.DateTime dateTime89 = dateTime82.withZoneRetainFields(dateTimeZone88);
        java.lang.String str90 = dateTimeZone88.getID();
        org.joda.time.LocalDate localDate91 = new org.joda.time.LocalDate((long) 53221161, dateTimeZone88);
        org.joda.time.DateMidnight dateMidnight92 = new org.joda.time.DateMidnight((long) 53221626, dateTimeZone88);
        org.joda.time.DateTime dateTime93 = dateTime33.toDateTime(dateTimeZone88);
        org.joda.time.DateTime.Property property94 = dateTime93.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(mutableDateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 53341909 + "'", int40 == 53341909);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 14 + "'", int41 == 14);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(mutablePeriod44);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 59L + "'", long64 == 59L);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertNotNull(dateTime89);
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "UTC" + "'", str90, "UTC");
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(property94);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis(4);
        org.joda.time.Period period11 = new org.joda.time.Period();
        org.joda.time.Period period13 = period11.minusMonths((int) '#');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.withPeriodAdded((org.joda.time.ReadablePeriod) period13, 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(3, 11, 2);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfYear();
        org.joda.time.DurationField durationField23 = property22.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNull(durationField23);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        long long7 = durationField4.getDifferenceAsLong(100L, (long) 100);
        long long10 = durationField4.add((long) (byte) 100, 53221515);
        long long12 = durationField4.getValueAsLong((long) 1970);
        long long15 = durationField4.getMillis((int) (short) 100, 1645454853747L);
        long long18 = durationField4.subtract(1147904322000L, (long) 11);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property25 = dateMidnight21.dayOfMonth();
        org.joda.time.Period period26 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod27 = period26.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight21.plus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight33.withField(dateTimeFieldType34, (int) 'a');
        boolean boolean37 = dateMidnight28.isSupported(dateTimeFieldType34);
        org.joda.time.YearMonthDay yearMonthDay38 = dateMidnight28.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay38.dayOfMonth();
        org.joda.time.Interval interval40 = yearMonthDay38.toInterval();
        org.joda.time.YearMonthDay.Property property41 = yearMonthDay38.monthOfYear();
        org.joda.time.DurationField durationField42 = property41.getRangeDurationField();
        int int43 = durationField4.compareTo(durationField42);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 4598338896000100L + "'", long10 == 4598338896000100L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 8640000000L + "'", long15 == 8640000000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1146953922000L + "'", long18 == 1146953922000L);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight17, readableDuration18);
        org.joda.time.Duration duration20 = period14.toDurationTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.Instant instant21 = instant7.minus((org.joda.time.ReadableDuration) duration20);
        boolean boolean22 = dateMidnight5.isAfter((org.joda.time.ReadableInstant) instant7);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        int int33 = dateTimeZone31.getStandardOffset((long) 32769);
        java.util.Locale locale35 = java.util.Locale.US;
        java.lang.String str36 = dateTimeZone31.getShortName((long) 1970, locale35);
        org.joda.time.DateTime dateTime37 = dateMidnight25.toDateTime(dateTimeZone31);
        boolean boolean38 = instant7.isEqual((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime.Property property39 = dateTime37.era();
        int int40 = dateTime37.getDayOfYear();
        org.joda.time.DateTime.Property property41 = dateTime37.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 'a', dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 'a', dateTimeZone47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate45, (org.joda.time.ReadablePartial) localDate48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(1L, dateTimeZone51);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight52, readableDuration53);
        org.joda.time.Duration duration55 = period49.toDurationTo((org.joda.time.ReadableInstant) dateMidnight52);
        mutableDateTime42.add((org.joda.time.ReadableDuration) duration55);
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType58 = periodType57.withWeeksRemoved();
        org.joda.time.PeriodType periodType59 = periodType57.withYearsRemoved();
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration55, periodType57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period62 = period60.plusMonths(53341898);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType59);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        java.util.Locale locale2 = new java.util.Locale("Mon Feb 21 14:47:55 GMT+00:00 2022", "8 Jun 150344 01:10:11 GMT");
        boolean boolean3 = locale2.hasExtensions();
        java.lang.String str4 = locale2.getDisplayName();
        org.junit.Assert.assertEquals(locale2.toString(), "mon feb 21 14:47:55 gmt+00:00 2022_8 JUN 150344 01:10:11 GMT");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mon feb 21 14:47:55 gmt+00:00 2022 (8 JUN 150344 01:10:11 GMT)" + "'", str4, "mon feb 21 14:47:55 gmt+00:00 2022 (8 JUN 150344 01:10:11 GMT)");
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight6, readableDuration7);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType10 = periodType9.withSecondsRemoved();
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, (org.joda.time.ReadableInstant) dateMidnight6, periodType10);
        org.joda.time.PeriodType periodType12 = periodType10.withWeeksRemoved();
        org.joda.time.PeriodType periodType13 = periodType10.withMillisRemoved();
        org.joda.time.PeriodType periodType14 = periodType10.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = dateMidnight20.getZone();
        int int23 = dateTimeZone21.getStandardOffset((long) 32769);
        java.util.Locale locale25 = java.util.Locale.US;
        java.lang.String str26 = dateTimeZone21.getShortName((long) 1970, locale25);
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now(dateTimeZone21);
        org.joda.time.LocalTime localTime29 = localTime27.withSecondOfMinute(0);
        int int30 = localTime27.getSecondOfMinute();
        org.joda.time.Chronology chronology31 = localTime27.getChronology();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) '#', chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.minuteOfDay();
        org.joda.time.Period period34 = new org.joda.time.Period((long) 11, periodType14, chronology31);
        org.joda.time.PeriodType periodType35 = periodType14.withWeeksRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withYearsRemoved();
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 46 + "'", int30 == 46);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        java.lang.String[] strArray2 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField8 = localDate6.getField(1);
        boolean boolean9 = strSet3.remove((java.lang.Object) 1);
        java.lang.Object obj10 = null;
        boolean boolean11 = strSet3.contains(obj10);
        boolean boolean12 = strSet3.isEmpty();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight18, readableDuration19);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType22 = periodType21.withSecondsRemoved();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight15, (org.joda.time.ReadableInstant) dateMidnight18, periodType22);
        org.joda.time.LocalDate localDate24 = dateMidnight18.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(1L, dateTimeZone26);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight27.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property31 = dateMidnight27.dayOfMonth();
        org.joda.time.Period period32 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod33 = period32.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight27.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight39.withField(dateTimeFieldType40, (int) 'a');
        boolean boolean43 = dateMidnight34.isSupported(dateTimeFieldType40);
        org.joda.time.LocalDate localDate45 = localDate24.withField(dateTimeFieldType40, (int) (short) 100);
        boolean boolean46 = strSet3.equals((java.lang.Object) localDate45);
        int int47 = localDate45.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate49 = localDate45.withMonthOfYear((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        org.joda.time.Period period1 = org.joda.time.Period.millis(53273563);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        org.joda.time.Period period0 = new org.joda.time.Period();
        org.joda.time.Period period1 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod2 = period1.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate localDate13 = localDate7.withDayOfMonth(13);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        mutablePeriod2.setPeriod((long) 10, (-599990L), chronology14);
        mutablePeriod2.addSeconds(13);
        mutablePeriod2.clear();
        org.joda.time.Period period19 = period0.minus((org.joda.time.ReadablePeriod) mutablePeriod2);
        org.joda.time.Minutes minutes20 = period19.toStandardMinutes();
        org.joda.time.Period period21 = new org.joda.time.Period();
        org.joda.time.Period period22 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod23 = period22.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate28, (org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate localDate34 = localDate28.withDayOfMonth(13);
        org.joda.time.Chronology chronology35 = localDate34.getChronology();
        mutablePeriod23.setPeriod((long) 10, (-599990L), chronology35);
        mutablePeriod23.addSeconds(13);
        mutablePeriod23.clear();
        org.joda.time.Period period40 = period21.minus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.Minutes minutes41 = period40.toStandardMinutes();
        org.joda.time.Period period42 = period19.withFields((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Period period44 = period19.withDays(12);
        org.joda.time.Period period45 = period19.toPeriod();
        org.joda.time.Period period47 = period19.minusWeeks((int) (short) 10);
        org.joda.time.Period period49 = period47.withMinutes(53221);
        int int50 = period47.getHours();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setScript("Ora media di Greenwich");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: Ora media di Greenwich [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeField dateTimeField3 = localDate1.getField(1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        boolean boolean11 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate localDate23 = localDate17.withDayOfMonth(13);
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        mutablePeriod13.add((long) ' ', chronology24);
        org.joda.time.LocalDate localDate26 = localDate1.minus((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime28 = instant27.toMutableDateTime();
        mutableDateTime28.setSecondOfMinute((int) (byte) 1);
        mutableDateTime28.setSecondOfMinute(52);
        org.joda.time.DateTime dateTime33 = mutableDateTime28.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 'a', dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate36, (org.joda.time.ReadablePartial) localDate39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(1L, dateTimeZone42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight43, readableDuration44);
        org.joda.time.Duration duration46 = period40.toDurationTo((org.joda.time.ReadableInstant) dateMidnight43);
        mutableDateTime28.add((org.joda.time.ReadableDuration) duration46, 53221515);
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Instant instant50 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDate52.toDateTimeAtCurrentTime(dateTimeZone53);
        int int55 = instant50.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime57 = dateTime54.withSecondOfMinute(0);
        org.joda.time.Instant instant58 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) 'a', dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) 'a', dateTimeZone63);
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate61, (org.joda.time.ReadablePartial) localDate64);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(1L, dateTimeZone67);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight68, readableDuration69);
        org.joda.time.Duration duration71 = period65.toDurationTo((org.joda.time.ReadableInstant) dateMidnight68);
        org.joda.time.Instant instant72 = instant58.minus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableDuration) duration71);
        org.joda.time.Period period78 = new org.joda.time.Period(32769, 1, 53221515, (int) (short) 0);
        org.joda.time.DateTime dateTime80 = dateTime54.withPeriodAdded((org.joda.time.ReadablePeriod) period78, 53221147);
        boolean boolean81 = duration46.equals((java.lang.Object) dateTime54);
        org.joda.time.DateTime dateTime83 = dateTime54.minusSeconds(1931);
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.LocalDate localDate87 = new org.joda.time.LocalDate((long) 'a', dateTimeZone86);
        org.joda.time.DateTimeZone dateTimeZone89 = null;
        org.joda.time.LocalDate localDate90 = new org.joda.time.LocalDate((long) 'a', dateTimeZone89);
        org.joda.time.Period period91 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate87, (org.joda.time.ReadablePartial) localDate90);
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = null;
        boolean boolean93 = localDate90.isSupported(dateTimeFieldType92);
        org.joda.time.Chronology chronology94 = localDate90.getChronology();
        org.joda.time.DateTimeField dateTimeField95 = chronology94.dayOfYear();
        org.joda.time.DateTimeField dateTimeField96 = chronology94.weekyearOfCentury();
        org.joda.time.DurationField durationField97 = chronology94.years();
        org.joda.time.DateMidnight dateMidnight98 = new org.joda.time.DateMidnight((long) 32770, chronology94);
        int int99 = dateTime83.compareTo((org.joda.time.ReadableInstant) dateMidnight98);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(dateTimeField96);
        org.junit.Assert.assertNotNull(durationField97);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) dateMidnight23, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration17, periodType27);
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadableDuration) duration17);
        long long32 = interval31.getEndMillis();
        org.joda.time.Period period33 = interval31.toPeriod();
        boolean boolean34 = interval31.containsNow();
        org.joda.time.DateTime dateTime35 = interval31.getEnd();
        org.joda.time.DateTime.Property property36 = dateTime35.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = property36.setCopy("53221102");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53221102 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1645454986396L + "'", long32 == 1645454986396L);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Property[centuryOfEra]", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=property[centuryofera]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((int) (byte) 100, 53221515, (int) (byte) 100, 53221161, 3, (int) 'a', (int) (byte) 100, 8);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay19.plus((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay19.withDayOfMonth(4);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.minusYears(53221102);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = localDate35.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight38 = dateTime37.toDateMidnight();
        org.joda.time.DateTime dateTime40 = dateTime37.plusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime37.getZone();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(1L, dateTimeZone43);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.dayOfMonth();
        org.joda.time.DurationField durationField46 = property45.getDurationField();
        boolean boolean47 = dateTimeZone41.equals((java.lang.Object) durationField46);
        org.joda.time.DateTime dateTime48 = yearMonthDay31.toDateTimeAtCurrentTime(dateTimeZone41);
        org.joda.time.DateTime dateTime49 = yearMonthDay31.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property50 = dateTime49.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((java.lang.Object) property50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis(4);
        org.joda.time.Period period11 = new org.joda.time.Period();
        org.joda.time.Period period13 = period11.minusMonths((int) '#');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.withPeriodAdded((org.joda.time.ReadablePeriod) period13, 1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withDayOfYear(720);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 720 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(53221684);
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.LocalDate localDate20 = localDate14.withDayOfMonth(13);
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        mutablePeriod9.setPeriod((long) 10, (-599990L), chronology21);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((-1968L), chronology21);
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = locale24.toLanguageTag();
        java.util.Calendar calendar26 = dateMidnight23.toCalendar(locale24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withLocale(locale24);
        org.joda.time.Chronology chronology28 = dateTimeFormatter27.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = dateTimeFormatter27.print((long) 53221593);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "en" + "'", str25, "en");
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=-86400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(chronology28);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.standard();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate localDate18 = localDate12.withDayOfMonth(13);
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 0, periodType9, chronology19);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0, 26, 244, 0, (int) '#', 47, 53221283, 120, periodType9);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(1L, dateTimeZone26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight27, readableDuration28);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType31 = periodType30.withSecondsRemoved();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight24, (org.joda.time.ReadableInstant) dateMidnight27, periodType31);
        org.joda.time.PeriodType periodType33 = periodType31.withWeeksRemoved();
        org.joda.time.PeriodType periodType34 = periodType33.withMonthsRemoved();
        org.joda.time.PeriodType periodType35 = periodType33.withWeeksRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period36 = new org.joda.time.Period((java.lang.Object) '#', periodType35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Character");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) dateMidnight23, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration17, periodType27);
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = localDate33.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight36 = dateTime35.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(1L, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = dateMidnight41.getZone();
        org.joda.time.DateTime dateTime43 = dateTime35.toDateTime(dateTimeZone42);
        boolean boolean44 = interval31.contains((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDate localDate45 = dateTime35.toLocalDate();
        int int46 = dateTime35.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime14 = property12.addNoWrapToCopy((int) (byte) 100);
        org.joda.time.LocalTime localTime16 = property12.addCopy(366);
        org.joda.time.LocalTime localTime18 = property12.addWrapFieldToCopy(11);
        org.joda.time.LocalTime localTime19 = property12.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime20 = property12.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime22 = property12.addWrapFieldToCopy(1961);
        org.joda.time.LocalTime localTime24 = localTime22.plusMillis(709);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime26 = localTime22.withMillisOfDay((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(53281295, (int) (byte) 0, 366, 261, (-19092), 173);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 261 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3);
        int int5 = period4.size();
        java.lang.String str6 = period4.toString();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.Period period9 = period4.withField(durationFieldType7, 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate localDate18 = localDate12.withDayOfMonth(13);
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        org.joda.time.DurationField durationField21 = durationFieldType7.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekyear();
        org.joda.time.DateMidnight dateMidnight23 = org.joda.time.DateMidnight.now(chronology19);
        org.joda.time.DateTimeField dateTimeField24 = chronology19.weekOfWeekyear();
        int int26 = dateTimeField24.getMaximumValue((long) 532237);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 53 + "'", int26 == 53);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.LocalDate localDate12 = localDate6.withDayOfMonth(13);
        org.joda.time.Chronology chronology13 = localDate12.getChronology();
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfSecond();
        org.joda.time.DurationField durationField17 = chronology13.centuries();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(53341644, 53221938, 53319979, 53221996, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53341644 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate9.withDayOfMonth(13);
        org.joda.time.Chronology chronology16 = localDate15.getChronology();
        int int17 = localDate5.compareTo((org.joda.time.ReadablePartial) localDate15);
        int int18 = localDate5.getCenturyOfEra();
        org.joda.time.LocalDate.Property property19 = localDate5.weekyear();
        org.joda.time.LocalDate localDate20 = property19.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusYears(13);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withSecondOfMinute(3);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.minusWeeks((int) '#');
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withDayOfMonth(13);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusMillis(53281689);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = localDate20.compareTo((org.joda.time.ReadablePartial) localDateTime29);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 19 + "'", int18 == 19);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getLeastMaximum(0);
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        int[] intArray4 = yearMonthDay3.getValues();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645454987705,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"4437072\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=49,SECOND=47,MILLISECOND=705,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2022, 2, 21]");
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate9 = localDate3.withDayOfMonth(13);
        org.joda.time.Chronology chronology10 = localDate9.getChronology();
        long long14 = chronology10.add((long) (short) -1, (long) 1961, 15);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.standard();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 'a', dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate19, (org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate localDate25 = localDate19.withDayOfMonth(13);
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 0, periodType16, chronology26);
        int[] intArray30 = chronology10.get((org.joda.time.ReadablePeriod) mutablePeriod27, (long) 596, (long) 53221161);
        boolean boolean31 = dateTimeFieldType0.isSupported(chronology10);
        org.joda.time.Period period33 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod34 = period33.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate39, (org.joda.time.ReadablePartial) localDate42);
        org.joda.time.LocalDate localDate45 = localDate39.withDayOfMonth(13);
        org.joda.time.Chronology chronology46 = localDate45.getChronology();
        mutablePeriod34.setPeriod((long) 10, (-599990L), chronology46);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((-1968L), chronology46);
        org.joda.time.DateTimeZone dateTimeZone49 = chronology46.getZone();
        org.joda.time.DateTimeField dateTimeField50 = chronology46.year();
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType0.getField(chronology46);
        org.joda.time.DurationField durationField52 = dateTimeField51.getLeapDurationField();
        boolean boolean53 = dateTimeField51.isLenient();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 29414L + "'", long14 == 29414L);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 14, 47, 0, 565]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.getDayOfYear();
        org.joda.time.LocalDate.Property property3 = localDate1.yearOfCentury();
        org.joda.time.LocalDate localDate5 = property3.addWrapFieldToCopy(53221684);
        int int6 = localDate5.size();
        org.joda.time.LocalDate.Property property7 = localDate5.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        int int8 = dateTimeZone6.getStandardOffset((long) 32769);
        java.util.Locale locale10 = java.util.Locale.US;
        java.lang.String str11 = dateTimeZone6.getShortName((long) 1970, locale10);
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.now(dateTimeZone6);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone6);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.ReadableInstant readableInstant15 = null;
        int int16 = dateTimeZone6.getOffset(readableInstant15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.year();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight12, readableDuration13);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType16 = periodType15.withSecondsRemoved();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight9, (org.joda.time.ReadableInstant) dateMidnight12, periodType16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight9.year();
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.lang.String str20 = property18.getAsText(locale19);
        int int21 = property6.getMaximumShortTextLength(locale19);
        org.joda.time.MutableDateTime mutableDateTime23 = property6.add((long) 914);
        mutableDateTime23.setMillis(1645454908858L);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970" + "'", str20, "1970");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(mutableDateTime23);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (byte) 100);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds(0);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.withMillisOfSecond(25);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        int int14 = dateTimeZone12.getStandardOffset((long) 32769);
        java.util.Locale locale16 = java.util.Locale.US;
        java.lang.String str17 = dateTimeZone12.getShortName((long) 1970, locale16);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.now(dateTimeZone12);
        org.joda.time.LocalTime localTime20 = localTime18.withSecondOfMinute(0);
        int int21 = localTime18.getSecondOfMinute();
        org.joda.time.Chronology chronology22 = localTime18.getChronology();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) '#', chronology22);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay3.withChronologyRetainFields(chronology22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay26 = timeOfDay3.withSecondOfMinute(53281190);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53281190 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 47 + "'", int21 == 47);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(timeOfDay24);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((int) (byte) 100, 53221515, (int) (byte) 100, 53221161, 3, (int) 'a', (int) (byte) 100, 8);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay19.plus((org.joda.time.ReadablePeriod) mutablePeriod28);
        java.lang.String str30 = yearMonthDay29.toString();
        org.joda.time.YearMonthDay.Property property31 = yearMonthDay29.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay29.plusDays(13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField35 = yearMonthDay33.getField(53221930);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 53221930");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "4582910-11-03" + "'", str30, "4582910-11-03");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.lang.Object[] objArray2 = strSet1.toArray();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getWeeksInWeekYear();
        java.util.Date date3 = calendar1.getTime();
        org.joda.time.TimeOfDay timeOfDay4 = org.joda.time.TimeOfDay.fromCalendarFields(calendar1);
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = calendar1.getDisplayName(53221161, 53281119, locale7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645454988328,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"4437072\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=49,SECOND=48,MILLISECOND=328,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Feb 21 14:49:48 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay21 = property20.withMaximumValue();
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime23 = instant22.toMutableDateTime();
        mutableDateTime23.setSecondOfMinute((int) (byte) 1);
        mutableDateTime23.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime23.year();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime23.era();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.DateTimeField dateTimeField33 = localDate31.getField(1);
        java.lang.String str35 = dateTimeField33.getAsShortText((long) '4');
        int int36 = mutableDateTime23.get(dateTimeField33);
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.DateMidnight.Property property42 = dateMidnight41.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight41.minusDays((int) 'a');
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        java.lang.String str47 = locale46.toLanguageTag();
        java.lang.String str48 = dateMidnight41.toString("+00:00", locale46);
        java.lang.String str49 = locale38.getDisplayVariant(locale46);
        java.lang.String str50 = dateTimeField33.getAsText((int) (short) 10, locale46);
        int int51 = property20.getMaximumShortTextLength(locale46);
        org.joda.time.YearMonthDay yearMonthDay52 = property20.getYearMonthDay();
        int int53 = property20.getMinimumValueOverall();
        int int54 = property20.getMaximumValue();
        int int55 = property20.get();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "gen" + "'", str35, "gen");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "en" + "'", str47, "en");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "October" + "'", str50, "October");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 31 + "'", int54 == 31);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.LocalDate localDate10 = localDate2.plusWeeks(0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property17 = dateMidnight13.dayOfMonth();
        org.joda.time.Period period18 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod19 = period18.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight13.plus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withField(dateTimeFieldType26, (int) 'a');
        boolean boolean29 = dateMidnight20.isSupported(dateTimeFieldType26);
        org.joda.time.YearMonthDay yearMonthDay30 = dateMidnight20.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property31 = yearMonthDay30.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay32 = property31.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay34 = property31.addToCopy((-143999));
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 'a', dateTimeZone36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = localDate39.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(1L, dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight46.withField(dateTimeFieldType47, (int) 'a');
        org.joda.time.DateTime dateTime51 = dateTime41.withField(dateTimeFieldType47, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(1L, dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone57 = dateMidnight56.getZone();
        org.joda.time.DateTime dateTime58 = dateTime51.withZoneRetainFields(dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight59 = localDate37.toDateMidnight(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = yearMonthDay34.toDateTimeAtCurrentTime(dateTimeZone57);
        java.util.Calendar.Builder builder62 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder65 = builder62.set(0, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(1L, dateTimeZone67);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight68.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone71 = dateMidnight70.getZone();
        int int73 = dateTimeZone71.getStandardOffset((long) 32769);
        java.util.Locale locale75 = java.util.Locale.US;
        java.lang.String str76 = dateTimeZone71.getShortName((long) 1970, locale75);
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.lang.String str78 = locale75.getDisplayCountry(locale77);
        java.util.Calendar.Builder builder79 = builder62.setLocale(locale77);
        java.lang.String str80 = dateTimeZone57.getName((long) 53221, locale77);
        org.joda.time.LocalDate localDate81 = org.joda.time.LocalDate.now(dateTimeZone57);
        org.joda.time.DateTime dateTime82 = localDate2.toDateTimeAtMidnight(dateTimeZone57);
        org.joda.time.DateTime dateTime84 = dateTime82.plusMonths(1);
        org.joda.time.DateTime.Property property85 = dateTime82.minuteOfHour();
        org.joda.time.DateTime dateTime87 = property85.addToCopy(53341329);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00" + "'", str76, "+00:00");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\ubbf8\uad6d" + "'", str78, "\ubbf8\uad6d");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+00:00" + "'", str80, "+00:00");
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateTime87);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime localTime13 = localTime11.withSecondOfMinute(0);
        int int14 = localTime11.getSecondOfMinute();
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str17 = locale16.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = localTime11.toString("T14:49:07.212", locale16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 48 + "'", int14 == 48);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.weeks();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate5, (org.joda.time.ReadablePartial) localDate8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = localDate8.isSupported(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = localDate8.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.minutes();
        org.joda.time.DurationField durationField14 = chronology12.millis();
        org.joda.time.Period period15 = new org.joda.time.Period(1645454854908L, chronology12);
        org.joda.time.Period period16 = new org.joda.time.Period(0L, periodType1, chronology12);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight17, readableDuration18);
        org.joda.time.Duration duration20 = period14.toDurationTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.Instant instant21 = instant7.minus((org.joda.time.ReadableDuration) duration20);
        boolean boolean22 = dateMidnight5.isAfter((org.joda.time.ReadableInstant) instant7);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        int int33 = dateTimeZone31.getStandardOffset((long) 32769);
        java.util.Locale locale35 = java.util.Locale.US;
        java.lang.String str36 = dateTimeZone31.getShortName((long) 1970, locale35);
        org.joda.time.DateTime dateTime37 = dateMidnight25.toDateTime(dateTimeZone31);
        boolean boolean38 = instant7.isEqual((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime40 = instant39.toMutableDateTime();
        mutableDateTime40.setSecondOfMinute((int) (byte) 1);
        mutableDateTime40.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime40.year();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime40.era();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant7, (org.joda.time.ReadableInstant) mutableDateTime40);
        long long48 = instant7.getMillis();
        org.joda.time.MutableDateTime mutableDateTime49 = instant7.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime49.setMinuteOfDay((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645454988609L + "'", long48 == 1645454988609L);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 10);
        int int2 = mutablePeriod1.getWeeks();
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate localDate16 = localDate10.withDayOfMonth(13);
        org.joda.time.Chronology chronology17 = localDate16.getChronology();
        mutablePeriod5.setPeriod((long) 10, (-599990L), chronology17);
        mutablePeriod1.setPeriod((long) 53221550, chronology17);
        int int20 = mutablePeriod1.getMinutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant21 = new org.joda.time.Instant((java.lang.Object) mutablePeriod1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.MutablePeriod");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 47 + "'", int20 == 47);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeField dateTimeField3 = localDate1.getField(1);
        java.lang.String str4 = dateTimeField3.getName();
        long long6 = dateTimeField3.roundHalfCeiling((long) 1970);
        java.lang.String str8 = dateTimeField3.getAsShortText((long) 7);
        org.joda.time.DurationField durationField9 = dateTimeField3.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "monthOfYear" + "'", str4, "monthOfYear");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "gen" + "'", str8, "gen");
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.Chronology chronology3 = timeOfDay2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.millisOfSecond();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.eras();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.yearOfCentury();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(29414L, chronology3);
        org.joda.time.DateTimeField dateTimeField9 = chronology3.millisOfSecond();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod1 = period0.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.LocalDate localDate12 = localDate6.withDayOfMonth(13);
        org.joda.time.Chronology chronology13 = localDate12.getChronology();
        mutablePeriod1.setPeriod((long) 10, (-599990L), chronology13);
        int int15 = mutablePeriod1.getMinutes();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-10) + "'", int15 == (-10));
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(53341028, 53221690, 53221, 20, 53221078);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53221078 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = localDate16.isSupported(dateTimeFieldType18);
        org.joda.time.Chronology chronology20 = localDate16.getChronology();
        org.joda.time.LocalDate localDate22 = localDate16.minusDays(100);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight5.withFields((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus(readablePeriod24);
        org.joda.time.DateMidnight.Property property26 = dateMidnight23.weekyear();
        org.joda.time.DateMidnight dateMidnight28 = property26.addToCopy((long) 'u');
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight28);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.DateTime dateTime10 = localDate8.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate12 = localDate8.withYearOfEra(53221180);
        org.joda.time.LocalDate.Property property13 = localDate8.dayOfYear();
        int int14 = localDate8.getYear();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = localDate8.getValue(53221655);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 53221655");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.dayOfMonth();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight25 = dateTime24.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        org.joda.time.DateTime dateTime32 = dateTime24.toDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = yearMonthDay19.toDateTimeAtMidnight(dateTimeZone31);
        int int34 = yearMonthDay19.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay19.withYear(53221098);
        org.joda.time.Period period38 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod39 = period38.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 'a', dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 'a', dateTimeZone46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate44, (org.joda.time.ReadablePartial) localDate47);
        org.joda.time.LocalDate localDate50 = localDate44.withDayOfMonth(13);
        org.joda.time.Chronology chronology51 = localDate50.getChronology();
        mutablePeriod39.setPeriod((long) 10, (-599990L), chronology51);
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((-1968L), chronology51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 'a', dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) 'a', dateTimeZone58);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate56, (org.joda.time.ReadablePartial) localDate59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        boolean boolean62 = localDate59.isSupported(dateTimeFieldType61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.Interval interval64 = localDate59.toInterval(dateTimeZone63);
        java.lang.String str65 = interval64.toString();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) 'a', dateTimeZone67);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((long) 'a', dateTimeZone70);
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate68, (org.joda.time.ReadablePartial) localDate71);
        org.joda.time.Period period74 = period72.plusYears(8);
        org.joda.time.Interval interval75 = interval64.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period74);
        long long76 = interval64.getStartMillis();
        long long77 = interval64.getStartMillis();
        boolean boolean79 = interval64.isAfter((-52L));
        org.joda.time.Duration duration80 = interval64.toDuration();
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight53.minus((org.joda.time.ReadableDuration) duration80);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int83 = dateMidnight53.get(dateTimeFieldType82);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay85 = yearMonthDay36.withField(dateTimeFieldType82, 53281183);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekOfWeekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str65, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTimeAtCurrentTime(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.withField(dateTimeFieldType16, (int) 'a');
        org.joda.time.DateTime dateTime20 = dateTime10.withField(dateTimeFieldType16, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight2.withField(dateTimeFieldType16, 7);
        int int23 = dateMidnight22.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight22.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.weekyear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 7 + "'", int23 == 7);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 100, 53221515, 0, 53221848);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        java.io.IOException iOException1 = new java.io.IOException("2035-02-21T14:48:46.372");
        java.lang.Throwable[] throwableArray2 = iOException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = dateTime3.toLocalDate();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = dateMidnight14.getZone();
        org.joda.time.DateTime dateTime16 = dateTime8.toDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime3.withZoneRetainFields(dateTimeZone15);
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = null;
        org.joda.time.format.DateTimeParser dateTimeParser19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter18, dateTimeParser19);
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = dateTimeFormatter20.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 'a', dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 'a', dateTimeZone26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate24, (org.joda.time.ReadablePartial) localDate27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = dateMidnight33.getZone();
        org.joda.time.DateTime dateTime35 = localDate27.toDateTimeAtMidnight(dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight36 = org.joda.time.DateMidnight.now(dateTimeZone34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter20.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime17.toMutableDateTime(dateTimeZone34);
        mutableDateTime39.add((long) 879);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime39.setMinuteOfHour((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNull(dateTimePrinter21);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        org.joda.time.Period period1 = new org.joda.time.Period((long) 971);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay21 = property20.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay23 = property20.addToCopy((-143999));
        org.joda.time.YearMonthDay yearMonthDay25 = property20.setCopy(8);
        int int26 = yearMonthDay25.size();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay21 = property20.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 'a', dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 'a', dateTimeZone26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate24, (org.joda.time.ReadablePartial) localDate27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = localDate27.isSupported(dateTimeFieldType29);
        org.joda.time.Chronology chronology31 = localDate27.getChronology();
        org.joda.time.LocalDate localDate33 = localDate27.minusDays(100);
        org.joda.time.LocalDate localDate35 = localDate27.withYear((int) (byte) 0);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight40 = dateTime39.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(1L, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone46 = dateMidnight45.getZone();
        org.joda.time.DateTime dateTime47 = dateTime39.toDateTime(dateTimeZone46);
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay(dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = localDate27.toDateMidnight(dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight50 = yearMonthDay21.toDateMidnight(dateTimeZone46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.withDayOfWeek(13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 13 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateMidnight50);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateTime dateTime6 = dateTime3.minus(2678400000L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.withField(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTime dateTime22 = dateTime12.withField(dateTimeFieldType18, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = dateMidnight27.getZone();
        org.joda.time.DateTime dateTime29 = dateTime22.withZoneRetainFields(dateTimeZone28);
        java.lang.String str30 = dateTimeZone28.getID();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 53221161, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) 53221626, dateTimeZone28);
        org.joda.time.DateTime dateTime33 = dateTime6.withZone(dateTimeZone28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = dateTime6.withTime(20, 53332, 25, 53281444);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53332 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((int) (byte) 100, 53221515, (int) (byte) 100, 53221161, 3, (int) 'a', (int) (byte) 100, 8);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay19.plus((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay19.withDayOfMonth(4);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.minusYears(53221102);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = localDate35.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight38 = dateTime37.toDateMidnight();
        org.joda.time.DateTime dateTime40 = dateTime37.plusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime37.getZone();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(1L, dateTimeZone43);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.dayOfMonth();
        org.joda.time.DurationField durationField46 = property45.getDurationField();
        boolean boolean47 = dateTimeZone41.equals((java.lang.Object) durationField46);
        org.joda.time.DateTime dateTime48 = yearMonthDay31.toDateTimeAtCurrentTime(dateTimeZone41);
        org.joda.time.DateTime dateTime50 = dateTime48.minus((long) 304);
        org.joda.time.DateTime.Property property51 = dateTime48.year();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay(dateTimeZone3);
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 10);
        int int2 = mutablePeriod1.getWeeks();
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate localDate16 = localDate10.withDayOfMonth(13);
        org.joda.time.Chronology chronology17 = localDate16.getChronology();
        mutablePeriod5.setPeriod((long) 10, (-599990L), chronology17);
        mutablePeriod1.setPeriod((long) 53221550, chronology17);
        int int20 = mutablePeriod1.getMinutes();
        int int21 = mutablePeriod1.getDays();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 47 + "'", int20 == 47);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(0, (int) (short) -1);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone4.observesDaylightTime();
        java.util.Calendar.Builder builder6 = builder3.setTimeZone(timeZone4);
        java.util.Calendar.Builder builder9 = builder6.set((int) (short) 0, 53221394);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone.setDefault(timeZone10);
        java.util.Calendar.Builder builder12 = builder6.setTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate localDate21 = localDate15.withDayOfMonth(13);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        long long26 = chronology22.add((long) (short) -1, (long) 1961, 15);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.standard();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 'a', dateTimeZone33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate31, (org.joda.time.ReadablePartial) localDate34);
        org.joda.time.LocalDate localDate37 = localDate31.withDayOfMonth(13);
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 0, periodType28, chronology38);
        int[] intArray42 = chronology22.get((org.joda.time.ReadablePeriod) mutablePeriod39, (long) 596, (long) 53221161);
        java.util.Calendar.Builder builder43 = builder12.setFields(intArray42);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder45 = builder12.setInstant(1645454789451L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 29414L + "'", long26 == 29414L);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 14, 47, 0, 565]");
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.parse("eng", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.DateTimeField dateTimeField11 = localDate9.getField(1);
        boolean boolean12 = strSet6.remove((java.lang.Object) 1);
        java.lang.Object obj13 = null;
        boolean boolean14 = strSet6.contains(obj13);
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet6);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.lang.String[] strArray21 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.DateTimeField dateTimeField27 = localDate25.getField(1);
        boolean boolean28 = strSet22.remove((java.lang.Object) 1);
        java.lang.Object obj29 = null;
        boolean boolean30 = strSet22.contains(obj29);
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strSet22);
        java.lang.String str32 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList31);
        java.lang.String[] strArray35 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.DateTimeField dateTimeField41 = localDate39.getField(1);
        boolean boolean42 = strSet36.remove((java.lang.Object) 1);
        java.lang.Object obj43 = null;
        boolean boolean44 = strSet36.contains(obj43);
        boolean boolean45 = strSet36.isEmpty();
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet36);
        java.lang.String[] strArray59 = new java.lang.String[] { "2022-02-21T00:00:00.000Z", "Cina", "Property[dayOfMonth]", "19", "8 Jun 150344 01:10:11 GMT", "53221102", "4582910-11-03", "0", "dayOfYear", "java.io.IOException: +00:00", "PeriodType[Minutes]", "PeriodType[Minutes]" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        java.util.Set<java.lang.String> strSet62 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange languageRange64 = new java.util.Locale.LanguageRange("coreano");
        java.util.Locale.LanguageRange[] languageRangeArray65 = new java.util.Locale.LanguageRange[] { languageRange64 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList66 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList66, languageRangeArray65);
        java.lang.String[] strArray87 = new java.lang.String[] { "\ubbf8\uad6d", "", "java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z", "DurationField[days]", "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z", "weekyear-gregory", "it", "-0033-08-30T00:00:00.000Z", "weekyear-gregory", "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z", "53221655", "java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", "java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", "dayOfYear", "inglese (Stati Uniti)", "weekyear-gregory", "java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", "UTC" };
        java.util.ArrayList<java.lang.String> strList88 = new java.util.ArrayList<java.lang.String>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList88, strArray87);
        java.util.List<java.lang.String> strList90 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList66, (java.util.Collection<java.lang.String>) strList88);
        boolean boolean91 = strSet62.retainAll((java.util.Collection<java.lang.String>) strList90);
        boolean boolean92 = strSet60.containsAll((java.util.Collection<java.lang.String>) strSet62);
        int int93 = strSet60.size();
        java.util.List<java.lang.String> strList94 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet60);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(languageRangeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(strList90);
// flaky:         org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 11 + "'", int93 == 11);
        org.junit.Assert.assertNotNull(strList94);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 53281896);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withField(dateTimeFieldType9, (int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime3.withField(dateTimeFieldType9, (int) (short) 0);
        org.joda.time.DateTime dateTime15 = dateTime3.plusHours((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean17 = dateTime3.isSupported(dateTimeFieldType16);
        java.lang.String str18 = dateTimeFieldType16.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "minuteOfDay" + "'", str18, "minuteOfDay");
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.dayOfMonth();
        org.joda.time.DurationField durationField21 = property20.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay22 = property20.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay25.plusMinutes(53221655);
        org.joda.time.TimeOfDay.Property property28 = timeOfDay25.secondOfMinute();
        org.joda.time.TimeOfDay.Property property29 = timeOfDay25.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay31.plusMinutes(53221655);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay31.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(1L, dateTimeZone39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight40, readableDuration41);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType44 = periodType43.withSecondsRemoved();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight37, (org.joda.time.ReadableInstant) dateMidnight40, periodType44);
        org.joda.time.DateMidnight.Property property46 = dateMidnight37.year();
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.lang.String str48 = property46.getAsText(locale47);
        org.joda.time.Instant instant49 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime50 = instant49.toMutableDateTime();
        mutableDateTime50.setSecondOfMinute((int) (byte) 1);
        mutableDateTime50.setSecondOfMinute(52);
        mutableDateTime50.setMillisOfSecond((int) ' ');
        long long57 = property46.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime50);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(1L, dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone63 = dateMidnight62.getZone();
        mutableDateTime50.setZoneRetainFields(dateTimeZone63);
        long long66 = dateTimeZone63.convertUTCToLocal((long) 5);
        boolean boolean67 = property34.equals((java.lang.Object) long66);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = property34.getFieldType();
        org.joda.time.DurationField durationField69 = property34.getDurationField();
        java.util.Locale locale73 = new java.util.Locale("weekyear", "java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", "gregory");
        java.lang.String str74 = property34.getAsText(locale73);
        java.lang.String str75 = property29.getAsShortText(locale73);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay76 = property20.setCopy("2022-02-21T14:48:50.489Z", locale73);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:48:50.489Z\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970" + "'", str48, "1970");
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-52L) + "'", long57 == (-52L));
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 5L + "'", long66 == 5L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertEquals(locale73.toString(), "weekyear_JAVA.UTIL.GREGORIANCALENDAR[TIME=1645454832420,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=2,MINIMALDAYSINFIRSTWEEK=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]_gregory");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0" + "'", str74, "0");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "0" + "'", str75, "0");
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = localDate5.toInterval(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType20 = periodType19.withSecondsRemoved();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, (org.joda.time.ReadableInstant) dateMidnight16, periodType20);
        int int22 = dateMidnight16.getMillisOfSecond();
        boolean boolean23 = localDate5.equals((java.lang.Object) int22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDate5.toDateTimeAtStartOfDay(dateTimeZone24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = dateTime25.withCenturyOfEra(53281723);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53281723 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight10 = dateTime9.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.withDayOfMonth((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTimeISO();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight4, (org.joda.time.ReadableInstant) dateMidnight12);
        int int15 = mutablePeriod14.getMillis();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight20 = dateTime19.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.withDayOfMonth((int) (short) 1);
        int int23 = dateMidnight20.getWeekyear();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight20.plusDays((int) (short) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = localDate27.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight30 = dateTime29.toDateMidnight();
        boolean boolean31 = dateMidnight25.equals((java.lang.Object) dateMidnight30);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(1679506596172800000L);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight30.withFields((org.joda.time.ReadablePartial) yearMonthDay33);
        org.joda.time.DateMidnight.Property property35 = dateMidnight30.weekyear();
        org.joda.time.Period period36 = new org.joda.time.Period();
        org.joda.time.Period period38 = period36.multipliedBy((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight30.minus((org.joda.time.ReadablePeriod) period38);
        mutablePeriod14.add((org.joda.time.ReadablePeriod) period38);
        mutablePeriod14.setPeriod(53221098, 685, 271, 0, 59, 53341517, 53281295, 53221240);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(dateMidnight39);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        java.util.Date date6 = new java.util.Date((int) (byte) -1, 32769, 4, (int) (byte) 1, (int) (short) 10, 11);
        date6.setDate(53221197);
        int int9 = date6.getTimezoneOffset();
        date6.setTime(8L);
        date6.setSeconds(53281616);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        int int16 = localDate15.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight21, readableDuration22);
        int int24 = period23.size();
        java.lang.String str25 = period23.toString();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.Period period28 = period23.withField(durationFieldType26, 0);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 'a', dateTimeZone33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate31, (org.joda.time.ReadablePartial) localDate34);
        org.joda.time.LocalDate localDate37 = localDate31.withDayOfMonth(13);
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.hourOfHalfday();
        org.joda.time.DurationField durationField40 = durationFieldType26.getField(chronology38);
        boolean boolean41 = localDate15.isSupported(durationFieldType26);
        boolean boolean42 = date6.equals((java.lang.Object) localDate15);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Sep 09 16:26:56 GMT+00:00 1971");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT0S" + "'", str25, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) dateMidnight23, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration17, periodType27);
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((java.lang.Object) interval31);
        org.joda.time.Duration duration34 = interval31.toDuration();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 'a', dateTimeZone44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate42, (org.joda.time.ReadablePartial) localDate45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(1L, dateTimeZone48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight49, readableDuration50);
        org.joda.time.Duration duration52 = period46.toDurationTo((org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(1L, dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(1L, dateTimeZone57);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight58, readableDuration59);
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType62 = periodType61.withSecondsRemoved();
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight55, (org.joda.time.ReadableInstant) dateMidnight58, periodType62);
        org.joda.time.PeriodType periodType64 = periodType62.withWeeksRemoved();
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration52, periodType62);
        org.joda.time.Interval interval66 = new org.joda.time.Interval(readableInstant35, (org.joda.time.ReadableDuration) duration52);
        org.joda.time.Interval interval67 = interval31.withDurationAfterStart((org.joda.time.ReadableDuration) duration52);
        org.joda.time.DateTime dateTime68 = interval67.getEnd();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((int) (byte) 100, 53221515, (int) (byte) 100, 53221161, 3, (int) 'a', (int) (byte) 100, 8);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay19.plus((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay19.withDayOfMonth(4);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.minusYears(53221102);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = localDate35.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight38 = dateTime37.toDateMidnight();
        org.joda.time.DateTime dateTime40 = dateTime37.plusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime37.getZone();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(1L, dateTimeZone43);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.dayOfMonth();
        org.joda.time.DurationField durationField46 = property45.getDurationField();
        boolean boolean47 = dateTimeZone41.equals((java.lang.Object) durationField46);
        org.joda.time.DateTime dateTime48 = yearMonthDay31.toDateTimeAtCurrentTime(dateTimeZone41);
        org.joda.time.DateTime dateTime49 = yearMonthDay31.toDateTimeAtCurrentTime();
        int int50 = dateTime49.getDayOfWeek();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 7 + "'", int50 == 7);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes(53221655);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay1.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType14 = periodType13.withSecondsRemoved();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, (org.joda.time.ReadableInstant) dateMidnight10, periodType14);
        org.joda.time.DateMidnight.Property property16 = dateMidnight7.year();
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = property16.getAsText(locale17);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime20 = instant19.toMutableDateTime();
        mutableDateTime20.setSecondOfMinute((int) (byte) 1);
        mutableDateTime20.setSecondOfMinute(52);
        mutableDateTime20.setMillisOfSecond((int) ' ');
        long long27 = property16.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = dateMidnight32.getZone();
        mutableDateTime20.setZoneRetainFields(dateTimeZone33);
        long long36 = dateTimeZone33.convertUTCToLocal((long) 5);
        boolean boolean37 = property4.equals((java.lang.Object) long36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property4.getFieldType();
        org.joda.time.DurationField durationField39 = property4.getDurationField();
        java.util.Locale locale43 = new java.util.Locale("weekyear", "java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", "gregory");
        java.lang.String str44 = property4.getAsText(locale43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = locale43.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970" + "'", str18, "1970");
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-52L) + "'", long27 == (-52L));
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 5L + "'", long36 == 5L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertEquals(locale43.toString(), "weekyear_JAVA.UTIL.GREGORIANCALENDAR[TIME=1645454832420,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=2,MINIMALDAYSINFIRSTWEEK=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]_gregory");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0" + "'", str44, "0");
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        int int5 = instant0.compareTo((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute(0);
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime9 = instant8.toMutableDateTime();
        mutableDateTime9.setSecondOfMinute((int) (byte) 1);
        mutableDateTime9.setSecondOfMinute(52);
        org.joda.time.DateTime dateTime14 = mutableDateTime9.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight24, readableDuration25);
        org.joda.time.Duration duration27 = period21.toDurationTo((org.joda.time.ReadableInstant) dateMidnight24);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration27, 53221515);
        org.joda.time.DateTime dateTime30 = dateTime4.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTime dateTime32 = dateTime30.minus(0L);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        org.joda.time.DateTime dateTime17 = localDate9.toDateTimeAtMidnight(dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(dateTimeZone16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withZone(dateTimeZone16);
        // The following exception was thrown during execution in test generation
        try {
            long long21 = dateTimeFormatter2.parseMillis("CHN");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.dayOfMonth();
        int int21 = property20.getMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay23 = property20.addWrapFieldToCopy(914);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay25 = property20.setCopy(244);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 244 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay23);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property13 = dateMidnight9.dayOfMonth();
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight9.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.withField(dateTimeFieldType22, (int) 'a');
        boolean boolean25 = dateMidnight16.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime6.withField(dateTimeFieldType22, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime6.minusSeconds(18);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime6.plusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight35, readableDuration36);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime32.minus((org.joda.time.ReadablePeriod) period37);
        int int39 = localDateTime38.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.minusMillis(17);
        boolean boolean42 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime46 = localDateTime6.withDate(971, 53221235, 16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53221235 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight17, readableDuration18);
        org.joda.time.Duration duration20 = period14.toDurationTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.Instant instant21 = instant7.minus((org.joda.time.ReadableDuration) duration20);
        boolean boolean22 = dateMidnight5.isAfter((org.joda.time.ReadableInstant) instant7);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        int int33 = dateTimeZone31.getStandardOffset((long) 32769);
        java.util.Locale locale35 = java.util.Locale.US;
        java.lang.String str36 = dateTimeZone31.getShortName((long) 1970, locale35);
        org.joda.time.DateTime dateTime37 = dateMidnight25.toDateTime(dateTimeZone31);
        boolean boolean38 = instant7.isEqual((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime40 = instant39.toMutableDateTime();
        mutableDateTime40.setSecondOfMinute((int) (byte) 1);
        mutableDateTime40.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime40.year();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime40.era();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant7, (org.joda.time.ReadableInstant) mutableDateTime40);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime40.weekyear();
        int int49 = mutableDateTime40.getWeekOfWeekyear();
        mutableDateTime40.setMillis((long) 53281119);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plusMillis(13);
        org.joda.time.LocalDateTime.Property property11 = localDateTime6.secondOfMinute();
        org.joda.time.Chronology chronology12 = localDateTime6.getChronology();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.util.Date date5 = new java.util.Date(2, (int) '#', (int) '#');
        calendar1.setTime(date5);
        calendar1.clear();
        java.lang.String str8 = calendar1.getCalendarType();
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.fromCalendarFields(calendar1);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = calendar1.getMinimum(1439);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1439");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2035-02-21T14:48:46.372\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date5.toString(), "Wed Jan 04 00:00:00 GMT+00:00 1905");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "gregory" + "'", str8, "gregory");
        org.junit.Assert.assertNotNull(timeOfDay9);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        mutableDateTime1.setMillis((long) ' ');
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.dayOfMonth();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("P8Y");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(1L, dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, readableDuration8);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType11 = periodType10.withSecondsRemoved();
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight4, (org.joda.time.ReadableInstant) dateMidnight7, periodType11);
        org.joda.time.DateMidnight.Property property13 = dateMidnight4.year();
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.lang.String str15 = property13.getAsText(locale14);
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale16);
        java.lang.String str18 = locale14.getDisplayVariant(locale16);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone1, locale14);
        java.util.Locale locale23 = new java.util.Locale("53221102", "seconds", "ISOChronology[UTC]");
        java.lang.String str24 = timeZone1.getDisplayName(locale23);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970" + "'", str15, "1970");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645454991261,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=49,SECOND=51,MILLISECOND=261,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(locale23.toString(), "53221102_SECONDS_ISOChronology[UTC]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Greenwich Mean Time" + "'", str24, "Greenwich Mean Time");
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withField(dateTimeFieldType9, (int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime3.withField(dateTimeFieldType9, (int) (short) 0);
        org.joda.time.DateTime.Property property14 = dateTime3.hourOfDay();
        org.joda.time.DateTime dateTime15 = property14.getDateTime();
        org.joda.time.DateTime dateTime16 = property14.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(1L, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight6.getZone();
        int int9 = dateTimeZone7.getStandardOffset((long) 32769);
        java.util.Locale locale11 = java.util.Locale.US;
        java.lang.String str12 = dateTimeZone7.getShortName((long) 1970, locale11);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.now(dateTimeZone7);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone7);
        long long17 = dateTimeZone7.convertLocalToUTC((long) 1961, false);
        java.lang.String str18 = dateTimeZone7.toString();
        long long20 = dateTimeZone7.nextTransition((long) (byte) 1);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(1645454882020L, dateTimeZone7);
        int int22 = localTime21.getMillisOfDay();
        int int23 = localTime21.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1961L + "'", long17 == 1961L);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53282020 + "'", int22 == 53282020);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        int int3 = localDateTime2.getDayOfWeek();
        int int4 = localDateTime2.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withHourOfDay(36);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 480 + "'", int4 == 480);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        int int3 = localDateTime2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str5 = dateTimeFieldType4.toString();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.property(dateTimeFieldType4);
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.util.Locale locale8 = java.util.Locale.US;
        int int9 = dateTimeField7.getMaximumTextLength(locale8);
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        java.util.Locale locale15 = new java.util.Locale("gen", "8 Jun 150344 01:10:11 GMT");
        java.lang.String str16 = locale12.getDisplayName(locale15);
        java.lang.String str17 = dateTimeField7.getAsText(2678400000L, locale15);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale15);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = calendar18.getActualMinimum(53281243);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53281243");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "weekyear" + "'", str5, "weekyear");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals(locale15.toString(), "gen_8 JUN 150344 01:10:11 GMT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Italian" + "'", str16, "Italian");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970" + "'", str17, "1970");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645454991515,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2035-02-21T14:48:46.372\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=49,SECOND=51,MILLISECOND=515,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3);
        int int5 = period4.size();
        java.lang.String str6 = period4.toString();
        int int7 = period4.getMonths();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((java.lang.Object) period4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        org.joda.time.Period period1 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod2 = period1.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate localDate13 = localDate7.withDayOfMonth(13);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        mutablePeriod2.setPeriod((long) 10, (-599990L), chronology14);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((-1968L), chronology14);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 'a', dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate19, (org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        boolean boolean25 = localDate22.isSupported(dateTimeFieldType24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = localDate22.toInterval(dateTimeZone26);
        java.lang.String str28 = interval27.toString();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 'a', dateTimeZone33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate31, (org.joda.time.ReadablePartial) localDate34);
        org.joda.time.Period period37 = period35.plusYears(8);
        org.joda.time.Interval interval38 = interval27.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period37);
        long long39 = interval27.getStartMillis();
        long long40 = interval27.getStartMillis();
        boolean boolean42 = interval27.isAfter((-52L));
        org.joda.time.Duration duration43 = interval27.toDuration();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight16.minus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int46 = dateMidnight16.get(dateTimeFieldType45);
        org.joda.time.DateMidnight.Property property47 = dateMidnight16.dayOfWeek();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str28, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(property47);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) dateMidnight23, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration17, periodType27);
        org.joda.time.Period period31 = duration17.toPeriod();
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration17, 366);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 'a', dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate36, (org.joda.time.ReadablePartial) localDate39);
        org.joda.time.LocalDate localDate42 = localDate36.withDayOfMonth(13);
        org.joda.time.Chronology chronology43 = localDate42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.hourOfHalfday();
        boolean boolean45 = duration17.equals((java.lang.Object) dateTimeField44);
        java.util.Locale.Builder builder46 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder47 = builder46.clearExtensions();
        java.util.Locale.Builder builder48 = builder47.clearExtensions();
        java.util.Locale.Builder builder50 = builder47.addUnicodeLocaleAttribute("gregory");
        java.util.Locale locale51 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str52 = locale51.getDisplayLanguage();
        java.lang.String str53 = locale51.getISO3Country();
        java.util.Locale.Category category54 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale55 = java.util.Locale.getDefault(category54);
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        boolean boolean57 = timeZone56.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone56);
        java.util.Locale locale59 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale59);
        java.util.Set<java.lang.String> strSet61 = locale59.getUnicodeLocaleAttributes();
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone56, locale59);
        java.util.Locale.setDefault(category54, locale59);
        java.lang.String str64 = locale51.getDisplayVariant(locale59);
        java.util.Locale.Builder builder65 = builder50.setLocale(locale51);
        java.lang.String str66 = locale51.getScript();
        int int67 = dateTimeField44.getMaximumShortTextLength(locale51);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.YearMonthDay yearMonthDay69 = new org.joda.time.YearMonthDay(dateTimeZone68);
        java.util.Locale.Category category70 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale71 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale71);
        java.util.Locale.setDefault(category70, locale71);
        java.util.Locale locale77 = new java.util.Locale("weekyear", "java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", "gregory");
        java.lang.String str78 = locale77.toLanguageTag();
        java.util.Locale.setDefault(category70, locale77);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = dateTimeField44.getAsText((org.joda.time.ReadablePartial) yearMonthDay69, locale77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "cinese" + "'", str52, "cinese");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "CHN" + "'", str53, "CHN");
        org.junit.Assert.assertTrue("'" + category54 + "' != '" + java.util.Locale.Category.FORMAT + "'", category54.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it");
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(calendar62);
// flaky:         org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=1645454991703,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2035-02-21T14:48:46.372\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=49,SECOND=51,MILLISECOND=703,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertTrue("'" + category70 + "' != '" + java.util.Locale.Category.FORMAT + "'", category70.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "it");
        org.junit.Assert.assertEquals(locale77.toString(), "weekyear_JAVA.UTIL.GREGORIANCALENDAR[TIME=1645454832420,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=2,MINIMALDAYSINFIRSTWEEK=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]_gregory");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "weekyear-gregory" + "'", str78, "weekyear-gregory");
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, (org.joda.time.ReadableInstant) dateMidnight8, periodType12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 'a', dateTimeZone18);
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate16, (org.joda.time.ReadablePartial) localDate19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = localDate19.isSupported(dateTimeFieldType21);
        org.joda.time.Chronology chronology23 = localDate19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.minuteOfDay();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 11, (long) 59, periodType12, chronology23);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((-2050963200000L), chronology23);
        org.joda.time.LocalDate.Property property28 = localDate27.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate31 = localDate27.withField(dateTimeFieldType29, 246);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = dateMidnight36.getZone();
        int int39 = dateTimeZone37.getStandardOffset((long) 32769);
        java.util.Locale locale41 = java.util.Locale.US;
        java.lang.String str42 = dateTimeZone37.getShortName((long) 1970, locale41);
        org.joda.time.LocalTime localTime43 = org.joda.time.LocalTime.now(dateTimeZone37);
        org.joda.time.LocalTime.Property property44 = localTime43.millisOfDay();
        org.joda.time.LocalTime localTime46 = property44.setCopy(53221515);
        org.joda.time.LocalTime localTime48 = property44.addCopy(53221515);
        org.joda.time.LocalTime localTime50 = localTime48.minusHours(100);
        // The following exception was thrown during execution in test generation
        try {
            int int51 = localDate31.compareTo((org.joda.time.ReadablePartial) localTime50);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime50);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        java.lang.String[] strArray2 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField8 = localDate6.getField(1);
        boolean boolean9 = strSet3.remove((java.lang.Object) 1);
        java.lang.Object obj10 = null;
        boolean boolean11 = strSet3.contains(obj10);
        java.util.Set<java.lang.String> strSet12 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean13 = strSet3.containsAll((java.util.Collection<java.lang.String>) strSet12);
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = null;
        org.joda.time.format.DateTimeParser dateTimeParser15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser15);
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = dateTimeFormatter16.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser18 = dateTimeFormatter16.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter16.withPivotYear(53221684);
        org.joda.time.Period period22 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod23 = period22.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate28, (org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate localDate34 = localDate28.withDayOfMonth(13);
        org.joda.time.Chronology chronology35 = localDate34.getChronology();
        mutablePeriod23.setPeriod((long) 10, (-599990L), chronology35);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((-1968L), chronology35);
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.lang.String str39 = locale38.toLanguageTag();
        java.util.Calendar calendar40 = dateMidnight37.toCalendar(locale38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter16.withLocale(locale38);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = strSet12.contains((java.lang.Object) dateTimeFormatter16);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.joda.time.format.DateTimeFormatter cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(dateTimePrinter17);
        org.junit.Assert.assertNull(dateTimeParser18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "en" + "'", str39, "en");
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=-86400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) dateMidnight23, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration17, periodType27);
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = localDate33.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight36 = dateTime35.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(1L, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = dateMidnight41.getZone();
        org.joda.time.DateTime dateTime43 = dateTime35.toDateTime(dateTimeZone42);
        boolean boolean44 = interval31.contains((org.joda.time.ReadableInstant) dateTime35);
        long long45 = interval31.toDurationMillis();
        boolean boolean46 = interval31.containsNow();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = localDate49.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 'a', dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 'a', dateTimeZone56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate54, (org.joda.time.ReadablePartial) localDate57);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(1L, dateTimeZone60);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight61, readableDuration62);
        org.joda.time.Duration duration64 = period58.toDurationTo((org.joda.time.ReadableInstant) dateMidnight61);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(1L, dateTimeZone66);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(1L, dateTimeZone69);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight70, readableDuration71);
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType74 = periodType73.withSecondsRemoved();
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight67, (org.joda.time.ReadableInstant) dateMidnight70, periodType74);
        org.joda.time.PeriodType periodType76 = periodType74.withWeeksRemoved();
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableDuration) duration64, periodType74);
        org.joda.time.Interval interval78 = new org.joda.time.Interval(readableInstant47, (org.joda.time.ReadableDuration) duration64);
        long long79 = interval78.getEndMillis();
        org.joda.time.Interval interval80 = interval31.gap((org.joda.time.ReadableInterval) interval78);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(periodType76);
// flaky:         org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1645454992018L + "'", long79 == 1645454992018L);
// flaky:         org.junit.Assert.assertNull(interval80);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale10);
        java.util.Set<java.lang.String> strSet12 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str13 = localDate2.toString("+00:00", locale10);
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.minusDays((int) 'a');
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str23 = locale22.toLanguageTag();
        java.lang.String str24 = dateMidnight17.toString("+00:00", locale22);
        java.lang.String str25 = locale14.getDisplayVariant(locale22);
        java.lang.String str26 = locale10.getDisplayLanguage(locale22);
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.lang.String str28 = locale27.getScript();
        java.lang.String str29 = locale22.getDisplayLanguage(locale27);
        java.util.Set<java.lang.Character> charSet30 = locale22.getExtensionKeys();
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "en" + "'", str23, "en");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Italian" + "'", str26, "Italian");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Englisch" + "'", str29, "Englisch");
        org.junit.Assert.assertNotNull(charSet30);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = property6.addWrapFieldToCopy(32769);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTime();
        mutableDateTime10.setSecondOfMinute((int) (byte) 1);
        int int13 = mutableDateTime10.getMillisOfDay();
        mutableDateTime10.setDayOfYear((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight25, readableDuration26);
        org.joda.time.Duration duration28 = period22.toDurationTo((org.joda.time.ReadableInstant) dateMidnight25);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration28);
        int int30 = property6.getDifference((org.joda.time.ReadableInstant) mutableDateTime10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight32 = property6.setCopy("2022-02-21T14:48:22.293Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:48:22.293Z\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53341132 + "'", int13 == 53341132);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-19092) + "'", int30 == (-19092));
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.minutes();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.clockhourOfHalfday();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.weeks();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate5, (org.joda.time.ReadablePartial) localDate8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = localDate8.isSupported(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = localDate8.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 493, (long) 53221161, periodType2, chronology12);
        org.joda.time.DateTimeField dateTimeField17 = chronology12.millisOfSecond();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField19 = chronology12.millisOfSecond();
        java.lang.String str21 = dateTimeField19.getAsText((long) 53281199);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "199" + "'", str21, "199");
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.minutes();
        org.joda.time.DurationFieldType durationFieldType11 = durationField10.getType();
        long long14 = durationField10.getMillis(1645454844652L, (long) 53221032);
        long long16 = durationField10.getValueAsLong(28857600017L);
        long long17 = durationField10.getUnitMillis();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = durationField10.getValue((-231413759999519040L), 1645454914804L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -3856895999991");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 98727290679120000L + "'", long14 == 98727290679120000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 480960L + "'", long16 == 480960L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 60000L + "'", long17 == 60000L);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(97, 53281831, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53281831 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setSecondOfMinute(52);
        org.joda.time.DateTime dateTime6 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17);
        org.joda.time.Duration duration19 = period13.toDurationTo((org.joda.time.ReadableInstant) dateMidnight16);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration19, 53221515);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, readableInstant22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate26, (org.joda.time.ReadablePartial) localDate29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = dateMidnight35.getZone();
        org.joda.time.DateTime dateTime37 = localDate29.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withYear(596);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Days days41 = period40.toStandardDays();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(days41);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setSecondOfMinute(52);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = dateMidnight17.getZone();
        org.joda.time.DateTime dateTime19 = localDate11.toDateTimeAtMidnight(dateTimeZone18);
        boolean boolean21 = dateTimeZone18.isStandardOffset((long) (byte) 10);
        mutableDateTime1.setZone(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundHalfCeiling();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight7 = dateTime6.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        org.joda.time.DateTime dateTime14 = dateTime6.toDateTime(dateTimeZone13);
        org.joda.time.Instant instant15 = dateTime6.toInstant();
        org.joda.time.Chronology chronology16 = instant15.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(244, 53221304, 999, chronology16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53221304 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        org.joda.time.DateTime dateTime20 = localDate12.toDateTimeAtMidnight(dateTimeZone19);
        boolean boolean22 = dateTimeZone19.isStandardOffset((long) (byte) 10);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now(dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(12, 850, 53221235, 53332, 0, 6, 53221655, dateTimeZone19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53332 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeField dateTimeField3 = localDate1.getField(1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        boolean boolean11 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate localDate23 = localDate17.withDayOfMonth(13);
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        mutablePeriod13.add((long) ' ', chronology24);
        org.joda.time.LocalDate localDate26 = localDate1.minus((org.joda.time.ReadablePeriod) mutablePeriod13);
        int int27 = mutablePeriod13.getMinutes();
        mutablePeriod13.setPeriod(12, 0, 19, (int) (short) 100, 15, 178, (int) ' ', 120);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType38 = mutablePeriod13.getFieldType(640);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 10);
        int int3 = mutablePeriod2.getWeeks();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay0.plus((org.joda.time.ReadablePeriod) mutablePeriod2);
        int int5 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay0.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period7 = new org.joda.time.Period((java.lang.Object) timeOfDay0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.TimeOfDay");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        long long13 = chronology9.add((long) (short) -1, (long) 1961, 15);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.standard();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate localDate24 = localDate18.withDayOfMonth(13);
        org.joda.time.Chronology chronology25 = localDate24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 0, periodType15, chronology25);
        int[] intArray29 = chronology9.get((org.joda.time.ReadablePeriod) mutablePeriod26, (long) 596, (long) 53221161);
        int int30 = mutablePeriod26.getMonths();
        int int31 = mutablePeriod26.getMinutes();
        int int32 = mutablePeriod26.getYears();
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 29414L + "'", long13 == 29414L);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 14, 47, 0, 565]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.DateTime dateTime13 = localDate5.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYear(596);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.getDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime17.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundHalfFloor();
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(0, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        int int11 = dateTimeZone9.getStandardOffset((long) 32769);
        java.util.Locale locale13 = java.util.Locale.US;
        java.lang.String str14 = dateTimeZone9.getShortName((long) 1970, locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale13.getDisplayCountry(locale15);
        java.util.Calendar.Builder builder17 = builder0.setLocale(locale15);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.Calendar.Builder builder19 = builder17.setTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate22, (org.joda.time.ReadablePartial) localDate25);
        org.joda.time.LocalDate localDate28 = localDate22.withDayOfMonth(13);
        org.joda.time.Chronology chronology29 = localDate28.getChronology();
        long long33 = chronology29.add((long) (short) -1, (long) 1961, 15);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.standard();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 'a', dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 'a', dateTimeZone40);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate38, (org.joda.time.ReadablePartial) localDate41);
        org.joda.time.LocalDate localDate44 = localDate38.withDayOfMonth(13);
        org.joda.time.Chronology chronology45 = localDate44.getChronology();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 0, periodType35, chronology45);
        int[] intArray49 = chronology29.get((org.joda.time.ReadablePeriod) mutablePeriod46, (long) 596, (long) 53221161);
        java.util.Calendar.Builder builder50 = builder17.setFields(intArray49);
        java.util.Locale locale51 = java.util.Locale.PRC;
        java.util.Calendar.Builder builder52 = builder50.setLocale(locale51);
        java.util.Calendar.Builder builder56 = builder52.setWeekDate(53221102, (int) (short) 0, 53221807);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder59 = builder52.setWeekDefinition(640, 53319979);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ubbf8\uad6d" + "'", str16, "\ubbf8\uad6d");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 29414L + "'", long33 == 29414L);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 0, 0, 14, 47, 0, 565]");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(436L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear(536);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 536 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        int int8 = dateTimeZone6.getStandardOffset((long) 32769);
        java.util.Locale locale10 = java.util.Locale.US;
        java.lang.String str11 = dateTimeZone6.getShortName((long) 1970, locale10);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 53221660, dateTimeZone6);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        int int14 = period13.getYears();
        org.joda.time.LocalTime localTime15 = localTime12.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period17 = org.joda.time.Period.seconds((int) (byte) 1);
        org.joda.time.LocalTime localTime18 = localTime12.plus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.LocalTime localTime20 = localTime18.withMillisOfDay(3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        java.util.Date date3 = new java.util.Date(53221515, (int) (byte) 1, (int) 'a');
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.fromDateFields(date3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withTime(31, 53352, 53221684, 142);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date3.toString(), "Mon May 08 00:00:00 GMT+00:00 53223415");
        org.junit.Assert.assertNotNull(localDateTime4);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.standard();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate20, (org.joda.time.ReadablePartial) localDate23);
        org.joda.time.LocalDate localDate26 = localDate20.withDayOfMonth(13);
        org.joda.time.Chronology chronology27 = localDate26.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 0, periodType17, chronology27);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0, 26, 244, 0, (int) '#', 47, 53221283, 120, periodType17);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(53221684, 1970, 53221996, 36, (int) (short) 1, 0, 0, 53221180, periodType17);
        java.lang.String str31 = periodType17.getName();
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Standard" + "'", str31, "Standard");
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setSecondOfMinute(52);
        org.joda.time.DateTime dateTime6 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17);
        org.joda.time.Duration duration19 = period13.toDurationTo((org.joda.time.ReadableInstant) dateMidnight16);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration19, 53221515);
        mutableDateTime1.addHours(53221235);
        mutableDateTime1.add(1645454847523L);
        mutableDateTime1.setSecondOfDay(689);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration19);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.monthOfYear();
        org.joda.time.Period period12 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod13 = period12.toMutablePeriod();
        org.joda.time.Weeks weeks14 = period12.toStandardWeeks();
        int[] intArray17 = chronology9.get((org.joda.time.ReadablePeriod) period12, (long) 53221394, 29414L);
        java.lang.String str18 = chronology9.toString();
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 0, -14, -46, -31, -980]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusMillis(10);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay5 = property4.withMaximumValue();
        java.lang.String str6 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField7 = property4.getField();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0" + "'", str6, "0");
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        org.joda.time.DateTime dateTime11 = dateTime3.toDateTime(dateTimeZone10);
        org.joda.time.Instant instant12 = dateTime3.toInstant();
        org.joda.time.DateTime dateTime14 = dateTime3.minusMinutes(53221626);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime3.withDayOfWeek(53341546);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53341546 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        java.util.Locale locale2 = new java.util.Locale("gen", "8 Jun 150344 01:10:11 GMT");
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDate5.toDateTimeAtCurrentTime(dateTimeZone6);
        int int8 = instant3.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime10 = dateTime7.withSecondOfMinute(0);
        org.joda.time.Instant instant11 = dateTime7.toInstant();
        org.joda.time.DateTime dateTime13 = dateTime7.plusMonths((int) '4');
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate20, (org.joda.time.ReadablePartial) localDate23);
        org.joda.time.LocalDate localDate26 = localDate20.withDayOfMonth(13);
        org.joda.time.Chronology chronology27 = localDate26.getChronology();
        mutablePeriod15.setPeriod((long) 10, (-599990L), chronology27);
        mutablePeriod15.setWeeks(2022);
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        mutablePeriod32.setPeriod((-1L));
        mutablePeriod15.add((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateTime dateTime36 = dateTime7.minus((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateTime dateTime37 = dateTime7.toDateTimeISO();
        boolean boolean38 = locale2.equals((java.lang.Object) dateTime37);
        org.junit.Assert.assertEquals(locale2.toString(), "gen_8 JUN 150344 01:10:11 GMT");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        int int3 = localDateTime2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str5 = dateTimeFieldType4.toString();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.property(dateTimeFieldType4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withWeekOfWeekyear(47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withTime(4441178, (int) 'u', 938, 54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4441178 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "weekyear" + "'", str5, "weekyear");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        org.joda.time.PeriodType periodType11 = periodType9.withWeeksRemoved();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime13 = instant12.toMutableDateTime();
        mutableDateTime13.setSecondOfMinute((int) (byte) 1);
        mutableDateTime13.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime13.year();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime13.era();
        mutableDateTime13.addMillis((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 'a', dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 'a', dateTimeZone26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate24, (org.joda.time.ReadablePartial) localDate27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = dateMidnight33.getZone();
        org.joda.time.DateTime dateTime35 = localDate27.toDateTimeAtMidnight(dateTimeZone34);
        mutableDateTime13.setZoneRetainFields(dateTimeZone34);
        long long38 = dateTimeZone34.nextTransition((long) 1);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((java.lang.Object) periodType11, dateTimeZone34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("coreano");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.util.Locale.LanguageRange languageRange5 = new java.util.Locale.LanguageRange("coreano");
        java.util.Locale.LanguageRange languageRange7 = new java.util.Locale.LanguageRange("coreano");
        double double8 = languageRange7.getWeight();
        java.util.Locale.LanguageRange languageRange10 = new java.util.Locale.LanguageRange("coreano");
        double double11 = languageRange10.getWeight();
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] { languageRange1, languageRange5, languageRange7, languageRange10 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.lang.String[] strArray20 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.DateTimeField dateTimeField26 = localDate24.getField(1);
        boolean boolean27 = strSet21.remove((java.lang.Object) 1);
        java.lang.Object obj28 = null;
        boolean boolean29 = strSet21.contains(obj28);
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strSet21);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.lang.String[] strArray36 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology39);
        org.joda.time.DateTimeField dateTimeField42 = localDate40.getField(1);
        boolean boolean43 = strSet37.remove((java.lang.Object) 1);
        java.lang.Object obj44 = null;
        boolean boolean45 = strSet37.contains(obj44);
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strSet37);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.lang.String[] strArray52 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(chronology55);
        org.joda.time.DateTimeField dateTimeField58 = localDate56.getField(1);
        boolean boolean59 = strSet53.remove((java.lang.Object) 1);
        java.lang.Object obj60 = null;
        boolean boolean61 = strSet53.contains(obj60);
        java.util.List<java.lang.String> strList62 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.lang.String>) strSet53);
        java.lang.String str63 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strList62);
        java.lang.String[] strArray66 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate(chronology69);
        org.joda.time.DateTimeField dateTimeField72 = localDate70.getField(1);
        boolean boolean73 = strSet67.remove((java.lang.Object) 1);
        java.lang.Object obj74 = null;
        boolean boolean75 = strSet67.contains(obj74);
        boolean boolean76 = strSet67.isEmpty();
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strSet67);
        java.util.Locale.FilteringMode filteringMode78 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strSet67, filteringMode78);
        java.util.Locale.FilteringMode filteringMode80 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList81 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strSet67, filteringMode80);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertTrue("'" + filteringMode78 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode78.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertTrue("'" + filteringMode80 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode80.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList81);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone0);
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale3);
        java.util.Set<java.lang.String> strSet5 = locale3.getUnicodeLocaleAttributes();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone0, locale3);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId7 = timeZone0.toZoneId();
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: 2035-02-21T14:48:46.372");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645454994492,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2035-02-21T14:48:46.372\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=49,SECOND=54,MILLISECOND=492,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfYear();
        org.joda.time.DateTimeField dateTimeField5 = property4.getField();
        int int8 = dateTimeField5.getDifference(8L, (long) '4');
        long long11 = dateTimeField5.getDifferenceAsLong((long) 14, (long) 53221812);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes(53221655);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay1.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = property4.getField();
        org.joda.time.TimeOfDay timeOfDay6 = property4.getTimeOfDay();
        java.lang.String str7 = property4.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay9 = property4.setCopy("cinese");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"cinese\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[secondOfMinute]" + "'", str7, "Property[secondOfMinute]");
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        int int3 = localDateTime2.getDayOfWeek();
        int int4 = localDateTime2.getMillisOfSecond();
        org.joda.time.DateTime dateTime5 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(366);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight11, readableDuration12);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period16 = period13.plusDays((int) (byte) 1);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadablePeriod) period16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) interval17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Interval");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 661 + "'", int4 == 661);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        int int19 = dateMidnight9.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = dateMidnight25.getZone();
        int int28 = dateTimeZone26.getStandardOffset((long) 32769);
        java.util.Locale locale30 = java.util.Locale.US;
        java.lang.String str31 = dateTimeZone26.getShortName((long) 1970, locale30);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.now(dateTimeZone26);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone26);
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime35 = dateMidnight9.toDateTime(dateTimeZone26);
        org.joda.time.LocalTime localTime36 = dateTime35.toLocalTime();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localTime36);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(0, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        int int11 = dateTimeZone9.getStandardOffset((long) 32769);
        java.util.Locale locale13 = java.util.Locale.US;
        java.lang.String str14 = dateTimeZone9.getShortName((long) 1970, locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale13.getDisplayCountry(locale15);
        java.util.Calendar.Builder builder17 = builder0.setLocale(locale15);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.Calendar.Builder builder19 = builder17.setTimeZone(timeZone18);
        int int20 = timeZone18.getRawOffset();
        java.util.Date date24 = new java.util.Date(26, 178, 42);
        int int25 = date24.getDate();
        date24.setMonth(2000);
        boolean boolean28 = timeZone18.inDaylightTime(date24);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ubbf8\uad6d" + "'", str16, "\ubbf8\uad6d");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Sep 12 00:00:00 GMT+00:00 2106");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 12 + "'", int25 == 12);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        java.util.Calendar.Builder builder5 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder8 = builder5.set(0, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight13.getZone();
        int int16 = dateTimeZone14.getStandardOffset((long) 32769);
        java.util.Locale locale18 = java.util.Locale.US;
        java.lang.String str19 = dateTimeZone14.getShortName((long) 1970, locale18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale18.getDisplayCountry(locale20);
        java.util.Calendar.Builder builder22 = builder5.setLocale(locale20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withLocale(locale20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter23.withDefaultYear(53221504);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter25.withOffsetParsed();
        java.io.Writer writer27 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) (byte) 100);
        java.lang.String str30 = localTime29.toString();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter26.printTo(writer27, (org.joda.time.ReadablePartial) localTime29);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ubbf8\uad6d" + "'", str21, "\ubbf8\uad6d");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "00:00:00.100" + "'", str30, "00:00:00.100");
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.DateMidnight.Property property20 = dateMidnight9.weekyear();
        org.joda.time.DateMidnight dateMidnight22 = property20.addToCopy(17);
        org.joda.time.DateMidnight dateMidnight24 = property20.addToCopy(954);
        org.joda.time.DateMidnight dateMidnight25 = property20.roundFloorCopy();
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight29 = dateMidnight25.withFieldAdded(durationFieldType27, 685);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(53223257L);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        java.lang.String str1 = dateMidnight0.toString();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withYearOfCentury(3);
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.centuryOfEra();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str1, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(53221684);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate9.withDayOfMonth(13);
        org.joda.time.Chronology chronology16 = localDate15.getChronology();
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now(chronology16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(53221102);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.Chronology chronology2 = timeOfDay1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfEra();
        org.joda.time.ReadablePartial readablePartial4 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTimeAtCurrentTime(dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight16 = dateTime15.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.withDayOfMonth((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime19 = dateMidnight18.toMutableDateTimeISO();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableInstant) dateMidnight18);
        int[] intArray21 = mutablePeriod20.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray23 = dateTimeField3.set(readablePartial4, (int) (byte) -1, intArray21, 50);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[60, 5, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.Period period4 = new org.joda.time.Period();
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod6 = period5.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate11, (org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate localDate17 = localDate11.withDayOfMonth(13);
        org.joda.time.Chronology chronology18 = localDate17.getChronology();
        mutablePeriod6.setPeriod((long) 10, (-599990L), chronology18);
        mutablePeriod6.addSeconds(13);
        mutablePeriod6.clear();
        org.joda.time.Period period23 = period4.minus((org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.Minutes minutes24 = period23.toStandardMinutes();
        org.joda.time.Period period25 = new org.joda.time.Period();
        org.joda.time.Period period26 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod27 = period26.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 'a', dateTimeZone34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate32, (org.joda.time.ReadablePartial) localDate35);
        org.joda.time.LocalDate localDate38 = localDate32.withDayOfMonth(13);
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        mutablePeriod27.setPeriod((long) 10, (-599990L), chronology39);
        mutablePeriod27.addSeconds(13);
        mutablePeriod27.clear();
        org.joda.time.Period period44 = period25.minus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Minutes minutes45 = period44.toStandardMinutes();
        org.joda.time.Period period46 = period23.withFields((org.joda.time.ReadablePeriod) period44);
        org.joda.time.LocalDate localDate48 = localDate1.withPeriodAdded((org.joda.time.ReadablePeriod) period46, 53221996);
        int int49 = localDate1.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate51 = localDate1.withWeekOfWeekyear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute(3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusWeeks((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfMonth(13);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = property9.withMaximumValue();
        int int11 = localDateTime10.getMillisOfDay();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53394886 + "'", int11 == 53394886);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) dateMidnight23, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration17, periodType27);
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        long long33 = interval31.getEndMillis();
        org.joda.time.Period period34 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod35 = period34.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 'a', dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate40, (org.joda.time.ReadablePartial) localDate43);
        org.joda.time.LocalDate localDate46 = localDate40.withDayOfMonth(13);
        org.joda.time.Chronology chronology47 = localDate46.getChronology();
        mutablePeriod35.setPeriod((long) 10, (-599990L), chronology47);
        mutablePeriod35.addSeconds(13);
        mutablePeriod35.clear();
        org.joda.time.Interval interval52 = interval31.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(1L, dateTimeZone54);
        org.joda.time.DateMidnight.Property property56 = dateMidnight55.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight57 = property56.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight57.withYearOfEra(15);
        org.joda.time.DateMidnight.Property property60 = dateMidnight57.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight57.withWeekOfWeekyear(46);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod35, (org.joda.time.ReadableInstant) dateMidnight57);
        java.lang.Object obj64 = mutablePeriod35.clone();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(chronology32);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645454994906L + "'", long33 == 1645454994906L);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "PT0S");
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime14 = property12.setCopy(53221515);
        org.joda.time.LocalTime localTime16 = property12.addCopy(53221515);
        org.joda.time.LocalTime localTime18 = localTime16.minusHours(100);
        org.joda.time.LocalTime localTime20 = localTime16.minusSeconds(11);
        org.joda.time.LocalTime.Property property21 = localTime16.hourOfDay();
        org.joda.time.LocalTime localTime22 = property21.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime24 = property21.addCopy(1645195663532L);
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.minusMillis(10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = timeOfDay28.getFieldTypes();
        org.joda.time.LocalTime localTime30 = timeOfDay28.toLocalTime();
        org.joda.time.LocalTime localTime32 = localTime30.plusMinutes(17);
        org.joda.time.LocalTime localTime34 = localTime32.minusHours(53221504);
        int int35 = property21.compareTo((org.joda.time.ReadablePartial) localTime32);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        org.joda.time.Period period1 = org.joda.time.Period.millis(17);
        org.joda.time.Period period3 = period1.plusMillis(850);
        org.joda.time.Period period5 = org.joda.time.Period.seconds(53221049);
        org.joda.time.Period period6 = period3.plus((org.joda.time.ReadablePeriod) period5);
        int int7 = period5.getSeconds();
        java.lang.Class<?> wildcardClass8 = period5.getClass();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53221049 + "'", int7 == 53221049);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime14 = property12.addNoWrapToCopy((int) (byte) 100);
        org.joda.time.LocalTime localTime16 = property12.addCopy(366);
        org.joda.time.LocalTime localTime18 = property12.addWrapFieldToCopy(11);
        org.joda.time.LocalTime.Property property19 = localTime18.minuteOfHour();
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = localTime18.getFields();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(1L, dateTimeZone3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight4, readableDuration5);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property14 = dateMidnight10.dayOfMonth();
        org.joda.time.Period period15 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod16 = period15.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight10.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight22.withField(dateTimeFieldType23, (int) 'a');
        boolean boolean26 = dateMidnight17.isSupported(dateTimeFieldType23);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime7.withField(dateTimeFieldType23, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime7.minusSeconds(18);
        org.joda.time.Chronology chronology31 = localDateTime7.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.hours();
        org.joda.time.Chronology chronology33 = chronology31.withUTC();
        org.joda.time.DurationField durationField34 = chronology33.weeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((java.lang.Object) 44391, chronology33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        org.joda.time.Period period1 = org.joda.time.Period.millis(53281276);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        int int5 = instant0.compareTo((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute(0);
        org.joda.time.Instant instant8 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime10 = dateTime4.plusMonths((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) (short) 1);
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime15 = instant14.toMutableDateTime();
        mutableDateTime15.setSecondOfMinute((int) (byte) 1);
        mutableDateTime15.setSecondOfMinute(52);
        mutableDateTime15.setMillisOfSecond((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        mutableDateTime15.add(readablePeriod22);
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 'a', dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 'a', dateTimeZone29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate27, (org.joda.time.ReadablePartial) localDate30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight34, readableDuration35);
        org.joda.time.Duration duration37 = period31.toDurationTo((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.Instant instant38 = instant24.minus((org.joda.time.ReadableDuration) duration37);
        mutableDateTime15.add((org.joda.time.ReadableDuration) duration37, 53221655);
        org.joda.time.DateTime dateTime42 = dateTime13.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (short) -1);
        org.joda.time.DateTime.Property property43 = dateTime42.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime45 = property43.setCopy(53312500);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53312500 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withCenturyOfEra(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = property7.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 10);
        int int12 = mutablePeriod11.getWeeks();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay9.plus((org.joda.time.ReadablePeriod) mutablePeriod11);
        int int14 = timeOfDay9.getMillisOfSecond();
        org.joda.time.LocalTime localTime15 = timeOfDay9.toLocalTime();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight8.withFields((org.joda.time.ReadablePartial) timeOfDay9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight18 = dateMidnight8.withDayOfMonth(365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 365 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeOfDay13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateMidnight16);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(53319778, 53281243, 58, (int) (short) 1, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53281243 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(53281711);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeField dateTimeField3 = localDate1.getField(1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        boolean boolean11 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate localDate23 = localDate17.withDayOfMonth(13);
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        mutablePeriod13.add((long) ' ', chronology24);
        org.joda.time.LocalDate localDate26 = localDate1.minus((org.joda.time.ReadablePeriod) mutablePeriod13);
        mutablePeriod13.addYears((int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod29 = mutablePeriod13.copy();
        int int30 = mutablePeriod29.getYears();
        org.joda.time.PeriodType periodType31 = mutablePeriod29.getPeriodType();
        mutablePeriod29.addMonths(994);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(periodType31);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, readableDuration8);
        int int10 = period9.size();
        java.lang.String str11 = period9.toString();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.Period period14 = period9.withField(durationFieldType12, 0);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate localDate23 = localDate17.withDayOfMonth(13);
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        org.joda.time.DurationField durationField26 = durationFieldType12.getField(chronology24);
        boolean boolean27 = localDate1.isSupported(durationFieldType12);
        org.joda.time.LocalDate.Property property28 = localDate1.monthOfYear();
        java.util.Date date29 = localDate1.toDate();
        org.joda.time.LocalDate.Property property30 = localDate1.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate32 = property30.addToCopy(53341898);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT0S" + "'", str11, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Mon Feb 21 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setSecondOfMinute(52);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = dateMidnight17.getZone();
        org.joda.time.DateTime dateTime19 = localDate11.toDateTimeAtMidnight(dateTimeZone18);
        boolean boolean21 = dateTimeZone18.isStandardOffset((long) (byte) 10);
        mutableDateTime1.setZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField23 = mutableDateTime1.getRoundingField();
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = null;
        org.joda.time.format.DateTimeParser dateTimeParser25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter24, dateTimeParser25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter26.withPivotYear((java.lang.Integer) 100);
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.Chronology chronology31 = timeOfDay30.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter28.withChronology(chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.hourOfHalfday();
        long long35 = dateTimeField33.roundCeiling((long) 53253508);
        int int36 = dateTimeField33.getMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setRounding(dateTimeField33, 607);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 607");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 54000000L + "'", long35 == 54000000L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 11 + "'", int36 == 11);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate9 = localDate3.withDayOfMonth(13);
        org.joda.time.Chronology chronology10 = localDate9.getChronology();
        long long14 = chronology10.add((long) (short) -1, (long) 1961, 15);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) 53221407, chronology10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate22, (org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight29, readableDuration30);
        org.joda.time.Duration duration32 = period26.toDurationTo((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight38, readableDuration39);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType42 = periodType41.withSecondsRemoved();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight35, (org.joda.time.ReadableInstant) dateMidnight38, periodType42);
        org.joda.time.PeriodType periodType44 = periodType42.withWeeksRemoved();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration32, periodType42);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 'a', dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 'a', dateTimeZone50);
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate48, (org.joda.time.ReadablePartial) localDate51);
        org.joda.time.Period period53 = period45.plus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) 'a', dateTimeZone58);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) 'a', dateTimeZone61);
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate59, (org.joda.time.ReadablePartial) localDate62);
        org.joda.time.LocalDate localDate65 = localDate59.withDayOfMonth(13);
        org.joda.time.Chronology chronology66 = localDate65.getChronology();
        org.joda.time.Period period67 = new org.joda.time.Period((long) (short) -1, (long) 'a', periodType56, chronology66);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((java.lang.Object) period45, chronology66);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(chronology66);
        int int70 = yearMonthDay15.compareTo((org.joda.time.ReadablePartial) localDate69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate(chronology71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = localDate72.toDateTimeAtCurrentTime(dateTimeZone73);
        org.joda.time.DateMidnight dateMidnight75 = dateTime74.toDateMidnight();
        org.joda.time.DateTime dateTime77 = dateTime74.minus(2678400000L);
        org.joda.time.DateTime.Property property78 = dateTime77.weekOfWeekyear();
        org.joda.time.DateTime dateTime79 = property78.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str81 = dateTimeFieldType80.toString();
        org.joda.time.DateTime dateTime83 = dateTime79.withField(dateTimeFieldType80, 53221550);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay85 = yearMonthDay15.withField(dateTimeFieldType80, 22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 29414L + "'", long14 == 29414L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "weekyear" + "'", str81, "weekyear");
        org.junit.Assert.assertNotNull(dateTime83);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate9.withDayOfMonth(13);
        org.joda.time.Chronology chronology16 = localDate15.getChronology();
        int int17 = localDate5.compareTo((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate.Property property18 = localDate15.dayOfMonth();
        org.joda.time.LocalDate localDate19 = property18.roundFloorCopy();
        org.joda.time.LocalDate localDate20 = property18.roundCeilingCopy();
        org.joda.time.LocalDate localDate21 = property18.roundHalfCeilingCopy();
        int int22 = localDate21.getDayOfYear();
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 13 + "'", int22 == 13);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(99, 0, 99);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay(dateTimeZone3);
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property6 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtCurrentTime(dateTimeZone11);
        int int13 = instant8.compareTo((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime15 = dateTime12.withSecondOfMinute(0);
        org.joda.time.Instant instant16 = dateTime12.toInstant();
        org.joda.time.DateTime dateTime18 = dateTime12.plusMonths((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime12.toDateTime();
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays((int) (short) 1);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime23 = instant22.toMutableDateTime();
        mutableDateTime23.setSecondOfMinute((int) (byte) 1);
        mutableDateTime23.setSecondOfMinute(52);
        mutableDateTime23.setMillisOfSecond((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutableDateTime23.add(readablePeriod30);
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 'a', dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 'a', dateTimeZone37);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate35, (org.joda.time.ReadablePartial) localDate38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(1L, dateTimeZone41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight42, readableDuration43);
        org.joda.time.Duration duration45 = period39.toDurationTo((org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.Instant instant46 = instant32.minus((org.joda.time.ReadableDuration) duration45);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration45, 53221655);
        org.joda.time.DateTime dateTime50 = dateTime21.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (short) -1);
        org.joda.time.DateTime dateTime51 = dateTime4.minus((org.joda.time.ReadableDuration) duration45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime53 = dateTime51.withHourOfDay(53221283);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53221283 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale9.getDisplayCountry(locale11);
        java.lang.String str13 = locale9.getDisplayLanguage();
        java.lang.String str14 = locale9.toString();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ubbf8\uad6d" + "'", str12, "\ubbf8\uad6d");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "inglese" + "'", str13, "inglese");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "en_US" + "'", str14, "en_US");
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        mutableDateTime2.setSecondOfMinute((int) (byte) 1);
        mutableDateTime2.setSecondOfMinute(52);
        org.joda.time.DateTime dateTime7 = mutableDateTime2.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight17, readableDuration18);
        org.joda.time.Duration duration20 = period14.toDurationTo((org.joda.time.ReadableInstant) dateMidnight17);
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration20, 53221515);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, readableInstant23);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration20);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField27 = mutableDateTime26.getRoundingField();
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now();
        mutableDateTime28.setHourOfDay(11);
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime28.toMutableDateTime();
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType35 = periodType34.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 53221197, (long) (byte) 100, periodType34);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime26, (org.joda.time.ReadableInstant) mutableDateTime31, periodType34);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 'a', dateTimeZone40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = localDate43.toDateTimeAtCurrentTime(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(1L, dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight50.withField(dateTimeFieldType51, (int) 'a');
        org.joda.time.DateTime dateTime55 = dateTime45.withField(dateTimeFieldType51, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(1L, dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone61 = dateMidnight60.getZone();
        org.joda.time.DateTime dateTime62 = dateTime55.withZoneRetainFields(dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight63 = localDate41.toDateMidnight(dateTimeZone61);
        mutableDateTime0.setZone(dateTimeZone61);
        java.util.TimeZone timeZone65 = dateTimeZone61.toTimeZone();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNull(dateTimeField27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Tempo universale coordinato");
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight17, readableDuration18);
        org.joda.time.Duration duration20 = period14.toDurationTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.Instant instant21 = instant7.minus((org.joda.time.ReadableDuration) duration20);
        boolean boolean22 = dateMidnight5.isAfter((org.joda.time.ReadableInstant) instant7);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        int int33 = dateTimeZone31.getStandardOffset((long) 32769);
        java.util.Locale locale35 = java.util.Locale.US;
        java.lang.String str36 = dateTimeZone31.getShortName((long) 1970, locale35);
        org.joda.time.DateTime dateTime37 = dateMidnight25.toDateTime(dateTimeZone31);
        boolean boolean38 = instant7.isEqual((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime40 = instant39.toMutableDateTime();
        mutableDateTime40.setSecondOfMinute((int) (byte) 1);
        mutableDateTime40.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime40.year();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime40.era();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant7, (org.joda.time.ReadableInstant) mutableDateTime40);
        org.joda.time.Period period49 = org.joda.time.Period.parse("P8Y");
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 10);
        int int52 = mutablePeriod51.getWeeks();
        org.joda.time.PeriodType periodType53 = mutablePeriod51.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.months();
        boolean boolean55 = mutablePeriod51.isSupported(durationFieldType54);
        org.joda.time.Period period57 = period49.withField(durationFieldType54, 879);
        mutableDateTime40.add((org.joda.time.ReadablePeriod) period57);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(period57);
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight17, readableDuration18);
        org.joda.time.Duration duration20 = period14.toDurationTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.Instant instant21 = instant7.minus((org.joda.time.ReadableDuration) duration20);
        boolean boolean22 = dateMidnight5.isAfter((org.joda.time.ReadableInstant) instant7);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        int int33 = dateTimeZone31.getStandardOffset((long) 32769);
        java.util.Locale locale35 = java.util.Locale.US;
        java.lang.String str36 = dateTimeZone31.getShortName((long) 1970, locale35);
        org.joda.time.DateTime dateTime37 = dateMidnight25.toDateTime(dateTimeZone31);
        boolean boolean38 = instant7.isEqual((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime.Property property39 = dateTime37.era();
        int int40 = dateTime37.getDayOfYear();
        org.joda.time.DateTime.Property property41 = dateTime37.year();
        int int42 = property41.get();
        org.joda.time.DateTime dateTime43 = property41.roundCeilingCopy();
        org.joda.time.DateTime dateTime44 = property41.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime45 = property41.withMinimumValue();
        org.joda.time.DateTime dateTime47 = dateTime45.withDayOfMonth(9);
        org.joda.time.DateTime dateTime49 = dateTime45.plusHours(0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getWeeksInWeekYear();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = property4.addToCopy(18);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645454996169,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2035-02-21T14:48:46.372\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=49,SECOND=56,MILLISECOND=169,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        org.joda.time.Period period1 = org.joda.time.Period.hours(53221660);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3);
        int int5 = period4.size();
        java.lang.String str6 = period4.toString();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.Period period9 = period4.withFields((org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.setYears(51);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusMonths((int) (short) 100);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDate19.toDateTimeAtCurrentTime(dateTimeZone20);
        int int22 = instant17.compareTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.DateTimeField dateTimeField26 = localDate24.getField(1);
        java.lang.String str27 = dateTimeField26.getName();
        int int28 = instant17.get(dateTimeField26);
        org.joda.time.Instant instant30 = instant17.plus((long) 'a');
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, (org.joda.time.ReadableInstant) instant17);
        org.joda.time.Chronology chronology32 = instant17.getChronology();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.DateTimeField dateTimeField36 = localDate34.getField(1);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate39, (org.joda.time.ReadablePartial) localDate42);
        boolean boolean44 = localDate34.isEqual((org.joda.time.ReadablePartial) localDate42);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 'a', dateTimeZone52);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate50, (org.joda.time.ReadablePartial) localDate53);
        org.joda.time.LocalDate localDate56 = localDate50.withDayOfMonth(13);
        org.joda.time.Chronology chronology57 = localDate56.getChronology();
        mutablePeriod46.add((long) ' ', chronology57);
        org.joda.time.LocalDate localDate59 = localDate34.minus((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.Instant instant60 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime61 = instant60.toMutableDateTime();
        mutableDateTime61.setSecondOfMinute((int) (byte) 1);
        mutableDateTime61.setSecondOfMinute(52);
        org.joda.time.DateTime dateTime66 = mutableDateTime61.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((long) 'a', dateTimeZone68);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate((long) 'a', dateTimeZone71);
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate69, (org.joda.time.ReadablePartial) localDate72);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight(1L, dateTimeZone75);
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight76, readableDuration77);
        org.joda.time.Duration duration79 = period73.toDurationTo((org.joda.time.ReadableInstant) dateMidnight76);
        mutableDateTime61.add((org.joda.time.ReadableDuration) duration79, 53221515);
        mutablePeriod46.setPeriod((org.joda.time.ReadableDuration) duration79);
        long long83 = duration79.getMillis();
        org.joda.time.Instant instant84 = instant17.plus((org.joda.time.ReadableDuration) duration79);
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.LocalDate localDate87 = new org.joda.time.LocalDate((long) 'a', dateTimeZone86);
        org.joda.time.DateTimeZone dateTimeZone89 = null;
        org.joda.time.LocalDate localDate90 = new org.joda.time.LocalDate((long) 'a', dateTimeZone89);
        org.joda.time.Period period91 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate87, (org.joda.time.ReadablePartial) localDate90);
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = null;
        boolean boolean93 = localDate90.isSupported(dateTimeFieldType92);
        org.joda.time.Chronology chronology94 = localDate90.getChronology();
        org.joda.time.DurationField durationField95 = chronology94.minutes();
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration79, chronology94);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "monthOfYear" + "'", str27, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(durationField95);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute(3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = localDateTime4.getField((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.minusHours(971);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate localDate18 = localDate12.withDayOfMonth(13);
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(chronology19);
        org.joda.time.DateMidnight dateMidnight21 = localDate20.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(1L, dateTimeZone26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight27, readableDuration28);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType31 = periodType30.withSecondsRemoved();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight24, (org.joda.time.ReadableInstant) dateMidnight27, periodType31);
        org.joda.time.DateMidnight.Property property33 = dateMidnight24.year();
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.lang.String str35 = property33.getAsText(locale34);
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime37 = instant36.toMutableDateTime();
        mutableDateTime37.setSecondOfMinute((int) (byte) 1);
        mutableDateTime37.setSecondOfMinute(52);
        mutableDateTime37.setMillisOfSecond((int) ' ');
        long long44 = property33.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime37);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(1L, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone50 = dateMidnight49.getZone();
        mutableDateTime37.setZoneRetainFields(dateTimeZone50);
        long long53 = dateTimeZone50.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight54 = localDate20.toDateMidnight(dateTimeZone50);
        org.joda.time.LocalDate localDate56 = localDate20.plusMonths(46);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) 'a', dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) 'a', dateTimeZone64);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate62, (org.joda.time.ReadablePartial) localDate65);
        org.joda.time.LocalDate localDate68 = localDate62.withDayOfMonth(13);
        java.util.Locale locale70 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale70);
        java.util.Set<java.lang.String> strSet72 = locale70.getUnicodeLocaleAttributes();
        java.lang.String str73 = localDate62.toString("+00:00", locale70);
        java.lang.String str74 = dateTimeZone57.getName((long) 11, locale70);
        org.joda.time.Interval interval75 = localDate20.toInterval(dateTimeZone57);
        // The following exception was thrown during execution in test generation
        try {
            int int76 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDate20);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970" + "'", str35, "1970");
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-52L) + "'", long44 == (-52L));
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 5L + "'", long53 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "it");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00" + "'", str73, "+00:00");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00" + "'", str74, "+00:00");
        org.junit.Assert.assertNotNull(interval75);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withField(dateTimeFieldType9, (int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime3.withField(dateTimeFieldType9, (int) (short) 0);
        org.joda.time.DateTime dateTime15 = dateTime3.plusHours((int) (short) 1);
        int int16 = dateTime15.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property17 = dateTime15.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int19 = dateTime15.get(dateTimeFieldType18);
        boolean boolean21 = dateTime15.isAfter(1645454854107L);
        org.joda.time.DateTime dateTime23 = dateTime15.plusDays(14);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfCentury();
        org.joda.time.DateTime.Property property25 = dateTime23.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone32 = dateMidnight31.getZone();
        int int34 = dateTimeZone32.getStandardOffset((long) 32769);
        java.util.Locale locale36 = java.util.Locale.US;
        java.lang.String str37 = dateTimeZone32.getShortName((long) 1970, locale36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.lang.String str39 = locale36.getDisplayCountry(locale38);
        java.lang.String str40 = dateTime23.toString("de_DE", locale36);
        org.joda.time.DateTime dateTime42 = dateTime23.minusMonths((-292275054));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 56 + "'", int19 == 56);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ubbf8\uad6d" + "'", str39, "\ubbf8\uad6d");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "71_66Mon" + "'", str40, "71_66Mon");
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.minusDays((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.property(dateTimeFieldType9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusMinutes(464);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.minusWeeks(23);
        int int15 = localDateTime8.getEra();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        org.joda.time.Period period4 = new org.joda.time.Period(53281879, 53281180, 60, 282);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property13 = dateMidnight9.dayOfMonth();
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight9.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.withField(dateTimeFieldType22, (int) 'a');
        boolean boolean25 = dateMidnight16.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime6.withField(dateTimeFieldType22, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime6.minusSeconds(18);
        org.joda.time.Chronology chronology30 = localDateTime6.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.Chronology chronology32 = chronology30.withUTC();
        org.joda.time.DurationField durationField33 = chronology32.weeks();
        int int35 = durationField33.getValue(1645454955504L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2720 + "'", int35 == 2720);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 10);
        int int3 = mutablePeriod2.getWeeks();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay0.plus((org.joda.time.ReadablePeriod) mutablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, readableDuration8);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = period9.normalizedStandard(periodType10);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay4.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = dateMidnight17.getZone();
        int int20 = dateTimeZone18.getStandardOffset((long) 32769);
        java.util.Locale locale22 = java.util.Locale.US;
        java.lang.String str23 = dateTimeZone18.getShortName((long) 1970, locale22);
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.now(dateTimeZone18);
        org.joda.time.LocalTime.Property property25 = localTime24.millisOfDay();
        org.joda.time.LocalTime localTime27 = property25.setCopy(53221515);
        org.joda.time.LocalTime localTime29 = property25.addCopy(53221515);
        org.joda.time.LocalTime localTime31 = localTime29.withMillisOfDay(1961);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.minutes();
        java.lang.String str33 = periodType32.toString();
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay12, (org.joda.time.ReadablePartial) localTime29, periodType32);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay12.plusHours(44);
        org.joda.time.TimeOfDay.Property property37 = timeOfDay36.minuteOfHour();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PeriodType[Minutes]" + "'", str33, "PeriodType[Minutes]");
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight10 = dateTime9.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.withDayOfMonth((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTimeISO();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight4, (org.joda.time.ReadableInstant) dateMidnight12);
        boolean boolean16 = dateMidnight4.isAfter((long) 53281180);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str3 = dateTimeFieldType2.toString();
        int int4 = localDateTime0.get(dateTimeFieldType2);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = localDateTime0.withTime((int) (short) 100, 520, 53281183, 53221515);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 429 + "'", int1 == 429);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "weekyear" + "'", str3, "weekyear");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate9.withDayOfMonth(13);
        org.joda.time.Chronology chronology16 = localDate15.getChronology();
        int int17 = localDate5.compareTo((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate.Property property18 = localDate15.dayOfMonth();
        org.joda.time.LocalDate localDate19 = property18.roundFloorCopy();
        org.joda.time.LocalDate localDate20 = property18.roundCeilingCopy();
        org.joda.time.LocalDate localDate21 = property18.roundHalfCeilingCopy();
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.minusMillis(10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = timeOfDay25.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay25.plusMillis(2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = timeOfDay28.getFieldType((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate32 = localDate21.withField(dateTimeFieldType30, 889);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfHour' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        org.joda.time.Period period2 = new org.joda.time.Period(100L, (long) 53221515);
        int int3 = period2.size();
        org.joda.time.Period period5 = period2.plusMonths(0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Period period8 = period5.plusDays((int) (byte) 1);
        org.joda.time.Period period10 = period5.minusMillis((int) (short) 100);
        org.joda.time.Period period12 = period10.plusSeconds((int) '4');
        org.joda.time.Period period14 = period10.withMillis(4);
        java.lang.Class<?> wildcardClass15 = period14.getClass();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("T14:49:07.212");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"T14:49:07.212\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfYear();
        int int4 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMonths(53281361);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 10);
        int int2 = mutablePeriod1.getWeeks();
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime4 = instant3.toMutableDateTime();
        mutableDateTime4.setSecondOfMinute((int) (byte) 1);
        mutableDateTime4.setSecondOfMinute(52);
        org.joda.time.DateTime dateTime9 = mutableDateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, readableDuration20);
        org.joda.time.Duration duration22 = period16.toDurationTo((org.joda.time.ReadableInstant) dateMidnight19);
        mutableDateTime4.add((org.joda.time.ReadableDuration) duration22, 53221515);
        org.joda.time.Duration duration25 = duration22.toDuration();
        org.joda.time.Period period27 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod28 = period27.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 'a', dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 'a', dateTimeZone35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate33, (org.joda.time.ReadablePartial) localDate36);
        org.joda.time.LocalDate localDate39 = localDate33.withDayOfMonth(13);
        org.joda.time.Chronology chronology40 = localDate39.getChronology();
        mutablePeriod28.setPeriod((long) 10, (-599990L), chronology40);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((-1968L), chronology40);
        org.joda.time.DateTimeZone dateTimeZone43 = chronology40.getZone();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration22, chronology40);
        org.joda.time.DurationFieldType durationFieldType46 = mutablePeriod1.getFieldType(0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(durationFieldType46);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Period period8 = period5.plusDays((int) (byte) 1);
        org.joda.time.Period period10 = period5.minusMillis((int) (short) 100);
        org.joda.time.Weeks weeks11 = period10.toStandardWeeks();
        int int12 = period10.getYears();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 10);
        int int3 = mutablePeriod2.getWeeks();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay0.plus((org.joda.time.ReadablePeriod) mutablePeriod2);
        int int5 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay0.millisOfSecond();
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        int int9 = calendar8.getWeeksInWeekYear();
        int int11 = calendar8.getActualMinimum(4);
        org.joda.time.TimeOfDay timeOfDay12 = org.joda.time.TimeOfDay.fromCalendarFields(calendar8);
        int int13 = timeOfDay0.compareTo((org.joda.time.ReadablePartial) timeOfDay12);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay12.minusMillis(244);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 56 + "'", int5 == 56);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645454996885,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2035-02-21T14:48:46.372\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=49,SECOND=56,MILLISECOND=885,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeOfDay12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(timeOfDay15);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds(0);
        java.util.Date date9 = localDateTime6.toDate();
        java.lang.Object obj10 = date9.clone();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Mon Feb 21 14:49:56 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "Mon Feb 21 14:49:56 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "Mon Feb 21 14:49:56 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "Mon Feb 21 14:49:56 GMT+00:00 2022");
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfYear();
        org.joda.time.LocalDate.Property property5 = localDate1.era();
        org.joda.time.LocalDate localDate6 = property5.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusMonths((int) (byte) 10);
        org.joda.time.DateMidnight.Property property7 = dateMidnight4.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withDayOfWeek(53319979);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53319979 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = dateTime3.toLocalDate();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = dateMidnight14.getZone();
        org.joda.time.DateTime dateTime16 = dateTime8.toDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime3.withZoneRetainFields(dateTimeZone15);
        org.joda.time.DateTime.Property property18 = dateTime17.monthOfYear();
        org.joda.time.DateTime dateTime19 = property18.getDateTime();
        org.joda.time.DateTime dateTime21 = property18.addToCopy((long) 53221848);
        org.joda.time.DateTime dateTime23 = dateTime21.withMillisOfDay(53253508);
        org.joda.time.DateTime dateTime25 = dateTime21.plusSeconds(17);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime21.getZone();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight17, readableDuration18);
        org.joda.time.Duration duration20 = period14.toDurationTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.Instant instant21 = instant7.minus((org.joda.time.ReadableDuration) duration20);
        boolean boolean22 = dateMidnight5.isAfter((org.joda.time.ReadableInstant) instant7);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        int int33 = dateTimeZone31.getStandardOffset((long) 32769);
        java.util.Locale locale35 = java.util.Locale.US;
        java.lang.String str36 = dateTimeZone31.getShortName((long) 1970, locale35);
        org.joda.time.DateTime dateTime37 = dateMidnight25.toDateTime(dateTimeZone31);
        boolean boolean38 = instant7.isEqual((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime.Property property39 = dateTime37.era();
        int int40 = dateTime37.getDayOfYear();
        org.joda.time.DateTime.Property property41 = dateTime37.year();
        int int42 = property41.get();
        org.joda.time.DateTime dateTime43 = property41.roundCeilingCopy();
        org.joda.time.DateTime dateTime44 = property41.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime45 = property41.withMinimumValue();
        org.joda.time.DateTime dateTime47 = dateTime45.withDayOfMonth(9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime49 = dateTime45.minusDays(53221327);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -9223372017043200000 + -4598322652800000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setSecondOfMinute(52);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = dateMidnight17.getZone();
        org.joda.time.DateTime dateTime19 = localDate11.toDateTimeAtMidnight(dateTimeZone18);
        boolean boolean21 = dateTimeZone18.isStandardOffset((long) (byte) 10);
        mutableDateTime1.setZone(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime1.weekyear();
        org.joda.time.DurationField durationField25 = property24.getDurationField();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.Duration duration13 = period7.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Instant instant14 = instant0.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = localDate20.isSupported(dateTimeFieldType22);
        org.joda.time.Chronology chronology24 = localDate20.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.dayOfYear();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = dateTimeField26.getType();
        boolean boolean28 = instant14.isSupported(dateTimeFieldType27);
        org.joda.time.DateTime dateTime29 = instant14.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight32.minusDays((int) 'a');
        org.joda.time.DateTime dateTime36 = dateMidnight35.toDateTimeISO();
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 'a', dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate40, (org.joda.time.ReadablePartial) localDate43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(1L, dateTimeZone46);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight47, readableDuration48);
        org.joda.time.Duration duration50 = period44.toDurationTo((org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.Instant instant51 = instant37.minus((org.joda.time.ReadableDuration) duration50);
        boolean boolean52 = dateMidnight35.isAfter((org.joda.time.ReadableInstant) instant37);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(1L, dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(1L, dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone61 = dateMidnight60.getZone();
        int int63 = dateTimeZone61.getStandardOffset((long) 32769);
        java.util.Locale locale65 = java.util.Locale.US;
        java.lang.String str66 = dateTimeZone61.getShortName((long) 1970, locale65);
        org.joda.time.DateTime dateTime67 = dateMidnight55.toDateTime(dateTimeZone61);
        boolean boolean68 = instant37.isEqual((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime.Property property69 = dateTime67.era();
        int int70 = dateTime67.getDayOfYear();
        org.joda.time.DateTime.Property property71 = dateTime67.minuteOfDay();
        org.joda.time.Instant instant72 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime73 = instant72.toMutableDateTime();
        mutableDateTime73.setSecondOfMinute((int) (byte) 1);
        mutableDateTime73.setSecondOfMinute(52);
        org.joda.time.DateTime dateTime78 = mutableDateTime73.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate((long) 'a', dateTimeZone80);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.LocalDate localDate84 = new org.joda.time.LocalDate((long) 'a', dateTimeZone83);
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate81, (org.joda.time.ReadablePartial) localDate84);
        org.joda.time.DateTimeZone dateTimeZone87 = null;
        org.joda.time.DateMidnight dateMidnight88 = new org.joda.time.DateMidnight(1L, dateTimeZone87);
        org.joda.time.ReadableDuration readableDuration89 = null;
        org.joda.time.Period period90 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight88, readableDuration89);
        org.joda.time.Duration duration91 = period85.toDurationTo((org.joda.time.ReadableInstant) dateMidnight88);
        mutableDateTime73.add((org.joda.time.ReadableDuration) duration91, 53221515);
        org.joda.time.ReadableInstant readableInstant94 = null;
        org.joda.time.MutablePeriod mutablePeriod95 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration91, readableInstant94);
        org.joda.time.Period period96 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableDuration) duration91);
        org.joda.time.DateTime dateTime97 = dateTime29.minus((org.joda.time.ReadableDuration) duration91);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = dateMidnight16.getZone();
        org.joda.time.DateTime dateTime18 = localDate10.toDateTimeAtMidnight(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now(dateTimeZone17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter3.withZone(dateTimeZone17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 36);
        org.joda.time.Chronology chronology23 = dateTimeFormatter22.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.parse("53221102", dateTimeFormatter22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(chronology23);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setSecondOfMinute(52);
        org.joda.time.DateTime dateTime6 = mutableDateTime1.toDateTimeISO();
        int int7 = mutableDateTime1.getMillisOfSecond();
        boolean boolean8 = mutableDateTime1.isAfterNow();
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTime();
        mutableDateTime10.setSecondOfMinute((int) (byte) 1);
        mutableDateTime10.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime10.year();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime10.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
        mutableDateTime1.set(dateTimeFieldType17, 31);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime1.hourOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 164 + "'", int7 == 164);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.minusDays((int) '4');
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.hourOfDay();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.fromMillisOfDay((-1968L));
        int int12 = localTime11.getMillisOfSecond();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(18, 53221660, 53221515, 25);
        org.joda.time.LocalTime localTime18 = localTime11.minus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = dateMidnight26.getZone();
        int int29 = dateTimeZone27.getStandardOffset((long) 32769);
        java.util.Locale locale31 = java.util.Locale.US;
        java.lang.String str32 = dateTimeZone27.getShortName((long) 1970, locale31);
        org.joda.time.DateTime dateTime33 = dateMidnight21.toDateTime(dateTimeZone27);
        long long35 = dateTimeZone27.convertUTCToLocal((long) 971);
        org.joda.time.DateTime dateTime36 = localTime11.toDateTimeToday(dateTimeZone27);
        org.joda.time.LocalTime localTime38 = localTime11.plusHours(1970);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localTime38);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 971L + "'", long35 == 971L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localTime38);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((int) (byte) 100, 53221515, (int) (byte) 100, 53221161, 3, (int) 'a', (int) (byte) 100, 8);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay19.plus((org.joda.time.ReadablePeriod) mutablePeriod28);
        java.lang.String str30 = yearMonthDay29.toString();
        org.joda.time.YearMonthDay.Property property31 = yearMonthDay29.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay29.plusDays(13);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusYears(13);
        int int37 = localDateTime36.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withMillisOfSecond(3);
        int int40 = localDateTime36.size();
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType42 = periodType41.withSecondsRemoved();
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now();
        int int44 = localDateTime43.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str46 = dateTimeFieldType45.toString();
        int int47 = localDateTime43.get(dateTimeFieldType45);
        boolean boolean48 = periodType42.equals((java.lang.Object) int47);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.centuries();
        int int50 = periodType42.indexOf(durationFieldType49);
        boolean boolean51 = localDateTime36.isSupported(durationFieldType49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay33.withFieldAdded(durationFieldType49, 17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'centuries' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "4582910-11-03" + "'", str30, "4582910-11-03");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(localDateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 622 + "'", int44 == 622);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "weekyear" + "'", str46, "weekyear");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        int int7 = localDateTime6.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMillis(17);
        java.util.Date date10 = localDateTime9.toDate();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.weekOfWeekyear();
        int int12 = localDateTime9.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withDayOfWeek(709);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 709 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Mon Feb 21 14:49:57 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53397623 + "'", int12 == 53397623);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate9.withDayOfMonth(13);
        org.joda.time.Chronology chronology16 = localDate15.getChronology();
        int int17 = localDate5.compareTo((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate.Property property18 = localDate15.dayOfMonth();
        org.joda.time.LocalDate localDate19 = property18.roundFloorCopy();
        org.joda.time.LocalDate localDate20 = property18.roundCeilingCopy();
        java.lang.String str21 = property18.getAsString();
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "13" + "'", str21, "13");
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        mutableDateTime1.setMillis((long) ' ');
        mutableDateTime1.setMillisOfDay(53221235);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = localDate5.minusDays(100);
        org.joda.time.DateMidnight dateMidnight12 = localDate11.toDateMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.withDayOfWeek((int) 'x');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight12);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        org.joda.time.DateTime dateTime19 = dateTime9.withField(dateTimeFieldType15, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = dateMidnight24.getZone();
        org.joda.time.DateTime dateTime26 = dateTime19.withZoneRetainFields(dateTimeZone25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(2012, 889, 53281119, 721437, 53341267, 532211, dateTimeZone25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 721437 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        int int4 = mutableDateTime1.getMillisOfDay();
        mutableDateTime1.setDayOfYear((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17);
        org.joda.time.Duration duration19 = period13.toDurationTo((org.joda.time.ReadableInstant) dateMidnight16);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.roundHalfCeiling();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.weekOfWeekyear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53341809 + "'", int4 == 53341809);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        int int9 = localDate5.getWeekyear();
        org.joda.time.LocalDate localDate11 = localDate5.plusYears(53221555);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = localDate5.withDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfYear();
        org.joda.time.LocalDate localDate5 = property4.roundHalfFloorCopy();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        int int8 = localDate7.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime10.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime10.weekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTimeAtCurrentTime(dateTimeZone17);
        int int19 = instant14.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime21 = dateTime18.withSecondOfMinute(0);
        org.joda.time.Instant instant22 = dateTime18.toInstant();
        org.joda.time.DateTime dateTime24 = dateTime18.plusMonths((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime18.toDateTime();
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays((int) (short) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime29 = instant28.toMutableDateTime();
        mutableDateTime29.setSecondOfMinute((int) (byte) 1);
        mutableDateTime29.setSecondOfMinute(52);
        mutableDateTime29.setMillisOfSecond((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutableDateTime29.add(readablePeriod36);
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 'a', dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 'a', dateTimeZone43);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate41, (org.joda.time.ReadablePartial) localDate44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(1L, dateTimeZone47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight48, readableDuration49);
        org.joda.time.Duration duration51 = period45.toDurationTo((org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.Instant instant52 = instant38.minus((org.joda.time.ReadableDuration) duration51);
        mutableDateTime29.add((org.joda.time.ReadableDuration) duration51, 53221655);
        org.joda.time.DateTime dateTime56 = dateTime27.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (short) -1);
        org.joda.time.DateTime dateTime57 = dateTime10.minus((org.joda.time.ReadableDuration) duration51);
        int int58 = property4.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.minusDays((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.property(dateTimeFieldType9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusMinutes(464);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.minusWeeks(23);
        org.joda.time.LocalDateTime.Property property15 = localDateTime8.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime8.withDayOfWeek(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfYear();
        org.joda.time.LocalDate localDate5 = property4.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) localDate5, chronology6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDate");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3);
        int int5 = period4.size();
        java.lang.String str6 = period4.toString();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.Period period9 = period4.withField(durationFieldType7, 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate localDate18 = localDate12.withDayOfMonth(13);
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        org.joda.time.DurationField durationField21 = durationFieldType7.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekyear();
        org.joda.time.DateMidnight dateMidnight23 = org.joda.time.DateMidnight.now(chronology19);
        org.joda.time.DateTimeField dateTimeField24 = chronology19.minuteOfHour();
        java.lang.String str26 = dateTimeField24.getAsShortText(1645454910418L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "48" + "'", str26, "48");
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(0, (int) (short) -1);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone4.observesDaylightTime();
        java.util.Calendar.Builder builder6 = builder3.setTimeZone(timeZone4);
        int int7 = timeZone4.getRawOffset();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        int int3 = localDateTime2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str5 = dateTimeFieldType4.toString();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.property(dateTimeFieldType4);
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.util.Locale locale8 = java.util.Locale.US;
        int int9 = dateTimeField7.getMaximumTextLength(locale8);
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        java.util.Locale locale15 = new java.util.Locale("gen", "8 Jun 150344 01:10:11 GMT");
        java.lang.String str16 = locale12.getDisplayName(locale15);
        java.lang.String str17 = dateTimeField7.getAsText(2678400000L, locale15);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale15);
        java.lang.String str19 = locale15.getScript();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "weekyear" + "'", str5, "weekyear");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertEquals(locale15.toString(), "gen_8 JUN 150344 01:10:11 GMT");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English" + "'", str16, "English");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970" + "'", str17, "1970");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645454998032,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2035-02-21T14:48:46.372\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=49,SECOND=58,MILLISECOND=32,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy(10368000047L);
        java.lang.String str6 = property3.getName();
        org.joda.time.LocalDateTime localDateTime8 = property3.addWrapFieldToCopy(2035);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.secondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "dayOfYear" + "'", str6, "dayOfYear");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(53221684);
        org.joda.time.ReadablePartial readablePartial7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = dateTimeFormatter2.print(readablePartial7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        org.joda.time.Period period1 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod2 = period1.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate localDate13 = localDate7.withDayOfMonth(13);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        mutablePeriod2.setPeriod((long) 10, (-599990L), chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period17 = new org.joda.time.Period((java.lang.Object) 1645401600464L, chronology14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 100);
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.Chronology chronology7 = timeOfDay6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfHalfday();
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale11);
        java.util.Locale locale13 = locale11.stripExtensions();
        java.lang.String str14 = dateTimeField9.getAsText(0L, locale11);
        java.lang.String str15 = locale11.getLanguage();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "it" + "'", str15, "it");
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((int) (byte) 100, 53221515, (int) (byte) 100, 53221161, 3, (int) 'a', (int) (byte) 100, 8);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay19.plus((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay19.withDayOfMonth(4);
        int int32 = yearMonthDay19.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusYears(13);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withSecondOfMinute(3);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.dayOfYear();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.year();
        org.joda.time.LocalDateTime localDateTime40 = property39.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime41 = property39.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            int int42 = yearMonthDay19.compareTo((org.joda.time.ReadablePartial) localDateTime41);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withField(dateTimeFieldType9, (int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime3.withField(dateTimeFieldType9, (int) (short) 0);
        org.joda.time.DateTime.Property property14 = dateTime3.hourOfDay();
        org.joda.time.DateTime dateTime15 = property14.getDateTime();
        org.joda.time.DateTime dateTime16 = property14.roundFloorCopy();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDate19.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 'a', dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 'a', dateTimeZone26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate24, (org.joda.time.ReadablePartial) localDate27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight31, readableDuration32);
        org.joda.time.Duration duration34 = period28.toDurationTo((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(1L, dateTimeZone39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight40, readableDuration41);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType44 = periodType43.withSecondsRemoved();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight37, (org.joda.time.ReadableInstant) dateMidnight40, periodType44);
        org.joda.time.PeriodType periodType46 = periodType44.withWeeksRemoved();
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableDuration) duration34, periodType44);
        org.joda.time.Interval interval48 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadableDuration) duration34);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight53 = dateTime52.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(1L, dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone59 = dateMidnight58.getZone();
        org.joda.time.DateTime dateTime60 = dateTime52.toDateTime(dateTimeZone59);
        org.joda.time.Interval interval61 = interval48.withEnd((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration62 = interval48.toDuration();
        long long63 = interval48.getStartMillis();
        java.util.Calendar calendar64 = java.util.Calendar.getInstance();
        boolean boolean65 = interval48.equals((java.lang.Object) calendar64);
        org.joda.time.DateTime dateTime66 = interval48.getEnd();
        long long67 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime66);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(duration62);
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1645454998709L + "'", long63 == 1645454998709L);
        org.junit.Assert.assertNotNull(calendar64);
// flaky:         org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=1645454998709,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2035-02-21T14:48:46.372\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=49,SECOND=58,MILLISECOND=709,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Seconds seconds7 = period5.toStandardSeconds();
        int int8 = period5.size();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfYear();
        org.joda.time.LocalDate localDate5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate.Property property6 = localDate5.monthOfYear();
        org.joda.time.LocalDate localDate7 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate localDate16 = localDate10.withDayOfMonth(13);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale18);
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str21 = localDate10.toString("+00:00", locale18);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.minusDays((int) 'a');
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.lang.String str31 = locale30.toLanguageTag();
        java.lang.String str32 = dateMidnight25.toString("+00:00", locale30);
        java.lang.String str33 = locale22.getDisplayVariant(locale30);
        java.lang.String str34 = locale18.getDisplayLanguage(locale30);
        java.lang.String str35 = locale30.getLanguage();
        java.util.Locale locale36 = java.util.Locale.JAPAN;
        java.lang.String str37 = locale30.getDisplayScript(locale36);
        int int38 = property6.getMaximumTextLength(locale36);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "en" + "'", str31, "en");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Italian" + "'", str34, "Italian");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "en" + "'", str35, "en");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(8640000000L, (-1L));
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        java.util.Date date6 = new java.util.Date((int) (byte) -1, 32769, 4, (int) (byte) 1, (int) (short) 10, 11);
        date6.setDate(53221197);
        int int9 = date6.getTimezoneOffset();
        date6.setTime((long) 53341770);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 14:49:01 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        int int8 = dateTimeZone6.getStandardOffset((long) 32769);
        java.util.Locale locale10 = java.util.Locale.US;
        java.lang.String str11 = dateTimeZone6.getShortName((long) 1970, locale10);
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.now(dateTimeZone6);
        org.joda.time.LocalTime localTime14 = localTime12.withSecondOfMinute(0);
        int int15 = localTime12.getSecondOfMinute();
        org.joda.time.Chronology chronology16 = localTime12.getChronology();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) '#', chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.minuteOfDay();
        long long21 = dateTimeField18.addWrapField((long) 120, 191);
        boolean boolean22 = dateTimeField18.isLenient();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 58 + "'", int15 == 58);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 11460120L + "'", long21 == 11460120L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        int int3 = localDateTime2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str5 = dateTimeFieldType4.toString();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.property(dateTimeFieldType4);
        org.joda.time.Chronology chronology7 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withYearOfCentury(39);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.monthOfYear();
        int int11 = localDateTime9.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "weekyear" + "'", str5, "weekyear");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21 + "'", int11 == 21);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        int int0 = org.joda.time.MutableDateTime.ROUND_NONE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 0 + "'", int0 == 0);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 53281067);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 53221102);
        int int2 = localTime1.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.DurationField durationField12 = chronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.secondOfDay();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType16 = periodType15.withHoursRemoved();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = dateMidnight22.getZone();
        int int25 = dateTimeZone23.getStandardOffset((long) 32769);
        java.util.Locale locale27 = java.util.Locale.US;
        java.lang.String str28 = dateTimeZone23.getShortName((long) 1970, locale27);
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.now(dateTimeZone23);
        org.joda.time.LocalTime localTime31 = localTime29.withSecondOfMinute(0);
        int int32 = localTime29.getSecondOfMinute();
        org.joda.time.Chronology chronology33 = localTime29.getChronology();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) '#', chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.minuteOfDay();
        org.joda.time.DurationField durationField36 = chronology33.years();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 53281879, periodType15, chronology33);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTimeAtCurrentTime(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 'a', dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 'a', dateTimeZone47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate45, (org.joda.time.ReadablePartial) localDate48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(1L, dateTimeZone51);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight52, readableDuration53);
        org.joda.time.Duration duration55 = period49.toDurationTo((org.joda.time.ReadableInstant) dateMidnight52);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(1L, dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(1L, dateTimeZone60);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight61, readableDuration62);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType65 = periodType64.withSecondsRemoved();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight58, (org.joda.time.ReadableInstant) dateMidnight61, periodType65);
        org.joda.time.PeriodType periodType67 = periodType65.withWeeksRemoved();
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration55, periodType65);
        org.joda.time.Interval interval69 = new org.joda.time.Interval(readableInstant38, (org.joda.time.ReadableDuration) duration55);
        org.joda.time.Chronology chronology70 = interval69.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period72 = new org.joda.time.Period((java.lang.Object) dateTimeField13, periodType15, chronology70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.field.PreciseDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 59 + "'", int32 == 59);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        int int12 = dateTimeZone10.getStandardOffset((long) 32769);
        java.util.Locale locale14 = java.util.Locale.US;
        java.lang.String str15 = dateTimeZone10.getShortName((long) 1970, locale14);
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.now(dateTimeZone10);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone10);
        long long20 = dateTimeZone10.convertLocalToUTC((long) 1961, false);
        java.lang.String str21 = dateTimeZone10.toString();
        long long23 = dateTimeZone10.nextTransition((long) (byte) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withZone(dateTimeZone10);
        java.io.Writer writer25 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer25, (long) 53281199);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1961L + "'", long20 == 1961L);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) dateMidnight23, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration17, periodType27);
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((java.lang.Object) interval31);
        org.joda.time.Duration duration34 = interval31.toDuration();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 'a', dateTimeZone44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate42, (org.joda.time.ReadablePartial) localDate45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(1L, dateTimeZone48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight49, readableDuration50);
        org.joda.time.Duration duration52 = period46.toDurationTo((org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(1L, dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(1L, dateTimeZone57);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight58, readableDuration59);
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType62 = periodType61.withSecondsRemoved();
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight55, (org.joda.time.ReadableInstant) dateMidnight58, periodType62);
        org.joda.time.PeriodType periodType64 = periodType62.withWeeksRemoved();
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration52, periodType62);
        org.joda.time.Interval interval66 = new org.joda.time.Interval(readableInstant35, (org.joda.time.ReadableDuration) duration52);
        org.joda.time.Interval interval67 = interval31.withDurationAfterStart((org.joda.time.ReadableDuration) duration52);
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod(18, 53221660, 53221515, 25);
        org.joda.time.Interval interval73 = interval31.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod72);
        org.joda.time.DateTime dateTime74 = interval73.getEnd();
        org.joda.time.DateTime dateTime76 = dateTime74.minusMinutes(53281803);
        org.joda.time.DateTime dateTime78 = dateTime74.plusYears(53221283);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        org.joda.time.DateMidnight dateMidnight5 = property3.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusYears(13);
        int int10 = localDateTime9.getDayOfWeek();
        int int11 = localDateTime9.getMillisOfSecond();
        org.joda.time.DateTime dateTime12 = localDateTime9.toDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withYearOfEra(53221655);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusYears(36);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight21, readableDuration22);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withMillisOfSecond(938);
        int[] intArray29 = localDateTime26.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray31 = dateTimeField6.addWrapField((org.joda.time.ReadablePartial) localDateTime9, 53221777, intArray29, 53281528);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53221777");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 213 + "'", int11 == 213);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(intArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[2022, 2, 21, 53399213]");
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        org.joda.time.Period period0 = new org.joda.time.Period();
        org.joda.time.Period period2 = period0.minusMonths((int) '#');
        org.joda.time.Period period4 = period0.minusDays((int) 'a');
        org.joda.time.Period period6 = period4.minusMillis(52);
        org.joda.time.Period period8 = period4.plusMillis(39);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Period period10 = period8.plus(readablePeriod9);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property13 = dateMidnight9.dayOfMonth();
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight9.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.withField(dateTimeFieldType22, (int) 'a');
        boolean boolean25 = dateMidnight16.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime6.withField(dateTimeFieldType22, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime6.minusSeconds(18);
        org.joda.time.Chronology chronology30 = localDateTime6.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.Chronology chronology32 = chronology30.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.era();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfYear();
        org.joda.time.DurationField durationField11 = dateTimeField10.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property18 = dateMidnight14.dayOfMonth();
        org.joda.time.Period period19 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod20 = period19.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight14.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.withField(dateTimeFieldType27, (int) 'a');
        boolean boolean30 = dateMidnight21.isSupported(dateTimeFieldType27);
        org.joda.time.YearMonthDay yearMonthDay31 = dateMidnight21.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = dateMidnight39.getZone();
        int int42 = dateTimeZone40.getStandardOffset((long) 32769);
        java.util.Locale locale44 = java.util.Locale.US;
        java.lang.String str45 = dateTimeZone40.getShortName((long) 1970, locale44);
        org.joda.time.DateTime dateTime46 = dateMidnight34.toDateTime(dateTimeZone40);
        org.joda.time.Interval interval47 = yearMonthDay31.toInterval(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 'a', dateTimeZone52);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate50, (org.joda.time.ReadablePartial) localDate53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(1L, dateTimeZone56);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight57.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone60 = dateMidnight59.getZone();
        org.joda.time.DateTime dateTime61 = localDate53.toDateTimeAtMidnight(dateTimeZone60);
        boolean boolean63 = dateTimeZone60.isStandardOffset((long) (byte) 10);
        org.joda.time.LocalDate localDate64 = org.joda.time.LocalDate.now(dateTimeZone60);
        org.joda.time.DateTime dateTime65 = yearMonthDay31.toDateTimeAtMidnight(dateTimeZone60);
        int int66 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay31);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.monthOfYear();
        org.joda.time.Period period12 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod13 = period12.toMutablePeriod();
        org.joda.time.Weeks weeks14 = period12.toStandardWeeks();
        int[] intArray17 = chronology9.get((org.joda.time.ReadablePeriod) period12, (long) 53221394, 29414L);
        org.joda.time.DateTimeField dateTimeField18 = chronology9.hourOfHalfday();
        long long21 = dateTimeField18.getDifferenceAsLong((long) 285, 663437L);
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now();
        int int23 = localDate22.getDayOfYear();
        org.joda.time.LocalDate localDate25 = localDate22.withYear(953);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight31 = dateTime30.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = dateMidnight36.getZone();
        org.joda.time.DateTime dateTime38 = dateTime30.toDateTime(dateTimeZone37);
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay(dateTimeZone37);
        int[] intArray40 = yearMonthDay39.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray42 = dateTimeField18.addWrapField((org.joda.time.ReadablePartial) localDate22, 135, intArray40, 142);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 135");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 0, -14, -46, -31, -980]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[2022, 2, 21]");
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime14 = localTime11.withMillisOfDay(18);
        org.joda.time.LocalTime localTime16 = localTime14.minusMinutes(32770);
        org.joda.time.LocalTime.Property property17 = localTime16.hourOfDay();
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime19 = instant18.toMutableDateTime();
        mutableDateTime19.setSecondOfMinute((int) (byte) 1);
        int int22 = mutableDateTime19.getMillisOfDay();
        int int23 = mutableDateTime19.getHourOfDay();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime19.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.roundCeiling();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 'a', dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 'a', dateTimeZone32);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate30, (org.joda.time.ReadablePartial) localDate33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = localDate33.isSupported(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = localDate33.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.minutes();
        java.lang.String str39 = chronology37.toString();
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) 6, chronology37);
        org.joda.time.DateTimeField dateTimeField41 = chronology37.era();
        mutableDateTime26.setChronology(chronology37);
        org.joda.time.DurationField durationField43 = chronology37.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((java.lang.Object) property17, chronology37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53341324 + "'", int22 == 53341324);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 14 + "'", int23 == 14);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField43);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.LocalDate localDate20 = localDate14.withDayOfMonth(13);
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        int int22 = localDate10.compareTo((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate.Property property23 = localDate20.dayOfMonth();
        org.joda.time.LocalDate localDate24 = property23.roundFloorCopy();
        org.joda.time.LocalDate localDate25 = property23.roundCeilingCopy();
        org.joda.time.LocalDate localDate26 = property23.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.minusDays((int) 'a');
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight34, readableDuration35);
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime38 = instant37.toMutableDateTime();
        mutableDateTime38.setSecondOfMinute((int) (byte) 1);
        mutableDateTime38.setSecondOfMinute(52);
        org.joda.time.DateTime dateTime43 = mutableDateTime38.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 'a', dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 'a', dateTimeZone48);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate46, (org.joda.time.ReadablePartial) localDate49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(1L, dateTimeZone52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight53, readableDuration54);
        org.joda.time.Duration duration56 = period50.toDurationTo((org.joda.time.ReadableInstant) dateMidnight53);
        mutableDateTime38.add((org.joda.time.ReadableDuration) duration56, 53221515);
        mutableDateTime38.addHours(53221235);
        mutableDateTime38.add(1645454847523L);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight(1L, dateTimeZone64);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.minusMonths((int) (byte) 10);
        org.joda.time.DateMidnight.Property property70 = dateMidnight67.era();
        org.joda.time.DateMidnight dateMidnight71 = property70.roundHalfCeilingCopy();
        mutablePeriod36.setPeriod((org.joda.time.ReadableInstant) mutableDateTime38, (org.joda.time.ReadableInstant) dateMidnight71);
        org.joda.time.LocalDate localDate73 = localDate26.minus((org.joda.time.ReadablePeriod) mutablePeriod36);
        // The following exception was thrown during execution in test generation
        try {
            int int74 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDate73);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(localDate73);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) dateMidnight23, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration17, periodType27);
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = localDate33.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight36 = dateTime35.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(1L, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = dateMidnight41.getZone();
        org.joda.time.DateTime dateTime43 = dateTime35.toDateTime(dateTimeZone42);
        boolean boolean44 = interval31.contains((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDate localDate45 = dateTime35.toLocalDate();
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra(212);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 'a', dateTimeZone52);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate50, (org.joda.time.ReadablePartial) localDate53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        boolean boolean56 = localDate53.isSupported(dateTimeFieldType55);
        org.joda.time.Chronology chronology57 = localDate53.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.minutes();
        org.joda.time.DurationField durationField59 = chronology57.millis();
        long long62 = durationField59.subtract((long) 2, (long) 1970);
        org.joda.time.DurationFieldType durationFieldType63 = durationField59.getType();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((long) 'a', dateTimeZone68);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate((long) 'a', dateTimeZone71);
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate69, (org.joda.time.ReadablePartial) localDate72);
        org.joda.time.LocalDate localDate75 = localDate69.withDayOfMonth(13);
        org.joda.time.Chronology chronology76 = localDate75.getChronology();
        mutablePeriod65.add((long) ' ', chronology76);
        boolean boolean78 = durationFieldType63.isSupported(chronology76);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate80 = localDate45.withFieldAdded(durationFieldType63, 53221766);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millis' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1968L) + "'", long62 == (-1968L));
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        java.util.Date date3 = new java.util.Date(26, 178, 42);
        java.lang.String str4 = date3.toGMTString();
        date3.setMinutes(53221796);
        java.util.Date date13 = new java.util.Date((int) (byte) -1, 32769, 4, (int) (byte) 1, (int) (short) 10, 11);
        date13.setHours((int) (short) -1);
        date13.setYear((-143999));
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.fromDateFields(date13);
        boolean boolean19 = date3.before(date13);
        java.lang.Object obj20 = date13.clone();
        org.junit.Assert.assertEquals(date3.toString(), "Wed Feb 19 13:56:00 GMT+00:00 2042");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "12 Dec 1940 00:00:00 GMT" + "'", str4, "12 Dec 1940 00:00:00 GMT");
        org.junit.Assert.assertEquals(date13.toString(), "Mon Oct 03 23:10:11 GMT+00:00 142100");
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "Mon Oct 03 23:10:11 GMT+00:00 142100");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "Mon Oct 03 23:10:11 GMT+00:00 142100");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "Mon Oct 03 23:10:11 GMT+00:00 142100");
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(111);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDayOfMonth((int) (short) 1);
        int int7 = dateMidnight4.getWeekyear();
        java.lang.String str9 = dateMidnight4.toString("+00:00");
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate localDate21 = localDate15.withDayOfMonth(13);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        mutablePeriod11.add((long) ' ', chronology22);
        org.joda.time.DurationField durationField24 = chronology22.weekyears();
        org.joda.time.DateTime dateTime25 = dateMidnight4.toDateTime(chronology22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = localDate27.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight34.withField(dateTimeFieldType35, (int) 'a');
        org.joda.time.DateTime dateTime39 = dateTime29.withField(dateTimeFieldType35, (int) (short) 0);
        org.joda.time.DateTime dateTime41 = dateTime29.plusHours((int) (short) 1);
        int int42 = dateTime41.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property43 = dateTime41.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int45 = dateTime41.get(dateTimeFieldType44);
        org.joda.time.DateTime dateTime47 = dateTime41.plusSeconds(464);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 'a', dateTimeZone52);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate50, (org.joda.time.ReadablePartial) localDate53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        boolean boolean56 = localDate53.isSupported(dateTimeFieldType55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.Interval interval58 = localDate53.toInterval(dateTimeZone57);
        java.lang.String str59 = interval58.toString();
        org.joda.time.Chronology chronology60 = interval58.getChronology();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate(chronology61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = localDate62.toDateTimeAtCurrentTime(dateTimeZone63);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((long) 'a', dateTimeZone66);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((long) 'a', dateTimeZone69);
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate67, (org.joda.time.ReadablePartial) localDate70);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight(1L, dateTimeZone73);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight74, readableDuration75);
        org.joda.time.Duration duration77 = period71.toDurationTo((org.joda.time.ReadableInstant) dateMidnight74);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateMidnight dateMidnight80 = new org.joda.time.DateMidnight(1L, dateTimeZone79);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateMidnight dateMidnight83 = new org.joda.time.DateMidnight(1L, dateTimeZone82);
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight83, readableDuration84);
        org.joda.time.PeriodType periodType86 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType87 = periodType86.withSecondsRemoved();
        org.joda.time.Period period88 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight80, (org.joda.time.ReadableInstant) dateMidnight83, periodType87);
        org.joda.time.PeriodType periodType89 = periodType87.withWeeksRemoved();
        org.joda.time.Period period90 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableDuration) duration77, periodType87);
        org.joda.time.Interval interval91 = interval58.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration77);
        org.joda.time.DateTime dateTime92 = dateTime41.plus((org.joda.time.ReadableDuration) duration77);
        org.joda.time.DateMidnight dateMidnight93 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration77);
        org.joda.time.LocalDate localDate94 = dateMidnight4.toLocalDate();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 59 + "'", int45 == 59);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str59, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateMidnight93);
        org.junit.Assert.assertNotNull(localDate94);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        long long7 = durationField4.getDifferenceAsLong(100L, (long) 100);
        long long10 = durationField4.add((long) (byte) 100, 53221515);
        long long12 = durationField4.getValueAsLong((long) 1970);
        long long15 = durationField4.getMillis((int) (short) 100, 1645454853747L);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = durationField4.add((long) 26, 98727290679120000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 98727290679120000 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 4598338896000100L + "'", long10 == 4598338896000100L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 8640000000L + "'", long15 == 8640000000L);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(53221161, 804, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 804 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        org.joda.time.Chronology chronology16 = localDate12.getChronology();
        org.joda.time.LocalDate localDate18 = localDate12.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = localDate18.getFieldType(1);
        org.joda.time.DateMidnight.Property property21 = dateMidnight2.property(dateTimeFieldType20);
        int int22 = dateMidnight2.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight2.withMillis((-599990L));
        org.joda.time.Interval interval25 = dateMidnight2.toInterval();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate28, (org.joda.time.ReadablePartial) localDate31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        boolean boolean34 = localDate31.isSupported(dateTimeFieldType33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Interval interval36 = localDate31.toInterval(dateTimeZone35);
        java.lang.String str37 = interval36.toString();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 'a', dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate40, (org.joda.time.ReadablePartial) localDate43);
        org.joda.time.Period period46 = period44.plusYears(8);
        org.joda.time.Interval interval47 = interval36.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period46);
        long long48 = interval36.getStartMillis();
        long long49 = interval36.getStartMillis();
        boolean boolean50 = interval25.overlaps((org.joda.time.ReadableInterval) interval36);
        org.joda.time.Interval interval52 = interval36.withStartMillis(0L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str37, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(interval52);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeField dateTimeField3 = localDate1.getField(1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        boolean boolean11 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate localDate23 = localDate17.withDayOfMonth(13);
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        mutablePeriod13.add((long) ' ', chronology24);
        org.joda.time.LocalDate localDate26 = localDate1.minus((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime28 = instant27.toMutableDateTime();
        mutableDateTime28.setSecondOfMinute((int) (byte) 1);
        mutableDateTime28.setSecondOfMinute(52);
        org.joda.time.DateTime dateTime33 = mutableDateTime28.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 'a', dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate36, (org.joda.time.ReadablePartial) localDate39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(1L, dateTimeZone42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight43, readableDuration44);
        org.joda.time.Duration duration46 = period40.toDurationTo((org.joda.time.ReadableInstant) dateMidnight43);
        mutableDateTime28.add((org.joda.time.ReadableDuration) duration46, 53221515);
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Instant instant50 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime51 = instant50.toMutableDateTime();
        mutableDateTime51.setSecondOfMinute((int) (byte) 1);
        mutableDateTime51.setSecondOfMinute(52);
        org.joda.time.DateTime dateTime56 = mutableDateTime51.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) 'a', dateTimeZone58);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) 'a', dateTimeZone61);
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate59, (org.joda.time.ReadablePartial) localDate62);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(1L, dateTimeZone65);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight66, readableDuration67);
        org.joda.time.Duration duration69 = period63.toDurationTo((org.joda.time.ReadableInstant) dateMidnight66);
        mutableDateTime51.add((org.joda.time.ReadableDuration) duration69, 53221515);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration69, readableInstant72);
        boolean boolean74 = duration46.isLongerThan((org.joda.time.ReadableDuration) duration69);
        java.lang.String str75 = duration46.toString();
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "PT0S" + "'", str75, "PT0S");
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        org.joda.time.Period period1 = org.joda.time.Period.days(53221930);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateTime dateTime6 = dateTime3.minus(2678400000L);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillis(0L);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTime8.withDayOfYear(53281199);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53281199 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        org.joda.time.DateMidnight.Property property11 = dateMidnight2.year();
        long long12 = dateMidnight2.getMillis();
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        java.util.Calendar.Builder builder5 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder8 = builder5.set(0, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight13.getZone();
        int int16 = dateTimeZone14.getStandardOffset((long) 32769);
        java.util.Locale locale18 = java.util.Locale.US;
        java.lang.String str19 = dateTimeZone14.getShortName((long) 1970, locale18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale18.getDisplayCountry(locale20);
        java.util.Calendar.Builder builder22 = builder5.setLocale(locale20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withLocale(locale20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter23.withDefaultYear(53221504);
        java.util.Locale locale26 = dateTimeFormatter23.getLocale();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(locale26);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ubbf8\uad6d" + "'", str21, "\ubbf8\uad6d");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1645454999991,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2035-02-21T14:48:46.372\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=49,SECOND=59,MILLISECOND=991,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53281368, 44391);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 44391");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder1.addUnicodeLocaleAttribute("gregory");
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.lang.String str7 = locale5.getISO3Country();
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.getDefault(category8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone10.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone10);
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale13);
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone10, locale13);
        java.util.Locale.setDefault(category8, locale13);
        java.lang.String str18 = locale5.getDisplayVariant(locale13);
        java.util.Locale.Builder builder19 = builder4.setLocale(locale5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder19.setExtension('x', "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=53221147,MONTH=4,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=15,MINUTE=47,SECOND=53221,MILLISECOND=387,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=53221147,MONTH=4,WEEK [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "cinese" + "'", str6, "cinese");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CHN" + "'", str7, "CHN");
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645455000043,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2035-02-21T14:48:46.372\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=0,MILLISECOND=43,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.getDayOfYear();
        org.joda.time.LocalDate.Property property3 = localDate1.yearOfCentury();
        org.joda.time.LocalDate localDate5 = property3.addToCopy(596);
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod7 = period6.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate localDate18 = localDate12.withDayOfMonth(13);
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        mutablePeriod7.setPeriod((long) 10, (-599990L), chronology19);
        mutablePeriod7.setWeeks(2022);
        org.joda.time.Period period23 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod24 = period23.toMutablePeriod();
        mutablePeriod24.setPeriod((-1L));
        mutablePeriod7.add((org.joda.time.ReadablePeriod) mutablePeriod24);
        int[] intArray28 = mutablePeriod7.getValues();
        int int29 = mutablePeriod7.getYears();
        org.joda.time.LocalDate localDate31 = localDate5.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod7, 532237);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 2022, 0, 0, -10, 0, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDate31);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(999, 889);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 889");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        int int3 = localDateTime2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str5 = dateTimeFieldType4.toString();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.property(dateTimeFieldType4);
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withEra(1970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "weekyear" + "'", str5, "weekyear");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundFloor();
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate11, (org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight18, readableDuration19);
        org.joda.time.Duration duration21 = period15.toDurationTo((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.Instant instant22 = instant8.minus((org.joda.time.ReadableDuration) duration21);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((java.lang.Object) mutableDateTime7);
        mutableDateTime7.addMillis(902);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(instant22);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 'a', dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate4, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        boolean boolean10 = localDate7.isSupported(dateTimeFieldType9);
        org.joda.time.Chronology chronology11 = localDate7.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.millisOfDay();
        org.joda.time.Period period14 = new org.joda.time.Period(1645454865923L, (-19044L), chronology11);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType24 = periodType23.withSecondsRemoved();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight17, (org.joda.time.ReadableInstant) dateMidnight20, periodType24);
        org.joda.time.PeriodType periodType26 = periodType24.withHoursRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period27 = new org.joda.time.Period((java.lang.Object) 1645454865923L, periodType26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType26);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("71_66Mon");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"71_66Mon\" is malformed at \"_66Mon\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight16.withField(dateTimeFieldType17, (int) 'a');
        java.lang.String str20 = dateTimeFieldType17.getName();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType17.getRangeDurationType();
        org.joda.time.LocalDate.Property property22 = localDate11.property(dateTimeFieldType17);
        org.joda.time.DateTime dateTime23 = localDate11.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property24 = dateTime23.secondOfMinute();
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "weekyear" + "'", str20, "weekyear");
        org.junit.Assert.assertNull(durationFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusYears(13);
        int int11 = localDateTime10.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str13 = dateTimeFieldType12.toString();
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.property(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.withWeekOfWeekyear(47);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.weeks();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime6, (org.joda.time.ReadablePartial) localDateTime10, periodType17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusYears(13);
        int int22 = localDateTime21.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str24 = dateTimeFieldType23.toString();
        org.joda.time.LocalDateTime.Property property25 = localDateTime21.property(dateTimeFieldType23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.withMillisOfSecond(17);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight33, readableDuration34);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType37 = periodType36.withSecondsRemoved();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight30, (org.joda.time.ReadableInstant) dateMidnight33, periodType37);
        org.joda.time.DateMidnight.Property property39 = dateMidnight30.year();
        java.util.Locale locale40 = java.util.Locale.ITALIAN;
        java.lang.String str41 = property39.getAsText(locale40);
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime43 = instant42.toMutableDateTime();
        mutableDateTime43.setSecondOfMinute((int) (byte) 1);
        mutableDateTime43.setSecondOfMinute(52);
        mutableDateTime43.setMillisOfSecond((int) ' ');
        long long50 = property39.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(1L, dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone56 = dateMidnight55.getZone();
        mutableDateTime43.setZoneRetainFields(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = localDateTime21.toDateTime(dateTimeZone56);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone56);
        org.joda.time.DateTime dateTime60 = localDateTime6.toDateTime(dateTimeZone56);
        org.joda.time.DateTime.Property property61 = dateTime60.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime63 = property61.setCopy("JP");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"JP\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "weekyear" + "'", str13, "weekyear");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyear" + "'", str24, "weekyear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970" + "'", str41, "1970");
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-52L) + "'", long50 == (-52L));
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.DateMidnight.Property property20 = dateMidnight9.weekyear();
        org.joda.time.DateMidnight dateMidnight21 = property20.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.withYearOfCentury(2035);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2035 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight21);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        java.util.Calendar.Builder builder5 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder8 = builder5.set(0, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight13.getZone();
        int int16 = dateTimeZone14.getStandardOffset((long) 32769);
        java.util.Locale locale18 = java.util.Locale.US;
        java.lang.String str19 = dateTimeZone14.getShortName((long) 1970, locale18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale18.getDisplayCountry(locale20);
        java.util.Calendar.Builder builder22 = builder5.setLocale(locale20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withLocale(locale20);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeFormatter2.getZone();
        java.lang.StringBuffer stringBuffer25 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight28.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property32 = dateMidnight28.dayOfMonth();
        org.joda.time.Period period33 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod34 = period33.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight28.plus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight40.withField(dateTimeFieldType41, (int) 'a');
        boolean boolean44 = dateMidnight35.isSupported(dateTimeFieldType41);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight35.plusMonths(191);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer25, (org.joda.time.ReadableInstant) dateMidnight35);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ubbf8\uad6d" + "'", str21, "\ubbf8\uad6d");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateMidnight46);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime14 = property12.setCopy(53221515);
        org.joda.time.LocalTime localTime16 = property12.addCopy(53221515);
        org.joda.time.LocalTime localTime18 = localTime16.minusHours(100);
        org.joda.time.LocalTime localTime20 = localTime16.minusSeconds(11);
        org.joda.time.LocalTime.Property property21 = localTime16.hourOfDay();
        org.joda.time.LocalTime localTime22 = property21.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime23 = property21.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime24 = property21.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime24);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        org.joda.time.Period period1 = org.joda.time.Period.years((int) (short) 10);
        org.joda.time.Period period3 = period1.multipliedBy(0);
        org.joda.time.Period period5 = period3.plusHours(42);
        org.joda.time.Period period7 = period3.minusDays(53281067);
        org.joda.time.Period period9 = period3.minusSeconds(673);
        org.joda.time.Period period10 = period9.negated();
        int int11 = period9.getDays();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        int int7 = localDateTime6.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMillis(17);
        java.util.Date date10 = localDateTime9.toDate();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.weekOfWeekyear();
        int int12 = localDateTime9.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withMillisOfDay(53221917);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMonthOfYear(194);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 194 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Mon Feb 21 14:50:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53400958 + "'", int12 == 53400958);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDayOfMonth((int) (short) 1);
        int int7 = dateMidnight4.getWeekyear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.plusDays((int) (short) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight14 = dateTime13.toDateMidnight();
        boolean boolean15 = dateMidnight9.equals((java.lang.Object) dateMidnight14);
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(1679506596172800000L);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight14.withFields((org.joda.time.ReadablePartial) yearMonthDay17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight14.weekyear();
        org.joda.time.Period period20 = new org.joda.time.Period();
        org.joda.time.Period period22 = period20.multipliedBy((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight14.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plusMonths(2022);
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 'a', dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 'a', dateTimeZone32);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate30, (org.joda.time.ReadablePartial) localDate33);
        org.joda.time.LocalDate localDate36 = localDate30.withDayOfMonth(13);
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        long long41 = chronology37.add((long) (short) -1, (long) 1961, 15);
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((long) 53221407, chronology37);
        org.joda.time.DateTime dateTime43 = yearMonthDay42.toDateTimeAtMidnight();
        long long45 = chronology26.set((org.joda.time.ReadablePartial) yearMonthDay42, (long) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField47 = yearMonthDay42.getField(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 29414L + "'", long41 == 29414L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 100L + "'", long45 == 100L);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withDayOfMonth((int) (short) 1);
        int int12 = dateMidnight9.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight9.plusDays((int) (short) 10);
        boolean boolean15 = dateMidnight4.isAfter((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight9.plusYears((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withYear((int) (byte) -1);
        org.joda.time.DateMidnight.Property property20 = dateMidnight17.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight21 = property20.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight21);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = localDate5.minusDays(100);
        org.joda.time.LocalDate localDate13 = localDate5.withYear((int) (byte) 0);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight18 = dateTime17.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight23.getZone();
        org.joda.time.DateTime dateTime25 = dateTime17.toDateTime(dateTimeZone24);
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay(dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = localDate5.toDateMidnight(dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays(2035);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plusWeeks(0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight31);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime14 = localTime11.withMillisOfDay(18);
        org.joda.time.LocalTime localTime16 = localTime14.minusMinutes(32770);
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight21, readableDuration22);
        int int24 = period23.size();
        java.lang.String str25 = period23.toString();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.Period period28 = period23.withField(durationFieldType26, 0);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 'a', dateTimeZone33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate31, (org.joda.time.ReadablePartial) localDate34);
        org.joda.time.LocalDate localDate37 = localDate31.withDayOfMonth(13);
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.hourOfHalfday();
        org.joda.time.DurationField durationField40 = durationFieldType26.getField(chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.weekyear();
        java.util.Locale locale43 = java.util.Locale.GERMANY;
        java.lang.String str44 = locale43.getScript();
        java.util.Locale locale45 = locale43.stripExtensions();
        java.lang.String str46 = dateTimeField41.getAsText(139958329852800006L, locale45);
        java.lang.String str47 = locale18.getDisplayCountry(locale45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = localTime16.toString("minuteOfDay", locale45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT0S" + "'", str25, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "4437072" + "'", str46, "4437072");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate5, (org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate localDate11 = localDate5.withDayOfMonth(13);
        org.joda.time.Chronology chronology12 = localDate11.getChronology();
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfSecond();
        org.joda.time.DurationField durationField16 = chronology12.centuries();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(53341687, 53341956, 53341304, chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53341956 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, (org.joda.time.ReadableInstant) dateMidnight8, periodType12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight5.year();
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.lang.String str16 = property14.getAsText(locale15);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale17);
        java.lang.String str19 = locale15.getDisplayVariant(locale17);
        org.joda.time.TimeOfDay timeOfDay20 = property1.setCopy("1", locale17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType22 = timeOfDay20.getFieldType(53319778);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53319778");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970" + "'", str16, "1970");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(timeOfDay20);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeField dateTimeField3 = localDate1.getField(1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        boolean boolean11 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate localDate23 = localDate17.withDayOfMonth(13);
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        mutablePeriod13.add((long) ' ', chronology24);
        org.joda.time.LocalDate localDate26 = localDate1.minus((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime28 = instant27.toMutableDateTime();
        mutableDateTime28.setSecondOfMinute((int) (byte) 1);
        mutableDateTime28.setSecondOfMinute(52);
        org.joda.time.DateTime dateTime33 = mutableDateTime28.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 'a', dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate36, (org.joda.time.ReadablePartial) localDate39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(1L, dateTimeZone42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight43, readableDuration44);
        org.joda.time.Duration duration46 = period40.toDurationTo((org.joda.time.ReadableInstant) dateMidnight43);
        mutableDateTime28.add((org.joda.time.ReadableDuration) duration46, 53221515);
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Instant instant50 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDate52.toDateTimeAtCurrentTime(dateTimeZone53);
        int int55 = instant50.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime57 = dateTime54.withSecondOfMinute(0);
        org.joda.time.Instant instant58 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) 'a', dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) 'a', dateTimeZone63);
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate61, (org.joda.time.ReadablePartial) localDate64);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(1L, dateTimeZone67);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight68, readableDuration69);
        org.joda.time.Duration duration71 = period65.toDurationTo((org.joda.time.ReadableInstant) dateMidnight68);
        org.joda.time.Instant instant72 = instant58.minus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableDuration) duration71);
        org.joda.time.Period period78 = new org.joda.time.Period(32769, 1, 53221515, (int) (short) 0);
        org.joda.time.DateTime dateTime80 = dateTime54.withPeriodAdded((org.joda.time.ReadablePeriod) period78, 53221147);
        boolean boolean81 = duration46.equals((java.lang.Object) dateTime54);
        org.joda.time.DateTime.Property property82 = dateTime54.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(property82);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime localTime13 = localTime11.withSecondOfMinute(0);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime16 = property14.addCopy(0L);
        org.joda.time.LocalTime localTime17 = property14.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        java.util.Date date3 = new java.util.Date(53221515, (int) (byte) 1, (int) 'a');
        long long4 = date3.getTime();
        java.lang.String str5 = date3.toGMTString();
        int int6 = date3.getMinutes();
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromDateFields(date3);
        int int8 = timeOfDay7.getHourOfDay();
        java.lang.String str9 = timeOfDay7.toString();
        org.junit.Assert.assertEquals(date3.toString(), "Mon May 08 00:00:00 GMT+00:00 53223415");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1679506596172800000L + "'", long4 == 1679506596172800000L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "8 May 53223415 00:00:00 GMT" + "'", str5, "8 May 53223415 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "T00:00:00.000" + "'", str9, "T00:00:00.000");
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) dateMidnight23, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration17, periodType27);
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 'a', dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 'a', dateTimeZone37);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate35, (org.joda.time.ReadablePartial) localDate38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        boolean boolean41 = localDate38.isSupported(dateTimeFieldType40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.Interval interval43 = localDate38.toInterval(dateTimeZone42);
        java.lang.String str44 = interval43.toString();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 'a', dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate47, (org.joda.time.ReadablePartial) localDate50);
        org.joda.time.Period period53 = period51.plusYears(8);
        org.joda.time.Interval interval54 = interval43.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period53);
        boolean boolean55 = interval31.isAfter((org.joda.time.ReadableInterval) interval54);
        long long56 = interval31.getStartMillis();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(1L, dateTimeZone58);
        org.joda.time.DateMidnight.Property property60 = dateMidnight59.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight59.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property63 = dateMidnight59.dayOfMonth();
        org.joda.time.Period period64 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod65 = period64.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight59.plus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight(1L, dateTimeZone68);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight69.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight71.withField(dateTimeFieldType72, (int) 'a');
        boolean boolean75 = dateMidnight66.isSupported(dateTimeFieldType72);
        org.joda.time.YearMonthDay yearMonthDay76 = dateMidnight66.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay78 = yearMonthDay76.withYear(178);
        org.joda.time.Interval interval79 = yearMonthDay76.toInterval();
        boolean boolean80 = interval31.contains((org.joda.time.ReadableInterval) interval79);
        org.joda.time.DateTime dateTime81 = interval79.getStart();
        java.lang.String str82 = interval79.toString();
        org.joda.time.Period period83 = new org.joda.time.Period();
        org.joda.time.Period period85 = period83.minusMonths((int) '#');
        org.joda.time.Period period87 = period83.minusDays((int) 'a');
        org.joda.time.Period period89 = period87.plusWeeks(53221807);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval90 = interval79.withPeriodAfterStart((org.joda.time.ReadablePeriod) period87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str44, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1645455001353L + "'", long56 == 1645455001353L);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(mutablePeriod65);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str82, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(period89);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((int) '#', 56, 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        org.joda.time.DateMidnight dateMidnight5 = property3.roundHalfEvenCopy();
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        int int8 = property3.getMaximumShortTextLength(locale6);
        int int9 = property3.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withField(dateTimeFieldType9, (int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime3.withField(dateTimeFieldType9, (int) (short) 0);
        org.joda.time.DateTime dateTime15 = dateTime3.plusHours((int) (short) 1);
        int int16 = dateTime15.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property17 = dateTime15.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int19 = dateTime15.get(dateTimeFieldType18);
        boolean boolean21 = dateTime15.isAfter(1645454854107L);
        org.joda.time.DateTime dateTime23 = dateTime15.plusDays(14);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfCentury();
        org.joda.time.DateTime.Property property25 = dateTime23.millisOfDay();
        org.joda.time.DateTime dateTime27 = property25.addToCopy(53221550);
        org.joda.time.DateTime dateTime29 = property25.addToCopy((long) 938);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMonths((int) (byte) -1);
        org.joda.time.DateTime dateTime33 = dateTime31.minusYears(97);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("zh");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"zh\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.dayOfMonth();
        long long13 = dateTimeField11.roundHalfFloor(0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        org.joda.time.Period period1 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod2 = period1.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate localDate13 = localDate7.withDayOfMonth(13);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        mutablePeriod2.setPeriod((long) 10, (-599990L), chronology14);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((-1968L), chronology14);
        org.joda.time.DateTimeZone dateTimeZone17 = chronology14.getZone();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.year();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial20 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property27 = dateMidnight23.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight28 = property27.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 'a', dateTimeZone33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate31, (org.joda.time.ReadablePartial) localDate34);
        org.joda.time.LocalDate localDate37 = localDate31.withDayOfMonth(13);
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale39);
        java.util.Set<java.lang.String> strSet41 = locale39.getUnicodeLocaleAttributes();
        java.lang.String str42 = localDate31.toString("+00:00", locale39);
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(1L, dateTimeZone45);
        org.joda.time.DateMidnight.Property property47 = dateMidnight46.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight46.minusDays((int) 'a');
        java.util.Locale locale51 = java.util.Locale.ENGLISH;
        java.lang.String str52 = locale51.toLanguageTag();
        java.lang.String str53 = dateMidnight46.toString("+00:00", locale51);
        java.lang.String str54 = locale43.getDisplayVariant(locale51);
        java.lang.String str55 = locale39.getDisplayLanguage(locale51);
        java.util.Locale locale56 = java.util.Locale.GERMANY;
        java.lang.String str57 = locale56.getScript();
        java.lang.String str58 = locale51.getDisplayLanguage(locale56);
        java.lang.String str59 = property27.getAsText(locale51);
        java.lang.String str60 = locale51.getISO3Language();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = dateTimeField19.getAsText(readablePartial20, locale51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "en" + "'", str52, "en");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Italian" + "'", str55, "Italian");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Englisch" + "'", str58, "Englisch");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1" + "'", str59, "1");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "eng" + "'", str60, "eng");
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        org.joda.time.Period period0 = new org.joda.time.Period();
        org.joda.time.Period period2 = period0.multipliedBy((int) (short) 10);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.standard();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate localDate13 = localDate7.withDayOfMonth(13);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 0, periodType4, chronology14);
        org.joda.time.Period period16 = period0.withPeriodType(periodType4);
        org.joda.time.Period period18 = period0.minusMonths(53221777);
        int int19 = period0.getMillis();
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay(1147904322000L);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.withMillisOfSecond(53341015);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53341015 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes(53221655);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay1.secondOfMinute();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay1.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay6 = property5.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.withHourOfDay(2);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight22, readableDuration23);
        org.joda.time.Duration duration25 = period19.toDurationTo((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight31, readableDuration32);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType35 = periodType34.withSecondsRemoved();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight28, (org.joda.time.ReadableInstant) dateMidnight31, periodType35);
        org.joda.time.PeriodType periodType37 = periodType35.withWeeksRemoved();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration25, periodType35);
        java.util.Locale.Category category39 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale40 = java.util.Locale.getDefault(category39);
        java.util.Calendar calendar41 = dateTime12.toCalendar(locale40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 'a', dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 'a', dateTimeZone46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate44, (org.joda.time.ReadablePartial) localDate47);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(1L, dateTimeZone50);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight51, readableDuration52);
        org.joda.time.Duration duration54 = period48.toDurationTo((org.joda.time.ReadableInstant) dateMidnight51);
        org.joda.time.DateMidnight.Property property55 = dateMidnight51.monthOfYear();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = localDate57.toDateTimeAtCurrentTime(dateTimeZone58);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(1L, dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight64.withField(dateTimeFieldType65, (int) 'a');
        org.joda.time.DateTime dateTime69 = dateTime59.withField(dateTimeFieldType65, (int) (short) 0);
        org.joda.time.DateTime dateTime71 = dateTime59.plusHours((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean73 = dateTime59.isSupported(dateTimeFieldType72);
        int int74 = dateMidnight51.get(dateTimeFieldType72);
        java.lang.String str75 = dateTimeFieldType72.toString();
        int int76 = dateTime12.get(dateTimeFieldType72);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay78 = timeOfDay6.withField(dateTimeFieldType72, 2022);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.FORMAT + "'", category39.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1645455002040,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=2,MILLISECOND=40,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "minuteOfDay" + "'", str75, "minuteOfDay");
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 890 + "'", int76 == 890);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        int int7 = localDateTime6.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMillis(17);
        java.util.Date date10 = localDateTime9.toDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withSecondOfMinute((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Mon Feb 21 14:50:02 GMT+00:00 2022");
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        mutableDateTime1.setMillis((long) ' ');
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.secondOfDay();
        int int5 = mutableDateTime1.getMillisOfSecond();
        java.lang.String str6 = mutableDateTime1.toString();
        mutableDateTime1.addWeeks(685);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.032Z" + "'", str6, "1970-01-01T00:00:00.032Z");
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        org.joda.time.Period period1 = org.joda.time.Period.years((int) (short) 10);
        org.joda.time.Period period3 = period1.multipliedBy(0);
        org.joda.time.Period period5 = period3.plusHours(42);
        org.joda.time.Period period7 = period3.minusDays(53281067);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period9 = period7.multipliedBy(60);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -53281067 * 60");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale0);
        java.util.Locale locale2 = locale0.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale0.getUnicodeLocaleType("T00:00:00.042");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: T00:00:00.042");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-21T14:48:50.489Z");
        org.junit.Assert.assertNotNull(instant1);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getFirstDayOfWeek();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        java.lang.String str4 = calendar1.getCalendarType();
        calendar1.set(53221515, 4, 53221032, (int) '#', 4);
        calendar1.roll(0, false);
        int int14 = calendar1.getMinimalDaysInFirstWeek();
        calendar1.set(53221078, 53221504, 20, 53341028, 53341687, 53221166);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2035-02-21T14:48:46.372\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=53221078,MONTH=53221504,WEEK_OF_YEAR=30,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=206,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=11,HOUR_OF_DAY=53341028,MINUTE=53341687,SECOND=53221166,MILLISECOND=492,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gregory" + "'", str4, "gregory");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDayOfMonth((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime7 = dateMidnight6.toMutableDateTimeISO();
        mutableDateTime7.setMillisOfDay(120);
        int int10 = mutableDateTime7.getMinuteOfHour();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTimeAtCurrentTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight25, readableDuration26);
        org.joda.time.Duration duration28 = period22.toDurationTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight34, readableDuration35);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType38 = periodType37.withSecondsRemoved();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight31, (org.joda.time.ReadableInstant) dateMidnight34, periodType38);
        org.joda.time.PeriodType periodType40 = periodType38.withWeeksRemoved();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration28, periodType38);
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableInstant11, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        long long44 = interval42.getEndMillis();
        org.joda.time.Period period45 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod46 = period45.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 'a', dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 'a', dateTimeZone53);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate51, (org.joda.time.ReadablePartial) localDate54);
        org.joda.time.LocalDate localDate57 = localDate51.withDayOfMonth(13);
        org.joda.time.Chronology chronology58 = localDate57.getChronology();
        mutablePeriod46.setPeriod((long) 10, (-599990L), chronology58);
        mutablePeriod46.addSeconds(13);
        mutablePeriod46.clear();
        org.joda.time.Interval interval63 = interval42.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(1L, dateTimeZone65);
        org.joda.time.DateMidnight.Property property67 = dateMidnight66.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight66.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property70 = dateMidnight66.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) 'a', dateTimeZone72);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) 'a', dateTimeZone75);
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate73, (org.joda.time.ReadablePartial) localDate76);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = null;
        boolean boolean79 = localDate76.isSupported(dateTimeFieldType78);
        org.joda.time.Chronology chronology80 = localDate76.getChronology();
        org.joda.time.LocalDate localDate82 = localDate76.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = localDate82.getFieldType(1);
        org.joda.time.DateMidnight.Property property85 = dateMidnight66.property(dateTimeFieldType84);
        org.joda.time.DateMidnight dateMidnight86 = property85.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight88 = dateMidnight86.plusMonths(53221032);
        org.joda.time.DateMidnight dateMidnight90 = dateMidnight88.minusDays((-143999));
        org.joda.time.Duration duration91 = mutablePeriod46.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight88);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration91);
        mutableDateTime7.add((long) 53312500);
        mutableDateTime7.addMinutes(53281180);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(chronology43);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645455002505L + "'", long44 == 1645455002505L);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(mutablePeriod46);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertNotNull(dateMidnight88);
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertNotNull(duration91);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime4 = dateTime2.minus(60000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = dateTime4.withCenturyOfEra(53281109);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53281109 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfYear();
        org.joda.time.LocalDate localDate5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate7 = localDate5.minusYears((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = localDate5.withWeekOfWeekyear(769);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 769 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes(53221655);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay1.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType14 = periodType13.withSecondsRemoved();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, (org.joda.time.ReadableInstant) dateMidnight10, periodType14);
        org.joda.time.DateMidnight.Property property16 = dateMidnight7.year();
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = property16.getAsText(locale17);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime20 = instant19.toMutableDateTime();
        mutableDateTime20.setSecondOfMinute((int) (byte) 1);
        mutableDateTime20.setSecondOfMinute(52);
        mutableDateTime20.setMillisOfSecond((int) ' ');
        long long27 = property16.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = dateMidnight32.getZone();
        mutableDateTime20.setZoneRetainFields(dateTimeZone33);
        long long36 = dateTimeZone33.convertUTCToLocal((long) 5);
        boolean boolean37 = property4.equals((java.lang.Object) long36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property4.getFieldType();
        org.joda.time.TimeOfDay timeOfDay40 = property4.addWrapFieldToCopy(53221812);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay42 = timeOfDay40.withMinuteOfHour(4441178);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4441178 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970" + "'", str18, "1970");
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-52L) + "'", long27 == (-52L));
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 5L + "'", long36 == 5L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(timeOfDay40);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDayOfMonth((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime7 = dateMidnight6.toMutableDateTimeISO();
        mutableDateTime7.setMillisOfDay(120);
        java.lang.String str11 = mutableDateTime7.toString("52");
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime7.setDayOfMonth(53341513);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53341513 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "52" + "'", str11, "52");
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        java.lang.String[] strArray2 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField8 = localDate6.getField(1);
        boolean boolean9 = strSet3.remove((java.lang.Object) 1);
        java.lang.Object obj10 = null;
        boolean boolean11 = strSet3.contains(obj10);
        java.lang.String[] strArray24 = new java.lang.String[] { "2022-02-21T00:00:00.000Z", "Cina", "Property[dayOfMonth]", "19", "8 Jun 150344 01:10:11 GMT", "53221102", "4582910-11-03", "0", "dayOfYear", "java.io.IOException: +00:00", "PeriodType[Minutes]", "PeriodType[Minutes]" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        java.util.Set<java.lang.String> strSet27 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange languageRange29 = new java.util.Locale.LanguageRange("coreano");
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] { languageRange29 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.lang.String[] strArray52 = new java.lang.String[] { "\ubbf8\uad6d", "", "java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z", "DurationField[days]", "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z", "weekyear-gregory", "it", "-0033-08-30T00:00:00.000Z", "weekyear-gregory", "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z", "53221655", "java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", "java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", "dayOfYear", "inglese (Stati Uniti)", "weekyear-gregory", "java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", "UTC" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList53);
        boolean boolean56 = strSet27.retainAll((java.util.Collection<java.lang.String>) strList55);
        boolean boolean57 = strSet25.containsAll((java.util.Collection<java.lang.String>) strSet27);
        boolean boolean58 = strSet3.addAll((java.util.Collection<java.lang.String>) strSet27);
        boolean boolean59 = strSet3.isEmpty();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        org.joda.time.Chronology chronology10 = localDate6.getChronology();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 7, chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusWeeks(26);
        int int14 = dateTime13.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 7 + "'", int14 == 7);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.util.Date date5 = new java.util.Date(2, (int) '#', (int) '#');
        calendar1.setTime(date5);
        calendar1.set((int) (short) -1, (int) (byte) 100, (int) (short) 1, (int) (byte) -1, 17);
        int int14 = calendar1.getMinimum((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = calendar1.isSet(53341015);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53341015");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Italian\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=-1,MONTH=100,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=4,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=-1,MINUTE=17,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date5.toString(), "Wed Jan 04 00:00:00 GMT+00:00 1905");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusMillis(10);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay5 = property4.withMaximumValue();
        int int6 = timeOfDay5.getMinuteOfHour();
        java.lang.String str8 = timeOfDay5.toString("+00:00");
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.DateTime dateTime13 = localDate5.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYear(596);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.getDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime17.toMutableDateTime();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 10);
        mutableDateTime18.add((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate29, (org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, readableDuration37);
        org.joda.time.Duration duration39 = period33.toDurationTo((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(1L, dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1L, dateTimeZone44);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight45, readableDuration46);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType49 = periodType48.withSecondsRemoved();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight42, (org.joda.time.ReadableInstant) dateMidnight45, periodType49);
        org.joda.time.PeriodType periodType51 = periodType49.withWeeksRemoved();
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration39, periodType49);
        org.joda.time.Interval interval53 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadableDuration) duration39);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(chronology54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = localDate55.toDateTimeAtCurrentTime(dateTimeZone56);
        org.joda.time.DateMidnight dateMidnight58 = dateTime57.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(1L, dateTimeZone60);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight61.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone64 = dateMidnight63.getZone();
        org.joda.time.DateTime dateTime65 = dateTime57.toDateTime(dateTimeZone64);
        boolean boolean66 = interval53.contains((org.joda.time.ReadableInstant) dateTime57);
        long long67 = interval53.toDurationMillis();
        boolean boolean68 = interval53.containsNow();
        org.joda.time.ReadableInterval readableInterval69 = null;
        boolean boolean70 = interval53.contains(readableInterval69);
        mutablePeriod20.setPeriod(readableInterval69);
        mutablePeriod20.addDays(53281109);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((int) (byte) 100, 53221515, (int) (byte) 100, 53221161, 3, (int) 'a', (int) (byte) 100, 8);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay19.plus((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay19.withDayOfMonth(4);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.minusYears(53221102);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = localDate35.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight38 = dateTime37.toDateMidnight();
        org.joda.time.DateTime dateTime40 = dateTime37.plusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime37.getZone();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(1L, dateTimeZone43);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.dayOfMonth();
        org.joda.time.DurationField durationField46 = property45.getDurationField();
        boolean boolean47 = dateTimeZone41.equals((java.lang.Object) durationField46);
        org.joda.time.DateTime dateTime48 = yearMonthDay31.toDateTimeAtCurrentTime(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(1L, dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone54 = dateMidnight53.getZone();
        int int56 = dateTimeZone54.getStandardOffset((long) 32769);
        java.util.Locale locale58 = java.util.Locale.US;
        java.lang.String str59 = dateTimeZone54.getShortName((long) 1970, locale58);
        org.joda.time.LocalTime localTime60 = org.joda.time.LocalTime.now(dateTimeZone54);
        org.joda.time.LocalTime.Property property61 = localTime60.millisOfDay();
        org.joda.time.LocalTime localTime63 = property61.setCopy(53221515);
        org.joda.time.LocalTime localTime64 = property61.getLocalTime();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(1L, dateTimeZone66);
        org.joda.time.DateMidnight.Property property68 = dateMidnight67.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight67.minusDays((int) 'a');
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight70.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight72, readableDuration73);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateMidnight.Property property76 = dateMidnight72.property(dateTimeFieldType75);
        boolean boolean77 = localTime64.isSupported(dateTimeFieldType75);
        // The following exception was thrown during execution in test generation
        try {
            int int78 = yearMonthDay31.compareTo((org.joda.time.ReadablePartial) localTime64);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00" + "'", str59, "+00:00");
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        org.joda.time.Period period1 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod2 = period1.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate localDate13 = localDate7.withDayOfMonth(13);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        mutablePeriod2.setPeriod((long) 10, (-599990L), chronology14);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((-1968L), chronology14);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 'a', dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate19, (org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        boolean boolean25 = localDate22.isSupported(dateTimeFieldType24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = localDate22.toInterval(dateTimeZone26);
        java.lang.String str28 = interval27.toString();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 'a', dateTimeZone33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate31, (org.joda.time.ReadablePartial) localDate34);
        org.joda.time.Period period37 = period35.plusYears(8);
        org.joda.time.Interval interval38 = interval27.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period37);
        long long39 = interval27.getStartMillis();
        long long40 = interval27.getStartMillis();
        boolean boolean42 = interval27.isAfter((-52L));
        org.joda.time.Duration duration43 = interval27.toDuration();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight16.minus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration45 = duration43.toDuration();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str28, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(duration45);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getWeeksInWeekYear();
        java.util.Date date3 = calendar1.getTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        org.joda.time.DateTime dateTime17 = localDate9.toDateTimeAtMidnight(dateTimeZone16);
        boolean boolean19 = dateTimeZone16.isStandardOffset((long) (byte) 10);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(dateTimeZone16);
        boolean boolean22 = calendar1.after((java.lang.Object) dateTimeZone16);
        org.joda.time.Period period23 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod24 = period23.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate29, (org.joda.time.ReadablePartial) localDate32);
        org.joda.time.LocalDate localDate35 = localDate29.withDayOfMonth(13);
        org.joda.time.Chronology chronology36 = localDate35.getChronology();
        mutablePeriod24.setPeriod((long) 10, (-599990L), chronology36);
        boolean boolean38 = calendar1.after((java.lang.Object) mutablePeriod24);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology39);
        org.joda.time.LocalDate.Property property41 = localDate40.weekyear();
        boolean boolean42 = calendar1.before((java.lang.Object) property41);
        // The following exception was thrown during execution in test generation
        try {
            calendar1.roll(53221049, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455003669,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Italian\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=3,MILLISECOND=669,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Feb 21 14:50:03 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        int int5 = instant0.compareTo((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        boolean boolean14 = localDate11.isSupported(dateTimeFieldType13);
        org.joda.time.Chronology chronology15 = localDate11.getChronology();
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(chronology15);
        org.joda.time.DateTime.Property property17 = dateTime4.era();
        org.joda.time.DateTime dateTime18 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime20 = dateTime4.plusMillis(100);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = dateTime4.withChronology(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMillis(122);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
    }
}

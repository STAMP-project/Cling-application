import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest10 {

    public static boolean debug = false;

    @Test
    public void test5001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5001");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3);
        int int5 = period4.size();
        java.lang.String str6 = period4.toString();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.Period period9 = period4.withFields((org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.addMillis((int) '4');
        int int12 = mutablePeriod8.getWeeks();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePartial) localDate18);
        org.joda.time.Period period21 = period19.plusYears(8);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTimeAtCurrentTime(dateTimeZone26);
        int int28 = instant23.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime30 = dateTime27.withSecondOfMinute(0);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 'a', dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 'a', dateTimeZone36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate34, (org.joda.time.ReadablePartial) localDate37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight41, readableDuration42);
        org.joda.time.Duration duration44 = period38.toDurationTo((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.Instant instant45 = instant31.minus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration44);
        org.joda.time.Period period51 = new org.joda.time.Period(32769, 1, 53221515, (int) (short) 0);
        org.joda.time.DateTime dateTime53 = dateTime27.withPeriodAdded((org.joda.time.ReadablePeriod) period51, 53221147);
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 'a', dateTimeZone56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) 'a', dateTimeZone59);
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate57, (org.joda.time.ReadablePartial) localDate60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(1L, dateTimeZone63);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight64, readableDuration65);
        org.joda.time.Duration duration67 = period61.toDurationTo((org.joda.time.ReadableInstant) dateMidnight64);
        org.joda.time.Instant instant68 = instant54.minus((org.joda.time.ReadableDuration) duration67);
        org.joda.time.DateTime dateTime70 = dateTime27.withDurationAdded((org.joda.time.ReadableDuration) duration67, 53401057);
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration67);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(dateTime70);
    }

    @Test
    public void test5002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5002");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setSecondOfMinute(52);
        org.joda.time.DateTime dateTime6 = mutableDateTime1.toDateTimeISO();
        int int7 = dateTime6.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = localDate13.isSupported(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Interval interval18 = localDate13.toInterval(dateTimeZone17);
        java.lang.String str19 = interval18.toString();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate22, (org.joda.time.ReadablePartial) localDate25);
        org.joda.time.Period period28 = period26.plusYears(8);
        org.joda.time.Interval interval29 = interval18.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Period period31 = period28.withMinutes(0);
        org.joda.time.Period period33 = period28.minusMillis(32770);
        org.joda.time.DateTime dateTime34 = dateTime6.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.DateTime dateTime35 = dateTime6.withLaterOffsetAtOverlap();
        org.joda.time.YearMonthDay yearMonthDay36 = dateTime35.toYearMonthDay();
        org.joda.time.DateTime dateTime37 = yearMonthDay36.toDateTimeAtMidnight();
        org.joda.time.Period period38 = new org.joda.time.Period();
        org.joda.time.Period period39 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod40 = period39.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 'a', dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 'a', dateTimeZone47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate45, (org.joda.time.ReadablePartial) localDate48);
        org.joda.time.LocalDate localDate51 = localDate45.withDayOfMonth(13);
        org.joda.time.Chronology chronology52 = localDate51.getChronology();
        mutablePeriod40.setPeriod((long) 10, (-599990L), chronology52);
        mutablePeriod40.addSeconds(13);
        mutablePeriod40.clear();
        org.joda.time.Period period57 = period38.minus((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.Period period58 = period57.toPeriod();
        org.joda.time.Period period60 = period58.withMinutes(32772);
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay36.minus((org.joda.time.ReadablePeriod) period60);
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay61.minusMonths(53281361);
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay63.minusMonths(53281295);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(1L, dateTimeZone67);
        org.joda.time.DateMidnight.Property property69 = dateMidnight68.dayOfMonth();
        boolean boolean70 = property69.isLeap();
        org.joda.time.DateMidnight dateMidnight71 = property69.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate(chronology72);
        org.joda.time.DateTimeField dateTimeField75 = localDate73.getField(1);
        java.lang.String str76 = dateTimeField75.getName();
        int int77 = dateTimeField75.getMaximumValue();
        org.joda.time.DurationField durationField78 = dateTimeField75.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = dateTimeField75.getType();
        int int80 = dateMidnight71.get(dateTimeFieldType79);
        org.joda.time.YearMonthDay.Property property81 = yearMonthDay63.property(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str19, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "monthOfYear" + "'", str76, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 12 + "'", int77 == 12);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(property81);
    }

    @Test
    public void test5003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5003");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.DateTime dateTime10 = localDate8.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate12 = localDate8.withYearOfEra(53221180);
        org.joda.time.LocalDate localDate14 = localDate8.minusDays(53461102);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test5004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5004");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime14 = property12.addNoWrapToCopy((int) (byte) 100);
        org.joda.time.LocalTime localTime16 = property12.addCopy(366);
        org.joda.time.LocalTime localTime17 = property12.roundHalfFloorCopy();
        long long18 = property12.remainder();
        org.joda.time.LocalTime localTime20 = property12.setCopy(30);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test5005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5005");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withField(dateTimeFieldType9, (int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime3.withField(dateTimeFieldType9, (int) (short) 0);
        org.joda.time.DateTime dateTime15 = dateTime3.plusHours((int) (short) 1);
        int int16 = dateTime15.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property17 = dateTime15.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int19 = dateTime15.get(dateTimeFieldType18);
        boolean boolean21 = dateTime15.isAfter(1645454854107L);
        org.joda.time.DateTime dateTime23 = dateTime15.plusDays(14);
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime23.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay24.withYear(122);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.withYear(647);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 44 + "'", int19 == 44);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
    }

    @Test
    public void test5006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5006");
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        int int15 = dateTimeZone13.getStandardOffset((long) 32769);
        java.util.Locale locale17 = java.util.Locale.US;
        java.lang.String str18 = dateTimeZone13.getShortName((long) 1970, locale17);
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.now(dateTimeZone13);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone13);
        long long23 = dateTimeZone13.convertLocalToUTC((long) 1961, false);
        java.lang.String str24 = dateTimeZone13.toString();
        long long26 = dateTimeZone13.nextTransition((long) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(53521775, 173, 13, 2034, 53521818, 59052, (int) (byte) 100, dateTimeZone13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2034 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1961L + "'", long23 == 1961L);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
    }

    @Test
    public void test5007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5007");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.dayOfMonth();
        org.joda.time.Interval interval21 = yearMonthDay19.toInterval();
        org.joda.time.LocalDate localDate22 = yearMonthDay19.toLocalDate();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test5008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5008");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(53221684);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        java.lang.StringBuffer stringBuffer8 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter7.printTo(stringBuffer8, (long) 53221812);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
    }

    @Test
    public void test5009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5009");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone.setDefault(timeZone0);
        timeZone0.setID("4437072");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.minusDays((int) 'a');
        org.joda.time.DateTime dateTime10 = dateMidnight9.toDateTimeISO();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight21, readableDuration22);
        org.joda.time.Duration duration24 = period18.toDurationTo((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.Instant instant25 = instant11.minus((org.joda.time.ReadableDuration) duration24);
        boolean boolean26 = dateMidnight9.isAfter((org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight34.getZone();
        int int37 = dateTimeZone35.getStandardOffset((long) 32769);
        java.util.Locale locale39 = java.util.Locale.US;
        java.lang.String str40 = dateTimeZone35.getShortName((long) 1970, locale39);
        org.joda.time.DateTime dateTime41 = dateMidnight29.toDateTime(dateTimeZone35);
        boolean boolean42 = instant11.isEqual((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime.Property property43 = dateTime41.era();
        int int44 = dateTime41.getDayOfYear();
        org.joda.time.DateTime.Property property45 = dateTime41.year();
        org.joda.time.DateTimeField dateTimeField46 = property45.getField();
        java.util.Locale locale47 = java.util.Locale.JAPAN;
        java.lang.String str48 = property45.getAsShortText(locale47);
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone0, locale47);
        int int51 = timeZone0.getOffset((long) 36);
        timeZone0.setID("2022-02-21T14:47:50.386");
        java.util.Locale locale56 = new java.util.Locale("1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z", "Feb");
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone0, locale56);
        java.util.Date date58 = calendar57.getTime();
        java.util.TimeZone timeZone59 = calendar57.getTimeZone();
        org.joda.time.LocalDate localDate60 = org.joda.time.LocalDate.fromCalendarFields(calendar57);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970" + "'", str48, "1970");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1645455224606,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:47:50.386\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=44,MILLISECOND=606,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertEquals(locale56.toString(), "1970-01-01t00:00:00.000z/1970-01-02t00:00:00.000z_FEB");
        org.junit.Assert.assertNotNull(calendar57);
// flaky:         org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=1645455224606,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:47:50.386\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=44,MILLISECOND=606,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date58);
// flaky:         org.junit.Assert.assertEquals(date58.toString(), "Mon Feb 21 14:53:44 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDate60);
    }

    @Test
    public void test5010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5010");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.withYear(178);
        org.joda.time.Period period22 = new org.joda.time.Period();
        org.joda.time.Period period24 = period22.multipliedBy((int) (short) 10);
        org.joda.time.format.PeriodFormatter periodFormatter25 = null;
        java.lang.String str26 = period24.toString(periodFormatter25);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay21.plus((org.joda.time.ReadablePeriod) period24);
        int int28 = period24.getWeeks();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0S" + "'", str26, "PT0S");
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test5011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5011");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight2.minusDays(53405686);
        org.joda.time.DateMidnight.Property property13 = dateMidnight2.year();
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test5012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5012");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusMonths((int) (byte) 10);
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime8 = instant7.toMutableDateTime();
        mutableDateTime8.setSecondOfMinute((int) (byte) 1);
        int int11 = mutableDateTime8.getMillisOfDay();
        int int12 = mutableDateTime8.getHourOfDay();
        int int13 = dateMidnight6.compareTo((org.joda.time.ReadableInstant) mutableDateTime8);
        int int14 = mutableDateTime8.getEra();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime8.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = property15.add(682);
        java.lang.String str19 = mutableDateTime18.toString();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53581734 + "'", int11 == 53581734);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 14 + "'", int12 == 14);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-21T14:53:02.416Z" + "'", str19, "2022-02-21T14:53:02.416Z");
    }

    @Test
    public void test5013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5013");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.year();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight12, readableDuration13);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType16 = periodType15.withSecondsRemoved();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight9, (org.joda.time.ReadableInstant) dateMidnight12, periodType16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight9.year();
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.lang.String str20 = property18.getAsText(locale19);
        int int21 = property6.getMaximumShortTextLength(locale19);
        org.joda.time.MutableDateTime mutableDateTime23 = property6.add((long) 914);
        mutableDateTime23.setMillisOfDay(954);
        mutableDateTime23.setYear(36);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime23.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundHalfFloor();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean31 = mutableDateTime29.isSupported(dateTimeFieldType30);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 'a', dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate36, (org.joda.time.ReadablePartial) localDate39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        boolean boolean42 = localDate39.isSupported(dateTimeFieldType41);
        org.joda.time.Chronology chronology43 = localDate39.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.dayOfYear();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.millisOfDay();
        org.joda.time.Period period46 = new org.joda.time.Period(1645454865923L, (-19044L), chronology43);
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType30.getField(chronology43);
        org.joda.time.DurationField durationField48 = dateTimeField47.getLeapDurationField();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970" + "'", str20, "1970");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNull(durationField48);
    }

    @Test
    public void test5014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5014");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 53221797);
        mutablePeriod1.addWeeks(99);
    }

    @Test
    public void test5015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5015");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis(4);
        org.joda.time.Period period11 = new org.joda.time.Period();
        org.joda.time.Period period13 = period11.minusMonths((int) '#');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.withPeriodAdded((org.joda.time.ReadablePeriod) period13, 1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.era();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundFloorCopy();
        int int18 = property16.get();
        int int19 = property16.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime20 = property16.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = property16.addToCopy(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test5016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5016");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight9, readableDuration10);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType13 = periodType12.withSecondsRemoved();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight6, (org.joda.time.ReadableInstant) dateMidnight9, periodType13);
        org.joda.time.PeriodType periodType15 = periodType13.withWeeksRemoved();
        org.joda.time.PeriodType periodType16 = periodType13.withMillisRemoved();
        org.joda.time.PeriodType periodType17 = periodType13.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight23.getZone();
        int int26 = dateTimeZone24.getStandardOffset((long) 32769);
        java.util.Locale locale28 = java.util.Locale.US;
        java.lang.String str29 = dateTimeZone24.getShortName((long) 1970, locale28);
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.now(dateTimeZone24);
        org.joda.time.LocalTime localTime32 = localTime30.withSecondOfMinute(0);
        int int33 = localTime30.getSecondOfMinute();
        org.joda.time.Chronology chronology34 = localTime30.getChronology();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) '#', chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.minuteOfDay();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 11, periodType17, chronology34);
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay(4, 12, 59, chronology34);
        org.joda.time.TimeOfDay.Property property39 = timeOfDay38.minuteOfHour();
        org.joda.time.TimeOfDay.Property property40 = timeOfDay38.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay42 = property40.addWrapFieldToCopy(10);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1L, dateTimeZone44);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.minusDays((int) 'a');
        org.joda.time.DateTime dateTime49 = dateMidnight48.toDateTimeISO();
        org.joda.time.Period period54 = new org.joda.time.Period(53221504, (int) 'x', (int) (short) 100, 53221180);
        org.joda.time.DateTime dateTime55 = dateTime49.minus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.DateTime.Property property56 = dateTime49.dayOfYear();
        int int57 = property40.compareTo((org.joda.time.ReadableInstant) dateTime49);
        int int58 = property40.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 45 + "'", int33 == 45);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test5017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5017");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withField(dateTimeFieldType9, (int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime3.withField(dateTimeFieldType9, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        org.joda.time.DateTime dateTime20 = dateTime13.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate23, (org.joda.time.ReadablePartial) localDate26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = localDate26.isSupported(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = localDate26.getChronology();
        org.joda.time.LocalDate localDate32 = localDate26.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = localDate32.getFieldType(1);
        boolean boolean35 = dateTime13.isSupported(dateTimeFieldType34);
        org.joda.time.DateTime dateTime37 = dateTime13.minusDays(1961);
        org.joda.time.DateTime.Property property38 = dateTime37.yearOfEra();
        org.joda.time.DateTime dateTime40 = property38.addToCopy((-1L));
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 'a', dateTimeZone45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate43, (org.joda.time.ReadablePartial) localDate46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(1L, dateTimeZone49);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone53 = dateMidnight52.getZone();
        org.joda.time.DateTime dateTime54 = localDate46.toDateTimeAtMidnight(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.withYear(596);
        org.joda.time.DateTime.Property property57 = dateTime56.yearOfEra();
        org.joda.time.DateTime dateTime58 = property57.getDateTime();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime.Property property60 = dateTime40.yearOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    public void test5018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5018");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight6, readableDuration7);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType10 = periodType9.withSecondsRemoved();
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, (org.joda.time.ReadableInstant) dateMidnight6, periodType10);
        org.joda.time.PeriodType periodType12 = periodType10.withWeeksRemoved();
        org.joda.time.PeriodType periodType13 = periodType10.withMillisRemoved();
        org.joda.time.PeriodType periodType14 = periodType10.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = dateMidnight20.getZone();
        int int23 = dateTimeZone21.getStandardOffset((long) 32769);
        java.util.Locale locale25 = java.util.Locale.US;
        java.lang.String str26 = dateTimeZone21.getShortName((long) 1970, locale25);
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now(dateTimeZone21);
        org.joda.time.LocalTime localTime29 = localTime27.withSecondOfMinute(0);
        int int30 = localTime27.getSecondOfMinute();
        org.joda.time.Chronology chronology31 = localTime27.getChronology();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) '#', chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.minuteOfDay();
        org.joda.time.Period period34 = new org.joda.time.Period((long) 11, periodType14, chronology31);
        org.joda.time.DateTimeField dateTimeField35 = chronology31.secondOfDay();
        java.lang.String str37 = dateTimeField35.getAsShortText(0L);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 45 + "'", int30 == 45);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
    }

    @Test
    public void test5019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5019");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField1 = mutableDateTime0.getRoundingField();
        mutableDateTime0.setHourOfDay((int) (short) 1);
        org.joda.time.Chronology chronology4 = mutableDateTime0.getChronology();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.weekyear();
        org.junit.Assert.assertNull(dateTimeField1);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test5020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5020");
        org.joda.time.Period period2 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate localDate14 = localDate8.withDayOfMonth(13);
        org.joda.time.Chronology chronology15 = localDate14.getChronology();
        mutablePeriod3.setPeriod((long) 10, (-599990L), chronology15);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((-1968L), chronology15);
        org.joda.time.DateTimeZone dateTimeZone18 = chronology15.getZone();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(1645454844652L, dateTimeZone18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTimeAtCurrentTime(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight28.withField(dateTimeFieldType29, (int) 'a');
        org.joda.time.DateTime dateTime33 = dateTime23.withField(dateTimeFieldType29, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone39 = dateMidnight38.getZone();
        org.joda.time.DateTime dateTime40 = dateTime33.withZoneRetainFields(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 'a', dateTimeZone45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate43, (org.joda.time.ReadablePartial) localDate46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = localDate46.isSupported(dateTimeFieldType48);
        org.joda.time.Chronology chronology50 = localDate46.getChronology();
        org.joda.time.LocalDate localDate52 = localDate46.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = localDate52.getFieldType(1);
        boolean boolean55 = dateTime33.isSupported(dateTimeFieldType54);
        org.joda.time.DateTime dateTime57 = dateTime33.minusDays(1961);
        org.joda.time.DateTime.Property property58 = dateTime57.yearOfEra();
        org.joda.time.DateTime dateTime59 = property58.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField60 = property58.getField();
        int int62 = dateTimeField60.getLeapAmount((long) 53221180);
        long long64 = dateTimeField60.roundCeiling((long) 53221235);
        mutableDateTime19.setRounding(dateTimeField60, (int) (byte) 1);
        long long68 = dateTimeField60.roundFloor(1645454882020L);
        boolean boolean70 = dateTimeField60.isLeap((long) 53404822);
        long long73 = dateTimeField60.set(1645454847052L, (int) 'u');
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 31536000000L + "'", long64 == 31536000000L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1640995200000L + "'", long68 == 1640995200000L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-58470541952948L) + "'", long73 == (-58470541952948L));
    }

    @Test
    public void test5021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5021");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        int int3 = property2.getMaximumValue();
        org.joda.time.TimeOfDay timeOfDay4 = property2.withMaximumValue();
        org.joda.time.ReadableInstant readableInstant5 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int6 = property2.compareTo(readableInstant5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 59 + "'", int3 == 59);
        org.junit.Assert.assertNotNull(timeOfDay4);
    }

    @Test
    public void test5022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5022");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        boolean boolean14 = localDate11.isSupported(dateTimeFieldType13);
        org.joda.time.Chronology chronology15 = localDate11.getChronology();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 7, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property24 = dateMidnight20.dayOfMonth();
        org.joda.time.Period period25 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod26 = period25.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight20.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight32.withField(dateTimeFieldType33, (int) 'a');
        boolean boolean36 = dateMidnight27.isSupported(dateTimeFieldType33);
        org.joda.time.YearMonthDay yearMonthDay37 = dateMidnight27.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(1L, dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(1L, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone46 = dateMidnight45.getZone();
        int int48 = dateTimeZone46.getStandardOffset((long) 32769);
        java.util.Locale locale50 = java.util.Locale.US;
        java.lang.String str51 = dateTimeZone46.getShortName((long) 1970, locale50);
        org.joda.time.DateTime dateTime52 = dateMidnight40.toDateTime(dateTimeZone46);
        org.joda.time.Interval interval53 = yearMonthDay37.toInterval(dateTimeZone46);
        mutableDateTime17.setZone(dateTimeZone46);
        // The following exception was thrown during execution in test generation
        try {
            int int57 = dateTimeFormatter2.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime17, "tedesco", 53401726);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(interval53);
    }

    @Test
    public void test5023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5023");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("P8Y");
        java.lang.String str2 = timeZone1.getID();
        java.time.ZoneId zoneId3 = timeZone1.toZoneId();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone(zoneId3);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Ora media di Greenwich");
    }

    @Test
    public void test5024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5024");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        org.joda.time.DateMidnight.Property property11 = dateMidnight2.year();
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.lang.String str13 = property11.getAsText(locale12);
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime15 = instant14.toMutableDateTime();
        mutableDateTime15.setSecondOfMinute((int) (byte) 1);
        mutableDateTime15.setSecondOfMinute(52);
        mutableDateTime15.setMillisOfSecond((int) ' ');
        long long22 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate25, (org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = localDate28.isSupported(dateTimeFieldType30);
        org.joda.time.Chronology chronology32 = localDate28.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.minutes();
        org.joda.time.DurationFieldType durationFieldType34 = durationField33.getType();
        mutableDateTime15.add(durationFieldType34, (-19092));
        mutableDateTime15.setMillisOfDay(1439);
        mutableDateTime15.add((long) 48);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 'a', dateTimeZone45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate43, (org.joda.time.ReadablePartial) localDate46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = localDate46.isSupported(dateTimeFieldType48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Interval interval51 = localDate46.toInterval(dateTimeZone50);
        java.lang.String str52 = interval51.toString();
        org.joda.time.Chronology chronology53 = interval51.getChronology();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(chronology54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = localDate55.toDateTimeAtCurrentTime(dateTimeZone56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) 'a', dateTimeZone59);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((long) 'a', dateTimeZone62);
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate60, (org.joda.time.ReadablePartial) localDate63);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(1L, dateTimeZone66);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight67, readableDuration68);
        org.joda.time.Duration duration70 = period64.toDurationTo((org.joda.time.ReadableInstant) dateMidnight67);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight(1L, dateTimeZone72);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight(1L, dateTimeZone75);
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight76, readableDuration77);
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType80 = periodType79.withSecondsRemoved();
        org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight73, (org.joda.time.ReadableInstant) dateMidnight76, periodType80);
        org.joda.time.PeriodType periodType82 = periodType80.withWeeksRemoved();
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableDuration) duration70, periodType80);
        org.joda.time.Interval interval84 = interval51.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration70);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.LocalDate localDate86 = new org.joda.time.LocalDate(chronology85);
        org.joda.time.DateTimeZone dateTimeZone87 = null;
        org.joda.time.DateTime dateTime88 = localDate86.toDateTimeAtCurrentTime(dateTimeZone87);
        org.joda.time.DateMidnight dateMidnight89 = dateTime88.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight91 = dateMidnight89.withDayOfMonth((int) (short) 1);
        org.joda.time.Period period93 = org.joda.time.Period.minutes(0);
        org.joda.time.DateMidnight dateMidnight94 = dateMidnight89.plus((org.joda.time.ReadablePeriod) period93);
        org.joda.time.Interval interval95 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration70, (org.joda.time.ReadableInstant) dateMidnight94);
        org.joda.time.Interval interval96 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime15, (org.joda.time.ReadableDuration) duration70);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970" + "'", str13, "1970");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-52L) + "'", long22 == (-52L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str52, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertNotNull(dateMidnight91);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(dateMidnight94);
    }

    @Test
    public void test5025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5025");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) dateMidnight23, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration17, periodType27);
        org.joda.time.Period period31 = duration17.toPeriod();
        org.joda.time.Period period32 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period33 = duration17.toPeriod();
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = localDate36.toDateTimeAtCurrentTime(dateTimeZone37);
        int int39 = instant34.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTimeAtCurrentTime(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 'a', dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate47, (org.joda.time.ReadablePartial) localDate50);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(1L, dateTimeZone53);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight54, readableDuration55);
        org.joda.time.Duration duration57 = period51.toDurationTo((org.joda.time.ReadableInstant) dateMidnight54);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(1L, dateTimeZone59);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight(1L, dateTimeZone62);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight63, readableDuration64);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType67 = periodType66.withSecondsRemoved();
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight60, (org.joda.time.ReadableInstant) dateMidnight63, periodType67);
        org.joda.time.PeriodType periodType69 = periodType67.withWeeksRemoved();
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableDuration) duration57, periodType67);
        org.joda.time.Interval interval71 = new org.joda.time.Interval(readableInstant40, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration72 = duration57.toDuration();
        org.joda.time.Instant instant74 = instant34.withDurationAdded((org.joda.time.ReadableDuration) duration57, 493);
        org.joda.time.Instant instant76 = instant34.plus(971L);
        org.joda.time.DateTime dateTime77 = instant76.toDateTime();
        org.joda.time.Duration duration78 = period33.toDurationFrom((org.joda.time.ReadableInstant) instant76);
        org.joda.time.Period period80 = period33.withDays(53446172);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(period80);
    }

    @Test
    public void test5026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5026");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.DateTime dateTime13 = localDate5.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYear(596);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        int int17 = dateTime15.getCenturyOfEra();
        int int18 = dateTime15.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
    }

    @Test
    public void test5027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5027");
        org.joda.time.Period period1 = org.joda.time.Period.millis(53281416);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test5028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5028");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate9 = localDate3.withDayOfMonth(13);
        org.joda.time.Chronology chronology10 = localDate9.getChronology();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod14 = period13.toMutablePeriod();
        org.joda.time.Weeks weeks15 = period13.toStandardWeeks();
        int[] intArray18 = chronology10.get((org.joda.time.ReadablePeriod) period13, (long) 53221394, 29414L);
        org.joda.time.DateTimeField dateTimeField19 = chronology10.hourOfHalfday();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) 16, chronology10);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, -14, -46, -31, -980]");
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test5029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5029");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        org.joda.time.Chronology chronology10 = localDate6.getChronology();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 7, chronology10);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property19 = dateMidnight15.dayOfMonth();
        org.joda.time.Period period20 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod21 = period20.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight15.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight27.withField(dateTimeFieldType28, (int) 'a');
        boolean boolean31 = dateMidnight22.isSupported(dateTimeFieldType28);
        org.joda.time.YearMonthDay yearMonthDay32 = dateMidnight22.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone41 = dateMidnight40.getZone();
        int int43 = dateTimeZone41.getStandardOffset((long) 32769);
        java.util.Locale locale45 = java.util.Locale.US;
        java.lang.String str46 = dateTimeZone41.getShortName((long) 1970, locale45);
        org.joda.time.DateTime dateTime47 = dateMidnight35.toDateTime(dateTimeZone41);
        org.joda.time.Interval interval48 = yearMonthDay32.toInterval(dateTimeZone41);
        mutableDateTime12.setZone(dateTimeZone41);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime12.dayOfWeek();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime12.secondOfMinute();
        boolean boolean53 = mutableDateTime12.equals((java.lang.Object) 53221593);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime12.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime55 = property54.roundFloor();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) 'a', dateTimeZone58);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) 'a', dateTimeZone61);
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate59, (org.joda.time.ReadablePartial) localDate62);
        org.joda.time.LocalDate localDate65 = localDate59.withDayOfMonth(13);
        org.joda.time.Chronology chronology66 = localDate65.getChronology();
        org.joda.time.LocalDate localDate67 = org.joda.time.LocalDate.now(chronology66);
        org.joda.time.DateTimeField dateTimeField68 = chronology66.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((long) 'a', dateTimeZone70);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate((long) 'a', dateTimeZone73);
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate71, (org.joda.time.ReadablePartial) localDate74);
        org.joda.time.LocalDate localDate77 = localDate71.withDayOfMonth(13);
        org.joda.time.Chronology chronology78 = localDate77.getChronology();
        org.joda.time.LocalDate localDate79 = org.joda.time.LocalDate.now(chronology78);
        int int80 = localDate79.getYearOfCentury();
        java.util.Locale locale81 = java.util.Locale.CANADA;
        java.util.Calendar calendar82 = java.util.Calendar.getInstance(locale81);
        java.lang.String str83 = dateTimeField68.getAsShortText((org.joda.time.ReadablePartial) localDate79, locale81);
        org.joda.time.MutableDateTime mutableDateTime84 = property54.set("1", locale81);
        org.joda.time.Instant instant85 = mutableDateTime84.toInstant();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 22 + "'", int80 == 22);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar82);
// flaky:         org.junit.Assert.assertEquals(calendar82.toString(), "java.util.GregorianCalendar[time=1645455225861,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:47:50.386\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=45,MILLISECOND=861,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Feb" + "'", str83, "Feb");
        org.junit.Assert.assertNotNull(mutableDateTime84);
        org.junit.Assert.assertNotNull(instant85);
    }

    @Test
    public void test5030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5030");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeField dateTimeField3 = localDate1.getField(1);
        java.lang.String str5 = dateTimeField3.getAsShortText((long) '4');
        org.joda.time.DurationField durationField6 = dateTimeField3.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight16.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property20 = dateMidnight16.dayOfMonth();
        org.joda.time.Period period21 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod22 = period21.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight16.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight28.withField(dateTimeFieldType29, (int) 'a');
        boolean boolean32 = dateMidnight23.isSupported(dateTimeFieldType29);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime13.withField(dateTimeFieldType29, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime13.minusSeconds(18);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime13.plusMinutes((int) ' ');
        int int40 = localDateTime38.getValue(0);
        int[] intArray42 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(1L, dateTimeZone45);
        org.joda.time.DateMidnight.Property property47 = dateMidnight46.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight46.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property50 = dateMidnight46.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight51 = property50.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 'a', dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 'a', dateTimeZone56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate54, (org.joda.time.ReadablePartial) localDate57);
        org.joda.time.LocalDate localDate60 = localDate54.withDayOfMonth(13);
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale62);
        java.util.Set<java.lang.String> strSet64 = locale62.getUnicodeLocaleAttributes();
        java.lang.String str65 = localDate54.toString("+00:00", locale62);
        java.util.Locale locale66 = java.util.Locale.ITALIAN;
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight(1L, dateTimeZone68);
        org.joda.time.DateMidnight.Property property70 = dateMidnight69.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight69.minusDays((int) 'a');
        java.util.Locale locale74 = java.util.Locale.ENGLISH;
        java.lang.String str75 = locale74.toLanguageTag();
        java.lang.String str76 = dateMidnight69.toString("+00:00", locale74);
        java.lang.String str77 = locale66.getDisplayVariant(locale74);
        java.lang.String str78 = locale62.getDisplayLanguage(locale74);
        java.util.Locale locale79 = java.util.Locale.GERMANY;
        java.lang.String str80 = locale79.getScript();
        java.lang.String str81 = locale74.getDisplayLanguage(locale79);
        java.lang.String str82 = property50.getAsText(locale74);
        java.lang.String str83 = locale74.getISO3Language();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray84 = dateTimeField3.set((org.joda.time.ReadablePartial) localDateTime38, 53521537, intArray42, "53521901", locale74);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"53521901\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeField3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "gen" + "'", str5, "gen");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00" + "'", str65, "+00:00");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it");
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "en" + "'", str75, "en");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00" + "'", str76, "+00:00");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Italian" + "'", str78, "Italian");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Englisch" + "'", str81, "Englisch");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "1" + "'", str82, "1");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "eng" + "'", str83, "eng");
    }

    @Test
    public void test5031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5031");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.getDayOfYear();
        org.joda.time.LocalDate.Property property3 = localDate1.yearOfCentury();
        org.joda.time.LocalDate localDate5 = property3.addWrapFieldToCopy(53221684);
        org.joda.time.LocalDate localDate6 = property3.withMaximumValue();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate9 = property7.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test5032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5032");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes(53221655);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay1.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType14 = periodType13.withSecondsRemoved();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, (org.joda.time.ReadableInstant) dateMidnight10, periodType14);
        org.joda.time.DateMidnight.Property property16 = dateMidnight7.year();
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = property16.getAsText(locale17);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime20 = instant19.toMutableDateTime();
        mutableDateTime20.setSecondOfMinute((int) (byte) 1);
        mutableDateTime20.setSecondOfMinute(52);
        mutableDateTime20.setMillisOfSecond((int) ' ');
        long long27 = property16.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = dateMidnight32.getZone();
        mutableDateTime20.setZoneRetainFields(dateTimeZone33);
        long long36 = dateTimeZone33.convertUTCToLocal((long) 5);
        boolean boolean37 = property4.equals((java.lang.Object) long36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property4.getFieldType();
        org.joda.time.DurationField durationField39 = property4.getDurationField();
        java.util.Locale locale43 = new java.util.Locale("weekyear", "java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", "gregory");
        java.lang.String str44 = property4.getAsText(locale43);
        org.joda.time.TimeOfDay timeOfDay46 = property4.addToCopy(503);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970" + "'", str18, "1970");
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-52L) + "'", long27 == (-52L));
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 5L + "'", long36 == 5L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertEquals(locale43.toString(), "weekyear_JAVA.UTIL.GREGORIANCALENDAR[TIME=1645454832420,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=2,MINIMALDAYSINFIRSTWEEK=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]_gregory");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0" + "'", str44, "0");
        org.junit.Assert.assertNotNull(timeOfDay46);
    }

    @Test
    public void test5033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5033");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = localDate5.toInterval(dateTimeZone9);
        java.lang.String str11 = interval10.toString();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.Period period20 = period18.plusYears(8);
        org.joda.time.Interval interval21 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = interval21.withEnd(readableInstant23);
        org.joda.time.MutableInterval mutableInterval25 = interval21.toMutableInterval();
        boolean boolean27 = mutableInterval25.isAfter((long) 53281109);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str11, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test5034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5034");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        org.joda.time.Chronology chronology10 = localDate6.getChronology();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 7, chronology10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.LocalDate localDate20 = localDate14.withDayOfMonth(13);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale22);
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str25 = localDate14.toString("+00:00", locale22);
        org.joda.time.DateTime dateTime26 = dateTime11.withFields((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTime();
        java.util.Date date28 = dateTime26.toDate();
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTimeISO();
        java.util.Locale.Category category31 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale32);
        java.util.Locale.setDefault(category31, locale32);
        java.util.Locale locale35 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category31, locale35);
        java.lang.String str38 = dateTime29.toString("48", locale35);
        boolean boolean40 = locale35.equals((java.lang.Object) "2022-02-21T14:49:04.298Z");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.FORMAT + "'", category31.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "48" + "'", str38, "48");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test5035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5035");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.year();
        mutableDateTime1.setDayOfMonth(5);
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime1.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMonthOfYear(394);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 394 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test5036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5036");
        java.io.IOException iOException1 = new java.io.IOException("+00:00");
        java.io.IOException iOException3 = new java.io.IOException("+00:00");
        iOException1.addSuppressed((java.lang.Throwable) iOException3);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException3);
        java.lang.String str6 = iOException3.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.io.IOException: +00:00" + "'", str6, "java.io.IOException: +00:00");
    }

    @Test
    public void test5037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5037");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        org.joda.time.LocalDate localDate11 = dateMidnight5.toLocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear(9);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        int int21 = dateTimeZone19.getStandardOffset((long) 32769);
        java.util.Locale locale23 = java.util.Locale.US;
        java.lang.String str24 = dateTimeZone19.getShortName((long) 1970, locale23);
        long long26 = dateTimeZone19.previousTransition((long) 10);
        boolean boolean27 = dateTimeZone19.isFixed();
        java.lang.String str29 = dateTimeZone19.getShortName(1645454854107L);
        org.joda.time.DateTime dateTime30 = localDate13.toDateTimeAtMidnight(dateTimeZone19);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes(53341818);
        org.joda.time.DateTime dateTime34 = dateTime32.minusYears(53521311);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test5038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5038");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withMillisOfSecond(938);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withSecondOfMinute(6);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight15, readableDuration16);
        int int18 = period17.size();
        java.lang.String str19 = period17.toString();
        org.joda.time.Period period20 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod21 = period20.toMutablePeriod();
        org.joda.time.Period period22 = period17.withFields((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Period period24 = period22.plusSeconds(605);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime10.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime10.minusMonths(16);
        java.lang.String str28 = localDateTime27.toString();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT0S" + "'", str19, "PT0S");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2020-10-21T14:53:46.938" + "'", str28, "2020-10-21T14:53:46.938");
    }

    @Test
    public void test5039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5039");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.dayOfMonth();
        org.joda.time.Chronology chronology21 = yearMonthDay19.getChronology();
        org.joda.time.YearMonthDay.Property property22 = yearMonthDay19.dayOfMonth();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test5040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5040");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter3.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        int int13 = dateTimeZone11.getStandardOffset((long) 32769);
        java.util.Locale locale15 = java.util.Locale.US;
        java.lang.String str16 = dateTimeZone11.getShortName((long) 1970, locale15);
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.now(dateTimeZone11);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone11);
        long long21 = dateTimeZone11.convertLocalToUTC((long) 1961, false);
        java.lang.String str22 = dateTimeZone11.toString();
        long long24 = dateTimeZone11.nextTransition((long) (byte) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter3.withZone(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(480960L, dateTimeZone11);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.dayOfMonth();
        org.joda.time.Interval interval28 = dateMidnight26.toInterval();
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1961L + "'", long21 == 1961L);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(interval28);
    }

    @Test
    public void test5041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5041");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        org.joda.time.Chronology chronology10 = localDate6.getChronology();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 7, chronology10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.LocalDate localDate20 = localDate14.withDayOfMonth(13);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale22);
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str25 = localDate14.toString("+00:00", locale22);
        org.joda.time.DateTime dateTime26 = dateTime11.withFields((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTime();
        java.util.Date date28 = dateTime26.toDate();
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTimeISO();
        java.lang.Object obj30 = null;
        boolean boolean31 = dateTime26.equals(obj30);
        org.joda.time.DateTime.Property property32 = dateTime26.era();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test5042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5042");
        org.joda.time.Period period1 = org.joda.time.Period.millis(17);
        org.joda.time.Period period3 = period1.plusMillis(850);
        org.joda.time.Period period4 = period1.negated();
        int int5 = period4.getWeeks();
        org.joda.time.Period period7 = period4.withSeconds(53581734);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test5043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5043");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, readableDuration14);
        org.joda.time.Duration duration16 = period10.toDurationTo((org.joda.time.ReadableInstant) dateMidnight13);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight22, readableDuration23);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType26 = periodType25.withSecondsRemoved();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, (org.joda.time.ReadableInstant) dateMidnight22, periodType26);
        org.joda.time.PeriodType periodType28 = periodType26.withWeeksRemoved();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableDuration) duration16, periodType26);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 'a', dateTimeZone34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate32, (org.joda.time.ReadablePartial) localDate35);
        org.joda.time.Period period37 = period29.plus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 'a', dateTimeZone45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate43, (org.joda.time.ReadablePartial) localDate46);
        org.joda.time.LocalDate localDate49 = localDate43.withDayOfMonth(13);
        org.joda.time.Chronology chronology50 = localDate49.getChronology();
        org.joda.time.Period period51 = new org.joda.time.Period((long) (short) -1, (long) 'a', periodType40, chronology50);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((java.lang.Object) period29, chronology50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(chronology53);
        int int55 = localDate54.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = localDate54.toDateTimeAtStartOfDay(dateTimeZone56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(1L, dateTimeZone59);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight60, readableDuration61);
        int int63 = period62.size();
        java.lang.String str64 = period62.toString();
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.Period period67 = period62.withField(durationFieldType65, 0);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((long) 'a', dateTimeZone69);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) 'a', dateTimeZone72);
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate70, (org.joda.time.ReadablePartial) localDate73);
        org.joda.time.LocalDate localDate76 = localDate70.withDayOfMonth(13);
        org.joda.time.Chronology chronology77 = localDate76.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.hourOfHalfday();
        org.joda.time.DurationField durationField79 = durationFieldType65.getField(chronology77);
        boolean boolean80 = localDate54.isSupported(durationFieldType65);
        int int81 = period29.indexOf(durationFieldType65);
        org.joda.time.Period period82 = period29.toPeriod();
        int int83 = period82.getMonths();
        int int84 = period82.getSeconds();
        org.joda.time.Seconds seconds85 = period82.toStandardSeconds();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 8 + "'", int63 == 8);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PT0S" + "'", str64, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(seconds85);
    }

    @Test
    public void test5044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5044");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.util.Date date5 = new java.util.Date(2, (int) '#', (int) '#');
        calendar1.setTime(date5);
        long long7 = date5.getTime();
        org.joda.time.YearMonthDay yearMonthDay8 = org.joda.time.YearMonthDay.fromDateFields(date5);
        org.joda.time.DateTime dateTime9 = yearMonthDay8.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight14 = dateTime13.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.withDayOfMonth((int) (short) 1);
        int int17 = dateMidnight14.getWeekyear();
        java.lang.String str19 = dateMidnight14.toString("+00:00");
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate25, (org.joda.time.ReadablePartial) localDate28);
        org.joda.time.LocalDate localDate31 = localDate25.withDayOfMonth(13);
        org.joda.time.Chronology chronology32 = localDate31.getChronology();
        mutablePeriod21.add((long) ' ', chronology32);
        org.joda.time.DurationField durationField34 = chronology32.weekyears();
        org.joda.time.DateTime dateTime35 = dateMidnight14.toDateTime(chronology32);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay8.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonthDay.Property property37 = yearMonthDay8.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay39 = property37.setCopy("53223525-01-01");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"53223525-01-01\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-2050963200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:47:50.386\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1905,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=4,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date5.toString(), "Wed Jan 04 00:00:00 GMT+00:00 1905");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-2050963200000L) + "'", long7 == (-2050963200000L));
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test5045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5045");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.era();
        int int3 = timeOfDay0.indexOf(dateTimeFieldType2);
        org.joda.time.LocalTime localTime4 = timeOfDay0.toLocalTime();
        int int5 = timeOfDay0.size();
        int int6 = timeOfDay0.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay8 = timeOfDay0.withMinuteOfHour(53461581);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53461581 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test5046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5046");
        java.io.IOException iOException1 = new java.io.IOException();
        java.lang.Throwable[] throwableArray2 = iOException1.getSuppressed();
        java.io.IOException iOException3 = new java.io.IOException("mon feb 21 14:47:55 gmt+00:00 2022_8 JUN 150344 01:10:11 GMT", (java.lang.Throwable) iOException1);
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException1);
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test5047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5047");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getWeeksInWeekYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = null;
        org.joda.time.format.DateTimeParser dateTimeParser4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter3, dateTimeParser4);
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter5.getZone();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        int int15 = dateTimeZone13.getStandardOffset((long) 32769);
        java.util.Locale locale17 = java.util.Locale.US;
        java.lang.String str18 = dateTimeZone13.getShortName((long) 1970, locale17);
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.now(dateTimeZone13);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone13);
        long long23 = dateTimeZone13.convertLocalToUTC((long) 1961, false);
        java.lang.String str24 = dateTimeZone13.toString();
        long long26 = dateTimeZone13.nextTransition((long) (byte) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter5.withZone(dateTimeZone13);
        java.util.TimeZone timeZone28 = dateTimeZone13.toTimeZone();
        timeZone28.setID("PT0S");
        calendar1.setTimeZone(timeZone28);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = calendar1.getLeastMaximum(999);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 999");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455226468,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=PT0S,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=46,MILLISECOND=468,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1961L + "'", long23 == 1961L);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test5048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5048");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusYears(13);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = property4.addToCopy(10368000047L);
        java.lang.String str7 = property4.getName();
        org.joda.time.LocalDateTime localDateTime9 = property4.addWrapFieldToCopy(2035);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period12 = org.joda.time.Period.fieldDifference(readablePartial0, (org.joda.time.ReadablePartial) localDateTime11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "dayOfYear" + "'", str7, "dayOfYear");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test5049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5049");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property12 = dateMidnight8.dayOfMonth();
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod14 = period13.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight8.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.withField(dateTimeFieldType21, (int) 'a');
        boolean boolean24 = dateMidnight15.isSupported(dateTimeFieldType21);
        org.joda.time.YearMonthDay yearMonthDay25 = dateMidnight15.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property26 = yearMonthDay25.dayOfMonth();
        java.lang.String str27 = property26.getAsShortText();
        org.joda.time.YearMonthDay yearMonthDay29 = property26.addWrapFieldToCopy(53221078);
        org.joda.time.YearMonthDay yearMonthDay30 = property26.getYearMonthDay();
        int int31 = yearMonthDay30.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = dateTimeFormatter2.print((org.joda.time.ReadablePartial) yearMonthDay30);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test5050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5050");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone0);
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale3);
        java.util.Set<java.lang.String> strSet5 = locale3.getUnicodeLocaleAttributes();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone0, locale3);
        calendar6.set(596, 53221310, 53221098, 53341329, 1, 503);
        int int15 = calendar6.getMaximum(15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval16 = new org.joda.time.Interval((java.lang.Object) calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.util.GregorianCalendar");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:47:50.386\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=596,MONTH=53221310,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=53221098,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=53341329,MINUTE=1,SECOND=503,MILLISECOND=543,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50400000 + "'", int15 == 50400000);
    }

    @Test
    public void test5051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5051");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = localDate5.toInterval(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType20 = periodType19.withSecondsRemoved();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, (org.joda.time.ReadableInstant) dateMidnight16, periodType20);
        int int22 = dateMidnight16.getMillisOfSecond();
        boolean boolean23 = localDate5.equals((java.lang.Object) int22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDate5.toDateTimeAtStartOfDay(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMillis(53401975);
        java.lang.String str29 = dateTime27.toString("48");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "48" + "'", str29, "48");
    }

    @Test
    public void test5052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5052");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        org.joda.time.DateTime dateTime17 = localDate9.toDateTimeAtMidnight(dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(dateTimeZone16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withZone(dateTimeZone16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 36);
        java.lang.StringBuffer stringBuffer22 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate25, (org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = localDate28.isSupported(dateTimeFieldType30);
        org.joda.time.Chronology chronology32 = localDate28.getChronology();
        org.joda.time.LocalDate localDate34 = localDate28.minusDays(100);
        org.joda.time.LocalDate localDate36 = localDate28.withYear((int) (byte) 0);
        int int37 = localDate36.getEra();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = localDate39.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight42 = dateTime41.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.withDayOfMonth((int) (short) 1);
        int int45 = dateMidnight42.getWeekyear();
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight42.plusDays((int) (short) 10);
        java.util.Locale locale48 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale48);
        java.util.Calendar calendar50 = dateMidnight47.toCalendar(locale48);
        org.joda.time.DateMidnight.Property property51 = dateMidnight47.monthOfYear();
        org.joda.time.DateMidnight dateMidnight52 = property51.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 'a', dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 'a', dateTimeZone57);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate55, (org.joda.time.ReadablePartial) localDate58);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(1L, dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone65 = dateMidnight64.getZone();
        org.joda.time.DateTime dateTime66 = localDate58.toDateTimeAtMidnight(dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((java.lang.Object) dateMidnight52, dateTimeZone65);
        org.joda.time.LocalDate localDate68 = org.joda.time.LocalDate.now(dateTimeZone65);
        org.joda.time.DateTime dateTime69 = localDate36.toDateTimeAtCurrentTime(dateTimeZone65);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer22, (org.joda.time.ReadableInstant) dateTime69);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1645455226610,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:47:50.386\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=46,MILLISECOND=610,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1646265600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=62,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test5053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5053");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        int int3 = localDateTime2.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str5 = dateTimeFieldType4.toString();
        int int6 = localDateTime2.get(dateTimeFieldType4);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.weekOfWeekyear();
        java.util.Date date8 = localDateTime2.toDate();
        calendar0.setTime(date8);
        int int10 = calendar0.getWeeksInWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            calendar0.roll(53221515, 893);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455226675,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:47:50.386\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=46,MILLISECOND=675,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 675 + "'", int3 == 675);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "weekyear" + "'", str5, "weekyear");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Feb 21 14:53:46 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
    }

    @Test
    public void test5054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5054");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight4 = property3.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withYearOfEra(15);
        int int7 = dateMidnight6.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate11, (org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = localDate14.isSupported(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = localDate14.getChronology();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 7, chronology18);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.MutableDateTime mutableDateTime21 = dateMidnight6.toMutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate29, (org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, readableDuration37);
        org.joda.time.Duration duration39 = period33.toDurationTo((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(1L, dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1L, dateTimeZone44);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight45, readableDuration46);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType49 = periodType48.withSecondsRemoved();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight42, (org.joda.time.ReadableInstant) dateMidnight45, periodType49);
        org.joda.time.PeriodType periodType51 = periodType49.withWeeksRemoved();
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration39, periodType49);
        org.joda.time.Interval interval53 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadableDuration) duration39);
        org.joda.time.Period period54 = duration39.toPeriod();
        mutableDateTime21.add((org.joda.time.ReadableDuration) duration39, 596);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime21.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(1L, dateTimeZone59);
        org.joda.time.DateMidnight.Property property61 = dateMidnight60.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight60.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property64 = dateMidnight60.dayOfMonth();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(chronology65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = localDate66.toDateTimeAtCurrentTime(dateTimeZone67);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight(1L, dateTimeZone70);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight71.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight73.withField(dateTimeFieldType74, (int) 'a');
        org.joda.time.DateTime dateTime78 = dateTime68.withField(dateTimeFieldType74, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight60.withField(dateTimeFieldType74, 7);
        mutableDateTime21.set(dateTimeFieldType74, 536);
        mutableDateTime21.setTime((long) 53401943);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateMidnight80);
    }

    @Test
    public void test5055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5055");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getWeeksInWeekYear();
        int int4 = calendar1.getActualMinimum(4);
        org.joda.time.TimeOfDay timeOfDay5 = org.joda.time.TimeOfDay.fromCalendarFields(calendar1);
        calendar1.setLenient(true);
        long long8 = calendar1.getTimeInMillis();
        calendar1.set(1999, 53281616, 53341956, 5, 53221660, 464);
        // The following exception was thrown during execution in test generation
        try {
            calendar1.roll(53221504, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:47:50.386\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1999,MONTH=53281616,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=53341956,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=5,MINUTE=53221660,SECOND=464,MILLISECOND=757,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645455226757L + "'", long8 == 1645455226757L);
    }

    @Test
    public void test5056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5056");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        org.joda.time.Chronology chronology10 = localDate6.getChronology();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 7, chronology10);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.monthOfYear();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime12.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.add(0L);
        org.joda.time.MutableDateTime mutableDateTime17 = property14.roundFloor();
        boolean boolean19 = mutableDateTime17.isAfter(1645455007374L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test5057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5057");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter3.getZone();
        java.util.Locale locale5 = dateTimeFormatter3.getLocale();
        boolean boolean6 = dateTimeFormatter3.isParser();
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter3.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.parse("DateTimeField[hourOfHalfday]", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(dateTimeParser7);
    }

    @Test
    public void test5058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5058");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("halfdays");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withDayOfMonth((int) (short) 1);
        int int12 = dateMidnight9.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight9.plusDays((int) (short) 10);
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        java.util.Calendar calendar17 = dateMidnight14.toCalendar(locale15);
        java.util.Locale.Builder builder18 = builder4.setLocale(locale15);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder18.setVariant("Property[millisOfSecond]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: Property[millisOfSecond] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645455226857,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:47:50.386\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=46,MILLISECOND=857,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1646265600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=62,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test5059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5059");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        org.joda.time.DateTime dateTime17 = localDate9.toDateTimeAtMidnight(dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(dateTimeZone16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withZone(dateTimeZone16);
        java.io.Writer writer20 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter19.printTo(writer20, (long) 53461102);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
    }

    @Test
    public void test5060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5060");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.year();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.era();
        mutableDateTime1.addMillis((int) (byte) 100);
        mutableDateTime1.setDayOfWeek(6);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.year();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setSecondOfMinute(53401855);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53401855 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test5061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5061");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = localDate5.minusDays(100);
        org.joda.time.LocalDate localDate13 = localDate5.withYear((int) (byte) 0);
        org.joda.time.DateTime dateTime14 = localDate13.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime16 = dateTime14.minusYears(0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test5062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5062");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        org.joda.time.DateMidnight.Property property11 = dateMidnight2.year();
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.lang.String str13 = property11.getAsText(locale12);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = locale14.getDisplayScript();
        java.lang.String str16 = locale12.getDisplayScript(locale14);
        java.lang.String str17 = locale14.getISO3Country();
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970" + "'", str13, "1970");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test5063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5063");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.year();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight12, readableDuration13);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType16 = periodType15.withSecondsRemoved();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight9, (org.joda.time.ReadableInstant) dateMidnight12, periodType16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight9.year();
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.lang.String str20 = property18.getAsText(locale19);
        int int21 = property6.getMaximumShortTextLength(locale19);
        org.joda.time.MutableDateTime mutableDateTime23 = property6.add((long) 53281528);
        java.lang.String str24 = property6.getAsString();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970" + "'", str20, "1970");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "53283550" + "'", str24, "53283550");
    }

    @Test
    public void test5064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5064");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.Duration duration13 = period7.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime16 = instant15.toMutableDateTime();
        mutableDateTime16.setSecondOfMinute((int) (byte) 1);
        mutableDateTime16.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime16.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime16.secondOfDay();
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) mutableDateTime16);
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale24);
        java.lang.String str26 = calendar25.getCalendarType();
        boolean boolean27 = mutableDateTime0.equals((java.lang.Object) str26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(53221655);
        mutableDateTime0.setZone(dateTimeZone29);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = localDate33.toDateTimeAtCurrentTime(dateTimeZone34);
        int int36 = instant31.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate39, (org.joda.time.ReadablePartial) localDate42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = localDate42.isSupported(dateTimeFieldType44);
        org.joda.time.Chronology chronology46 = localDate42.getChronology();
        org.joda.time.DateTime dateTime47 = dateTime35.toDateTime(chronology46);
        org.joda.time.DateTime dateTime49 = dateTime35.plusWeeks(70);
        mutableDateTime0.setTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 'a', dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 'a', dateTimeZone55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate53, (org.joda.time.ReadablePartial) localDate56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        boolean boolean59 = localDate56.isSupported(dateTimeFieldType58);
        org.joda.time.Chronology chronology60 = localDate56.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.minutes();
        org.joda.time.DurationField durationField62 = chronology60.millis();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.centuryOfEra();
        org.joda.time.DateTime dateTime64 = dateTime35.toDateTime(chronology60);
        org.joda.time.DateTimeField dateTimeField65 = chronology60.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long68 = dateTimeField65.set(0L, "+14:47:01.655");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"+14:47:01.655\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645455226988,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:47:50.386\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=46,MILLISECOND=988,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "gregory" + "'", str26, "gregory");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test5065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5065");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("T00:00:00.042");
        // The following exception was thrown during execution in test generation
        try {
            int int8 = timeZone1.getOffset(0, 53341948, 40, 53456, (-292275054), 53341015);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
    }

    @Test
    public void test5066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5066");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDayOfMonth((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime7 = dateMidnight6.toMutableDateTimeISO();
        mutableDateTime7.setMillisOfDay(120);
        java.lang.String str11 = mutableDateTime7.toString("52");
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime7.era();
        mutableDateTime7.addHours(61);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.minusDays((int) 'a');
        org.joda.time.DateTime dateTime21 = dateMidnight20.toDateTimeISO();
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate25, (org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight32, readableDuration33);
        org.joda.time.Duration duration35 = period29.toDurationTo((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Instant instant36 = instant22.minus((org.joda.time.ReadableDuration) duration35);
        boolean boolean37 = dateMidnight20.isAfter((org.joda.time.ReadableInstant) instant22);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(1L, dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(1L, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone46 = dateMidnight45.getZone();
        int int48 = dateTimeZone46.getStandardOffset((long) 32769);
        java.util.Locale locale50 = java.util.Locale.US;
        java.lang.String str51 = dateTimeZone46.getShortName((long) 1970, locale50);
        org.joda.time.DateTime dateTime52 = dateMidnight40.toDateTime(dateTimeZone46);
        boolean boolean53 = instant22.isEqual((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime55 = instant54.toMutableDateTime();
        mutableDateTime55.setSecondOfMinute((int) (byte) 1);
        mutableDateTime55.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime55.year();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime55.era();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant22, (org.joda.time.ReadableInstant) mutableDateTime55);
        long long63 = instant22.getMillis();
        org.joda.time.MutableDateTime mutableDateTime64 = instant22.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime65 = instant22.toMutableDateTime();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(18, 53221660, 53221515, 25);
        org.joda.time.MutablePeriod mutablePeriod71 = mutablePeriod70.toMutablePeriod();
        mutablePeriod70.addMillis(22);
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((long) 10);
        int int76 = mutablePeriod75.getWeeks();
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight(1L, dateTimeZone78);
        org.joda.time.DateMidnight.Property property80 = dateMidnight79.dayOfMonth();
        org.joda.time.DurationField durationField81 = property80.getDurationField();
        long long84 = durationField81.add((long) (byte) 10, (long) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime85 = new org.joda.time.MutableDateTime((java.lang.Object) long84);
        org.joda.time.Duration duration86 = mutablePeriod75.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime85);
        mutablePeriod70.setPeriod((org.joda.time.ReadableDuration) duration86);
        org.joda.time.Instant instant88 = instant22.minus((org.joda.time.ReadableDuration) duration86);
        boolean boolean89 = mutableDateTime7.isAfter((org.joda.time.ReadableInstant) instant22);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime7.set(dateTimeFieldType90, 53221147);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53221147 for weekyearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "52" + "'", str11, "52");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(property61);
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1645455227028L + "'", long63 == 1645455227028L);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(mutablePeriod71);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 86400010L + "'", long84 == 86400010L);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
    }

    @Test
    public void test5067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5067");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime14 = property12.addNoWrapToCopy((int) (byte) 100);
        org.joda.time.LocalTime localTime16 = property12.addCopy(366);
        org.joda.time.LocalTime localTime18 = localTime16.withHourOfDay(0);
        org.joda.time.LocalTime localTime20 = localTime18.plusHours(53341028);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.parse("53223525-01-01");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime18, (org.joda.time.ReadablePartial) localDateTime22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test5068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5068");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.minusMillis(10);
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay6 = property5.withMaximumValue();
        java.lang.String str7 = property5.getAsString();
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.lang.String str9 = property5.getAsShortText(locale8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.dayOfMonth();
        org.joda.time.DurationField durationField14 = property13.getDurationField();
        org.joda.time.DateMidnight dateMidnight15 = property13.roundHalfEvenCopy();
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        int int18 = property13.getMaximumShortTextLength(locale16);
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.lang.String str20 = locale19.toLanguageTag();
        java.util.Set<java.lang.String> strSet21 = locale19.getUnicodeLocaleKeys();
        java.lang.String str22 = locale16.getDisplayLanguage(locale19);
        java.lang.String str23 = locale8.getDisplayCountry(locale16);
        java.util.Locale locale25 = new java.util.Locale("2022-02-21T14:47:49.804");
        java.lang.String str26 = locale8.getDisplayVariant(locale25);
        java.lang.String str29 = nameProvider0.getShortName(locale8, "P8Y", "tedesco");
        java.util.Locale.setDefault(locale8);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0" + "'", str7, "0");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "en" + "'", str20, "en");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "German" + "'", str22, "German");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "China" + "'", str23, "China");
        org.junit.Assert.assertEquals(locale25.toString(), "2022-02-21t14:47:49.804");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test5069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5069");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        org.joda.time.Period period11 = new org.joda.time.Period(53221504, (int) 'x', (int) (short) 100, 53221180);
        org.joda.time.DateTime dateTime12 = dateTime6.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = dateMidnight17.getZone();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtCurrentTime(dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight23 = dateTime22.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.withDayOfMonth((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime26 = dateMidnight25.toMutableDateTimeISO();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight17, (org.joda.time.ReadableInstant) dateMidnight25);
        int int28 = mutablePeriod27.getMillis();
        org.joda.time.DateTime dateTime29 = dateTime12.minus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTimeAtCurrentTime(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 'a', dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate36, (org.joda.time.ReadablePartial) localDate39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(1L, dateTimeZone42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight43, readableDuration44);
        org.joda.time.Duration duration46 = period40.toDurationTo((org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(1L, dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(1L, dateTimeZone51);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight52, readableDuration53);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType56 = periodType55.withSecondsRemoved();
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight49, (org.joda.time.ReadableInstant) dateMidnight52, periodType56);
        org.joda.time.PeriodType periodType58 = periodType56.withWeeksRemoved();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration46, periodType56);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) 'a', dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) 'a', dateTimeZone64);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate62, (org.joda.time.ReadablePartial) localDate65);
        org.joda.time.Period period67 = period59.plus((org.joda.time.ReadablePeriod) period66);
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) 'a', dateTimeZone72);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) 'a', dateTimeZone75);
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate73, (org.joda.time.ReadablePartial) localDate76);
        org.joda.time.LocalDate localDate79 = localDate73.withDayOfMonth(13);
        org.joda.time.Chronology chronology80 = localDate79.getChronology();
        org.joda.time.Period period81 = new org.joda.time.Period((long) (short) -1, (long) 'a', periodType70, chronology80);
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((java.lang.Object) period59, chronology80);
        org.joda.time.DateTime dateTime83 = dateTime12.withChronology(chronology80);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime85 = dateTime83.withWeekOfWeekyear(53273563);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53273563 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTime83);
    }

    @Test
    public void test5070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5070");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setSecondOfMinute(52);
        mutableDateTime1.setMillisOfSecond((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableDateTime1.add(readablePeriod8);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21);
        org.joda.time.Duration duration23 = period17.toDurationTo((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Instant instant24 = instant10.minus((org.joda.time.ReadableDuration) duration23);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration23, 53221655);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime1.weekOfWeekyear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test5071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5071");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate9.withDayOfMonth(13);
        org.joda.time.Chronology chronology16 = localDate15.getChronology();
        int int17 = localDate5.compareTo((org.joda.time.ReadablePartial) localDate15);
        int int18 = localDate5.getCenturyOfEra();
        org.joda.time.LocalDate.Property property19 = localDate5.weekyear();
        org.joda.time.Interval interval20 = localDate5.toInterval();
        org.joda.time.LocalDate localDate22 = localDate5.withYear(685);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate25, (org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = localDate28.isSupported(dateTimeFieldType30);
        org.joda.time.Chronology chronology32 = localDate28.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.dayOfYear();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = dateTimeField34.getType();
        boolean boolean36 = localDate5.isSupported(dateTimeFieldType35);
        java.lang.String str37 = dateTimeFieldType35.getName();
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 19 + "'", int18 == 19);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "minuteOfDay" + "'", str37, "minuteOfDay");
    }

    @Test
    public void test5072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5072");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withField(dateTimeFieldType9, (int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime3.withField(dateTimeFieldType9, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        org.joda.time.DateTime dateTime20 = dateTime13.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate23, (org.joda.time.ReadablePartial) localDate26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = localDate26.isSupported(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = localDate26.getChronology();
        org.joda.time.LocalDate localDate32 = localDate26.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = localDate32.getFieldType(1);
        boolean boolean35 = dateTime13.isSupported(dateTimeFieldType34);
        org.joda.time.DateTime dateTime37 = dateTime13.minusDays(1961);
        org.joda.time.DateTime.Property property38 = dateTime37.yearOfEra();
        org.joda.time.DateTime dateTime39 = property38.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField40 = property38.getField();
        java.util.Locale locale44 = new java.util.Locale("inglese (Stati Uniti)", "millisOfDay");
        java.lang.String str45 = dateTimeField40.getAsText((long) 994, locale44);
        long long47 = dateTimeField40.remainder((long) 14);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(1L, dateTimeZone50);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight51, readableDuration52);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.minus((org.joda.time.ReadablePeriod) period53);
        int int55 = localDateTime54.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.minusMillis(17);
        java.util.Date date58 = localDateTime57.toDate();
        org.joda.time.TimeOfDay timeOfDay61 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay63 = timeOfDay61.minusMillis(10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray64 = timeOfDay63.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay66 = timeOfDay63.plusMillis(2022);
        org.joda.time.DateTime dateTime67 = timeOfDay63.toDateTimeToday();
        org.joda.time.Period period68 = org.joda.time.Period.ZERO;
        org.joda.time.Seconds seconds69 = period68.toStandardSeconds();
        org.joda.time.TimeOfDay timeOfDay70 = timeOfDay63.plus((org.joda.time.ReadablePeriod) seconds69);
        int[] intArray71 = timeOfDay70.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray73 = dateTimeField40.set((org.joda.time.ReadablePartial) localDateTime57, 447, intArray71, 53281616);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals(locale44.toString(), "inglese (stati uniti)_MILLISOFDAY");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970" + "'", str45, "1970");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 14L + "'", long47 == 14L);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(date58);
// flaky:         org.junit.Assert.assertEquals(date58.toString(), "Mon Feb 21 14:53:47 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray64);
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(seconds69);
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 0, 0, 42]");
    }

    @Test
    public void test5073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5073");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight4 = property3.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withYearOfEra(15);
        int int7 = dateMidnight4.getYear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.plusDays(142);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.monthOfYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test5074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5074");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDayOfMonth((int) (short) 1);
        int int7 = dateMidnight4.getWeekyear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.plusDays((int) (short) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight14 = dateTime13.toDateMidnight();
        boolean boolean15 = dateMidnight9.equals((java.lang.Object) dateMidnight14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtCurrentTime(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate23, (org.joda.time.ReadablePartial) localDate26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight30, readableDuration31);
        org.joda.time.Duration duration33 = period27.toDurationTo((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(1L, dateTimeZone38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight39, readableDuration40);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType43 = periodType42.withSecondsRemoved();
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, (org.joda.time.ReadableInstant) dateMidnight39, periodType43);
        org.joda.time.PeriodType periodType45 = periodType43.withWeeksRemoved();
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration33, periodType43);
        org.joda.time.Interval interval47 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadableDuration) duration33);
        long long48 = interval47.getEndMillis();
        org.joda.time.Period period49 = interval47.toPeriod();
        org.joda.time.DateTime dateTime50 = interval47.getEnd();
        int int51 = dateMidnight14.compareTo((org.joda.time.ReadableInstant) dateTime50);
        int int52 = dateMidnight14.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType45);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645455227239L + "'", long48 == 1645455227239L);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 8 + "'", int52 == 8);
    }

    @Test
    public void test5075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5075");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.Chronology chronology4 = timeOfDay3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.millisOfSecond();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DurationField durationField7 = chronology4.eras();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.yearOfCentury();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(29414L, chronology4);
        org.joda.time.DateTimeField dateTimeField10 = chronology4.dayOfYear();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.Period period12 = new org.joda.time.Period((long) 96, chronology4);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test5076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5076");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(22, 53401057, 30, 53261499, 53253508, 150344, 53341129);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53261499 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5077");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = dateMidnight7.getZone();
        int int10 = dateTimeZone8.getStandardOffset((long) 32769);
        java.util.Locale locale12 = java.util.Locale.US;
        java.lang.String str13 = dateTimeZone8.getShortName((long) 1970, locale12);
        long long15 = dateTimeZone8.previousTransition((long) 10);
        org.joda.time.DateTime dateTime16 = timeOfDay1.toDateTimeToday(dateTimeZone8);
        org.joda.time.LocalTime localTime17 = timeOfDay1.toLocalTime();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test5078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5078");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.year();
        mutableDateTime1.setDayOfMonth(5);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.millisOfSecond();
        mutableDateTime1.addHours(53319778);
        mutableDateTime1.addYears(53401960);
        mutableDateTime1.add((long) 53401458);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test5079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5079");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setSecondOfMinute(52);
        org.joda.time.DateTime dateTime6 = mutableDateTime1.toDateTimeISO();
        int int7 = mutableDateTime1.getMillisOfSecond();
        boolean boolean8 = mutableDateTime1.isAfterNow();
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTime();
        mutableDateTime10.setSecondOfMinute((int) (byte) 1);
        mutableDateTime10.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime10.year();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime10.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
        mutableDateTime1.set(dateTimeFieldType17, 31);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = dateMidnight24.getZone();
        int int27 = dateTimeZone25.getStandardOffset((long) 32769);
        java.util.Locale locale29 = java.util.Locale.US;
        java.lang.String str30 = dateTimeZone25.getShortName((long) 1970, locale29);
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.now(dateTimeZone25);
        org.joda.time.LocalTime.Property property32 = localTime31.millisOfDay();
        org.joda.time.LocalTime localTime34 = property32.addNoWrapToCopy((int) (byte) 100);
        org.joda.time.LocalTime localTime36 = property32.addCopy(366);
        org.joda.time.LocalTime localTime38 = property32.addWrapFieldToCopy(11);
        java.lang.String str39 = property32.getName();
        org.joda.time.DateTimeField dateTimeField40 = property32.getField();
        mutableDateTime1.setRounding(dateTimeField40);
        long long44 = dateTimeField40.getDifferenceAsLong(1645454955231L, 1645401600464L);
        int int46 = dateTimeField40.getMaximumValue((long) 53521085);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 392 + "'", int7 == 392);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "millisOfDay" + "'", str39, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 53354767L + "'", long44 == 53354767L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 86399999 + "'", int46 == 86399999);
    }

    @Test
    public void test5080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5080");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay21 = property20.withMaximumValue();
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime23 = instant22.toMutableDateTime();
        mutableDateTime23.setSecondOfMinute((int) (byte) 1);
        mutableDateTime23.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime23.year();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime23.era();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.DateTimeField dateTimeField33 = localDate31.getField(1);
        java.lang.String str35 = dateTimeField33.getAsShortText((long) '4');
        int int36 = mutableDateTime23.get(dateTimeField33);
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.DateMidnight.Property property42 = dateMidnight41.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight41.minusDays((int) 'a');
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        java.lang.String str47 = locale46.toLanguageTag();
        java.lang.String str48 = dateMidnight41.toString("+00:00", locale46);
        java.lang.String str49 = locale38.getDisplayVariant(locale46);
        java.lang.String str50 = dateTimeField33.getAsText((int) (short) 10, locale46);
        int int51 = property20.getMaximumShortTextLength(locale46);
        org.joda.time.YearMonthDay yearMonthDay52 = property20.getYearMonthDay();
        int int53 = property20.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay55 = property20.addWrapFieldToCopy(53281368);
        org.joda.time.DurationField durationField56 = property20.getRangeDurationField();
        org.joda.time.YearMonthDay yearMonthDay57 = property20.getYearMonthDay();
        org.joda.time.LocalTime localTime59 = org.joda.time.LocalTime.fromMillisOfDay((-1968L));
        int int60 = localTime59.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight(1L, dateTimeZone62);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone66 = dateMidnight65.getZone();
        int int68 = dateTimeZone66.getStandardOffset((long) 32769);
        java.util.Locale locale70 = java.util.Locale.US;
        java.lang.String str71 = dateTimeZone66.getShortName((long) 1970, locale70);
        org.joda.time.LocalTime localTime72 = org.joda.time.LocalTime.now(dateTimeZone66);
        org.joda.time.LocalTime localTime74 = localTime72.withSecondOfMinute(0);
        org.joda.time.LocalTime.Property property75 = localTime74.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField76 = property75.getField();
        boolean boolean77 = localTime59.equals((java.lang.Object) property75);
        org.joda.time.LocalTime localTime78 = property75.getLocalTime();
        org.joda.time.LocalTime localTime80 = property75.addCopy(920);
        // The following exception was thrown during execution in test generation
        try {
            int int81 = property20.compareTo((org.joda.time.ReadablePartial) localTime80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfMonth' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u4e00\u6708" + "'", str35, "\u4e00\u6708");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "en" + "'", str47, "en");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "October" + "'", str50, "October");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 32 + "'", int60 == 32);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(localTime80);
    }

    @Test
    public void test5081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5081");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = dateTime3.toLocalDate();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = dateMidnight14.getZone();
        org.joda.time.DateTime dateTime16 = dateTime8.toDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime3.withZoneRetainFields(dateTimeZone15);
        org.joda.time.DateTime.Property property18 = dateTime17.monthOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtCurrentTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight27.withField(dateTimeFieldType28, (int) 'a');
        org.joda.time.DateTime dateTime32 = dateTime22.withField(dateTimeFieldType28, (int) (short) 0);
        org.joda.time.DateTime dateTime34 = dateTime22.plusHours((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean36 = dateTime22.isSupported(dateTimeFieldType35);
        org.joda.time.DateTime.Property property37 = dateTime17.property(dateTimeFieldType35);
        org.joda.time.DateTime dateTime38 = property37.roundFloorCopy();
        org.joda.time.DateTime dateTime40 = dateTime38.withMillisOfDay(30);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = localDate43.toDateTimeAtCurrentTime(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(1L, dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight50.withField(dateTimeFieldType51, (int) 'a');
        org.joda.time.DateTime dateTime55 = dateTime45.withField(dateTimeFieldType51, (int) (short) 0);
        org.joda.time.DateTime dateTime57 = dateTime45.plusHours((int) (short) 1);
        int int58 = dateTime57.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property59 = dateTime57.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int61 = dateTime57.get(dateTimeFieldType60);
        boolean boolean63 = dateTime57.isAfter(1645454854107L);
        org.joda.time.DateTime dateTime65 = dateTime57.plusDays(14);
        org.joda.time.DateTime.Property property66 = dateTime65.yearOfCentury();
        org.joda.time.DateTime.Property property67 = dateTime65.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight(1L, dateTimeZone70);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight71.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone74 = dateMidnight73.getZone();
        int int76 = dateTimeZone74.getStandardOffset((long) 32769);
        java.util.Locale locale78 = java.util.Locale.US;
        java.lang.String str79 = dateTimeZone74.getShortName((long) 1970, locale78);
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        java.lang.String str81 = locale78.getDisplayCountry(locale80);
        java.lang.String str82 = dateTime65.toString("de_DE", locale78);
        java.lang.String str83 = locale78.getCountry();
        java.lang.String str84 = dateTime38.toString("1970", locale78);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 8 + "'", int58 == 8);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 47 + "'", int61 == 47);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00" + "'", str79, "+00:00");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\ubbf8\uad6d" + "'", str81, "\ubbf8\uad6d");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "71_66Mon" + "'", str82, "71_66Mon");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "US" + "'", str83, "US");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "1970" + "'", str84, "1970");
    }

    @Test
    public void test5082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5082");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDayOfMonth((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime7 = dateMidnight6.toMutableDateTimeISO();
        mutableDateTime7.setMillisOfDay(120);
        int int10 = mutableDateTime7.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime7.secondOfDay();
        int int12 = mutableDateTime7.getRoundingMode();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test5083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5083");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusYears(13);
        int int11 = localDateTime10.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str13 = dateTimeFieldType12.toString();
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.property(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.withWeekOfWeekyear(47);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.weeks();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime6, (org.joda.time.ReadablePartial) localDateTime10, periodType17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime6.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime6.withDayOfMonth(22);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight24, readableDuration25);
        int int27 = period26.size();
        java.lang.String str28 = period26.toString();
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod30 = period29.toMutablePeriod();
        org.joda.time.Period period31 = period26.withFields((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod30.addMillis((int) '4');
        int int34 = mutablePeriod30.getWeeks();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime6.minus((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight38, readableDuration39);
        int int41 = period40.size();
        java.lang.String str42 = period40.toString();
        org.joda.time.Period period43 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod44 = period43.toMutablePeriod();
        org.joda.time.Period period45 = period40.withFields((org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(1L, dateTimeZone48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight49, readableDuration50);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime46.minus((org.joda.time.ReadablePeriod) period51);
        int int53 = localDateTime52.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusYears(13);
        int int57 = localDateTime56.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str59 = dateTimeFieldType58.toString();
        org.joda.time.LocalDateTime.Property property60 = localDateTime56.property(dateTimeFieldType58);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime56.withWeekOfWeekyear(47);
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.weeks();
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime52, (org.joda.time.ReadablePartial) localDateTime56, periodType63);
        mutablePeriod44.add((org.joda.time.ReadablePeriod) period64);
        mutablePeriod44.clear();
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "weekyear" + "'", str13, "weekyear");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT0S" + "'", str28, "PT0S");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT0S" + "'", str42, "PT0S");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(mutablePeriod44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "weekyear" + "'", str59, "weekyear");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(periodType63);
    }

    @Test
    public void test5084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5084");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(0, (int) (short) -1);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone4.observesDaylightTime();
        java.util.Calendar.Builder builder6 = builder3.setTimeZone(timeZone4);
        java.util.TimeZone.setDefault(timeZone4);
        int int8 = timeZone4.getRawOffset();
        java.lang.Object obj9 = timeZone4.clone();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:47:50.386\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:47:50.386\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:47:50.386\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test5085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5085");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(53352, 0, 53221440, 636, 53446172, 53221098, 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 636 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5086");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        org.joda.time.LocalTime localTime14 = property12.getLocalTime();
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        int int17 = calendar16.getWeeksInWeekYear();
        java.util.Date date18 = calendar16.getTime();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 'a', dateTimeZone23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate21, (org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        org.joda.time.DateTime dateTime32 = localDate24.toDateTimeAtMidnight(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isStandardOffset((long) (byte) 10);
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(dateTimeZone31);
        boolean boolean37 = calendar16.after((java.lang.Object) dateTimeZone31);
        org.joda.time.Period period38 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod39 = period38.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 'a', dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 'a', dateTimeZone46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate44, (org.joda.time.ReadablePartial) localDate47);
        org.joda.time.LocalDate localDate50 = localDate44.withDayOfMonth(13);
        org.joda.time.Chronology chronology51 = localDate50.getChronology();
        mutablePeriod39.setPeriod((long) 10, (-599990L), chronology51);
        boolean boolean53 = calendar16.after((java.lang.Object) mutablePeriod39);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(chronology54);
        org.joda.time.LocalDate.Property property56 = localDate55.weekyear();
        boolean boolean57 = calendar16.before((java.lang.Object) property56);
        org.joda.time.LocalDate localDate58 = property56.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean59 = localTime14.isAfter((org.joda.time.ReadablePartial) localDate58);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645455227688,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:47:50.386\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=47,MILLISECOND=688,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Mon Feb 21 14:53:47 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDate58);
    }

    @Test
    public void test5087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5087");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) dateMidnight23, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration17, periodType27);
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = localDate33.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight36 = dateTime35.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(1L, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = dateMidnight41.getZone();
        org.joda.time.DateTime dateTime43 = dateTime35.toDateTime(dateTimeZone42);
        boolean boolean44 = interval31.contains((org.joda.time.ReadableInstant) dateTime35);
        long long45 = interval31.toDurationMillis();
        boolean boolean46 = interval31.containsNow();
        org.joda.time.ReadableInterval readableInterval47 = null;
        boolean boolean48 = interval31.contains(readableInterval47);
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((-691200000L));
        boolean boolean51 = interval31.isAfter((org.joda.time.ReadableInstant) dateMidnight50);
        boolean boolean52 = interval31.isBeforeNow();
        java.lang.Object obj53 = null;
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.weeks();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) 'a', dateTimeZone58);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) 'a', dateTimeZone61);
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate59, (org.joda.time.ReadablePartial) localDate62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        boolean boolean65 = localDate62.isSupported(dateTimeFieldType64);
        org.joda.time.Chronology chronology66 = localDate62.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.dayOfYear();
        org.joda.time.DateTimeField dateTimeField68 = chronology66.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField69 = chronology66.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((long) 493, (long) 53221161, periodType56, chronology66);
        org.joda.time.DateTimeField dateTimeField71 = chronology66.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone72 = chronology66.getZone();
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight(obj53, dateTimeZone72);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) 'a', dateTimeZone75);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate((long) 'a', dateTimeZone78);
        org.joda.time.Period period80 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate76, (org.joda.time.ReadablePartial) localDate79);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateMidnight dateMidnight83 = new org.joda.time.DateMidnight(1L, dateTimeZone82);
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight83, readableDuration84);
        org.joda.time.Duration duration86 = period80.toDurationTo((org.joda.time.ReadableInstant) dateMidnight83);
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight73.minus((org.joda.time.ReadableDuration) duration86);
        org.joda.time.Interval interval88 = interval31.withDurationAfterStart((org.joda.time.ReadableDuration) duration86);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate89 = new org.joda.time.LocalDate((java.lang.Object) interval31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Interval");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertNotNull(interval88);
    }

    @Test
    public void test5088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5088");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        boolean boolean2 = strSet1.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.Locale.LanguageRange[] languageRangeArray4 = strSet1.toArray(languageRangeArray3);
        java.lang.Object[] objArray5 = strSet1.toArray();
        int int6 = strSet1.size();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        org.joda.time.Chronology chronology16 = localDate12.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = dateTimeField18.getType();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime22 = instant21.toMutableDateTime();
        mutableDateTime22.setSecondOfMinute((int) (byte) 1);
        mutableDateTime22.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime22.year();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime22.era();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.DateTimeField dateTimeField32 = localDate30.getField(1);
        java.lang.String str34 = dateTimeField32.getAsShortText((long) '4');
        int int35 = mutableDateTime22.get(dateTimeField32);
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(1L, dateTimeZone39);
        org.joda.time.DateMidnight.Property property41 = dateMidnight40.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight40.minusDays((int) 'a');
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.lang.String str46 = locale45.toLanguageTag();
        java.lang.String str47 = dateMidnight40.toString("+00:00", locale45);
        java.lang.String str48 = locale37.getDisplayVariant(locale45);
        java.lang.String str49 = dateTimeField32.getAsText((int) (short) 10, locale45);
        java.lang.String str50 = dateTimeField18.getAsShortText((long) 8, locale45);
        java.util.Set<java.lang.String> strSet51 = locale45.getUnicodeLocaleAttributes();
        java.util.Locale locale52 = locale45.stripExtensions();
        boolean boolean53 = strSet1.contains((java.lang.Object) locale45);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u4e00\u6708" + "'", str34, "\u4e00\u6708");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "en" + "'", str46, "en");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "October" + "'", str49, "October");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0" + "'", str50, "0");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test5089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5089");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeField dateTimeField3 = localDate1.getField(1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        boolean boolean11 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate9);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property13 = localDate9.centuryOfEra();
        org.joda.time.LocalDate localDate14 = property13.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = dateMidnight26.getZone();
        org.joda.time.DateTime dateTime28 = localDate20.toDateTimeAtMidnight(dateTimeZone27);
        org.joda.time.Interval interval29 = localDate14.toInterval(dateTimeZone27);
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.Period period31 = interval29.toPeriod();
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.minutes();
        boolean boolean33 = period31.isSupported(durationFieldType32);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test5090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5090");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        long long12 = dateTimeZone5.previousTransition((long) 10);
        boolean boolean13 = dateTimeZone5.isFixed();
        java.lang.String str15 = dateTimeZone5.getShortName(1645454854107L);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate20, (org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        boolean boolean26 = localDate23.isSupported(dateTimeFieldType25);
        org.joda.time.Chronology chronology27 = localDate23.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfYear();
        org.joda.time.DurationField durationField29 = dateTimeField28.getDurationField();
        long long31 = dateTimeField28.roundCeiling(59L);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 'a', dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 'a', dateTimeZone37);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate35, (org.joda.time.ReadablePartial) localDate38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        boolean boolean41 = localDate38.isSupported(dateTimeFieldType40);
        org.joda.time.Chronology chronology42 = localDate38.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = dateTimeField44.getType();
        org.joda.time.Instant instant47 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime48 = instant47.toMutableDateTime();
        mutableDateTime48.setSecondOfMinute((int) (byte) 1);
        mutableDateTime48.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime48.year();
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime48.era();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(chronology55);
        org.joda.time.DateTimeField dateTimeField58 = localDate56.getField(1);
        java.lang.String str60 = dateTimeField58.getAsShortText((long) '4');
        int int61 = mutableDateTime48.get(dateTimeField58);
        java.util.Locale locale63 = java.util.Locale.ITALIAN;
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(1L, dateTimeZone65);
        org.joda.time.DateMidnight.Property property67 = dateMidnight66.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight66.minusDays((int) 'a');
        java.util.Locale locale71 = java.util.Locale.ENGLISH;
        java.lang.String str72 = locale71.toLanguageTag();
        java.lang.String str73 = dateMidnight66.toString("+00:00", locale71);
        java.lang.String str74 = locale63.getDisplayVariant(locale71);
        java.lang.String str75 = dateTimeField58.getAsText((int) (short) 10, locale71);
        java.lang.String str76 = dateTimeField44.getAsShortText((long) 8, locale71);
        java.util.Set<java.lang.String> strSet77 = locale71.getUnicodeLocaleAttributes();
        java.lang.String str78 = dateTimeField28.getAsText(53281190, locale71);
        java.util.Calendar calendar79 = java.util.Calendar.getInstance(locale71);
        java.lang.String str80 = dateTimeZone5.getName((-25245561599941L), locale71);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 86400000L + "'", long31 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeField58);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "gen" + "'", str60, "gen");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it");
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "en" + "'", str72, "en");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00" + "'", str73, "+00:00");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "October" + "'", str75, "October");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "0" + "'", str76, "0");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "53281190" + "'", str78, "53281190");
        org.junit.Assert.assertNotNull(calendar79);
// flaky:         org.junit.Assert.assertEquals(calendar79.toString(), "java.util.GregorianCalendar[time=1645455227859,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:47:50.386\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=47,MILLISECOND=859,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+00:00" + "'", str80, "+00:00");
    }

    @Test
    public void test5091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5091");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(10, 888, 32769, 11);
        mutablePeriod4.setDays(53281803);
    }

    @Test
    public void test5092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5092");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        int int3 = localDateTime2.getDayOfWeek();
        int int4 = localDateTime2.getMillisOfSecond();
        org.joda.time.DateTime dateTime5 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withYearOfEra(53221655);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minusYears(36);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.minusMillis((int) 'a');
        org.joda.time.LocalDateTime.Property property12 = localDateTime2.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime2.withDate(53579451, 37, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 986 + "'", int4 == 986);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test5093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5093");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        int int4 = mutableDateTime1.getMillisOfDay();
        int int5 = mutableDateTime1.getHourOfDay();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.year();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, readableDuration14);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType17 = periodType16.withSecondsRemoved();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableInstant) dateMidnight13, periodType17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight10.year();
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = property19.getAsText(locale20);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime23 = instant22.toMutableDateTime();
        mutableDateTime23.setSecondOfMinute((int) (byte) 1);
        mutableDateTime23.setSecondOfMinute(52);
        mutableDateTime23.setMillisOfSecond((int) ' ');
        long long30 = property19.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = dateMidnight35.getZone();
        mutableDateTime23.setZoneRetainFields(dateTimeZone36);
        long long39 = dateTimeZone36.convertUTCToLocal((long) 5);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone36);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime43 = dateTime40.minusHours(53461250);
        int int44 = dateTime40.getMonthOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53581051 + "'", int4 == 53581051);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 14 + "'", int5 == 14);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970" + "'", str21, "1970");
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-52L) + "'", long30 == (-52L));
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 5L + "'", long39 == 5L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
    }

    @Test
    public void test5094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5094");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        int int3 = localDateTime2.getDayOfWeek();
        int int4 = localDateTime2.getEra();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minus(readableDuration5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = localDateTime2.withDate(53521709, 938, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 938 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test5095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5095");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTimeAtCurrentTime(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.withField(dateTimeFieldType16, (int) 'a');
        org.joda.time.DateTime dateTime20 = dateTime10.withField(dateTimeFieldType16, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight2.withField(dateTimeFieldType16, 7);
        org.joda.time.DateTimeZone dateTimeZone23 = dateMidnight22.getZone();
        org.joda.time.DateMidnight.Property property24 = dateMidnight22.era();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test5096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5096");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight5 = dateTime4.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        org.joda.time.DateTime dateTime12 = dateTime4.toDateTime(dateTimeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(53221186L, dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.withField(dateTimeFieldType20, (int) 'a');
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime14.property(dateTimeFieldType20);
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundCeiling();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
    }

    @Test
    public void test5097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5097");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDayOfMonth((int) (short) 1);
        int int7 = dateMidnight4.getWeekyear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.plusDays((int) (short) 10);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        java.util.Calendar calendar12 = dateMidnight9.toCalendar(locale10);
        org.joda.time.DateMidnight.Property property13 = dateMidnight9.monthOfYear();
        int int14 = dateMidnight9.getYearOfEra();
        long long15 = dateMidnight9.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 'a', dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate19, (org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate localDate25 = localDate19.withDayOfMonth(13);
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        long long30 = chronology26.add((long) (short) -1, (long) 1961, 15);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.standard();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 'a', dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 'a', dateTimeZone37);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate35, (org.joda.time.ReadablePartial) localDate38);
        org.joda.time.LocalDate localDate41 = localDate35.withDayOfMonth(13);
        org.joda.time.Chronology chronology42 = localDate41.getChronology();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 0, periodType32, chronology42);
        int[] intArray46 = chronology26.get((org.joda.time.ReadablePeriod) mutablePeriod43, (long) 596, (long) 53221161);
        boolean boolean47 = dateTimeFieldType16.isSupported(chronology26);
        org.joda.time.Period period49 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod50 = period49.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 'a', dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 'a', dateTimeZone57);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate55, (org.joda.time.ReadablePartial) localDate58);
        org.joda.time.LocalDate localDate61 = localDate55.withDayOfMonth(13);
        org.joda.time.Chronology chronology62 = localDate61.getChronology();
        mutablePeriod50.setPeriod((long) 10, (-599990L), chronology62);
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((-1968L), chronology62);
        org.joda.time.DateTimeZone dateTimeZone65 = chronology62.getZone();
        org.joda.time.DateTimeField dateTimeField66 = chronology62.year();
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType16.getField(chronology62);
        org.joda.time.DateMidnight.Property property68 = dateMidnight9.property(dateTimeFieldType16);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight9.withYear(53581419);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645455228250,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:47:50.386\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=48,MILLISECOND=250,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1646265600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=62,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1646265600000L + "'", long15 == 1646265600000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 29414L + "'", long30 == 29414L);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 0, 14, 47, 0, 565]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateMidnight70);
    }

    @Test
    public void test5098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5098");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = localDate5.toInterval(dateTimeZone9);
        java.lang.String str11 = interval10.toString();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.Period period20 = period18.plusYears(8);
        org.joda.time.Interval interval21 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        java.lang.String str22 = interval10.toString();
        long long23 = interval10.toDurationMillis();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str11, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str22, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 86400000L + "'", long23 == 86400000L);
    }

    @Test
    public void test5099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5099");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.toLanguageTag();
        java.util.Locale.setDefault(locale0);
        java.util.Locale locale3 = locale0.stripExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "en" + "'", str1, "en");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
    }

    @Test
    public void test5100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5100");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale1);
        java.util.Locale.setDefault(category0, locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator5 = strSet4.spliterator();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSpliterator5);
    }

    @Test
    public void test5101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5101");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setUnicodeLocaleKeyword("53521901", "\u4e2d\u6587\u4e2d\u56fd)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 53521901 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test5102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5102");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, readableDuration8);
        int int10 = period9.size();
        java.lang.String str11 = period9.toString();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.Period period14 = period9.withField(durationFieldType12, 0);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate localDate23 = localDate17.withDayOfMonth(13);
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        org.joda.time.DurationField durationField26 = durationFieldType12.getField(chronology24);
        boolean boolean27 = localDate1.isSupported(durationFieldType12);
        org.joda.time.LocalDate.Property property28 = localDate1.monthOfYear();
        java.util.Date date29 = localDate1.toDate();
        org.joda.time.LocalDate.Property property30 = localDate1.era();
        org.joda.time.LocalDate localDate32 = localDate1.withYear(53221684);
        int int33 = localDate1.getCenturyOfEra();
        java.util.Locale locale35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = localDate1.toString("weekyear", locale35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: r");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT0S" + "'", str11, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Mon Feb 21 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20 + "'", int33 == 20);
    }

    @Test
    public void test5103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5103");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.clearExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test5104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5104");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateTime dateTime6 = dateTime3.minus(2678400000L);
        org.joda.time.DateTime.Property property7 = dateTime6.weekOfWeekyear();
        org.joda.time.DateTime dateTime9 = dateTime6.withYearOfEra(4441178);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test5105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5105");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        org.joda.time.DateMidnight.Property property11 = dateMidnight2.year();
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.lang.String str13 = property11.getAsText(locale12);
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime15 = instant14.toMutableDateTime();
        mutableDateTime15.setSecondOfMinute((int) (byte) 1);
        mutableDateTime15.setSecondOfMinute(52);
        mutableDateTime15.setMillisOfSecond((int) ' ');
        long long22 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate25, (org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = localDate28.isSupported(dateTimeFieldType30);
        org.joda.time.Chronology chronology32 = localDate28.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.minutes();
        org.joda.time.DurationFieldType durationFieldType34 = durationField33.getType();
        mutableDateTime15.add(durationFieldType34, (-19092));
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime15.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime39 = property37.set(53405686);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970" + "'", str13, "1970");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-52L) + "'", long22 == (-52L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
    }

    @Test
    public void test5106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5106");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        org.joda.time.DateTime dateTime17 = localDate9.toDateTimeAtMidnight(dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(dateTimeZone16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withZone(dateTimeZone16);
        boolean boolean20 = dateTimeFormatter19.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeFormatter19.getZone();
        java.lang.Appendable appendable22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter19.printTo(appendable22, readableInstant23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
    }

    @Test
    public void test5107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5107");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        org.joda.time.DateTime dateTime11 = dateTime3.toDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMillis(17);
        org.joda.time.DateTime dateTime15 = dateTime11.plusHours(178);
        org.joda.time.DateTime.Property property16 = dateTime11.monthOfYear();
        org.joda.time.DateTime dateTime18 = dateTime11.plusHours(53521452);
        org.joda.time.DateTime.Property property19 = dateTime18.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test5108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5108");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getWeeksInWeekYear();
        int int4 = calendar1.getActualMinimum(4);
        org.joda.time.TimeOfDay timeOfDay5 = org.joda.time.TimeOfDay.fromCalendarFields(calendar1);
        calendar1.setLenient(true);
        long long8 = calendar1.getTimeInMillis();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType20 = periodType19.withSecondsRemoved();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, (org.joda.time.ReadableInstant) dateMidnight16, periodType20);
        org.joda.time.DateMidnight.Property property22 = dateMidnight13.year();
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str24 = property22.getAsText(locale23);
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.lang.String str26 = locale25.getDisplayScript();
        java.lang.String str27 = locale23.getDisplayScript(locale25);
        java.lang.String str28 = locale25.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap29 = calendar1.getDisplayNames(19, 0, locale25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455228567,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:47:50.386\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=48,MILLISECOND=567,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645455228567L + "'", long8 == 1645455228567L);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970" + "'", str24, "1970");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "en" + "'", str28, "en");
    }

    @Test
    public void test5109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5109");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = property6.addWrapFieldToCopy(32769);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusWeeks(53521968);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
    }

    @Test
    public void test5110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5110");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5111");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, readableDuration14);
        org.joda.time.Duration duration16 = period10.toDurationTo((org.joda.time.ReadableInstant) dateMidnight13);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight22, readableDuration23);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType26 = periodType25.withSecondsRemoved();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, (org.joda.time.ReadableInstant) dateMidnight22, periodType26);
        org.joda.time.PeriodType periodType28 = periodType26.withWeeksRemoved();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableDuration) duration16, periodType26);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 'a', dateTimeZone34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate32, (org.joda.time.ReadablePartial) localDate35);
        org.joda.time.Period period37 = period29.plus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 'a', dateTimeZone45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate43, (org.joda.time.ReadablePartial) localDate46);
        org.joda.time.LocalDate localDate49 = localDate43.withDayOfMonth(13);
        org.joda.time.Chronology chronology50 = localDate49.getChronology();
        org.joda.time.Period period51 = new org.joda.time.Period((long) (short) -1, (long) 'a', periodType40, chronology50);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((java.lang.Object) period29, chronology50);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(chronology50);
        int int54 = localDate53.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
    }

    @Test
    public void test5112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5112");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = dateTime3.toLocalDate();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = dateMidnight14.getZone();
        org.joda.time.DateTime dateTime16 = dateTime8.toDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime3.withZoneRetainFields(dateTimeZone15);
        org.joda.time.DateTime.Property property18 = dateTime17.monthOfYear();
        org.joda.time.DateTime dateTime19 = property18.getDateTime();
        org.joda.time.DateTime dateTime20 = property18.roundHalfFloorCopy();
        org.joda.time.Interval interval21 = property18.toInterval();
        org.joda.time.Period period22 = interval21.toPeriod();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period22);
    }

    @Test
    public void test5113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5113");
        java.util.Date date6 = new java.util.Date(53221327, 53456, 53543220, 53581751, 0, 53581324);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Apr 19 02:42:04 GMT+00:00 53380392");
    }

    @Test
    public void test5114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5114");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        org.joda.time.Chronology chronology16 = localDate12.getChronology();
        org.joda.time.LocalDate localDate18 = localDate12.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = localDate18.getFieldType(1);
        org.joda.time.DateMidnight.Property property21 = dateMidnight2.property(dateTimeFieldType20);
        org.joda.time.DateMidnight dateMidnight22 = property21.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property29 = dateMidnight25.dayOfMonth();
        org.joda.time.Period period30 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod31 = period30.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight25.plus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.withField(dateTimeFieldType38, (int) 'a');
        boolean boolean41 = dateMidnight32.isSupported(dateTimeFieldType38);
        org.joda.time.YearMonthDay yearMonthDay42 = dateMidnight32.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1L, dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(1L, dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone51 = dateMidnight50.getZone();
        int int53 = dateTimeZone51.getStandardOffset((long) 32769);
        java.util.Locale locale55 = java.util.Locale.US;
        java.lang.String str56 = dateTimeZone51.getShortName((long) 1970, locale55);
        org.joda.time.DateTime dateTime57 = dateMidnight45.toDateTime(dateTimeZone51);
        org.joda.time.Interval interval58 = yearMonthDay42.toInterval(dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight22.withZoneRetainFields(dateTimeZone51);
        org.joda.time.DateMidnight.Property property60 = dateMidnight22.centuryOfEra();
        java.lang.String str61 = property60.getAsText();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "19" + "'", str61, "19");
    }

    @Test
    public void test5115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5115");
        java.util.Date date3 = new java.util.Date(53221515, (int) (byte) 1, (int) 'a');
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.fromDateFields(date3);
        date3.setMonth((int) (byte) 10);
        java.lang.String str7 = date3.toGMTString();
        java.time.Instant instant8 = date3.toInstant();
        int int9 = date3.getMinutes();
        org.junit.Assert.assertEquals(date3.toString(), "Wed Nov 08 00:00:00 GMT+00:00 53223415");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "8 Nov 53223415 00:00:00 GMT" + "'", str7, "8 Nov 53223415 00:00:00 GMT");
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test5116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5116");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDayOfMonth((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime7 = dateMidnight6.toMutableDateTimeISO();
        mutableDateTime7.setMillisOfDay(120);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime7.centuryOfEra();
        java.lang.Object obj11 = null;
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.weeks();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = localDate20.isSupported(dateTimeFieldType22);
        org.joda.time.Chronology chronology24 = localDate20.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.dayOfYear();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 493, (long) 53221161, periodType14, chronology24);
        org.joda.time.DateTimeField dateTimeField29 = chronology24.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology24.getZone();
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(obj11, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 'a', dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 'a', dateTimeZone36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate34, (org.joda.time.ReadablePartial) localDate37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight41, readableDuration42);
        org.joda.time.Duration duration44 = period38.toDurationTo((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight31.minus((org.joda.time.ReadableDuration) duration44);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration44, 53388515);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(dateMidnight45);
    }

    @Test
    public void test5117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5117");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int[] intArray1 = localDateTime0.getValues();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(intArray1);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[2022, 2, 21, 53628947]");
    }

    @Test
    public void test5118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5118");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(53221504, 21, 720);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53221504 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5119");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minusMillis(10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = timeOfDay6.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay6.plusMillis(2022);
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.Chronology chronology12 = timeOfDay11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfSecond();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology12);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay6.withChronologyRetainFields(chronology12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(53521375, 53341818, 804, chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53341818 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(timeOfDay15);
    }

    @Test
    public void test5120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5120");
        java.util.Date date5 = new java.util.Date(1931, (int) (byte) 10, 19, 31, 53221550);
        java.lang.String str6 = date5.toGMTString();
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromDateFields(date5);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.minusMillis(36);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Jan 28 16:50:00 GMT+00:00 3933");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "28 Jan 3933 16:50:00 GMT" + "'", str6, "28 Jan 3933 16:50:00 GMT");
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
    }

    @Test
    public void test5121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5121");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusMillis(10);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay5 = property4.withMaximumValue();
        java.lang.String str6 = property4.getAsString();
        org.joda.time.TimeOfDay timeOfDay8 = property4.addToCopy((int) '#');
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusYears(13);
        int int13 = localDateTime12.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str15 = dateTimeFieldType14.toString();
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.property(dateTimeFieldType14);
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        java.util.Locale locale18 = java.util.Locale.US;
        int int19 = dateTimeField17.getMaximumTextLength(locale18);
        java.lang.String str20 = locale18.getVariant();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay21 = property4.setCopy("PT0.048S", locale18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"PT0.048S\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0" + "'", str6, "0");
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "weekyear" + "'", str15, "weekyear");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test5122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5122");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.setLanguage("");
        java.util.Locale.Builder builder6 = builder0.setLanguageTag("Standard");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder7.setExtension('#', "2022");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test5123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5123");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        int int3 = localDateTime2.getDayOfWeek();
        int int4 = localDateTime2.getMillisOfSecond();
        org.joda.time.DateTime dateTime5 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(366);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = dateTime5.withSecondOfMinute(2071);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2071 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 113 + "'", int4 == 113);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test5124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5124");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        boolean boolean5 = dateTimeFormatter2.isParser();
        boolean boolean6 = dateTimeFormatter2.isParser();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime8 = instant7.toMutableDateTime();
        mutableDateTime8.setSecondOfMinute((int) (byte) 1);
        mutableDateTime8.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime8.year();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime8.era();
        mutableDateTime8.addMillis((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 'a', dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate19, (org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = dateMidnight28.getZone();
        org.joda.time.DateTime dateTime30 = localDate22.toDateTimeAtMidnight(dateTimeZone29);
        mutableDateTime8.setZoneRetainFields(dateTimeZone29);
        int int32 = mutableDateTime8.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = dateTimeFormatter2.print((org.joda.time.ReadableInstant) mutableDateTime8);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
    }

    @Test
    public void test5125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5125");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute(3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = localDateTime4.getField((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.minusHours(971);
        int int10 = localDateTime4.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
    }

    @Test
    public void test5126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5126");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.lang.String str2 = calendar1.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            int int4 = calendar1.getLeastMaximum((-184));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -184");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455229173,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:47:50.386\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=49,MILLISECOND=173,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "gregory" + "'", str2, "gregory");
    }

    @Test
    public void test5127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5127");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test5128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5128");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfYear();
        org.joda.time.LocalDate localDate3 = localDate0.withYear(953);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        int int14 = dateTimeZone12.getStandardOffset((long) 32769);
        java.util.Locale locale16 = java.util.Locale.US;
        java.lang.String str17 = dateTimeZone12.getShortName((long) 1970, locale16);
        org.joda.time.DateTime dateTime18 = dateMidnight6.toDateTime(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime19 = dateMidnight6.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight22.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property26 = dateMidnight22.dayOfMonth();
        org.joda.time.Period period27 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod28 = period27.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight22.plus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight34.withField(dateTimeFieldType35, (int) 'a');
        boolean boolean38 = dateMidnight29.isSupported(dateTimeFieldType35);
        org.joda.time.YearMonthDay yearMonthDay39 = dateMidnight29.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property40 = yearMonthDay39.dayOfMonth();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTimeAtCurrentTime(dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight45 = dateTime44.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(1L, dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone51 = dateMidnight50.getZone();
        org.joda.time.DateTime dateTime52 = dateTime44.toDateTime(dateTimeZone51);
        org.joda.time.DateTime dateTime53 = yearMonthDay39.toDateTimeAtMidnight(dateTimeZone51);
        int int54 = yearMonthDay39.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(1L, dateTimeZone56);
        org.joda.time.DateMidnight.Property property58 = dateMidnight57.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight57.minusDays((int) 'a');
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight62, readableDuration63);
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay39.minus((org.joda.time.ReadablePeriod) mutablePeriod64);
        mutableDateTime19.add((org.joda.time.ReadablePeriod) mutablePeriod64);
        mutablePeriod64.addMillis(53281444);
        org.joda.time.LocalDate localDate69 = localDate0.minus((org.joda.time.ReadablePeriod) mutablePeriod64);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.secondOfMinute();
        java.lang.String str71 = dateTimeFieldType70.getName();
        org.joda.time.DurationFieldType durationFieldType72 = dateTimeFieldType70.getRangeDurationType();
        mutablePeriod64.set(durationFieldType72, 53461124);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 52 + "'", int1 == 52);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "secondOfMinute" + "'", str71, "secondOfMinute");
        org.junit.Assert.assertNotNull(durationFieldType72);
    }

    @Test
    public void test5129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5129");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.yearOfEra();
        java.lang.String str15 = dateTimeField13.getAsText((long) 53253508);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.LocalDate.Property property19 = localDate18.centuryOfEra();
        int int20 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) localDate18);
        long long22 = dateTimeField13.remainder((-49L));
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970" + "'", str15, "1970");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 31535999951L + "'", long22 == 31535999951L);
    }

    @Test
    public void test5130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5130");
        org.joda.time.Period period1 = org.joda.time.Period.millis(17);
        org.joda.time.Period period3 = period1.plusMillis(850);
        org.joda.time.Period period4 = period3.negated();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test5131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5131");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) dateMidnight23, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration17, periodType27);
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadableDuration) duration17);
        long long32 = interval31.getEndMillis();
        org.joda.time.Period period33 = interval31.toPeriod();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = localDate36.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 'a', dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 'a', dateTimeZone43);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate41, (org.joda.time.ReadablePartial) localDate44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(1L, dateTimeZone47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight48, readableDuration49);
        org.joda.time.Duration duration51 = period45.toDurationTo((org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(1L, dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(1L, dateTimeZone56);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight57, readableDuration58);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType61 = periodType60.withSecondsRemoved();
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight54, (org.joda.time.ReadableInstant) dateMidnight57, periodType61);
        org.joda.time.PeriodType periodType63 = periodType61.withWeeksRemoved();
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration51, periodType61);
        org.joda.time.Interval interval65 = new org.joda.time.Interval(readableInstant34, (org.joda.time.ReadableDuration) duration51);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate(chronology66);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = localDate67.toDateTimeAtCurrentTime(dateTimeZone68);
        org.joda.time.DateMidnight dateMidnight70 = dateTime69.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight(1L, dateTimeZone72);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight73.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone76 = dateMidnight75.getZone();
        org.joda.time.DateTime dateTime77 = dateTime69.toDateTime(dateTimeZone76);
        org.joda.time.Interval interval78 = interval65.withEnd((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Duration duration79 = interval65.toDuration();
        org.joda.time.Period period80 = new org.joda.time.Period();
        org.joda.time.Period period82 = period80.minusMonths((int) '#');
        boolean boolean83 = interval65.equals((java.lang.Object) '#');
        boolean boolean84 = interval31.overlaps((org.joda.time.ReadableInterval) interval65);
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((long) 10);
        int int87 = mutablePeriod86.getWeeks();
        org.joda.time.DateTimeZone dateTimeZone89 = null;
        org.joda.time.DateMidnight dateMidnight90 = new org.joda.time.DateMidnight(1L, dateTimeZone89);
        org.joda.time.DateMidnight.Property property91 = dateMidnight90.dayOfMonth();
        org.joda.time.DurationField durationField92 = property91.getDurationField();
        long long95 = durationField92.add((long) (byte) 10, (long) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime96 = new org.joda.time.MutableDateTime((java.lang.Object) long95);
        org.joda.time.Duration duration97 = mutablePeriod86.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime96);
        org.joda.time.Interval interval98 = interval31.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod86);
        long long99 = interval98.toDurationMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1645455229365L + "'", long32 == 1645455229365L);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 86400010L + "'", long95 == 86400010L);
        org.junit.Assert.assertNotNull(duration97);
        org.junit.Assert.assertNotNull(interval98);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 10L + "'", long99 == 10L);
    }

    @Test
    public void test5132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5132");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate5.withYearOfEra(61);
        org.joda.time.DateTime dateTime11 = localDate5.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test5133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5133");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.Duration duration13 = period7.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Instant instant14 = instant0.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Instant instant16 = instant14.minus((long) ' ');
        org.joda.time.MutableDateTime mutableDateTime17 = instant14.toMutableDateTime();
        org.joda.time.Chronology chronology18 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology18.getZone();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.weekOfWeekyear();
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test5134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5134");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(565, 53221310, 53521452, 53461362);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 565 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5135");
        org.joda.time.Period period8 = new org.joda.time.Period(52, 1, 14, (int) (short) 0, 53221180, 1961, 53221147, (int) (short) 10);
        org.joda.time.Period period9 = period8.normalizedStandard();
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test5136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5136");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime14 = property12.setCopy(53221515);
        org.joda.time.LocalTime localTime16 = property12.addCopy(53221515);
        org.joda.time.LocalTime localTime18 = localTime16.plusSeconds(53279438);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test5137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5137");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.year();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight12, readableDuration13);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType16 = periodType15.withSecondsRemoved();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight9, (org.joda.time.ReadableInstant) dateMidnight12, periodType16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight9.year();
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.lang.String str20 = property18.getAsText(locale19);
        int int21 = property6.getMaximumShortTextLength(locale19);
        org.joda.time.MutableDateTime mutableDateTime23 = property6.add((long) 53281528);
        org.joda.time.MutableDateTime mutableDateTime24 = property6.roundFloor();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970" + "'", str20, "1970");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
    }

    @Test
    public void test5138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5138");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        mutableDateTime2.setSecondOfMinute((int) (byte) 1);
        mutableDateTime2.setSecondOfMinute(52);
        org.joda.time.DateTime dateTime7 = mutableDateTime2.toDateTimeISO();
        org.joda.time.Period period9 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod10 = period9.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate localDate21 = localDate15.withDayOfMonth(13);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        mutablePeriod10.setPeriod((long) 10, (-599990L), chronology22);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((-1968L), chronology22);
        mutableDateTime2.setChronology(chronology22);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 719, chronology22);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.minuteOfHour();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test5139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5139");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        int int7 = localDate2.getYear();
        org.joda.time.LocalDate localDate9 = localDate2.withYearOfCentury((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.lang.String str16 = dateTimeFieldType15.toString();
        int int17 = dateMidnight14.get(dateTimeFieldType15);
        boolean boolean18 = localDate2.isSupported(dateTimeFieldType15);
        int int19 = localDate2.getWeekyear();
        org.joda.time.LocalDate.Property property20 = localDate2.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "weekyearOfCentury" + "'", str16, "weekyearOfCentury");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 61 + "'", int17 == 61);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test5140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5140");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusYears(13);
        int int8 = localDateTime7.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str10 = dateTimeFieldType9.toString();
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.property(dateTimeFieldType9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withMillisOfSecond(17);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, readableDuration20);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType23 = periodType22.withSecondsRemoved();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, (org.joda.time.ReadableInstant) dateMidnight19, periodType23);
        org.joda.time.DateMidnight.Property property25 = dateMidnight16.year();
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        java.lang.String str27 = property25.getAsText(locale26);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime29 = instant28.toMutableDateTime();
        mutableDateTime29.setSecondOfMinute((int) (byte) 1);
        mutableDateTime29.setSecondOfMinute(52);
        mutableDateTime29.setMillisOfSecond((int) ' ');
        long long36 = property25.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(1L, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = dateMidnight41.getZone();
        mutableDateTime29.setZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = localDateTime7.toDateTime(dateTimeZone42);
        long long47 = dateTimeZone42.adjustOffset(1645454835796L, true);
        org.joda.time.DateTime dateTime48 = localDateTime4.toDateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime50 = dateTime48.plusHours(53221327);
        org.joda.time.DateTime dateTime52 = dateTime50.plusSeconds(53281896);
        int int53 = dateTime52.getMonthOfYear();
        org.joda.time.DateTime dateTime54 = dateTime52.toDateTime();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "weekyear" + "'", str10, "weekyear");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970" + "'", str27, "1970");
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-52L) + "'", long36 == (-52L));
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645454835796L + "'", long47 == 1645454835796L);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test5141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5141");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withField(dateTimeFieldType9, (int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime3.withField(dateTimeFieldType9, (int) (short) 0);
        org.joda.time.DateTime dateTime15 = dateTime3.plusHours((int) (short) 1);
        int int16 = dateTime15.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property17 = dateTime15.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int19 = dateTime15.get(dateTimeFieldType18);
        org.joda.time.DateTime.Property property20 = dateTime15.millisOfDay();
        org.joda.time.DateTime dateTime22 = property20.addToCopy((long) 15);
        org.joda.time.DateTime dateTime23 = property20.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 49 + "'", int19 == 49);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test5142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5142");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusMillis(10);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.minuteOfHour();
        int int5 = property4.getMaximumValueOverall();
        org.joda.time.TimeOfDay timeOfDay7 = property4.addWrapFieldToCopy(2);
        int int8 = property4.getMaximumValue();
        int int9 = property4.getMaximumValueOverall();
        java.util.Locale locale12 = new java.util.Locale("Mon Feb 21 14:47:55 GMT+00:00 2022", "8 Jun 150344 01:10:11 GMT");
        int int13 = property4.getMaximumShortTextLength(locale12);
        org.joda.time.TimeOfDay timeOfDay14 = property4.withMinimumValue();
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.hourOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtCurrentTime(dateTimeZone19);
        org.joda.time.LocalDate.Property property21 = localDate18.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.lang.String str24 = locale23.getScript();
        int int25 = dateTimeField22.getMaximumTextLength(locale23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay26 = property15.setCopy("2022-02-21T14:52:56.533Z/2022-02-21T14:52:56.533Z", locale23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:52:56.533Z/2022-02-21T14:52:56.533Z\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 59 + "'", int8 == 59);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 59 + "'", int9 == 59);
        org.junit.Assert.assertEquals(locale12.toString(), "mon feb 21 14:47:55 gmt+00:00 2022_8 JUN 150344 01:10:11 GMT");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
    }

    @Test
    public void test5143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5143");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes(53221655);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = timeOfDay3.toString(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "T11:35:00.052" + "'", str5, "T11:35:00.052");
    }

    @Test
    public void test5144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5144");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfYear();
        int int11 = dateTimeField10.getMaximumValue();
        long long14 = dateTimeField10.getDifferenceAsLong(1382400000L, (long) 53221655);
        java.lang.String str15 = dateTimeField10.toString();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 366 + "'", int11 == 366);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 15L + "'", long14 == 15L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DateTimeField[dayOfYear]" + "'", str15, "DateTimeField[dayOfYear]");
    }

    @Test
    public void test5145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5145");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        int int3 = localDateTime2.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(3);
        int int6 = localDateTime2.size();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withMillisOfDay(953);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withDayOfWeek(51);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test5146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5146");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 10);
        int int3 = mutablePeriod2.getWeeks();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay0.plus((org.joda.time.ReadablePeriod) mutablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, readableDuration8);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = period9.normalizedStandard(periodType10);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay4.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime14 = instant13.toMutableDateTime();
        mutableDateTime14.setSecondOfMinute((int) (byte) 1);
        mutableDateTime14.setSecondOfMinute(52);
        mutableDateTime14.setMillisOfSecond((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        mutableDateTime14.add(readablePeriod21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate25, (org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight34.getZone();
        org.joda.time.DateTime dateTime36 = localDate28.toDateTimeAtMidnight(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = mutableDateTime14.toDateTime(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 'a', dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate40, (org.joda.time.ReadablePartial) localDate43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(1L, dateTimeZone46);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight47, readableDuration48);
        org.joda.time.Duration duration50 = period44.toDurationTo((org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.DateMidnight.Property property51 = dateMidnight47.monthOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(chronology52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = localDate53.toDateTimeAtCurrentTime(dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(1L, dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight60.withField(dateTimeFieldType61, (int) 'a');
        org.joda.time.DateTime dateTime65 = dateTime55.withField(dateTimeFieldType61, (int) (short) 0);
        org.joda.time.DateTime dateTime67 = dateTime55.plusHours((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean69 = dateTime55.isSupported(dateTimeFieldType68);
        int int70 = dateMidnight47.get(dateTimeFieldType68);
        org.joda.time.DateTime.Property property71 = dateTime37.property(dateTimeFieldType68);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay73 = timeOfDay12.withField(dateTimeFieldType68, 801);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(property71);
    }

    @Test
    public void test5147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5147");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(0, (int) (short) -1);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone4.observesDaylightTime();
        java.util.Calendar.Builder builder6 = builder3.setTimeZone(timeZone4);
        java.util.TimeZone.setDefault(timeZone4);
        timeZone4.setID("0");
        java.util.TimeZone.setDefault(timeZone4);
        java.lang.String str11 = timeZone4.getDisplayName();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GMT+00:00" + "'", str11, "GMT+00:00");
    }

    @Test
    public void test5148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5148");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.lang.String[] strArray28 = new java.lang.String[] { "cinese", "dayOfMonth", "secondOfMinute", "weekyear", "Wed Jan 04 00:00:11 UTC 1905", "2022-02-21T00:00:00.000Z", "gregory", "53221102", "1970", "52", "en", "coreano", "java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z", "java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", "52", "P8Y", "DateTimeField[monthOfYear]", "java.io.IOException", "2035-02-21T14:47:41.423", "en", "05:34:23.314", "China", "0", "German", "1970" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        int int31 = strSet29.size();
        java.lang.String[] strArray44 = new java.lang.String[] { "2022-02-21T00:00:00.000Z", "Cina", "Property[dayOfMonth]", "19", "8 Jun 150344 01:10:11 GMT", "53221102", "4582910-11-03", "0", "dayOfYear", "java.io.IOException: +00:00", "PeriodType[Minutes]", "PeriodType[Minutes]" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        java.util.Set<java.lang.String> strSet47 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange languageRange49 = new java.util.Locale.LanguageRange("coreano");
        java.util.Locale.LanguageRange[] languageRangeArray50 = new java.util.Locale.LanguageRange[] { languageRange49 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList51 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList51, languageRangeArray50);
        java.lang.String[] strArray72 = new java.lang.String[] { "\ubbf8\uad6d", "", "java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z", "DurationField[days]", "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z", "weekyear-gregory", "it", "-0033-08-30T00:00:00.000Z", "weekyear-gregory", "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z", "53221655", "java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", "java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", "dayOfYear", "inglese (Stati Uniti)", "weekyear-gregory", "java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", "UTC" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        java.util.List<java.lang.String> strList75 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, (java.util.Collection<java.lang.String>) strList73);
        boolean boolean76 = strSet47.retainAll((java.util.Collection<java.lang.String>) strList75);
        boolean boolean77 = strSet45.containsAll((java.util.Collection<java.lang.String>) strSet47);
        boolean boolean78 = strSet29.containsAll((java.util.Collection<java.lang.String>) strSet47);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean79 = strSet1.addAll((java.util.Collection<java.lang.String>) strSet29);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 22 + "'", int31 == 22);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(languageRangeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test5149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5149");
        org.joda.time.Period period1 = org.joda.time.Period.days(622);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test5150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5150");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = property6.addWrapFieldToCopy(32769);
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder12 = builder9.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale locale13 = builder12.build();
        java.lang.String str14 = locale13.getDisplayLanguage();
        java.lang.String str15 = property6.getAsText(locale13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight17 = property6.setCopy(53281887);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53281887 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
    }

    @Test
    public void test5151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5151");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType1 = periodType0.withSecondsRemoved();
        java.lang.String str2 = periodType0.getName();
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        int int6 = localDateTime5.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str8 = dateTimeFieldType7.toString();
        int int9 = localDateTime5.get(dateTimeFieldType7);
        boolean boolean10 = periodType4.equals((java.lang.Object) int9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.centuries();
        int int12 = periodType4.indexOf(durationFieldType11);
        int int13 = periodType0.indexOf(durationFieldType11);
        int int14 = periodType0.size();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "YearDayTime" + "'", str2, "YearDayTime");
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 212 + "'", int6 == 212);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "weekyear" + "'", str8, "weekyear");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6 + "'", int14 == 6);
    }

    @Test
    public void test5152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5152");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Period period8 = period5.plusDays((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod9 = period5.toMutablePeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = period5.getFieldTypes();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
    }

    @Test
    public void test5153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5153");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType2 = periodType1.withWeeksRemoved();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.Chronology chronology5 = timeOfDay4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (byte) 1, periodType1, chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.hourOfHalfday();
        long long10 = dateTimeField8.remainder(1645455070957L);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 3070957L + "'", long10 == 3070957L);
    }

    @Test
    public void test5154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5154");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withField(dateTimeFieldType9, (int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime3.withField(dateTimeFieldType9, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        org.joda.time.DateTime dateTime20 = dateTime13.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate23, (org.joda.time.ReadablePartial) localDate26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = localDate26.isSupported(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = localDate26.getChronology();
        org.joda.time.LocalDate localDate32 = localDate26.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = localDate32.getFieldType(1);
        boolean boolean35 = dateTime13.isSupported(dateTimeFieldType34);
        org.joda.time.DateTime dateTime37 = dateTime13.minusDays(1961);
        org.joda.time.DateTime.Property property38 = dateTime37.yearOfEra();
        org.joda.time.DateTime dateTime40 = property38.addToCopy((-1L));
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 'a', dateTimeZone45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate43, (org.joda.time.ReadablePartial) localDate46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(1L, dateTimeZone49);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone53 = dateMidnight52.getZone();
        org.joda.time.DateTime dateTime54 = localDate46.toDateTimeAtMidnight(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.withYear(596);
        org.joda.time.DateTime.Property property57 = dateTime56.yearOfEra();
        org.joda.time.DateTime dateTime58 = property57.getDateTime();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime60 = dateTime40.toDateTimeISO();
        org.joda.time.DateTime dateTime62 = dateTime40.minusYears((int) '4');
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = localDate64.toDateTimeAtCurrentTime(dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight67 = dateTime66.toDateMidnight();
        org.joda.time.DateTime dateTime69 = dateTime66.minus(2678400000L);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate(chronology72);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = localDate73.toDateTimeAtCurrentTime(dateTimeZone74);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateMidnight dateMidnight78 = new org.joda.time.DateMidnight(1L, dateTimeZone77);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight78.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight83 = dateMidnight80.withField(dateTimeFieldType81, (int) 'a');
        org.joda.time.DateTime dateTime85 = dateTime75.withField(dateTimeFieldType81, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone87 = null;
        org.joda.time.DateMidnight dateMidnight88 = new org.joda.time.DateMidnight(1L, dateTimeZone87);
        org.joda.time.DateMidnight dateMidnight90 = dateMidnight88.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone91 = dateMidnight90.getZone();
        org.joda.time.DateTime dateTime92 = dateTime85.withZoneRetainFields(dateTimeZone91);
        java.lang.String str93 = dateTimeZone91.getID();
        org.joda.time.LocalDate localDate94 = new org.joda.time.LocalDate((long) 53221161, dateTimeZone91);
        org.joda.time.DateMidnight dateMidnight95 = new org.joda.time.DateMidnight((long) 53221626, dateTimeZone91);
        org.joda.time.DateTime dateTime96 = dateTime69.withZone(dateTimeZone91);
        org.joda.time.MutableDateTime mutableDateTime97 = dateTime40.toMutableDateTime(dateTimeZone91);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertNotNull(dateTime92);
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "UTC" + "'", str93, "UTC");
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(mutableDateTime97);
    }

    @Test
    public void test5155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5155");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.minusHours(8);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay0.minusMillis(53521845);
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
    }

    @Test
    public void test5156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5156");
        org.joda.time.Period period8 = new org.joda.time.Period(52, 1, 14, (int) (short) 0, 53221180, 1961, 53221147, (int) (short) 10);
        org.joda.time.Period period10 = period8.plusHours(18);
        org.joda.time.Period period12 = period10.withSeconds(0);
        org.joda.time.Period period14 = period10.plusMonths(804);
        int int15 = period14.getMinutes();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1961 + "'", int15 == 1961);
    }

    @Test
    public void test5157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5157");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, (org.joda.time.ReadableInstant) dateMidnight8, periodType12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 'a', dateTimeZone18);
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate16, (org.joda.time.ReadablePartial) localDate19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = localDate19.isSupported(dateTimeFieldType21);
        org.joda.time.Chronology chronology23 = localDate19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.minuteOfDay();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 11, (long) 59, periodType12, chronology23);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((-2050963200000L), chronology23);
        org.joda.time.LocalDate.Property property28 = localDate27.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate31 = localDate27.withField(dateTimeFieldType29, 246);
        org.joda.time.ReadablePartial readablePartial32 = null;
        org.joda.time.LocalDate localDate33 = localDate31.withFields(readablePartial32);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
    }

    @Test
    public void test5158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5158");
        java.util.Date date3 = new java.util.Date(53221515, (int) (byte) 1, (int) 'a');
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.fromDateFields(date3);
        int int5 = localDateTime4.size();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = property8.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusMonths(53461042);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, readableDuration20);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType23 = periodType22.withSecondsRemoved();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, (org.joda.time.ReadableInstant) dateMidnight19, periodType23);
        org.joda.time.PeriodType periodType25 = periodType23.withHoursRemoved();
        org.joda.time.PeriodType periodType26 = periodType25.withMillisRemoved();
        org.joda.time.PeriodType periodType27 = periodType26.withWeeksRemoved();
        org.joda.time.PeriodType periodType28 = periodType27.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 53281067, (long) 53221283, periodType28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime11.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod29, 3);
        int int32 = localDateTime31.getEra();
        org.junit.Assert.assertEquals(date3.toString(), "Mon May 08 00:00:00 GMT+00:00 53223415");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test5159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5159");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("PT32769H1M53221515S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=pt32769h1m53221515s");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5160");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = localDate5.toInterval(dateTimeZone9);
        java.lang.String str11 = interval10.toString();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.Period period20 = period18.plusYears(8);
        org.joda.time.Interval interval21 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        long long22 = interval10.getStartMillis();
        long long23 = interval10.getStartMillis();
        boolean boolean25 = interval10.isAfter((-52L));
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = localDate27.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight34.withField(dateTimeFieldType35, (int) 'a');
        org.joda.time.DateTime dateTime39 = dateTime29.withField(dateTimeFieldType35, (int) (short) 0);
        boolean boolean40 = interval10.contains((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime42 = dateTime39.plusMillis(53282020);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str11, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test5161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5161");
        org.joda.time.Period period1 = org.joda.time.Period.millis(53221394);
        org.joda.time.Period period3 = period1.withMinutes(6);
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime5 = instant4.toMutableDateTime();
        mutableDateTime5.setSecondOfMinute((int) (byte) 1);
        int int8 = mutableDateTime5.getMillisOfDay();
        mutableDateTime5.setDayOfYear((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21);
        org.joda.time.Duration duration23 = period17.toDurationTo((org.joda.time.ReadableInstant) dateMidnight20);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(1L, dateTimeZone26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight27, readableDuration28);
        int int30 = period29.size();
        java.lang.String str31 = period29.toString();
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.Period period34 = period29.withField(durationFieldType32, 0);
        mutableDateTime5.add(durationFieldType32, 53221593);
        int int37 = period3.get(durationFieldType32);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53581640 + "'", int8 == 53581640);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT0S" + "'", str31, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test5162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5162");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(98727290679120000L);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.LocalDate localDate12 = localDate6.withDayOfMonth(13);
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale14);
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str17 = localDate6.toString("+00:00", locale14);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.minusDays((int) 'a');
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.lang.String str27 = locale26.toLanguageTag();
        java.lang.String str28 = dateMidnight21.toString("+00:00", locale26);
        java.lang.String str29 = locale18.getDisplayVariant(locale26);
        java.lang.String str30 = locale14.getDisplayLanguage(locale26);
        java.util.Locale locale31 = java.util.Locale.GERMANY;
        java.lang.String str32 = locale31.getScript();
        java.lang.String str33 = locale26.getDisplayLanguage(locale31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = localTime1.toString("DateTimeField[yearOfCentury]", locale26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: t");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "en" + "'", str27, "en");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Italian" + "'", str30, "Italian");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Englisch" + "'", str33, "Englisch");
    }

    @Test
    public void test5163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5163");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(0, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        int int11 = dateTimeZone9.getStandardOffset((long) 32769);
        java.util.Locale locale13 = java.util.Locale.US;
        java.lang.String str14 = dateTimeZone9.getShortName((long) 1970, locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale13.getDisplayCountry(locale15);
        java.util.Calendar.Builder builder17 = builder0.setLocale(locale15);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.Calendar.Builder builder19 = builder17.setTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate22, (org.joda.time.ReadablePartial) localDate25);
        org.joda.time.LocalDate localDate28 = localDate22.withDayOfMonth(13);
        org.joda.time.Chronology chronology29 = localDate28.getChronology();
        long long33 = chronology29.add((long) (short) -1, (long) 1961, 15);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.standard();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 'a', dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 'a', dateTimeZone40);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate38, (org.joda.time.ReadablePartial) localDate41);
        org.joda.time.LocalDate localDate44 = localDate38.withDayOfMonth(13);
        org.joda.time.Chronology chronology45 = localDate44.getChronology();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 0, periodType35, chronology45);
        int[] intArray49 = chronology29.get((org.joda.time.ReadablePeriod) mutablePeriod46, (long) 596, (long) 53221161);
        java.util.Calendar.Builder builder50 = builder17.setFields(intArray49);
        java.util.Calendar.Builder builder54 = builder17.setWeekDate(304, (int) ' ', 1970);
        java.util.Calendar.Builder builder58 = builder17.setWeekDate(2022, 719, 285);
        java.util.Calendar.Builder builder62 = builder58.setDate(15, 53221049, (-143999));
        java.util.Calendar.Builder builder66 = builder58.setWeekDate(53461751, 53401124, 39);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ubbf8\uad6d" + "'", str16, "\ubbf8\uad6d");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 29414L + "'", long33 == 29414L);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 0, 0, 14, 47, 0, 565]");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test5164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5164");
        org.joda.time.Period period2 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate localDate14 = localDate8.withDayOfMonth(13);
        org.joda.time.Chronology chronology15 = localDate14.getChronology();
        mutablePeriod3.setPeriod((long) 10, (-599990L), chronology15);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((-1968L), chronology15);
        org.joda.time.DateTimeZone dateTimeZone18 = chronology15.getZone();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(1645454844652L, dateTimeZone18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTimeAtCurrentTime(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate26, (org.joda.time.ReadablePartial) localDate29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight33, readableDuration34);
        org.joda.time.Duration duration36 = period30.toDurationTo((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(1L, dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(1L, dateTimeZone41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight42, readableDuration43);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType46 = periodType45.withSecondsRemoved();
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight39, (org.joda.time.ReadableInstant) dateMidnight42, periodType46);
        org.joda.time.PeriodType periodType48 = periodType46.withWeeksRemoved();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration36, periodType46);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDate52.toDateTimeAtCurrentTime(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 'a', dateTimeZone56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) 'a', dateTimeZone59);
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate57, (org.joda.time.ReadablePartial) localDate60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(1L, dateTimeZone63);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight64, readableDuration65);
        org.joda.time.Duration duration67 = period61.toDurationTo((org.joda.time.ReadableInstant) dateMidnight64);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(1L, dateTimeZone69);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight(1L, dateTimeZone72);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight73, readableDuration74);
        org.joda.time.PeriodType periodType76 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType77 = periodType76.withSecondsRemoved();
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight70, (org.joda.time.ReadableInstant) dateMidnight73, periodType77);
        org.joda.time.PeriodType periodType79 = periodType77.withWeeksRemoved();
        org.joda.time.Period period80 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableDuration) duration67, periodType77);
        org.joda.time.Interval interval81 = new org.joda.time.Interval(readableInstant50, (org.joda.time.ReadableDuration) duration67);
        org.joda.time.Duration duration82 = duration67.toDuration();
        boolean boolean83 = duration36.isEqual((org.joda.time.ReadableDuration) duration82);
        mutableDateTime19.add((org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateTime dateTime85 = mutableDateTime19.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.secondOfMinute();
        java.lang.String str87 = dateTimeFieldType86.getName();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime19.set(dateTimeFieldType86, 862);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 862 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "secondOfMinute" + "'", str87, "secondOfMinute");
    }

    @Test
    public void test5165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5165");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        int int12 = dateTimeZone10.getStandardOffset((long) 32769);
        java.util.Locale locale14 = java.util.Locale.US;
        java.lang.String str15 = dateTimeZone10.getShortName((long) 1970, locale14);
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.now(dateTimeZone10);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone10);
        long long20 = dateTimeZone10.convertLocalToUTC((long) 1961, false);
        java.lang.String str21 = dateTimeZone10.toString();
        long long23 = dateTimeZone10.nextTransition((long) (byte) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withZone(dateTimeZone10);
        java.lang.Integer int25 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 53221);
        boolean boolean28 = dateTimeFormatter2.isParser();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight32, readableDuration33);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.minus((org.joda.time.ReadablePeriod) period34);
        int int36 = localDateTime35.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.minusMillis(17);
        java.util.Date date39 = localDateTime38.toDate();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withYear(53221938);
        int int43 = localDateTime42.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = dateTimeFormatter2.print((org.joda.time.ReadablePartial) localDateTime42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1961L + "'", long20 == 1961L);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(date39);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Mon Feb 21 14:53:50 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
    }

    @Test
    public void test5166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5166");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = localDate5.toInterval(dateTimeZone9);
        java.lang.String str11 = interval10.toString();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.Period period20 = period18.plusYears(8);
        org.joda.time.Interval interval21 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate25, (org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = localDate28.isSupported(dateTimeFieldType30);
        org.joda.time.Chronology chronology32 = localDate28.getChronology();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 7, chronology32);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.Interval interval35 = interval10.withChronology(chronology32);
        org.joda.time.Duration duration36 = interval35.toDuration();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate39, (org.joda.time.ReadablePartial) localDate42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = localDate42.isSupported(dateTimeFieldType44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Interval interval47 = localDate42.toInterval(dateTimeZone46);
        java.lang.String str48 = interval47.toString();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 'a', dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 'a', dateTimeZone53);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate51, (org.joda.time.ReadablePartial) localDate54);
        org.joda.time.Period period57 = period55.plusYears(8);
        org.joda.time.Interval interval58 = interval47.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Period period60 = period57.withMinutes(0);
        org.joda.time.Period period62 = period60.plusYears(53221626);
        org.joda.time.Interval interval63 = interval35.withPeriodAfterStart((org.joda.time.ReadablePeriod) period60);
        org.joda.time.Instant instant64 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(chronology65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = localDate66.toDateTimeAtCurrentTime(dateTimeZone67);
        int int69 = instant64.compareTo((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime dateTime71 = dateTime68.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime72 = dateTime71.toDateTime();
        org.joda.time.DateTime dateTime73 = dateTime71.toDateTime();
        org.joda.time.DateTime dateTime75 = dateTime71.plusDays(53281118);
        boolean boolean76 = interval35.isBefore((org.joda.time.ReadableInstant) dateTime71);
        boolean boolean78 = interval35.isBefore((long) 'a');
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str11, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str48, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test5167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5167");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        long long13 = chronology9.add((long) (short) -1, (long) 1961, 15);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.standard();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate localDate24 = localDate18.withDayOfMonth(13);
        org.joda.time.Chronology chronology25 = localDate24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 0, periodType15, chronology25);
        int[] intArray29 = chronology9.get((org.joda.time.ReadablePeriod) mutablePeriod26, (long) 596, (long) 53221161);
        int int30 = mutablePeriod26.getMonths();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 'a', dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 'a', dateTimeZone35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate33, (org.joda.time.ReadablePartial) localDate36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        boolean boolean39 = localDate36.isSupported(dateTimeFieldType38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Interval interval41 = localDate36.toInterval(dateTimeZone40);
        java.lang.String str42 = interval41.toString();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 'a', dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 'a', dateTimeZone47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate45, (org.joda.time.ReadablePartial) localDate48);
        org.joda.time.Period period51 = period49.plusYears(8);
        org.joda.time.Interval interval52 = interval41.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 'a', dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 'a', dateTimeZone57);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate55, (org.joda.time.ReadablePartial) localDate58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        boolean boolean61 = localDate58.isSupported(dateTimeFieldType60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Interval interval63 = localDate58.toInterval(dateTimeZone62);
        java.lang.String str64 = interval63.toString();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((long) 'a', dateTimeZone66);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((long) 'a', dateTimeZone69);
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate67, (org.joda.time.ReadablePartial) localDate70);
        org.joda.time.Period period73 = period71.plusYears(8);
        org.joda.time.Interval interval74 = interval63.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period73);
        boolean boolean76 = interval63.contains((long) 15);
        org.joda.time.Interval interval77 = interval41.gap((org.joda.time.ReadableInterval) interval63);
        org.joda.time.Duration duration78 = interval63.toDuration();
        mutablePeriod26.setPeriod((org.joda.time.ReadableDuration) duration78);
        mutablePeriod26.addMillis((int) (short) -1);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 29414L + "'", long13 == 29414L);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 14, 47, 0, 565]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str42, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str64, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNull(interval77);
        org.junit.Assert.assertNotNull(duration78);
    }

    @Test
    public void test5168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5168");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = dateMidnight14.getZone();
        org.joda.time.DateTime dateTime16 = dateTime8.toDateTime(dateTimeZone15);
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone15);
        java.lang.String str19 = dateTimeZone15.getShortName((long) 14);
        int int21 = dateTimeZone15.getOffset(1643673600120L);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (byte) 1);
        org.joda.time.DateTime dateTime24 = instant23.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(53221655);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) 53221796, dateTimeZone27);
        long long31 = dateTimeZone27.adjustOffset((long) 53221161, false);
        org.joda.time.DateTime dateTime32 = dateTime24.withZoneRetainFields(dateTimeZone27);
        long long34 = dateTimeZone15.getMillisKeepLocal(dateTimeZone27, (long) 53221938);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((int) (short) -1, 261, 19, (int) '4', 53481442, dateTimeZone15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 53221161L + "'", long31 == 53221161L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 283L + "'", long34 == 283L);
    }

    @Test
    public void test5169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5169");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = dateTime3.toLocalDate();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = dateMidnight14.getZone();
        org.joda.time.DateTime dateTime16 = dateTime8.toDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime3.withZoneRetainFields(dateTimeZone15);
        org.joda.time.DateTime.Property property18 = dateTime17.monthOfYear();
        org.joda.time.DateTime dateTime19 = property18.getDateTime();
        org.joda.time.DateTime dateTime21 = property18.addToCopy((long) 53221848);
        org.joda.time.DateTime dateTime22 = property18.getDateTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test5170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5170");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod1 = period0.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.LocalDate localDate12 = localDate6.withDayOfMonth(13);
        org.joda.time.Chronology chronology13 = localDate12.getChronology();
        mutablePeriod1.setPeriod((long) 10, (-599990L), chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.minuteOfDay();
        org.joda.time.DurationField durationField16 = chronology13.millis();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property23 = dateMidnight19.dayOfMonth();
        org.joda.time.Period period24 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod25 = period24.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight19.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DurationFieldType[] durationFieldTypeArray27 = period24.getFieldTypes();
        int[] intArray29 = chronology13.get((org.joda.time.ReadablePeriod) period24, 1645454881105L);
        org.joda.time.DateTimeField dateTimeField30 = chronology13.millisOfDay();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(durationFieldTypeArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 2720, 4, 14, 48, 1, 105]");
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test5171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5171");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        boolean boolean2 = mutableDateTime1.isBeforeNow();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test5172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5172");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Period period8 = period5.plusDays((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod9 = period5.toMutablePeriod();
        mutablePeriod9.setPeriod(27, 24, 6, 2035, 100, 0, 5, 0);
        mutablePeriod9.setHours(191);
        mutablePeriod9.clear();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
    }

    @Test
    public void test5173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5173");
        java.util.Date date3 = new java.util.Date(26, 178, 42);
        java.lang.String str4 = date3.toGMTString();
        org.joda.time.YearMonthDay yearMonthDay5 = org.joda.time.YearMonthDay.fromDateFields(date3);
        java.util.Date date9 = new java.util.Date(26, 178, 42);
        int int10 = date9.getDate();
        boolean boolean11 = date3.after(date9);
        int int12 = date9.getHours();
        org.junit.Assert.assertEquals(date3.toString(), "Thu Dec 12 00:00:00 GMT+00:00 1940");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "12 Dec 1940 00:00:00 GMT" + "'", str4, "12 Dec 1940 00:00:00 GMT");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Dec 12 00:00:00 GMT+00:00 1940");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test5174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5174");
        org.joda.time.Period period1 = org.joda.time.Period.years(482);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test5175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5175");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.year();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate11, (org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight18, readableDuration19);
        org.joda.time.Duration duration21 = period15.toDurationTo((org.joda.time.ReadableInstant) dateMidnight18);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime24 = instant23.toMutableDateTime();
        mutableDateTime24.setSecondOfMinute((int) (byte) 1);
        mutableDateTime24.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime24.year();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime24.secondOfDay();
        mutableDateTime8.setMillis((org.joda.time.ReadableInstant) mutableDateTime24);
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale32);
        java.lang.String str34 = calendar33.getCalendarType();
        boolean boolean35 = mutableDateTime8.equals((java.lang.Object) str34);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(53221655);
        mutableDateTime8.setZone(dateTimeZone37);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(chronology40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTimeAtCurrentTime(dateTimeZone42);
        int int44 = instant39.compareTo((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 'a', dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate47, (org.joda.time.ReadablePartial) localDate50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        boolean boolean53 = localDate50.isSupported(dateTimeFieldType52);
        org.joda.time.Chronology chronology54 = localDate50.getChronology();
        org.joda.time.DateTime dateTime55 = dateTime43.toDateTime(chronology54);
        org.joda.time.DateTime dateTime57 = dateTime43.plusWeeks(70);
        mutableDateTime8.setTime((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) 'a', dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) 'a', dateTimeZone63);
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate61, (org.joda.time.ReadablePartial) localDate64);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        boolean boolean67 = localDate64.isSupported(dateTimeFieldType66);
        org.joda.time.Chronology chronology68 = localDate64.getChronology();
        org.joda.time.DurationField durationField69 = chronology68.minutes();
        org.joda.time.DurationField durationField70 = chronology68.millis();
        org.joda.time.DateTimeField dateTimeField71 = chronology68.centuryOfEra();
        org.joda.time.DateTime dateTime72 = dateTime43.toDateTime(chronology68);
        org.joda.time.DateTimeField dateTimeField73 = chronology68.centuryOfEra();
        org.joda.time.DurationField durationField74 = dateTimeField73.getLeapDurationField();
        long long76 = dateTimeField73.roundHalfCeiling(1645455057733L);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setRounding(dateTimeField73, 53281723);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 53281723");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645455231088,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=51,MILLISECOND=88,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "gregory" + "'", str34, "gregory");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNull(durationField74);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 946684800000L + "'", long76 == 946684800000L);
    }

    @Test
    public void test5176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5176");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getWeeksInWeekYear();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withWeekyear(701);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.year();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455231118,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=51,MILLISECOND=118,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test5177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5177");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.LocalDate localDate5 = dateMidnight4.toLocalDate();
        org.joda.time.DateMidnight.Property property6 = dateMidnight4.year();
        org.joda.time.DateMidnight dateMidnight8 = property6.addToCopy(135);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTime();
        mutableDateTime10.setSecondOfMinute((int) (byte) 1);
        mutableDateTime10.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime10.year();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight21, readableDuration22);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType25 = periodType24.withSecondsRemoved();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight18, (org.joda.time.ReadableInstant) dateMidnight21, periodType25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight18.year();
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = property27.getAsText(locale28);
        int int30 = property15.getMaximumShortTextLength(locale28);
        org.joda.time.MutableDateTime mutableDateTime32 = property15.add((long) 914);
        org.joda.time.MutableDateTime mutableDateTime33 = property15.getMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime33.property(dateTimeFieldType34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight37 = dateMidnight8.withField(dateTimeFieldType34, 53461235);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53461235 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970" + "'", str29, "1970");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test5178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5178");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateTime dateTime6 = dateTime3.plusYears(24);
        int int7 = dateTime3.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53631 + "'", int7 == 53631);
    }

    @Test
    public void test5179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5179");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(53341307, 53221626, 719, 685);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53341307 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5180");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("java.io.IOException");
        java.lang.String str2 = timeZone1.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Ora media di Greenwich" + "'", str2, "Ora media di Greenwich");
    }

    @Test
    public void test5181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5181");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        org.joda.time.DateTime dateTime11 = dateTime3.toDateTime(dateTimeZone10);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone10);
        long long14 = dateTimeZone10.previousTransition((long) 436);
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = null;
        org.joda.time.format.DateTimeParser dateTimeParser16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter15, dateTimeParser16);
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = dateTimeFormatter17.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter17.withDefaultYear(53221240);
        boolean boolean21 = dateTimeZone10.equals((java.lang.Object) dateTimeFormatter20);
        int int22 = dateTimeFormatter20.getDefaultYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = dateTimeFormatter20.getPrinter();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 436L + "'", long14 == 436L);
        org.junit.Assert.assertNull(dateTimePrinter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53221240 + "'", int22 == 53221240);
        org.junit.Assert.assertNull(dateTimePrinter23);
    }

    @Test
    public void test5182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5182");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(3600000L, periodType1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType4 = mutablePeriod2.getFieldType(806);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
    }

    @Test
    public void test5183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5183");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusMillis(10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay3.plusMillis(2022);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.Chronology chronology9 = timeOfDay8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.millisOfSecond();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology9);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay3.withChronologyRetainFields(chronology9);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay3.minusMinutes(234);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate localDate24 = localDate18.withDayOfMonth(13);
        org.joda.time.Chronology chronology25 = localDate24.getChronology();
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.monthOfYear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.yearOfEra();
        java.util.Locale locale31 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale31);
        java.lang.String str33 = dateTimeField29.getAsText(19, locale31);
        java.util.Locale locale34 = locale31.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = timeOfDay3.toString("8-giu-150344 1.10.11", locale34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: g");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "19" + "'", str33, "19");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
    }

    @Test
    public void test5184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5184");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withMillisOfSecond(938);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMinuteOfHour(57);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfYear();
        int int14 = localDateTime12.getYear();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
    }

    @Test
    public void test5185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5185");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(1L, dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, readableDuration8);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType11 = periodType10.withSecondsRemoved();
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight4, (org.joda.time.ReadableInstant) dateMidnight7, periodType11);
        org.joda.time.PeriodType periodType13 = periodType11.withWeeksRemoved();
        org.joda.time.PeriodType periodType14 = periodType11.withMillisRemoved();
        java.lang.String str15 = periodType11.getName();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.Chronology chronology18 = timeOfDay17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.secondOfDay();
        org.joda.time.DurationField durationField21 = chronology18.eras();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 53461250, (long) 53221555, periodType11, chronology18);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "StandardNoSeconds" + "'", str15, "StandardNoSeconds");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test5186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5186");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = dateTime3.toLocalDate();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = dateMidnight14.getZone();
        org.joda.time.DateTime dateTime16 = dateTime8.toDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime3.withZoneRetainFields(dateTimeZone15);
        org.joda.time.DateTime.Property property18 = dateTime17.monthOfYear();
        org.joda.time.DateTime dateTime19 = property18.getDateTime();
        org.joda.time.DateTime dateTime20 = property18.withMinimumValue();
        long long21 = property18.remainder();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1781631440L + "'", long21 == 1781631440L);
    }

    @Test
    public void test5187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5187");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getFirstDayOfWeek();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromCalendarFields(calendar1);
        java.util.Date date7 = new java.util.Date(2, (int) '#', (int) '#');
        calendar1.setTime(date7);
        date7.setSeconds(53221147);
        int int11 = date7.getHours();
        int int12 = date7.getMinutes();
        java.lang.String str13 = date7.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-2050963200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1905,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=4,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertEquals(date7.toString(), "Tue Sep 11 23:39:07 GMT+00:00 1906");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 23 + "'", int11 == 23);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 39 + "'", int12 == 39);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Tue Sep 11 23:39:07 GMT+00:00 1906" + "'", str13, "Tue Sep 11 23:39:07 GMT+00:00 1906");
    }

    @Test
    public void test5188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5188");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 'a', dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate4, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight11, readableDuration12);
        org.joda.time.Duration duration14 = period8.toDurationTo((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.Instant instant15 = instant1.minus((org.joda.time.ReadableDuration) duration14);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration14, (int) (short) 100);
        java.lang.Object obj18 = mutableDateTime0.clone();
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime20 = instant19.toMutableDateTime();
        mutableDateTime20.setSecondOfMinute((int) (byte) 1);
        mutableDateTime20.setSecondOfMinute(52);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 'a', dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 'a', dateTimeZone29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate27, (org.joda.time.ReadablePartial) localDate30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = dateMidnight36.getZone();
        org.joda.time.DateTime dateTime38 = localDate30.toDateTimeAtMidnight(dateTimeZone37);
        boolean boolean40 = dateTimeZone37.isStandardOffset((long) (byte) 10);
        mutableDateTime20.setZone(dateTimeZone37);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime20.millisOfSecond();
        org.joda.time.Instant instant43 = mutableDateTime20.toInstant();
        org.joda.time.Period period44 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod45 = period44.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 'a', dateTimeZone52);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate50, (org.joda.time.ReadablePartial) localDate53);
        org.joda.time.LocalDate localDate56 = localDate50.withDayOfMonth(13);
        org.joda.time.Chronology chronology57 = localDate56.getChronology();
        mutablePeriod45.setPeriod((long) 10, (-599990L), chronology57);
        mutableDateTime20.setChronology(chronology57);
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now(chronology57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate(chronology61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = localDate62.toDateTimeAtCurrentTime(dateTimeZone63);
        org.joda.time.DateMidnight dateMidnight65 = dateTime64.toDateMidnight();
        org.joda.time.DateTime dateTime67 = dateTime64.plusYears(24);
        mutableDateTime60.setTime((org.joda.time.ReadableInstant) dateTime64);
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) mutableDateTime60);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(obj18);
// flaky:         org.junit.Assert.assertEquals(obj18.toString(), "2022-02-21T14:53:51.483Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "2022-02-21T14:53:51.483Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "2022-02-21T14:53:51.483Z");
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test5189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5189");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.minusDays((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.property(dateTimeFieldType9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusMinutes(464);
        int int13 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.hourOfDay();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2021 + "'", int13 == 2021);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test5190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5190");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfYear();
        org.joda.time.LocalDate localDate5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate7 = localDate5.withDayOfYear((int) 'a');
        org.joda.time.LocalDate.Property property8 = localDate5.monthOfYear();
        org.joda.time.DateTime dateTime9 = localDate5.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate11 = localDate5.plusMonths(532211);
        org.joda.time.LocalDate localDate13 = localDate11.plusYears(5);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test5191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5191");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.Period period4 = new org.joda.time.Period();
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod6 = period5.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate11, (org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate localDate17 = localDate11.withDayOfMonth(13);
        org.joda.time.Chronology chronology18 = localDate17.getChronology();
        mutablePeriod6.setPeriod((long) 10, (-599990L), chronology18);
        mutablePeriod6.addSeconds(13);
        mutablePeriod6.clear();
        org.joda.time.Period period23 = period4.minus((org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.Minutes minutes24 = period23.toStandardMinutes();
        org.joda.time.Period period25 = new org.joda.time.Period();
        org.joda.time.Period period26 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod27 = period26.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 'a', dateTimeZone34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate32, (org.joda.time.ReadablePartial) localDate35);
        org.joda.time.LocalDate localDate38 = localDate32.withDayOfMonth(13);
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        mutablePeriod27.setPeriod((long) 10, (-599990L), chronology39);
        mutablePeriod27.addSeconds(13);
        mutablePeriod27.clear();
        org.joda.time.Period period44 = period25.minus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Minutes minutes45 = period44.toStandardMinutes();
        org.joda.time.Period period46 = period23.withFields((org.joda.time.ReadablePeriod) period44);
        org.joda.time.LocalDate localDate48 = localDate1.withPeriodAdded((org.joda.time.ReadablePeriod) period46, 53221996);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str50 = dateTimeFieldType49.toString();
        org.joda.time.LocalDate localDate52 = localDate48.withField(dateTimeFieldType49, 862);
        org.joda.time.LocalDate localDate54 = localDate52.withWeekyear(53446172);
        org.joda.time.LocalDate.Property property55 = localDate54.weekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "weekyear" + "'", str50, "weekyear");
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test5192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5192");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getFirstDayOfWeek();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromCalendarFields(calendar1);
        java.util.Date date7 = new java.util.Date(2, (int) '#', (int) '#');
        calendar1.setTime(date7);
        date7.setMonth(53281831);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-2050963200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1905,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=4,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Aug 04 00:00:00 GMT+00:00 4442057");
    }

    @Test
    public void test5193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5193");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withOffsetParsed();
        java.lang.Appendable appendable6 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable6, 1645455180617L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
    }

    @Test
    public void test5194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5194");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        calendar2.add(53341877, 0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645455231723,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=51,MILLISECOND=723,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test5195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5195");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateTime dateTime6 = dateTime3.plusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime3.getZone();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime11 = dateTime8.withDurationAdded((long) 61, 53341809);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test5196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5196");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.Duration duration13 = period7.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime16 = instant15.toMutableDateTime();
        mutableDateTime16.setSecondOfMinute((int) (byte) 1);
        mutableDateTime16.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime16.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime16.secondOfDay();
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) mutableDateTime16);
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale24);
        java.lang.String str26 = calendar25.getCalendarType();
        boolean boolean27 = mutableDateTime0.equals((java.lang.Object) str26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(53221655);
        mutableDateTime0.setZone(dateTimeZone29);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = localDate33.toDateTimeAtCurrentTime(dateTimeZone34);
        int int36 = instant31.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate39, (org.joda.time.ReadablePartial) localDate42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = localDate42.isSupported(dateTimeFieldType44);
        org.joda.time.Chronology chronology46 = localDate42.getChronology();
        org.joda.time.DateTime dateTime47 = dateTime35.toDateTime(chronology46);
        org.joda.time.DateTime dateTime49 = dateTime35.plusWeeks(70);
        mutableDateTime0.setTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 'a', dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 'a', dateTimeZone55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate53, (org.joda.time.ReadablePartial) localDate56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        boolean boolean59 = localDate56.isSupported(dateTimeFieldType58);
        org.joda.time.Chronology chronology60 = localDate56.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.minutes();
        org.joda.time.DurationField durationField62 = chronology60.millis();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.centuryOfEra();
        org.joda.time.DateTime dateTime64 = dateTime35.toDateTime(chronology60);
        org.joda.time.DateTimeField dateTimeField65 = chronology60.monthOfYear();
        int int67 = dateTimeField65.getMaximumValue((long) 53221930);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645455231756,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=51,MILLISECOND=756,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "gregory" + "'", str26, "gregory");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 12 + "'", int67 == 12);
    }

    @Test
    public void test5197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5197");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        calendar2.set(53221938, 441, 53281616, 45, 53281689);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight12, readableDuration13);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMillis(4);
        org.joda.time.Period period20 = new org.joda.time.Period();
        org.joda.time.Period period22 = period20.minusMonths((int) '#');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.withPeriodAdded((org.joda.time.ReadablePeriod) period22, 1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDate(3, 11, 2);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.weekyear();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.hourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = property32.getField();
        org.joda.time.LocalDateTime localDateTime34 = property32.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withYear(0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = localDateTime36.getFieldTypes();
        boolean boolean38 = calendar2.before((java.lang.Object) localDateTime36);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=53221938,MONTH=441,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=53281616,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=45,MINUTE=53281689,SECOND=51,MILLISECOND=817,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test5198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5198");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.util.Date date5 = new java.util.Date(2, (int) '#', (int) '#');
        calendar1.setTime(date5);
        long long7 = date5.getTime();
        int int8 = date5.getDay();
        java.util.Date date15 = new java.util.Date(7, 53221147, 493, 53221660, (int) '4', 53221098);
        java.time.Instant instant16 = date15.toInstant();
        java.util.Date date23 = new java.util.Date((int) (byte) -1, 32769, 4, (int) (byte) 1, (int) (short) 10, 11);
        date23.setDate(53221197);
        int int26 = date23.getTimezoneOffset();
        int int27 = date23.getMonth();
        boolean boolean28 = date15.before(date23);
        boolean boolean29 = date5.after(date15);
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime31 = instant30.toMutableDateTime();
        java.util.Date date32 = mutableDateTime31.toDate();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.fromDateFields(date32);
        date32.setDate(811);
        boolean boolean36 = date15.after(date32);
        java.time.Instant instant37 = date32.toInstant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-2050963200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1905,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=4,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date5.toString(), "Wed Jan 04 00:00:00 GMT+00:00 1905");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-2050963200000L) + "'", long7 == (-2050963200000L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Feb 10 04:30:18 GMT+00:00 4443077");
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jun 08 01:10:11 GMT+00:00 150344");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Sun Apr 21 14:53:51 GMT+00:00 2024");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(instant37);
    }

    @Test
    public void test5199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5199");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("2035-02-21T14:47:41.423");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5200");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(15);
        java.io.Writer writer7 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(1679506596172800000L);
        org.joda.time.LocalTime localTime11 = localTime9.minusMillis(53221812);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(writer7, (org.joda.time.ReadablePartial) localTime11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test5201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5201");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.monthOfYear();
        org.joda.time.DurationField durationField12 = chronology9.millis();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = localDate18.isSupported(dateTimeFieldType20);
        org.joda.time.Chronology chronology22 = localDate18.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.minutes();
        long long26 = durationField23.subtract(10L, 10L);
        long long29 = durationField23.getMillis(53221515, 1645454841031L);
        boolean boolean30 = durationField23.isSupported();
        int int31 = durationField12.compareTo(durationField23);
        boolean boolean32 = durationField12.isSupported();
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-599990L) + "'", long26 == (-599990L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3193290900000L + "'", long29 == 3193290900000L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test5202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5202");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.dayOfMonth();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight25 = dateTime24.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        org.joda.time.DateTime dateTime32 = dateTime24.toDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = yearMonthDay19.toDateTimeAtMidnight(dateTimeZone31);
        int int34 = yearMonthDay19.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.minusDays((int) 'a');
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight42, readableDuration43);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay19.minus((org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.DateMidnight dateMidnight46 = yearMonthDay19.toDateMidnight();
        org.joda.time.Instant instant48 = new org.joda.time.Instant((long) (byte) 1);
        boolean boolean49 = dateMidnight46.isAfter((org.joda.time.ReadableInstant) instant48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = localDate51.toDateTimeAtCurrentTime(dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight54 = dateTime53.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(1L, dateTimeZone56);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight57.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone60 = dateMidnight59.getZone();
        org.joda.time.DateTime dateTime61 = dateTime53.toDateTime(dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.plusMillis(17);
        int int64 = instant48.compareTo((org.joda.time.ReadableInstant) dateTime61);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
    }

    @Test
    public void test5203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5203");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField1 = mutableDateTime0.getRoundingField();
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        mutableDateTime2.setHourOfDay(11);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime2.toMutableDateTime();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 53221197, (long) (byte) 100, periodType8);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) mutableDateTime5, periodType8);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.hourOfDay();
        org.junit.Assert.assertNull(dateTimeField1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test5204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5204");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        mutableDateTime2.setSecondOfMinute((int) (byte) 1);
        int int5 = mutableDateTime2.getMillisOfDay();
        mutableDateTime2.setDayOfYear((int) (byte) 100);
        mutableDateTime2.addYears(3);
        int int10 = mutableDateTime2.getMonthOfYear();
        org.joda.time.Chronology chronology11 = mutableDateTime2.getChronology();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) 804, chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.yearOfEra();
        org.junit.Assert.assertNotNull(mutableDateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53581020 + "'", int5 == 53581020);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test5205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5205");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        org.joda.time.DateMidnight.Property property11 = dateMidnight2.year();
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.lang.String str13 = property11.getAsText(locale12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.dayOfMonth();
        org.joda.time.DurationField durationField18 = property17.getDurationField();
        org.joda.time.DateMidnight dateMidnight19 = property17.roundHalfEvenCopy();
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        int int22 = property17.getMaximumShortTextLength(locale20);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.lang.String str24 = locale23.toLanguageTag();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = locale20.getDisplayLanguage(locale23);
        java.lang.String str27 = locale12.getDisplayLanguage(locale20);
        java.util.Locale locale28 = locale20.stripExtensions();
        java.lang.String str29 = locale20.getDisplayScript();
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970" + "'", str13, "1970");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "en" + "'", str24, "en");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "German" + "'", str26, "German");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Italienisch" + "'", str27, "Italienisch");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test5206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5206");
        org.joda.time.Period period0 = new org.joda.time.Period();
        org.joda.time.Period period2 = period0.multipliedBy((int) (short) 10);
        java.lang.String str3 = period2.toString();
        org.joda.time.Period period5 = period2.minusMinutes(53221327);
        org.joda.time.Period period7 = period5.minusSeconds(39);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT0S" + "'", str3, "PT0S");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test5207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5207");
        org.joda.time.Period period2 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate localDate14 = localDate8.withDayOfMonth(13);
        org.joda.time.Chronology chronology15 = localDate14.getChronology();
        mutablePeriod3.setPeriod((long) 10, (-599990L), chronology15);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((-1968L), chronology15);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateTimeField dateTimeField20 = chronology15.clockhourOfHalfday();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(0L, chronology15);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTime();
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test5208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5208");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        mutableDateTime8.setMillis((long) ' ');
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime8.secondOfDay();
        int int12 = mutableDateTime8.getMillisOfSecond();
        mutableDateTime8.setWeekyear(14);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.Chronology chronology17 = timeOfDay16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.centuryOfEra();
        mutableDateTime8.setChronology(chronology17);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(53401787, 53341818, (int) (short) 0, 53221917, (-184), 53461715, 53281723, chronology17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53221917 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test5209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5209");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.year();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.year();
        int int8 = mutableDateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.withField(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTime dateTime22 = dateTime12.withField(dateTimeFieldType18, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = dateMidnight27.getZone();
        org.joda.time.DateTime dateTime29 = dateTime22.withZoneRetainFields(dateTimeZone28);
        java.lang.String str30 = dateTimeZone28.getID();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone28);
        mutableDateTime1.setZoneRetainFields(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.minusMonths((int) (short) 100);
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTimeAtCurrentTime(dateTimeZone41);
        int int43 = instant38.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology44);
        org.joda.time.DateTimeField dateTimeField47 = localDate45.getField(1);
        java.lang.String str48 = dateTimeField47.getName();
        int int49 = instant38.get(dateTimeField47);
        org.joda.time.Instant instant51 = instant38.plus((long) 'a');
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight37, (org.joda.time.ReadableInstant) instant38);
        java.lang.String str53 = dateMidnight37.toString();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(chronology54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = localDate55.toDateTimeAtCurrentTime(dateTimeZone56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(1L, dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight62.withField(dateTimeFieldType63, (int) 'a');
        org.joda.time.DateTime dateTime67 = dateTime57.withField(dateTimeFieldType63, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(1L, dateTimeZone69);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight70.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone73 = dateMidnight72.getZone();
        org.joda.time.DateTime dateTime74 = dateTime67.withZoneRetainFields(dateTimeZone73);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate((long) 'a', dateTimeZone76);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate((long) 'a', dateTimeZone79);
        org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate77, (org.joda.time.ReadablePartial) localDate80);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = null;
        boolean boolean83 = localDate80.isSupported(dateTimeFieldType82);
        org.joda.time.Chronology chronology84 = localDate80.getChronology();
        org.joda.time.LocalDate localDate86 = localDate80.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = localDate86.getFieldType(1);
        boolean boolean89 = dateTime67.isSupported(dateTimeFieldType88);
        org.joda.time.DateMidnight.Property property90 = dateMidnight37.property(dateTimeFieldType88);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.set(dateTimeFieldType88, 53221515);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53221515 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "monthOfYear" + "'", str48, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1961-09-01T00:00:00.000Z" + "'", str53, "1961-09-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(property90);
    }

    @Test
    public void test5210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5210");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        int int4 = mutableDateTime1.getMillisOfDay();
        mutableDateTime1.setDayOfYear((int) (byte) 100);
        mutableDateTime1.addYears(3);
        java.lang.String str9 = mutableDateTime1.toString();
        org.junit.Assert.assertNotNull(mutableDateTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53581221 + "'", int4 == 53581221);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2025-04-10T14:53:01.221Z" + "'", str9, "2025-04-10T14:53:01.221Z");
    }

    @Test
    public void test5211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5211");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTimeAtCurrentTime(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.withField(dateTimeFieldType16, (int) 'a');
        org.joda.time.DateTime dateTime20 = dateTime10.withField(dateTimeFieldType16, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight2.withField(dateTimeFieldType16, 7);
        int int23 = dateMidnight22.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight22.minus((long) (short) 100);
        int int26 = dateMidnight22.getMillisOfSecond();
        org.joda.time.DateMidnight.Property property27 = dateMidnight22.yearOfEra();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight22.minusWeeks(750);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 7 + "'", int23 == 7);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight29);
    }

    @Test
    public void test5212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5212");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withField(dateTimeFieldType9, (int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime3.withField(dateTimeFieldType9, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        org.joda.time.DateTime dateTime20 = dateTime13.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate23, (org.joda.time.ReadablePartial) localDate26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = localDate26.isSupported(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = localDate26.getChronology();
        org.joda.time.LocalDate localDate32 = localDate26.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = localDate32.getFieldType(1);
        boolean boolean35 = dateTime13.isSupported(dateTimeFieldType34);
        org.joda.time.DateTime dateTime37 = dateTime13.minusDays(1961);
        org.joda.time.DateTime.Property property38 = dateTime37.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.DateMidnight.Property property42 = dateMidnight41.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight41.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property45 = dateMidnight41.dayOfMonth();
        org.joda.time.Period period46 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod47 = period46.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight41.plus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(1L, dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight53.withField(dateTimeFieldType54, (int) 'a');
        boolean boolean57 = dateMidnight48.isSupported(dateTimeFieldType54);
        boolean boolean58 = dateTime37.isEqual((org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.DateTime dateTime60 = dateTime37.minusYears(178);
        org.joda.time.DateTime dateTime62 = dateTime60.plusSeconds(178);
        org.joda.time.DateTime.Property property63 = dateTime60.millisOfDay();
        org.joda.time.DateTime dateTime64 = property63.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(mutablePeriod47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test5213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5213");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((int) (byte) 100, 53221515, (int) (byte) 100, 53221161, 3, (int) 'a', (int) (byte) 100, 8);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay19.plus((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay19.withDayOfMonth(4);
        org.joda.time.YearMonthDay.Property property32 = yearMonthDay19.dayOfMonth();
        int int33 = property32.get();
        org.joda.time.YearMonthDay yearMonthDay34 = property32.withMinimumValue();
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.standard();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 'a', dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 'a', dateTimeZone57);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate55, (org.joda.time.ReadablePartial) localDate58);
        org.joda.time.LocalDate localDate61 = localDate55.withDayOfMonth(13);
        org.joda.time.Chronology chronology62 = localDate61.getChronology();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) 0, periodType52, chronology62);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(0, 26, 244, 0, (int) '#', 47, 53221283, 120, periodType52);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(53221684, 1970, 53221996, 36, (int) (short) 1, 0, 0, 53221180, periodType52);
        mutablePeriod65.addDays(53281444);
        org.joda.time.YearMonthDay yearMonthDay68 = yearMonthDay34.plus((org.joda.time.ReadablePeriod) mutablePeriod65);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = yearMonthDay68.getFieldTypes();
        java.lang.Object obj70 = null;
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.weeks();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) 'a', dateTimeZone75);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate((long) 'a', dateTimeZone78);
        org.joda.time.Period period80 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate76, (org.joda.time.ReadablePartial) localDate79);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = null;
        boolean boolean82 = localDate79.isSupported(dateTimeFieldType81);
        org.joda.time.Chronology chronology83 = localDate79.getChronology();
        org.joda.time.DateTimeField dateTimeField84 = chronology83.dayOfYear();
        org.joda.time.DateTimeField dateTimeField85 = chronology83.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField86 = chronology83.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((long) 493, (long) 53221161, periodType73, chronology83);
        org.joda.time.DateTimeField dateTimeField88 = chronology83.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone89 = chronology83.getZone();
        org.joda.time.DateMidnight dateMidnight90 = new org.joda.time.DateMidnight(obj70, dateTimeZone89);
        org.joda.time.Instant instant92 = org.joda.time.Instant.parse("53221655");
        int int93 = dateMidnight90.compareTo((org.joda.time.ReadableInstant) instant92);
        org.joda.time.DateTimeZone dateTimeZone94 = dateMidnight90.getZone();
        org.joda.time.DateTime dateTime95 = yearMonthDay68.toDateTimeAtMidnight(dateTimeZone94);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNotNull(instant92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone94);
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    public void test5214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5214");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withMillisOfSecond(938);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMillis(4);
        org.joda.time.Period period22 = new org.joda.time.Period();
        org.joda.time.Period period24 = period22.minusMonths((int) '#');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.withPeriodAdded((org.joda.time.ReadablePeriod) period24, 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime19.minusSeconds(53221032);
        boolean boolean29 = localDateTime10.isEqual((org.joda.time.ReadablePartial) localDateTime19);
        int int31 = localDateTime19.getValue(3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 53633263 + "'", int31 == 53633263);
    }

    @Test
    public void test5215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5215");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, readableDuration14);
        org.joda.time.Duration duration16 = period10.toDurationTo((org.joda.time.ReadableInstant) dateMidnight13);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight22, readableDuration23);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType26 = periodType25.withSecondsRemoved();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, (org.joda.time.ReadableInstant) dateMidnight22, periodType26);
        org.joda.time.PeriodType periodType28 = periodType26.withWeeksRemoved();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableDuration) duration16, periodType26);
        java.util.Locale.Category category30 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale31 = java.util.Locale.getDefault(category30);
        java.util.Calendar calendar32 = dateTime3.toCalendar(locale31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 'a', dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 'a', dateTimeZone37);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate35, (org.joda.time.ReadablePartial) localDate38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(1L, dateTimeZone41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight42, readableDuration43);
        org.joda.time.Duration duration45 = period39.toDurationTo((org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.DateMidnight.Property property46 = dateMidnight42.monthOfYear();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = localDate48.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(1L, dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight55.withField(dateTimeFieldType56, (int) 'a');
        org.joda.time.DateTime dateTime60 = dateTime50.withField(dateTimeFieldType56, (int) (short) 0);
        org.joda.time.DateTime dateTime62 = dateTime50.plusHours((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean64 = dateTime50.isSupported(dateTimeFieldType63);
        int int65 = dateMidnight42.get(dateTimeFieldType63);
        java.lang.String str66 = dateTimeFieldType63.toString();
        int int67 = dateTime3.get(dateTimeFieldType63);
        boolean boolean69 = dateTime3.isAfter((long) 53401458);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.FORMAT + "'", category30.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1645455233284,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=53,MILLISECOND=284,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "minuteOfDay" + "'", str66, "minuteOfDay");
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 893 + "'", int67 == 893);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test5216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5216");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = localDate5.toInterval(dateTimeZone9);
        java.lang.String str11 = interval10.toString();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 'a', dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate19, (org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight26, readableDuration27);
        org.joda.time.Duration duration29 = period23.toDurationTo((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight35, readableDuration36);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType39 = periodType38.withSecondsRemoved();
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight32, (org.joda.time.ReadableInstant) dateMidnight35, periodType39);
        org.joda.time.PeriodType periodType41 = periodType39.withWeeksRemoved();
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration29, periodType39);
        org.joda.time.Interval interval43 = interval10.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight48 = dateTime47.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.withDayOfMonth((int) (short) 1);
        org.joda.time.Period period52 = org.joda.time.Period.minutes(0);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight48.plus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateMidnight53);
        java.lang.String str55 = interval54.toString();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str11, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-21T00:00:00.000Z/2022-02-21T00:00:00.000Z" + "'", str55, "2022-02-21T00:00:00.000Z/2022-02-21T00:00:00.000Z");
    }

    @Test
    public void test5217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5217");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate9 = localDate3.withDayOfMonth(13);
        org.joda.time.Chronology chronology10 = localDate9.getChronology();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.DurationField durationField13 = chronology10.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.halfdayOfDay();
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) 2000, chronology10);
        boolean boolean17 = dateMidnight15.isEqual((long) ' ');
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime19 = instant18.toMutableDateTime();
        mutableDateTime19.setSecondOfMinute((int) (byte) 1);
        mutableDateTime19.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime19.year();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime19.era();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.DateTimeField dateTimeField29 = localDate27.getField(1);
        java.lang.String str31 = dateTimeField29.getAsShortText((long) '4');
        int int32 = mutableDateTime19.get(dateTimeField29);
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.minusDays((int) 'a');
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.lang.String str43 = locale42.toLanguageTag();
        java.lang.String str44 = dateMidnight37.toString("+00:00", locale42);
        java.lang.String str45 = locale34.getDisplayVariant(locale42);
        java.lang.String str46 = dateTimeField29.getAsText((int) (short) 10, locale42);
        java.util.Calendar calendar47 = dateMidnight15.toCalendar(locale42);
        int int48 = calendar47.getWeeksInWeekYear();
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "gen" + "'", str31, "gen");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "en" + "'", str43, "en");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "October" + "'", str46, "October");
        org.junit.Assert.assertNotNull(calendar47);
        org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
    }

    @Test
    public void test5218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5218");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight6, readableDuration7);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType10 = periodType9.withSecondsRemoved();
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, (org.joda.time.ReadableInstant) dateMidnight6, periodType10);
        org.joda.time.PeriodType periodType12 = periodType10.withHoursRemoved();
        org.joda.time.PeriodType periodType13 = periodType12.withMillisRemoved();
        org.joda.time.PeriodType periodType14 = periodType13.withWeeksRemoved();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.Period period17 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod18 = period17.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate23, (org.joda.time.ReadablePartial) localDate26);
        org.joda.time.LocalDate localDate29 = localDate23.withDayOfMonth(13);
        org.joda.time.Chronology chronology30 = localDate29.getChronology();
        mutablePeriod18.setPeriod((long) 10, (-599990L), chronology30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((-1968L), chronology30);
        org.joda.time.Period period33 = new org.joda.time.Period(1645454847523L, periodType15, chronology30);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 'a', dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 'a', dateTimeZone39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate37, (org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        boolean boolean43 = localDate40.isSupported(dateTimeFieldType42);
        org.joda.time.Chronology chronology44 = localDate40.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.dayOfYear();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.minuteOfDay();
        boolean boolean47 = mutableDateTime34.equals((java.lang.Object) chronology44);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test5219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5219");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusMillis(10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay3.plusMillis(53253508);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusSeconds(53221593);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay6.plusSeconds((int) (short) 10);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay6.withHourOfDay(12);
        int int13 = timeOfDay6.getSecondOfMinute();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 33 + "'", int13 == 33);
    }

    @Test
    public void test5220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5220");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod1 = period0.toMutablePeriod();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(98727290679120000L);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        int int12 = dateTimeZone10.getStandardOffset((long) 32769);
        java.util.Locale locale14 = java.util.Locale.US;
        java.lang.String str15 = dateTimeZone10.getShortName((long) 1970, locale14);
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.now(dateTimeZone10);
        org.joda.time.LocalTime.Property property17 = localTime16.millisOfDay();
        org.joda.time.LocalTime localTime19 = property17.setCopy(53221515);
        org.joda.time.LocalTime localTime21 = property17.addCopy(53221515);
        org.joda.time.LocalTime localTime23 = localTime21.minusHours(100);
        org.joda.time.LocalTime localTime25 = localTime21.minusSeconds(11);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalTime localTime28 = localTime21.withFieldAdded(durationFieldType26, 53221166);
        org.joda.time.LocalTime localTime30 = localTime3.withFieldAdded(durationFieldType26, 53341644);
        boolean boolean31 = period0.isSupported(durationFieldType26);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test5221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5221");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(1L, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight6.getZone();
        int int9 = dateTimeZone7.getStandardOffset((long) 32769);
        java.util.Locale locale11 = java.util.Locale.US;
        java.lang.String str12 = dateTimeZone7.getShortName((long) 1970, locale11);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.now(dateTimeZone7);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone7);
        long long17 = dateTimeZone7.convertLocalToUTC((long) 1961, false);
        java.lang.String str18 = dateTimeZone7.toString();
        long long20 = dateTimeZone7.nextTransition((long) (byte) 1);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(1645454882020L, dateTimeZone7);
        org.joda.time.LocalTime localTime23 = localTime21.minusSeconds(53281723);
        org.joda.time.LocalTime.Property property24 = localTime21.secondOfMinute();
        org.joda.time.DurationField durationField25 = property24.getRangeDurationField();
        org.joda.time.LocalTime localTime26 = property24.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1961L + "'", long17 == 1961L);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(localTime26);
    }

    @Test
    public void test5222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5222");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.year();
        mutableDateTime1.setDayOfMonth(5);
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime1.copy();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addWeekyears(53281665);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test5223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5223");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime14 = property12.setCopy(53221515);
        org.joda.time.LocalTime localTime16 = property12.addCopy(53221515);
        org.joda.time.LocalTime localTime18 = localTime16.minusHours(100);
        org.joda.time.LocalTime localTime20 = localTime16.minusSeconds(11);
        org.joda.time.LocalTime.Property property21 = localTime16.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime23 = property21.addNoWrapToCopy(53281276);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The addition exceeded the boundaries of LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test5224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5224");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder2 = builder0.setLanguage("Property[minuteOfHour]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: Property[minuteOfHour] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5225");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.Duration duration13 = period7.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime16 = instant15.toMutableDateTime();
        mutableDateTime16.setSecondOfMinute((int) (byte) 1);
        mutableDateTime16.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime16.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime16.secondOfDay();
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.addHours(53221626);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime16.weekOfWeekyear();
        java.lang.String str27 = property26.getAsShortText();
        java.lang.String str28 = property26.getAsString();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "34" + "'", str27, "34");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "34" + "'", str28, "34");
    }

    @Test
    public void test5226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5226");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("T15:00:00.000");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"T15:00:00.000\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5227");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes(53221655);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay1.secondOfMinute();
        org.joda.time.DateTime dateTime5 = timeOfDay1.toDateTimeToday();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test5228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5228");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDayOfMonth((int) (short) 1);
        int int7 = dateMidnight4.getWeekyear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.plusDays((int) (short) 10);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        java.util.Calendar calendar12 = dateMidnight9.toCalendar(locale10);
        org.joda.time.DateMidnight.Property property13 = dateMidnight9.monthOfYear();
        org.joda.time.DateMidnight dateMidnight14 = property13.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = dateMidnight26.getZone();
        org.joda.time.DateTime dateTime28 = localDate20.toDateTimeAtMidnight(dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateMidnight14, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plusWeeks(53221796);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight29.minus(readablePeriod32);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645455234221,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=54,MILLISECOND=221,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1646265600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=62,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
    }

    @Test
    public void test5229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5229");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight6, readableDuration7);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType10 = periodType9.withSecondsRemoved();
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, (org.joda.time.ReadableInstant) dateMidnight6, periodType10);
        org.joda.time.PeriodType periodType12 = periodType10.withWeeksRemoved();
        org.joda.time.PeriodType periodType13 = periodType12.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(53223257L, periodType13);
        java.lang.String str15 = periodType13.getName();
        org.joda.time.PeriodType periodType16 = periodType13.withSecondsRemoved();
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "StandardNoSecondsNoWeeksNoMonths" + "'", str15, "StandardNoSecondsNoWeeksNoMonths");
        org.junit.Assert.assertNotNull(periodType16);
    }

    @Test
    public void test5230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5230");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = dateTime3.toLocalDate();
        org.joda.time.DateTime.Property property5 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime6 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime8 = dateTime3.withDayOfYear(48);
        org.joda.time.DateTime.Property property9 = dateTime3.secondOfDay();
        org.joda.time.DateTime dateTime12 = dateTime3.withDurationAdded(971L, 53581751);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test5231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5231");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        org.joda.time.DateTime dateTime11 = dateTime3.toDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMillis(17);
        org.joda.time.DateTime.Property property14 = dateTime13.weekOfWeekyear();
        org.joda.time.DateTime dateTime15 = property14.getDateTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test5232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5232");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = dateMidnight9.toString(dateTimeFormatter10);
        int int12 = dateMidnight9.getDayOfMonth();
        int int13 = dateMidnight9.getYearOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str11, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
    }

    @Test
    public void test5233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5233");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = localDate5.toInterval(dateTimeZone9);
        java.lang.String str11 = interval10.toString();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.Period period20 = period18.plusYears(8);
        org.joda.time.Interval interval21 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period23 = period20.multipliedBy(0);
        org.joda.time.Period period25 = period20.withYears(1961);
        org.joda.time.Period period26 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod27 = period26.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 'a', dateTimeZone34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate32, (org.joda.time.ReadablePartial) localDate35);
        org.joda.time.LocalDate localDate38 = localDate32.withDayOfMonth(13);
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        mutablePeriod27.setPeriod((long) 10, (-599990L), chronology39);
        mutablePeriod27.addSeconds(13);
        mutablePeriod27.setHours(0);
        org.joda.time.Period period45 = period25.withFields((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Period period46 = period45.toPeriod();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str11, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period46);
    }

    @Test
    public void test5234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5234");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property13 = dateMidnight9.dayOfMonth();
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight9.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.withField(dateTimeFieldType22, (int) 'a');
        boolean boolean25 = dateMidnight16.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime6.withField(dateTimeFieldType22, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime6.minusSeconds(18);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime6.plusMinutes((int) ' ');
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.monthOfYear();
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime34 = instant33.toMutableDateTime();
        mutableDateTime34.setSecondOfMinute((int) (byte) 1);
        mutableDateTime34.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime34.year();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(1L, dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1L, dateTimeZone44);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight45, readableDuration46);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType49 = periodType48.withSecondsRemoved();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight42, (org.joda.time.ReadableInstant) dateMidnight45, periodType49);
        org.joda.time.DateMidnight.Property property51 = dateMidnight42.year();
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.lang.String str53 = property51.getAsText(locale52);
        int int54 = property39.getMaximumShortTextLength(locale52);
        org.joda.time.MutableDateTime mutableDateTime56 = property39.add((long) 914);
        mutableDateTime56.setMillisOfDay(954);
        mutableDateTime56.setYear(36);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime56.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime62 = property61.roundHalfFloor();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean64 = mutableDateTime62.isSupported(dateTimeFieldType63);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((long) 'a', dateTimeZone68);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate((long) 'a', dateTimeZone71);
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate69, (org.joda.time.ReadablePartial) localDate72);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = null;
        boolean boolean75 = localDate72.isSupported(dateTimeFieldType74);
        org.joda.time.Chronology chronology76 = localDate72.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.dayOfYear();
        org.joda.time.DateTimeField dateTimeField78 = chronology76.millisOfDay();
        org.joda.time.Period period79 = new org.joda.time.Period(1645454865923L, (-19044L), chronology76);
        org.joda.time.DateTimeField dateTimeField80 = dateTimeFieldType63.getField(chronology76);
        org.joda.time.DurationField durationField81 = chronology76.years();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((java.lang.Object) localDateTime31, chronology76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970" + "'", str53, "1970");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField81);
    }

    @Test
    public void test5235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5235");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(0, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        int int11 = dateTimeZone9.getStandardOffset((long) 32769);
        java.util.Locale locale13 = java.util.Locale.US;
        java.lang.String str14 = dateTimeZone9.getShortName((long) 1970, locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale13.getDisplayCountry(locale15);
        java.util.Calendar.Builder builder17 = builder0.setLocale(locale15);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.Calendar.Builder builder19 = builder17.setTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate22, (org.joda.time.ReadablePartial) localDate25);
        org.joda.time.LocalDate localDate28 = localDate22.withDayOfMonth(13);
        org.joda.time.Chronology chronology29 = localDate28.getChronology();
        long long33 = chronology29.add((long) (short) -1, (long) 1961, 15);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.standard();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 'a', dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 'a', dateTimeZone40);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate38, (org.joda.time.ReadablePartial) localDate41);
        org.joda.time.LocalDate localDate44 = localDate38.withDayOfMonth(13);
        org.joda.time.Chronology chronology45 = localDate44.getChronology();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 0, periodType35, chronology45);
        int[] intArray49 = chronology29.get((org.joda.time.ReadablePeriod) mutablePeriod46, (long) 596, (long) 53221161);
        java.util.Calendar.Builder builder50 = builder17.setFields(intArray49);
        java.util.Calendar.Builder builder54 = builder17.setWeekDate(304, (int) ' ', 1970);
        java.util.TimeZone timeZone56 = java.util.TimeZone.getTimeZone("java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Calendar.Builder builder57 = builder54.setTimeZone(timeZone56);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ubbf8\uad6d" + "'", str16, "\ubbf8\uad6d");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 29414L + "'", long33 == 29414L);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 0, 0, 14, 47, 0, 565]");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
    }

    @Test
    public void test5236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5236");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = dateMidnight7.getZone();
        int int10 = dateTimeZone8.getStandardOffset((long) 32769);
        java.util.Locale locale12 = java.util.Locale.US;
        java.lang.String str13 = dateTimeZone8.getShortName((long) 1970, locale12);
        long long15 = dateTimeZone8.previousTransition((long) 10);
        org.joda.time.DateTime dateTime16 = timeOfDay1.toDateTimeToday(dateTimeZone8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay1.getFieldTypes();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
    }

    @Test
    public void test5237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5237");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute((int) (byte) 10);
        int int5 = localDateTime4.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusHours(720);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfCentury();
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.lang.String str11 = locale10.getScript();
        java.util.Locale locale12 = locale10.stripExtensions();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = property8.setCopy("53221593", locale12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53221593 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645455234556,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=54,MILLISECOND=556,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test5238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5238");
        java.util.Date date3 = new java.util.Date(53221515, (int) (byte) 1, (int) 'a');
        long long4 = date3.getTime();
        java.lang.String str5 = date3.toGMTString();
        int int6 = date3.getMinutes();
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromDateFields(date3);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = timeOfDay7.getFieldTypes();
        org.junit.Assert.assertEquals(date3.toString(), "Mon May 08 00:00:00 GMT+00:00 53223415");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1679506596172800000L + "'", long4 == 1679506596172800000L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "8 May 53223415 00:00:00 GMT" + "'", str5, "8 May 53223415 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
    }

    @Test
    public void test5239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5239");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3);
        int int5 = period4.size();
        java.lang.String str6 = period4.toString();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.Period period9 = period4.withField(durationFieldType7, 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate localDate18 = localDate12.withDayOfMonth(13);
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        org.joda.time.DurationField durationField21 = durationFieldType7.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekyear();
        int int23 = dateTimeField22.getMaximumValue();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 292278993 + "'", int23 == 292278993);
    }

    @Test
    public void test5240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5240");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis(4);
        org.joda.time.Period period11 = new org.joda.time.Period();
        org.joda.time.Period period13 = period11.minusMonths((int) '#');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.withPeriodAdded((org.joda.time.ReadablePeriod) period13, 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(3, 11, 2);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.minusMillis(53);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight32.withField(dateTimeFieldType33, (int) 'a');
        org.joda.time.DateTime dateTime37 = dateTime27.withField(dateTimeFieldType33, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(1L, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = dateMidnight42.getZone();
        org.joda.time.DateTime dateTime44 = dateTime37.withZoneRetainFields(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 'a', dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate47, (org.joda.time.ReadablePartial) localDate50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        boolean boolean53 = localDate50.isSupported(dateTimeFieldType52);
        org.joda.time.Chronology chronology54 = localDate50.getChronology();
        org.joda.time.LocalDate localDate56 = localDate50.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = localDate56.getFieldType(1);
        boolean boolean59 = dateTime37.isSupported(dateTimeFieldType58);
        org.joda.time.DateTime dateTime61 = dateTime37.minusDays(1961);
        org.joda.time.DateTime.Property property62 = dateTime61.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight(1L, dateTimeZone64);
        org.joda.time.DateMidnight.Property property66 = dateMidnight65.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight65.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property69 = dateMidnight65.dayOfMonth();
        org.joda.time.Period period70 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod71 = period70.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight65.plus((org.joda.time.ReadablePeriod) period70);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight(1L, dateTimeZone74);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight75.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight77.withField(dateTimeFieldType78, (int) 'a');
        boolean boolean81 = dateMidnight72.isSupported(dateTimeFieldType78);
        boolean boolean82 = dateTime61.isEqual((org.joda.time.ReadableInstant) dateMidnight72);
        org.joda.time.DateMidnight dateMidnight85 = dateMidnight72.withDurationAdded((long) 53221032, 24);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateMidnight.Property property87 = dateMidnight85.property(dateTimeFieldType86);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime89 = localDateTime23.withField(dateTimeFieldType86, 53461250);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53461250 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(mutablePeriod71);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertNotNull(property87);
    }

    @Test
    public void test5241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5241");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime14 = property12.addNoWrapToCopy((int) (byte) 100);
        org.joda.time.LocalTime localTime16 = property12.addCopy(366);
        org.joda.time.LocalTime localTime18 = property12.addWrapFieldToCopy(11);
        java.lang.String str19 = property12.getName();
        org.joda.time.DateTimeField dateTimeField20 = property12.getField();
        long long22 = dateTimeField20.roundHalfFloor((long) 'a');
        java.lang.String str23 = dateTimeField20.getName();
        long long26 = dateTimeField20.addWrapField((long) (byte) -1, 53401322);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "millisOfDay" + "'", str19, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 97L + "'", long22 == 97L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "millisOfDay" + "'", str23, "millisOfDay");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-32998679L) + "'", long26 == (-32998679L));
    }

    @Test
    public void test5242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5242");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate5, (org.joda.time.ReadablePartial) localDate8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = localDate8.isSupported(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = localDate8.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.dayOfYear();
        org.joda.time.DateMidnight dateMidnight17 = org.joda.time.DateMidnight.now(chronology12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((-28327307), 100, 53221304, chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateMidnight17);
    }

    @Test
    public void test5243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5243");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.dayOfMonth();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight25 = dateTime24.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        org.joda.time.DateTime dateTime32 = dateTime24.toDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = yearMonthDay19.toDateTimeAtMidnight(dateTimeZone31);
        java.lang.String str35 = yearMonthDay19.toString("\ubbf8\uad6d");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ubbf8\uad6d" + "'", str35, "\ubbf8\uad6d");
    }

    @Test
    public void test5244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5244");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("1970");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5245");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.year();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundCeiling();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate11, (org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = localDate14.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Interval interval19 = localDate14.toInterval(dateTimeZone18);
        java.lang.String str20 = interval19.toString();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate23, (org.joda.time.ReadablePartial) localDate26);
        org.joda.time.Period period29 = period27.plusYears(8);
        org.joda.time.Interval interval30 = interval19.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        boolean boolean32 = interval19.contains((long) 15);
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 'a', dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate36, (org.joda.time.ReadablePartial) localDate39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(1L, dateTimeZone42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight43, readableDuration44);
        org.joda.time.Duration duration46 = period40.toDurationTo((org.joda.time.ReadableInstant) dateMidnight43);
        mutableDateTime33.add((org.joda.time.ReadableDuration) duration46);
        long long48 = duration46.getMillis();
        org.joda.time.Interval interval49 = interval19.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration46);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Period period55 = new org.joda.time.Period(32769, 1, 53221515, (int) (short) 0);
        org.joda.time.Duration duration56 = period55.toStandardDuration();
        boolean boolean57 = duration46.isLongerThan((org.joda.time.ReadableDuration) duration56);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str20, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test5246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5246");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1645454871964L);
        mutablePeriod1.setPeriod(31622400008L, (-24816L));
    }

    @Test
    public void test5247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5247");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        int int4 = mutableDateTime1.getMillisOfDay();
        mutableDateTime1.setDayOfYear((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17);
        org.joda.time.Duration duration19 = period13.toDurationTo((org.joda.time.ReadableInstant) dateMidnight16);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundHalfFloor();
        mutableDateTime22.addYears(53631);
        org.junit.Assert.assertNotNull(mutableDateTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53581806 + "'", int4 == 53581806);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test5248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5248");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        boolean boolean12 = localDate9.isSupported(dateTimeFieldType11);
        org.joda.time.Chronology chronology13 = localDate9.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.minutes();
        org.joda.time.DurationField durationField15 = chronology13.millis();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.centuryOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter3.withChronology(chronology13);
        boolean boolean18 = dateTimeFormatter3.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.parse("eng", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test5249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5249");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.plusMonths(4);
        org.joda.time.Period period3 = period0.toPeriod();
        org.joda.time.Period period5 = period0.plusDays(5);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test5250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5250");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getWeeksInWeekYear();
        java.util.Date date3 = calendar1.getTime();
        java.time.Instant instant4 = calendar1.toInstant();
        java.util.Date date10 = new java.util.Date(888, 2071, 53341513, 53401578, 53401787);
        calendar1.setTime(date10);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=4835416204020000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=155198,MONTH=2,WEEK_OF_YEAR=13,WEEK_OF_MONTH=4,DAY_OF_MONTH=29,DAY_OF_YEAR=88,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=47,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Feb 21 14:53:54 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Mar 29 07:47:00 GMT+00:00 155198");
    }

    @Test
    public void test5251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5251");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property13 = dateMidnight9.dayOfMonth();
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight9.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight9.plusWeeks(17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight9.minusDays(34);
        int int21 = dateMidnight9.getMillisOfSecond();
        org.joda.time.Chronology chronology22 = dateMidnight9.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(345, 4441177, 53221102, 131, 53521779, 53221394, 53461651, chronology22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 131 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test5252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5252");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.Duration duration13 = period7.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime16 = instant15.toMutableDateTime();
        mutableDateTime16.setSecondOfMinute((int) (byte) 1);
        mutableDateTime16.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime16.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime16.secondOfDay();
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) mutableDateTime16);
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale24);
        java.lang.String str26 = calendar25.getCalendarType();
        boolean boolean27 = mutableDateTime0.equals((java.lang.Object) str26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(53221655);
        mutableDateTime0.setZone(dateTimeZone29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime0.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime32 = property31.roundHalfCeiling();
        int int33 = mutableDateTime32.getDayOfYear();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime32.centuryOfEra();
        mutableDateTime32.setMinuteOfDay(826);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645455234923,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=54,MILLISECOND=923,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "gregory" + "'", str26, "gregory");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test5253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5253");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusMonths((int) (byte) 10);
        org.joda.time.DateMidnight.Property property7 = dateMidnight4.era();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        org.joda.time.DateMidnight dateMidnight9 = property7.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withMonthOfYear(425);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 425 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateMidnight9);
    }

    @Test
    public void test5254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5254");
        java.util.Locale locale2 = new java.util.Locale("Mon Feb 21 14:47:55 GMT+00:00 2022", "8 Jun 150344 01:10:11 GMT");
        boolean boolean3 = locale2.hasExtensions();
        java.util.Locale locale4 = java.util.Locale.US;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale4.getVariant();
        java.lang.String str7 = locale2.getDisplayVariant(locale4);
        java.lang.String str8 = locale2.getDisplayCountry();
        java.lang.String str9 = locale2.toLanguageTag();
        java.lang.String str10 = locale2.toLanguageTag();
        org.junit.Assert.assertEquals(locale2.toString(), "mon feb 21 14:47:55 gmt+00:00 2022_8 JUN 150344 01:10:11 GMT");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "inglese (Stati Uniti)" + "'", str5, "inglese (Stati Uniti)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "8 JUN 150344 01:10:11 GMT" + "'", str8, "8 JUN 150344 01:10:11 GMT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "und" + "'", str9, "und");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "und" + "'", str10, "und");
    }

    @Test
    public void test5255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5255");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight17, readableDuration18);
        org.joda.time.Duration duration20 = period14.toDurationTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.Instant instant21 = instant7.minus((org.joda.time.ReadableDuration) duration20);
        boolean boolean22 = dateMidnight5.isAfter((org.joda.time.ReadableInstant) instant7);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        int int33 = dateTimeZone31.getStandardOffset((long) 32769);
        java.util.Locale locale35 = java.util.Locale.US;
        java.lang.String str36 = dateTimeZone31.getShortName((long) 1970, locale35);
        org.joda.time.DateTime dateTime37 = dateMidnight25.toDateTime(dateTimeZone31);
        boolean boolean38 = instant7.isEqual((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime.Property property39 = dateTime37.era();
        int int40 = dateTime37.getMonthOfYear();
        org.joda.time.DateTime dateTime42 = dateTime37.plusMillis(0);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
    }

    @Test
    public void test5256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5256");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusMillis(10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType5 = timeOfDay1.getFieldType(53475102);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53475102");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
    }

    @Test
    public void test5257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5257");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDayOfMonth((int) (short) 1);
        int int7 = dateMidnight4.getWeekyear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.plusDays((int) (short) 10);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        java.util.Calendar calendar12 = dateMidnight9.toCalendar(locale10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight18, readableDuration19);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType22 = periodType21.withSecondsRemoved();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight15, (org.joda.time.ReadableInstant) dateMidnight18, periodType22);
        org.joda.time.PeriodType periodType24 = periodType22.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(1L, dateTimeZone26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight27, readableDuration28);
        int int30 = period29.size();
        java.lang.String str31 = period29.toString();
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.Period period34 = period29.withField(durationFieldType32, 0);
        boolean boolean35 = periodType22.isSupported(durationFieldType32);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight9.withFieldAdded(durationFieldType32, 25);
        org.joda.time.TimeOfDay timeOfDay39 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (byte) 100);
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay39.minusSeconds(0);
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay41.withMillisOfSecond(25);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(1L, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone50 = dateMidnight49.getZone();
        int int52 = dateTimeZone50.getStandardOffset((long) 32769);
        java.util.Locale locale54 = java.util.Locale.US;
        java.lang.String str55 = dateTimeZone50.getShortName((long) 1970, locale54);
        org.joda.time.LocalTime localTime56 = org.joda.time.LocalTime.now(dateTimeZone50);
        org.joda.time.LocalTime localTime58 = localTime56.withSecondOfMinute(0);
        int int59 = localTime56.getSecondOfMinute();
        org.joda.time.Chronology chronology60 = localTime56.getChronology();
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((long) '#', chronology60);
        org.joda.time.TimeOfDay timeOfDay62 = timeOfDay41.withChronologyRetainFields(chronology60);
        org.joda.time.DateTimeField dateTimeField63 = chronology60.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((java.lang.Object) 25, chronology60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645455235079,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=55,MILLISECOND=79,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1646265600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=62,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT0S" + "'", str31, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localTime58);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 55 + "'", int59 == 55);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(dateTimeField63);
    }

    @Test
    public void test5258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5258");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getWeeksInWeekYear();
        int int4 = calendar1.getActualMinimum(4);
        org.joda.time.TimeOfDay timeOfDay5 = org.joda.time.TimeOfDay.fromCalendarFields(calendar1);
        calendar1.setLenient(true);
        long long8 = calendar1.getTimeInMillis();
        calendar1.set(1999, 53281616, 53341956, 5, 53221660, 464);
        int int16 = calendar1.getWeekYear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=144729969929264141,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=4588280,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=63,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=47,SECOND=44,MILLISECOND=141,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645455235141L + "'", long8 == 1645455235141L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4588280 + "'", int16 == 4588280);
    }

    @Test
    public void test5259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5259");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        int int3 = localDateTime2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str5 = dateTimeFieldType4.toString();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.property(dateTimeFieldType4);
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.util.Locale locale8 = java.util.Locale.US;
        int int9 = dateTimeField7.getMaximumTextLength(locale8);
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        java.util.Locale locale15 = new java.util.Locale("gen", "8 Jun 150344 01:10:11 GMT");
        java.lang.String str16 = locale12.getDisplayName(locale15);
        java.lang.String str17 = dateTimeField7.getAsText(2678400000L, locale15);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale15);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale15);
        java.lang.String str20 = calendar19.getCalendarType();
        calendar19.clear();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "weekyear" + "'", str5, "weekyear");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals(locale15.toString(), "gen_8 JUN 150344 01:10:11 GMT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Italian" + "'", str16, "Italian");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970" + "'", str17, "1970");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645455235190,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=55,MILLISECOND=190,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "gregory" + "'", str20, "gregory");
    }

    @Test
    public void test5260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5260");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = localDate10.isSupported(dateTimeFieldType12);
        org.joda.time.Chronology chronology14 = localDate10.getChronology();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 7, chronology14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(801, 53410024, 53281154, (int) (short) 1, chronology14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 801 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test5261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5261");
        java.io.IOException iOException2 = new java.io.IOException("+00:00");
        java.io.IOException iOException4 = new java.io.IOException("+00:00");
        iOException2.addSuppressed((java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException7 = new java.io.IOException("2022-02-21T14:51:41.133Z", (java.lang.Throwable) iOException6);
    }

    @Test
    public void test5262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5262");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfYear();
        org.joda.time.LocalDate localDate5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate7 = localDate5.minusYears((int) (short) 10);
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfMonth();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.LocalDate localDate13 = dateTime12.toLocalDate();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight18 = dateTime17.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight23.getZone();
        org.joda.time.DateTime dateTime25 = dateTime17.toDateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = dateTime12.withZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTime.Property property27 = dateTime26.monthOfYear();
        org.joda.time.DateTime dateTime28 = property27.getDateTime();
        org.joda.time.DateTime dateTime29 = property27.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime29.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((java.lang.Object) property8, dateTimeZone30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
    }

    @Test
    public void test5263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5263");
        java.lang.Object obj1 = null;
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod4 = period3.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate9.withDayOfMonth(13);
        org.joda.time.Chronology chronology16 = localDate15.getChronology();
        mutablePeriod4.setPeriod((long) 10, (-599990L), chronology16);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((-1968L), chronology16);
        org.joda.time.DateTimeZone dateTimeZone19 = chronology16.getZone();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(obj1, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) 304, dateTimeZone19);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
    }

    @Test
    public void test5264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5264");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        int int3 = localDateTime2.getDayOfWeek();
        int int4 = localDateTime2.getMillisOfSecond();
        org.joda.time.DateTime dateTime5 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withYearOfEra(53221655);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minusYears(36);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.minusMillis((int) 'a');
        org.joda.time.LocalDateTime.Property property12 = localDateTime2.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime2.minusDays(53281887);
        int int15 = localDateTime2.size();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight18.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property22 = dateMidnight18.dayOfMonth();
        org.joda.time.Period period23 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod24 = period23.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight18.plus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight30.withField(dateTimeFieldType31, (int) 'a');
        boolean boolean34 = dateMidnight25.isSupported(dateTimeFieldType31);
        org.joda.time.YearMonthDay yearMonthDay35 = dateMidnight25.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = dateMidnight43.getZone();
        int int46 = dateTimeZone44.getStandardOffset((long) 32769);
        java.util.Locale locale48 = java.util.Locale.US;
        java.lang.String str49 = dateTimeZone44.getShortName((long) 1970, locale48);
        org.joda.time.DateTime dateTime50 = dateMidnight38.toDateTime(dateTimeZone44);
        org.joda.time.Interval interval51 = yearMonthDay35.toInterval(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 'a', dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 'a', dateTimeZone56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate54, (org.joda.time.ReadablePartial) localDate57);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(1L, dateTimeZone60);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight61.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone64 = dateMidnight63.getZone();
        org.joda.time.DateTime dateTime65 = localDate57.toDateTimeAtMidnight(dateTimeZone64);
        boolean boolean67 = dateTimeZone64.isStandardOffset((long) (byte) 10);
        org.joda.time.LocalDate localDate68 = org.joda.time.LocalDate.now(dateTimeZone64);
        org.joda.time.DateTime dateTime69 = yearMonthDay35.toDateTimeAtMidnight(dateTimeZone64);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = localDateTime2.isBefore((org.joda.time.ReadablePartial) yearMonthDay35);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 321 + "'", int4 == 321);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test5265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5265");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds((-1));
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay1.plusMillis(18);
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        int int7 = period6.getYears();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay5.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay5.minusMillis(17);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay5.plusMinutes(630);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
    }

    @Test
    public void test5266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5266");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.lang.String str8 = locale7.toLanguageTag();
        java.lang.String str9 = dateMidnight2.toString("+00:00", locale7);
        org.joda.time.DateTime dateTime10 = dateMidnight2.toDateTime();
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfSecond();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "en" + "'", str8, "en");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test5267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5267");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(53221283);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType2.getRangeDurationType();
        org.joda.time.Period period5 = period1.withFieldAdded(durationFieldType3, 53461715);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight10 = dateTime9.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.withDayOfMonth((int) (short) 1);
        int int13 = dateMidnight10.getWeekyear();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight10.plusDays((int) (short) 10);
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale16);
        java.util.Calendar calendar18 = dateMidnight15.toCalendar(locale16);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight24, readableDuration25);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType28 = periodType27.withSecondsRemoved();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight21, (org.joda.time.ReadableInstant) dateMidnight24, periodType28);
        org.joda.time.PeriodType periodType30 = periodType28.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight33, readableDuration34);
        int int36 = period35.size();
        java.lang.String str37 = period35.toString();
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.Period period40 = period35.withField(durationFieldType38, 0);
        boolean boolean41 = periodType28.isSupported(durationFieldType38);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight15.withFieldAdded(durationFieldType38, 25);
        java.lang.String str44 = durationFieldType38.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period46 = period1.withField(durationFieldType38, 53538116);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'halfdays'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645455235386,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=55,MILLISECOND=386,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1646265600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=62,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT0S" + "'", str37, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "halfdays" + "'", str44, "halfdays");
    }

    @Test
    public void test5268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5268");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("halfdays");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder4.setExtension('4', "\u7fa9\u5927\u5229\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test5269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5269");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType3 = periodType2.withWeeksRemoved();
        org.joda.time.PeriodType periodType4 = periodType2.withYearsRemoved();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate localDate13 = localDate7.withDayOfMonth(13);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 53401975, 1645455159275L, periodType2, chronology14);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod18.setWeeks(53521559);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test5270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5270");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusMonths((int) (byte) 10);
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime8 = instant7.toMutableDateTime();
        mutableDateTime8.setSecondOfMinute((int) (byte) 1);
        int int11 = mutableDateTime8.getMillisOfDay();
        int int12 = mutableDateTime8.getHourOfDay();
        int int13 = dateMidnight6.compareTo((org.joda.time.ReadableInstant) mutableDateTime8);
        int int14 = mutableDateTime8.getEra();
        mutableDateTime8.setYear(9770);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53581501 + "'", int11 == 53581501);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 14 + "'", int12 == 14);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test5271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5271");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setDate((-2206387196000L));
        org.junit.Assert.assertNotNull(mutableDateTime0);
    }

    @Test
    public void test5272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5272");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(120);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test5273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5273");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("ita");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'ita' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5274");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        org.joda.time.DateTime dateTime11 = dateTime3.toDateTime(dateTimeZone10);
        org.joda.time.Instant instant12 = dateTime3.toInstant();
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        long long14 = instant12.getMillis();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(chronology13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645455235569L + "'", long14 == 1645455235569L);
    }

    @Test
    public void test5275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5275");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getWeeksInWeekYear();
        java.util.Date date3 = calendar1.getTime();
        org.joda.time.TimeOfDay timeOfDay4 = org.joda.time.TimeOfDay.fromCalendarFields(calendar1);
        // The following exception was thrown during execution in test generation
        try {
            calendar1.setWeekDate(687, 10225, 53221866);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 53221866");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455235585,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=55,MILLISECOND=585,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Feb 21 14:53:55 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(timeOfDay4);
    }

    @Test
    public void test5276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5276");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setSecondOfMinute(52);
        org.joda.time.DateTime dateTime6 = mutableDateTime1.toDateTimeISO();
        int int7 = mutableDateTime1.getMillisOfSecond();
        boolean boolean8 = mutableDateTime1.isAfterNow();
        mutableDateTime1.addMonths(850);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = localDate16.isSupported(dateTimeFieldType18);
        org.joda.time.Chronology chronology20 = localDate16.getChronology();
        org.joda.time.LocalDate localDate22 = localDate16.minusDays(100);
        org.joda.time.LocalDate localDate24 = localDate16.withYear((int) (byte) 0);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtCurrentTime(dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight29 = dateTime28.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight34.getZone();
        org.joda.time.DateTime dateTime36 = dateTime28.toDateTime(dateTimeZone35);
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight38 = localDate16.toDateMidnight(dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusDays(2035);
        int int41 = dateMidnight40.getYearOfEra();
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime1.weekyear();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(1L, dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(1L, dateTimeZone48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight49, readableDuration50);
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType53 = periodType52.withSecondsRemoved();
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight46, (org.joda.time.ReadableInstant) dateMidnight49, periodType53);
        org.joda.time.DateMidnight.Property property55 = dateMidnight46.year();
        java.util.Locale locale56 = java.util.Locale.ITALIAN;
        java.lang.String str57 = property55.getAsText(locale56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(1L, dateTimeZone59);
        org.joda.time.DateMidnight.Property property61 = dateMidnight60.dayOfMonth();
        org.joda.time.DurationField durationField62 = property61.getDurationField();
        org.joda.time.DateMidnight dateMidnight63 = property61.roundHalfEvenCopy();
        java.util.Locale locale64 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet65 = locale64.getUnicodeLocaleAttributes();
        int int66 = property61.getMaximumShortTextLength(locale64);
        java.util.Locale locale67 = java.util.Locale.ENGLISH;
        java.lang.String str68 = locale67.toLanguageTag();
        java.util.Set<java.lang.String> strSet69 = locale67.getUnicodeLocaleKeys();
        java.lang.String str70 = locale64.getDisplayLanguage(locale67);
        java.lang.String str71 = locale56.getDisplayLanguage(locale64);
        java.util.Calendar.Builder builder72 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder75 = builder72.set(0, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateMidnight dateMidnight78 = new org.joda.time.DateMidnight(1L, dateTimeZone77);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight78.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone81 = dateMidnight80.getZone();
        int int83 = dateTimeZone81.getStandardOffset((long) 32769);
        java.util.Locale locale85 = java.util.Locale.US;
        java.lang.String str86 = dateTimeZone81.getShortName((long) 1970, locale85);
        java.util.Locale locale87 = java.util.Locale.KOREAN;
        java.lang.String str88 = locale85.getDisplayCountry(locale87);
        java.util.Calendar.Builder builder89 = builder72.setLocale(locale87);
        java.util.TimeZone timeZone90 = java.util.TimeZone.getDefault();
        java.util.Calendar.Builder builder91 = builder89.setTimeZone(timeZone90);
        java.util.Locale locale92 = java.util.Locale.ITALY;
        java.util.Calendar calendar93 = java.util.Calendar.getInstance(timeZone90, locale92);
        java.lang.String str94 = locale64.getDisplayLanguage(locale92);
        int int95 = property43.getMaximumShortTextLength(locale64);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 606 + "'", int7 == 606);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1964 + "'", int41 == 1964);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1970" + "'", str57, "1970");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "en" + "'", str68, "en");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "German" + "'", str70, "German");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Italienisch" + "'", str71, "Italienisch");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+00:00" + "'", str86, "+00:00");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "\ubbf8\uad6d" + "'", str88, "\ubbf8\uad6d");
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(timeZone90);
        org.junit.Assert.assertEquals(timeZone90.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "it_IT");
        org.junit.Assert.assertNotNull(calendar93);
// flaky:         org.junit.Assert.assertEquals(calendar93.toString(), "java.util.GregorianCalendar[time=1645455235606,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=55,MILLISECOND=606,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "tedesco" + "'", str94, "tedesco");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 9 + "'", int95 == 9);
    }

    @Test
    public void test5277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5277");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("coreano");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight11, readableDuration12);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight8, (org.joda.time.ReadableInstant) dateMidnight11, periodType15);
        org.joda.time.DateMidnight.Property property17 = dateMidnight8.year();
        java.lang.String str18 = dateMidnight8.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight21, readableDuration22);
        int int24 = period23.size();
        java.lang.String str25 = period23.toString();
        org.joda.time.Period period26 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod27 = period26.toMutablePeriod();
        org.joda.time.Period period28 = period23.withFields((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, readableDuration37);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType40 = periodType39.withSecondsRemoved();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight33, (org.joda.time.ReadableInstant) dateMidnight36, periodType40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 'a', dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 'a', dateTimeZone46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate44, (org.joda.time.ReadablePartial) localDate47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        boolean boolean50 = localDate47.isSupported(dateTimeFieldType49);
        org.joda.time.Chronology chronology51 = localDate47.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.minuteOfDay();
        org.joda.time.Period period54 = new org.joda.time.Period((long) 11, (long) 59, periodType40, chronology51);
        org.joda.time.Period period55 = period28.withPeriodType(periodType40);
        int int57 = period28.getValue(0);
        org.joda.time.Duration duration58 = period28.toStandardDuration();
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight8.plus((org.joda.time.ReadableDuration) duration58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight8.minusYears(0);
        boolean boolean62 = languageRange1.equals((java.lang.Object) dateMidnight8);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "coreano" + "'", str5, "coreano");
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str18, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT0S" + "'", str25, "PT0S");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test5278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5278");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) 1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        org.joda.time.Period period11 = new org.joda.time.Period(52, 1, 14, (int) (short) 0, 53221180, 1961, 53221147, (int) (short) 10);
        org.joda.time.Period period13 = period11.plusHours(18);
        org.joda.time.Period period15 = period13.withSeconds(0);
        org.joda.time.DateTime dateTime16 = dateTime2.plus((org.joda.time.ReadablePeriod) period13);
        int int17 = dateTime2.getCenturyOfEra();
        org.joda.time.DateMidnight dateMidnight18 = dateTime2.toDateMidnight();
        org.joda.time.Chronology chronology19 = dateTime2.getChronology();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 19 + "'", int17 == 19);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test5279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5279");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.DateTime dateTime13 = localDate5.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYear(596);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.getDateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfMonth();
        org.joda.time.DateTime dateTime19 = property18.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test5280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5280");
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTimeAtCurrentTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight21, readableDuration22);
        org.joda.time.Duration duration24 = period18.toDurationTo((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(1L, dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight30, readableDuration31);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType34 = periodType33.withSecondsRemoved();
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight27, (org.joda.time.ReadableInstant) dateMidnight30, periodType34);
        org.joda.time.PeriodType periodType36 = periodType34.withWeeksRemoved();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration24, periodType34);
        org.joda.time.Interval interval38 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        boolean boolean40 = interval38.isAfterNow();
        org.joda.time.Chronology chronology41 = interval38.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.seconds();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(53581292, 4441177, 59052, 53461602, 52, 888, 53401726, chronology41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53461602 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
    }

    @Test
    public void test5281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5281");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17);
        org.joda.time.Duration duration19 = period13.toDurationTo((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight25, readableDuration26);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType29 = periodType28.withSecondsRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight22, (org.joda.time.ReadableInstant) dateMidnight25, periodType29);
        org.joda.time.PeriodType periodType31 = periodType29.withWeeksRemoved();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration19, periodType29);
        org.joda.time.Interval interval33 = new org.joda.time.Interval(readableInstant2, (org.joda.time.ReadableDuration) duration19);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = localDate35.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight38 = dateTime37.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = dateMidnight43.getZone();
        org.joda.time.DateTime dateTime45 = dateTime37.toDateTime(dateTimeZone44);
        org.joda.time.Interval interval46 = interval33.withEnd((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration47 = interval33.toDuration();
        org.joda.time.Period period48 = new org.joda.time.Period();
        org.joda.time.Period period50 = period48.minusMonths((int) '#');
        boolean boolean51 = interval33.equals((java.lang.Object) '#');
        long long52 = interval33.getStartMillis();
        org.joda.time.DateTime dateTime53 = interval33.getEnd();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(1L, dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(1L, dateTimeZone58);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight59, readableDuration60);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType63 = periodType62.withSecondsRemoved();
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight56, (org.joda.time.ReadableInstant) dateMidnight59, periodType63);
        org.joda.time.PeriodType periodType65 = periodType63.withWeeksRemoved();
        org.joda.time.PeriodType periodType66 = periodType63.withMillisRemoved();
        org.joda.time.Period period67 = interval33.toPeriod(periodType63);
        org.joda.time.PeriodType periodType68 = periodType63.withHoursRemoved();
        org.joda.time.PeriodType periodType69 = periodType68.withMonthsRemoved();
        org.joda.time.Period period70 = new org.joda.time.Period((long) 53511449, (long) 53461581, periodType69);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1645455236279L + "'", long52 == 1645455236279L);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType69);
    }

    @Test
    public void test5282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5282");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay5 = dateMidnight4.toYearMonthDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType7 = yearMonthDay5.getFieldType(53281689);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53281689");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(yearMonthDay5);
    }

    @Test
    public void test5283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5283");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        org.joda.time.DateTime dateTime11 = dateTime3.toDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra(53221235);
        org.joda.time.DateTime.Property property14 = dateTime13.millisOfDay();
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        boolean boolean24 = localDate21.isSupported(dateTimeFieldType23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Interval interval26 = localDate21.toInterval(dateTimeZone25);
        org.joda.time.LocalDate localDate28 = localDate21.minusMonths(53221283);
        org.joda.time.DateTime dateTime29 = dateTime15.withFields((org.joda.time.ReadablePartial) localDate28);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test5284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5284");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay(dateTimeZone3);
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime6 = mutableDateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        org.joda.time.Chronology chronology16 = localDate12.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.dayOfMonth();
        org.joda.time.DateTime dateTime19 = dateTime6.toDateTime(chronology16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime6.withMillisOfSecond(53401876);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53401876 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test5285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5285");
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        java.util.Date date12 = new java.util.Date(2, (int) '#', (int) '#');
        calendar8.setTime(date12);
        long long14 = date12.getTime();
        org.joda.time.YearMonthDay yearMonthDay15 = org.joda.time.YearMonthDay.fromDateFields(date12);
        org.joda.time.DateTime dateTime16 = yearMonthDay15.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtCurrentTime(dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight21 = dateTime20.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.withDayOfMonth((int) (short) 1);
        int int24 = dateMidnight21.getWeekyear();
        java.lang.String str26 = dateMidnight21.toString("+00:00");
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 'a', dateTimeZone34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate32, (org.joda.time.ReadablePartial) localDate35);
        org.joda.time.LocalDate localDate38 = localDate32.withDayOfMonth(13);
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        mutablePeriod28.add((long) ' ', chronology39);
        org.joda.time.DurationField durationField41 = chronology39.weekyears();
        org.joda.time.DateTime dateTime42 = dateMidnight21.toDateTime(chronology39);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay15.withChronologyRetainFields(chronology39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(630, (int) (byte) 10, 234, 851, 53281803, 53527127, 0, chronology39);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 851 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-2050963200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1905,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=4,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date12.toString(), "Wed Jan 04 00:00:00 GMT+00:00 1905");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-2050963200000L) + "'", long14 == (-2050963200000L));
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(yearMonthDay43);
    }

    @Test
    public void test5286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5286");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(7, 701, 0, 61);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 701 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5287");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (byte) 100, 53221515, (int) (byte) 100, 53221161, 3, (int) 'a', (int) (byte) 100, 8);
        mutablePeriod8.setMillis(309);
        int int11 = mutablePeriod8.size();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
    }

    @Test
    public void test5288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5288");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.DateTime dateTime13 = localDate5.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.Period period15 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod16 = period15.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 'a', dateTimeZone23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate21, (org.joda.time.ReadablePartial) localDate24);
        org.joda.time.LocalDate localDate27 = localDate21.withDayOfMonth(13);
        org.joda.time.Chronology chronology28 = localDate27.getChronology();
        mutablePeriod16.setPeriod((long) 10, (-599990L), chronology28);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((-1968L), chronology28);
        org.joda.time.DateTimeZone dateTimeZone31 = chronology28.getZone();
        org.joda.time.DateTime dateTime32 = localDate5.toDateTimeAtMidnight(dateTimeZone31);
        int int33 = dateTime32.getHourOfDay();
        int int34 = dateTime32.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test5289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5289");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((int) (byte) 100, 53221515, (int) (byte) 100, 53221161, 3, (int) 'a', (int) (byte) 100, 8);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay19.plus((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay19.withDayOfMonth(4);
        org.joda.time.YearMonthDay.Property property32 = yearMonthDay19.dayOfMonth();
        int int33 = property32.get();
        org.joda.time.YearMonthDay yearMonthDay34 = property32.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay35 = property32.getYearMonthDay();
        org.joda.time.YearMonthDay.Property property36 = yearMonthDay35.year();
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder38 = builder37.clearExtensions();
        java.util.Locale.Builder builder40 = builder37.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale locale41 = builder40.build();
        java.lang.String str42 = locale41.getDisplayLanguage();
        int int43 = property36.getMaximumTextLength(locale41);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
    }

    @Test
    public void test5290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5290");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime14 = property12.setCopy(53221515);
        org.joda.time.LocalTime localTime15 = property12.getLocalTime();
        org.joda.time.LocalTime localTime17 = property12.addWrapFieldToCopy(640);
        int int18 = localTime17.getMinuteOfHour();
        org.joda.time.LocalTime localTime20 = localTime17.withHourOfDay(8);
        org.joda.time.LocalTime localTime22 = localTime17.plusMinutes((int) 'u');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime24 = localTime17.withMillisOfSecond(53521808);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53521808 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test5291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5291");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis(4);
        org.joda.time.Period period11 = new org.joda.time.Period();
        org.joda.time.Period period13 = period11.minusMonths((int) '#');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.withPeriodAdded((org.joda.time.ReadablePeriod) period13, 1);
        int int16 = localDateTime8.getDayOfYear();
        org.joda.time.LocalDateTime.Property property17 = localDateTime8.yearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = property17.addWrapFieldToCopy(53221147);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test5292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5292");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.DateTime dateTime13 = localDate5.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.Period period15 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod16 = period15.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 'a', dateTimeZone23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate21, (org.joda.time.ReadablePartial) localDate24);
        org.joda.time.LocalDate localDate27 = localDate21.withDayOfMonth(13);
        org.joda.time.Chronology chronology28 = localDate27.getChronology();
        mutablePeriod16.setPeriod((long) 10, (-599990L), chronology28);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((-1968L), chronology28);
        org.joda.time.DateTimeZone dateTimeZone31 = chronology28.getZone();
        org.joda.time.DateTime dateTime32 = localDate5.toDateTimeAtMidnight(dateTimeZone31);
        java.lang.String str33 = dateTimeZone31.getID();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.DateTimeField dateTimeField37 = localDate35.getField(1);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 'a', dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate40, (org.joda.time.ReadablePartial) localDate43);
        boolean boolean45 = localDate35.isEqual((org.joda.time.ReadablePartial) localDate43);
        int int46 = localDate43.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property47 = localDate43.centuryOfEra();
        org.joda.time.LocalDate localDate48 = property47.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 'a', dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 'a', dateTimeZone53);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate51, (org.joda.time.ReadablePartial) localDate54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(1L, dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone61 = dateMidnight60.getZone();
        org.joda.time.DateTime dateTime62 = localDate54.toDateTimeAtMidnight(dateTimeZone61);
        org.joda.time.Interval interval63 = localDate48.toInterval(dateTimeZone61);
        java.lang.String str65 = dateTimeZone61.getShortName(3600000L);
        long long67 = dateTimeZone31.getMillisKeepLocal(dateTimeZone61, 1645454875822L);
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00" + "'", str65, "+00:00");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1645454875822L + "'", long67 == 1645454875822L);
        org.junit.Assert.assertNotNull(dateTime68);
    }

    @Test
    public void test5293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5293");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        int int3 = localDateTime2.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(3);
        int int6 = localDateTime2.size();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withSecondOfMinute(0);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (byte) 1);
        org.joda.time.DateTime dateTime11 = instant10.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(53221655);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) 53221796, dateTimeZone14);
        long long18 = dateTimeZone14.adjustOffset((long) 53221161, false);
        org.joda.time.DateTime dateTime19 = dateTime11.withZoneRetainFields(dateTimeZone14);
        org.joda.time.DateTime dateTime20 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMonths(887);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 53221161L + "'", long18 == 53221161L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test5294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5294");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone0);
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale3);
        java.util.Set<java.lang.String> strSet5 = locale3.getUnicodeLocaleAttributes();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone0, locale3);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromCalendarFields(calendar6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusSeconds(19);
        int int10 = localDateTime7.getYearOfEra();
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.hourOfDay();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645455237574,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=57,MILLISECOND=574,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test5295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5295");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime14 = property12.setCopy(53221515);
        org.joda.time.LocalTime localTime15 = property12.getLocalTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight18.minusDays((int) 'a');
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateMidnight.Property property27 = dateMidnight23.property(dateTimeFieldType26);
        boolean boolean28 = localTime15.isSupported(dateTimeFieldType26);
        java.lang.Object obj29 = null;
        boolean boolean30 = localTime15.equals(obj29);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test5296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5296");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay21 = property20.withMaximumValue();
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime23 = instant22.toMutableDateTime();
        mutableDateTime23.setSecondOfMinute((int) (byte) 1);
        mutableDateTime23.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime23.year();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime23.era();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.DateTimeField dateTimeField33 = localDate31.getField(1);
        java.lang.String str35 = dateTimeField33.getAsShortText((long) '4');
        int int36 = mutableDateTime23.get(dateTimeField33);
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.DateMidnight.Property property42 = dateMidnight41.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight41.minusDays((int) 'a');
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        java.lang.String str47 = locale46.toLanguageTag();
        java.lang.String str48 = dateMidnight41.toString("+00:00", locale46);
        java.lang.String str49 = locale38.getDisplayVariant(locale46);
        java.lang.String str50 = dateTimeField33.getAsText((int) (short) 10, locale46);
        int int51 = property20.getMaximumShortTextLength(locale46);
        org.joda.time.YearMonthDay yearMonthDay52 = property20.getYearMonthDay();
        int int53 = property20.getMinimumValueOverall();
        int int54 = property20.getMaximumValue();
        int int55 = property20.getMinimumValue();
        int int56 = property20.get();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay58 = property20.setCopy("2035-02-21T14:52:34.042");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2035-02-21T14:52:34.042\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "gen" + "'", str35, "gen");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "en" + "'", str47, "en");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "October" + "'", str50, "October");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 31 + "'", int54 == 31);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test5297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5297");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 5, (long) 53221797);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime4 = instant3.toMutableDateTime();
        mutableDateTime4.setSecondOfMinute((int) (byte) 1);
        mutableDateTime4.setSecondOfMinute(52);
        org.joda.time.DateTime dateTime9 = mutableDateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, readableDuration20);
        org.joda.time.Duration duration22 = period16.toDurationTo((org.joda.time.ReadableInstant) dateMidnight19);
        mutableDateTime4.add((org.joda.time.ReadableDuration) duration22, 53221515);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, readableInstant25);
        mutablePeriod2.add((org.joda.time.ReadableDuration) duration22);
        org.joda.time.MutablePeriod mutablePeriod28 = mutablePeriod2.copy();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(mutablePeriod28);
    }

    @Test
    public void test5298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5298");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = localDate5.toInterval(dateTimeZone9);
        java.lang.String str11 = interval10.toString();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.Period period20 = period18.plusYears(8);
        org.joda.time.Interval interval21 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate25, (org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = localDate28.isSupported(dateTimeFieldType30);
        org.joda.time.Chronology chronology32 = localDate28.getChronology();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 7, chronology32);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.Interval interval35 = interval10.withChronology(chronology32);
        org.joda.time.Duration duration36 = interval35.toDuration();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate39, (org.joda.time.ReadablePartial) localDate42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = localDate42.isSupported(dateTimeFieldType44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Interval interval47 = localDate42.toInterval(dateTimeZone46);
        java.lang.String str48 = interval47.toString();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 'a', dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 'a', dateTimeZone53);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate51, (org.joda.time.ReadablePartial) localDate54);
        org.joda.time.Period period57 = period55.plusYears(8);
        org.joda.time.Interval interval58 = interval47.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Period period60 = period57.withMinutes(0);
        org.joda.time.Period period62 = period60.plusYears(53221626);
        org.joda.time.Interval interval63 = interval35.withPeriodAfterStart((org.joda.time.ReadablePeriod) period60);
        org.joda.time.Instant instant64 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(chronology65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = localDate66.toDateTimeAtCurrentTime(dateTimeZone67);
        int int69 = instant64.compareTo((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime dateTime71 = dateTime68.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime72 = dateTime71.toDateTime();
        org.joda.time.DateTime dateTime73 = dateTime71.toDateTime();
        org.joda.time.DateTime dateTime75 = dateTime71.plusDays(53281118);
        boolean boolean76 = interval35.isBefore((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime78 = dateTime71.withMillis((long) 994);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str11, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str48, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test5299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5299");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        long long13 = chronology9.add((long) (short) -1, (long) 1961, 15);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.standard();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate localDate24 = localDate18.withDayOfMonth(13);
        org.joda.time.Chronology chronology25 = localDate24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 0, periodType15, chronology25);
        int[] intArray29 = chronology9.get((org.joda.time.ReadablePeriod) mutablePeriod26, (long) 596, (long) 53221161);
        org.joda.time.DurationField durationField30 = chronology9.centuries();
        java.lang.String str31 = durationField30.toString();
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 29414L + "'", long13 == 29414L);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 14, 47, 0, 565]");
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "DurationField[centuries]" + "'", str31, "DurationField[centuries]");
    }

    @Test
    public void test5300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5300");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds(0);
        org.joda.time.Chronology chronology9 = localDateTime6.getChronology();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology9);
        org.joda.time.DateMidnight dateMidnight11 = org.joda.time.DateMidnight.now(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusYears(13);
        int int17 = localDateTime16.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str19 = dateTimeFieldType18.toString();
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.property(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withWeekOfWeekyear(47);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime16.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusMillis(53221626);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays(53221310);
        org.joda.time.Chronology chronology29 = localDateTime26.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeField13, chronology29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.field.RemainderDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "weekyear" + "'", str19, "weekyear");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
    }

    @Test
    public void test5301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5301");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getWeeksInWeekYear();
        java.util.Date date3 = calendar1.getTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        org.joda.time.DateTime dateTime17 = localDate9.toDateTimeAtMidnight(dateTimeZone16);
        boolean boolean19 = dateTimeZone16.isStandardOffset((long) (byte) 10);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(dateTimeZone16);
        boolean boolean22 = calendar1.after((java.lang.Object) dateTimeZone16);
        org.joda.time.Period period23 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod24 = period23.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate29, (org.joda.time.ReadablePartial) localDate32);
        org.joda.time.LocalDate localDate35 = localDate29.withDayOfMonth(13);
        org.joda.time.Chronology chronology36 = localDate35.getChronology();
        mutablePeriod24.setPeriod((long) 10, (-599990L), chronology36);
        boolean boolean38 = calendar1.after((java.lang.Object) mutablePeriod24);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(53221440, 97, 100, 42, 60, 53221807, 862, 53221235);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 'a', dateTimeZone52);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate50, (org.joda.time.ReadablePartial) localDate53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        boolean boolean56 = localDate53.isSupported(dateTimeFieldType55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.Interval interval58 = localDate53.toInterval(dateTimeZone57);
        java.lang.String str59 = interval58.toString();
        org.joda.time.Duration duration60 = interval58.toDuration();
        mutablePeriod47.add((org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(1L, dateTimeZone65);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight(1L, dateTimeZone68);
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight69, readableDuration70);
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType73 = periodType72.withSecondsRemoved();
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight66, (org.joda.time.ReadableInstant) dateMidnight69, periodType73);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate((long) 'a', dateTimeZone76);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate((long) 'a', dateTimeZone79);
        org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate77, (org.joda.time.ReadablePartial) localDate80);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = null;
        boolean boolean83 = localDate80.isSupported(dateTimeFieldType82);
        org.joda.time.Chronology chronology84 = localDate80.getChronology();
        org.joda.time.DateTimeField dateTimeField85 = chronology84.dayOfYear();
        org.joda.time.DateTimeField dateTimeField86 = chronology84.minuteOfDay();
        org.joda.time.Period period87 = new org.joda.time.Period((long) 11, (long) 59, periodType73, chronology84);
        mutablePeriod24.setPeriod((org.joda.time.ReadableDuration) duration60, chronology84);
        org.joda.time.Chronology chronology90 = null;
        mutablePeriod24.setPeriod(1645454951411L, chronology90);
        mutablePeriod24.addDays(210);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType95 = mutablePeriod24.getFieldType(53461124);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455237956,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=57,MILLISECOND=956,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Feb 21 14:53:57 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str59, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
    }

    @Test
    public void test5302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5302");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        int int3 = localDateTime2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str5 = dateTimeFieldType4.toString();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.property(dateTimeFieldType4);
        org.joda.time.Chronology chronology7 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withYearOfCentury(39);
        int int10 = localDateTime9.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "weekyear" + "'", str5, "weekyear");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
    }

    @Test
    public void test5303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5303");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("\u82f1\u6587\u7f8e\u56fd)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '?? (??)' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5304");
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime5 = instant4.toMutableDateTime();
        mutableDateTime5.setSecondOfMinute((int) (byte) 1);
        int int8 = mutableDateTime5.getMillisOfDay();
        mutableDateTime5.setDayOfYear((int) (byte) 100);
        mutableDateTime5.addYears(3);
        int int13 = mutableDateTime5.getMonthOfYear();
        org.joda.time.Chronology chronology14 = mutableDateTime5.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.days();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(210, 2071, 53221812, 486, chronology14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 210 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53581025 + "'", int8 == 53581025);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test5305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5305");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.weeks();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        boolean boolean12 = localDate9.isSupported(dateTimeFieldType11);
        org.joda.time.Chronology chronology13 = localDate9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 493, (long) 53221161, periodType3, chronology13);
        org.joda.time.DateTimeField dateTimeField18 = chronology13.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology13.getZone();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(obj0, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate23, (org.joda.time.ReadablePartial) localDate26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight30, readableDuration31);
        org.joda.time.Duration duration33 = period27.toDurationTo((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight20.minus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight20.plus(480960L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.withDayOfYear(53341304);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53341304 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
    }

    @Test
    public void test5306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5306");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusMillis(10);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.minuteOfHour();
        int int5 = property4.getMaximumValueOverall();
        org.joda.time.TimeOfDay timeOfDay7 = property4.addWrapFieldToCopy(2);
        int int8 = property4.get();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay10 = property4.addNoWrapToCopy(4441178);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Maximum value exceeded for add");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test5307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5307");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod1 = period0.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.LocalDate localDate12 = localDate6.withDayOfMonth(13);
        org.joda.time.Chronology chronology13 = localDate12.getChronology();
        mutablePeriod1.setPeriod((long) 10, (-599990L), chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.yearOfEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.DateTimeField dateTimeField19 = localDate17.getField(1);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate22, (org.joda.time.ReadablePartial) localDate25);
        boolean boolean27 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate25);
        int int28 = localDate25.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight34, readableDuration35);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType38 = periodType37.withSecondsRemoved();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight31, (org.joda.time.ReadableInstant) dateMidnight34, periodType38);
        org.joda.time.DateMidnight.Property property40 = dateMidnight31.year();
        java.util.Locale locale41 = java.util.Locale.ITALIAN;
        java.lang.String str42 = property40.getAsText(locale41);
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale43);
        java.lang.String str45 = locale41.getDisplayVariant(locale43);
        java.lang.String str46 = dateTimeField15.getAsShortText((org.joda.time.ReadablePartial) localDate25, locale41);
        java.util.Locale.setDefault(locale41);
        java.lang.String str48 = locale41.getLanguage();
        java.lang.String str49 = locale41.getDisplayScript();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1970" + "'", str42, "1970");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970" + "'", str46, "1970");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "it" + "'", str48, "it");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test5308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5308");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.LocalDate.Property property10 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate11 = property10.roundHalfEvenCopy();
        org.joda.time.LocalDate.Property property12 = localDate11.era();
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale15);
        java.util.Locale.setDefault(category14, locale15);
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category14, locale18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate21 = property12.setCopy("2022-07-11T14:53:52.032Z", locale18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-07-11T14:53:52.032Z\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet19);
    }

    @Test
    public void test5309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5309");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDayOfMonth((int) (short) 1);
        int int7 = dateMidnight4.getWeekyear();
        java.lang.String str9 = dateMidnight4.toString("+00:00");
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate localDate21 = localDate15.withDayOfMonth(13);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        mutablePeriod11.add((long) ' ', chronology22);
        org.joda.time.DurationField durationField24 = chronology22.weekyears();
        org.joda.time.DateTime dateTime25 = dateMidnight4.toDateTime(chronology22);
        org.joda.time.DateTime dateTime27 = dateTime25.withMillisOfDay(53281665);
        org.joda.time.DateTime dateTime29 = dateTime25.withCenturyOfEra(0);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((java.lang.Object) dateTime25);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test5310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5310");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(0L);
    }

    @Test
    public void test5311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5311");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = dateTime3.toLocalDate();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = dateMidnight14.getZone();
        org.joda.time.DateTime dateTime16 = dateTime8.toDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime3.withZoneRetainFields(dateTimeZone15);
        org.joda.time.DateTime.Property property18 = dateTime17.monthOfYear();
        org.joda.time.DateTime dateTime19 = property18.getDateTime();
        org.joda.time.DateTime dateTime21 = property18.addToCopy((long) 53221848);
        org.joda.time.DateTime dateTime22 = property18.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test5312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5312");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.TimeOfDay timeOfDay4 = property2.getTimeOfDay();
        int int5 = property2.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay7 = property2.addToCopy(178);
        org.joda.time.DateTimeField dateTimeField8 = property2.getField();
        int int9 = property2.get();
        int int10 = property2.get();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test5313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5313");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        mutableDateTime1.setMillis((long) ' ');
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.secondOfDay();
        int int5 = mutableDateTime1.getMillisOfSecond();
        mutableDateTime1.setWeekyear(14);
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.Chronology chronology10 = timeOfDay9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.centuryOfEra();
        mutableDateTime1.setChronology(chronology10);
        org.joda.time.Chronology chronology13 = chronology10.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((java.lang.Object) chronology10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test5314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5314");
        java.lang.Object obj1 = null;
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.weeks();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = localDate10.isSupported(dateTimeFieldType12);
        org.joda.time.Chronology chronology14 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 493, (long) 53221161, periodType4, chronology14);
        org.joda.time.DateTimeField dateTimeField19 = chronology14.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology14.getZone();
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(obj1, dateTimeZone20);
        long long23 = dateTimeZone20.convertUTCToLocal((long) 53341304);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) 53620792, dateTimeZone20);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53341304L + "'", long23 == 53341304L);
    }

    @Test
    public void test5315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5315");
        org.joda.time.Period period2 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate localDate14 = localDate8.withDayOfMonth(13);
        org.joda.time.Chronology chronology15 = localDate14.getChronology();
        mutablePeriod3.setPeriod((long) 10, (-599990L), chronology15);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((-1968L), chronology15);
        org.joda.time.DateTimeZone dateTimeZone18 = chronology15.getZone();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(1645454844652L, dateTimeZone18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTimeAtCurrentTime(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight28.withField(dateTimeFieldType29, (int) 'a');
        org.joda.time.DateTime dateTime33 = dateTime23.withField(dateTimeFieldType29, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone39 = dateMidnight38.getZone();
        org.joda.time.DateTime dateTime40 = dateTime33.withZoneRetainFields(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 'a', dateTimeZone45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate43, (org.joda.time.ReadablePartial) localDate46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = localDate46.isSupported(dateTimeFieldType48);
        org.joda.time.Chronology chronology50 = localDate46.getChronology();
        org.joda.time.LocalDate localDate52 = localDate46.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = localDate52.getFieldType(1);
        boolean boolean55 = dateTime33.isSupported(dateTimeFieldType54);
        org.joda.time.DateTime dateTime57 = dateTime33.minusDays(1961);
        org.joda.time.DateTime.Property property58 = dateTime57.yearOfEra();
        org.joda.time.DateTime dateTime59 = property58.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField60 = property58.getField();
        int int62 = dateTimeField60.getLeapAmount((long) 53221180);
        long long64 = dateTimeField60.roundCeiling((long) 53221235);
        mutableDateTime19.setRounding(dateTimeField60, (int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime67 = mutableDateTime19.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime67.era();
        java.lang.String str69 = mutableDateTime67.toString();
        mutableDateTime67.setYear(532237);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 31536000000L + "'", long64 == 31536000000L);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "2022-01-01T00:00:00.000Z" + "'", str69, "2022-01-01T00:00:00.000Z");
    }

    @Test
    public void test5316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5316");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setSecondOfMinute(52);
        org.joda.time.DateTime dateTime6 = mutableDateTime1.toDateTimeISO();
        int int7 = dateTime6.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = localDate13.isSupported(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Interval interval18 = localDate13.toInterval(dateTimeZone17);
        java.lang.String str19 = interval18.toString();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate22, (org.joda.time.ReadablePartial) localDate25);
        org.joda.time.Period period28 = period26.plusYears(8);
        org.joda.time.Interval interval29 = interval18.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Period period31 = period28.withMinutes(0);
        org.joda.time.Period period33 = period28.minusMillis(32770);
        org.joda.time.DateTime dateTime34 = dateTime6.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.DateTime dateTime35 = dateTime6.withLaterOffsetAtOverlap();
        org.joda.time.YearMonthDay yearMonthDay36 = dateTime35.toYearMonthDay();
        org.joda.time.LocalDate localDate37 = yearMonthDay36.toLocalDate();
        int[] intArray38 = yearMonthDay36.getValues();
        int int39 = yearMonthDay36.size();
        org.joda.time.YearMonthDay.Property property40 = yearMonthDay36.year();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str19, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[2022, 2, 21]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test5317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5317");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withField(dateTimeFieldType9, (int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime3.withField(dateTimeFieldType9, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        org.joda.time.DateTime dateTime20 = dateTime13.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate23, (org.joda.time.ReadablePartial) localDate26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = localDate26.isSupported(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = localDate26.getChronology();
        org.joda.time.LocalDate localDate32 = localDate26.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = localDate32.getFieldType(1);
        boolean boolean35 = dateTime13.isSupported(dateTimeFieldType34);
        org.joda.time.DateTime dateTime37 = dateTime13.minusDays(1961);
        org.joda.time.DateMidnight dateMidnight38 = dateTime13.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight38.withDurationAdded((long) 53521226, 155);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight41);
    }

    @Test
    public void test5318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5318");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.DateTime dateTime13 = localDate5.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYear(596);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.getDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime17.toMutableDateTime();
        mutableDateTime18.addMillis(1);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
    }

    @Test
    public void test5319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5319");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateTime dateTime6 = dateTime3.minus(2678400000L);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillis(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(42);
        org.joda.time.DateTime dateTime11 = dateTime6.withZone(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test5320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5320");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusMillis(10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        org.joda.time.LocalTime localTime5 = timeOfDay3.toLocalTime();
        org.joda.time.LocalTime localTime7 = localTime5.plusSeconds(26);
        org.joda.time.LocalTime localTime9 = localTime7.plusSeconds(498);
        int int10 = localTime7.getMillisOfDay();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 26042 + "'", int10 == 26042);
    }

    @Test
    public void test5321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5321");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        int int3 = localDateTime2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str5 = dateTimeFieldType4.toString();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.property(dateTimeFieldType4);
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.util.Locale locale8 = java.util.Locale.US;
        int int9 = dateTimeField7.getMaximumTextLength(locale8);
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        java.util.Locale locale15 = new java.util.Locale("gen", "8 Jun 150344 01:10:11 GMT");
        java.lang.String str16 = locale12.getDisplayName(locale15);
        java.lang.String str17 = dateTimeField7.getAsText(2678400000L, locale15);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale15);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale15);
        java.lang.String str20 = calendar19.getCalendarType();
        calendar19.setMinimalDaysInFirstWeek(53521688);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "weekyear" + "'", str5, "weekyear");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertEquals(locale15.toString(), "gen_8 JUN 150344 01:10:11 GMT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "German (Germany)" + "'", str16, "German (Germany)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970" + "'", str17, "1970");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645455239038,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=59,MILLISECOND=38,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645455239039,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=53521688,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=59,MILLISECOND=39,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "gregory" + "'", str20, "gregory");
    }

    @Test
    public void test5322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5322");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = localDate5.toInterval(dateTimeZone9);
        java.lang.String str11 = interval10.toString();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.Period period20 = period18.plusYears(8);
        org.joda.time.Interval interval21 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 'a', dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 'a', dateTimeZone26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate24, (org.joda.time.ReadablePartial) localDate27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = localDate27.isSupported(dateTimeFieldType29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Interval interval32 = localDate27.toInterval(dateTimeZone31);
        java.lang.String str33 = interval32.toString();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 'a', dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate36, (org.joda.time.ReadablePartial) localDate39);
        org.joda.time.Period period42 = period40.plusYears(8);
        org.joda.time.Interval interval43 = interval32.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period42);
        boolean boolean45 = interval32.contains((long) 15);
        org.joda.time.Interval interval46 = interval10.gap((org.joda.time.ReadableInterval) interval32);
        boolean boolean48 = interval32.isBefore((long) 53461893);
        org.joda.time.Duration duration49 = interval32.toDuration();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str11, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str33, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(duration49);
    }

    @Test
    public void test5323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5323");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.withMillisOfSecond(5);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight12, readableDuration13);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMillis(4);
        org.joda.time.Period period20 = new org.joda.time.Period();
        org.joda.time.Period period22 = period20.minusMonths((int) '#');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.withPeriodAdded((org.joda.time.ReadablePeriod) period22, 1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDate(3, 11, 2);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.dayOfYear();
        boolean boolean32 = localDateTime8.equals((java.lang.Object) property31);
        org.joda.time.LocalDateTime localDateTime33 = property31.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime38 = localDateTime33.withTime(520, 53279438, 53221684, 709);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 520 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
    }

    @Test
    public void test5324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5324");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime14 = property12.setCopy(53221515);
        org.joda.time.LocalTime localTime15 = property12.getLocalTime();
        org.joda.time.LocalTime localTime17 = property12.addNoWrapToCopy(34);
        org.joda.time.LocalTime localTime18 = property12.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime19 = property12.withMaximumValue();
        org.joda.time.LocalTime localTime20 = property12.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((java.lang.Object) localTime20, dateTimeZone21);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
    }

    @Test
    public void test5325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5325");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone0);
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale3);
        java.util.Set<java.lang.String> strSet5 = locale3.getUnicodeLocaleAttributes();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone0, locale3);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromCalendarFields(calendar6);
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod11 = period10.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 'a', dateTimeZone18);
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate16, (org.joda.time.ReadablePartial) localDate19);
        org.joda.time.LocalDate localDate22 = localDate16.withDayOfMonth(13);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        mutablePeriod11.setPeriod((long) 10, (-599990L), chronology23);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((-1968L), chronology23);
        org.joda.time.DateTimeZone dateTimeZone26 = chronology23.getZone();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(1645454844652L, dateTimeZone26);
        org.joda.time.Interval interval28 = localDate7.toInterval(dateTimeZone26);
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime30 = instant29.toDateTime();
        boolean boolean31 = interval28.isBefore((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime33 = instant32.toMutableDateTime();
        mutableDateTime33.setSecondOfMinute((int) (byte) 1);
        mutableDateTime33.setSecondOfMinute(52);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 'a', dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate40, (org.joda.time.ReadablePartial) localDate43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(1L, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone50 = dateMidnight49.getZone();
        org.joda.time.DateTime dateTime51 = localDate43.toDateTimeAtMidnight(dateTimeZone50);
        boolean boolean53 = dateTimeZone50.isStandardOffset((long) (byte) 10);
        mutableDateTime33.setZone(dateTimeZone50);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime33.millisOfSecond();
        org.joda.time.Instant instant56 = mutableDateTime33.toInstant();
        org.joda.time.Period period57 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod58 = period57.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((long) 'a', dateTimeZone62);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((long) 'a', dateTimeZone65);
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate63, (org.joda.time.ReadablePartial) localDate66);
        org.joda.time.LocalDate localDate69 = localDate63.withDayOfMonth(13);
        org.joda.time.Chronology chronology70 = localDate69.getChronology();
        mutablePeriod58.setPeriod((long) 10, (-599990L), chronology70);
        mutableDateTime33.setChronology(chronology70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay73 = new org.joda.time.TimeOfDay((java.lang.Object) boolean31, chronology70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645455239205,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=59,MILLISECOND=205,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(mutablePeriod58);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(chronology70);
    }

    @Test
    public void test5326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5326");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.weeks();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate5, (org.joda.time.ReadablePartial) localDate8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = localDate8.isSupported(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = localDate8.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 493, (long) 53221161, periodType2, chronology12);
        org.joda.time.DateTimeField dateTimeField17 = chronology12.millisOfSecond();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField19 = chronology12.millisOfSecond();
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(chronology12);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test5327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5327");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.util.Date date5 = new java.util.Date(2, (int) '#', (int) '#');
        calendar1.setTime(date5);
        calendar1.clear();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromCalendarFields(calendar1);
        int int9 = localTime8.getMinuteOfHour();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date5.toString(), "Wed Jan 04 00:00:00 GMT+00:00 1905");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test5328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5328");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime14 = property12.addNoWrapToCopy((int) (byte) 100);
        org.joda.time.LocalTime localTime16 = property12.addCopy(366);
        org.joda.time.LocalTime localTime18 = property12.addWrapFieldToCopy(11);
        java.lang.String str19 = property12.getName();
        org.joda.time.LocalTime localTime20 = property12.roundFloorCopy();
        org.joda.time.LocalTime localTime22 = property12.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime24 = localTime22.plusMillis(566);
        org.joda.time.LocalTime localTime26 = localTime24.plusHours(607);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "millisOfDay" + "'", str19, "millisOfDay");
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
    }

    @Test
    public void test5329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5329");
        java.util.Date date3 = new java.util.Date(53221515, (int) (byte) 1, (int) 'a');
        date3.setYear(0);
        date3.setSeconds(53341062);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Jan 15 08:57:42 GMT+00:00 1902");
    }

    @Test
    public void test5330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5330");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy(10368000047L);
        java.lang.String str6 = property3.getName();
        org.joda.time.LocalDateTime localDateTime8 = property3.addWrapFieldToCopy(2035);
        org.joda.time.LocalDateTime localDateTime9 = property3.withMaximumValue();
        org.joda.time.Period period11 = org.joda.time.Period.months((int) (short) -1);
        org.joda.time.Period period13 = period11.plusHours(32);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.withPeriodAdded((org.joda.time.ReadablePeriod) period11, 33);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfYear();
        java.lang.String str17 = localDateTime15.toString();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "dayOfYear" + "'", str6, "dayOfYear");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2020-03-31T14:53:59.394" + "'", str17, "2020-03-31T14:53:59.394");
    }

    @Test
    public void test5331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5331");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(10, 888, 32769, 11);
        mutablePeriod4.setSeconds(39);
        mutablePeriod4.setWeeks(20282284);
    }

    @Test
    public void test5332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5332");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        java.util.Locale locale5 = dateTimeFormatter3.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeFormatter3.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.709", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeZone7);
    }

    @Test
    public void test5333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5333");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) dateMidnight23, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration17, periodType27);
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = localDate33.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight36 = dateTime35.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(1L, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = dateMidnight41.getZone();
        org.joda.time.DateTime dateTime43 = dateTime35.toDateTime(dateTimeZone42);
        org.joda.time.Interval interval44 = interval31.withEnd((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 'a', dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate47, (org.joda.time.ReadablePartial) localDate50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        boolean boolean53 = localDate50.isSupported(dateTimeFieldType52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Interval interval55 = localDate50.toInterval(dateTimeZone54);
        java.lang.String str56 = interval55.toString();
        boolean boolean57 = interval31.equals((java.lang.Object) interval55);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) 'a', dateTimeZone59);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((long) 'a', dateTimeZone62);
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate60, (org.joda.time.ReadablePartial) localDate63);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = null;
        boolean boolean66 = localDate63.isSupported(dateTimeFieldType65);
        org.joda.time.Chronology chronology67 = localDate63.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.dayOfYear();
        org.joda.time.Interval interval69 = interval55.withChronology(chronology67);
        org.joda.time.Period period70 = interval55.toPeriod();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str56, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(period70);
    }

    @Test
    public void test5334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5334");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3);
        int int5 = period4.size();
        org.joda.time.MutablePeriod mutablePeriod6 = period4.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod7 = mutablePeriod6.copy();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = dateMidnight16.getZone();
        int int19 = dateTimeZone17.getStandardOffset((long) 32769);
        java.util.Locale locale21 = java.util.Locale.US;
        java.lang.String str22 = dateTimeZone17.getShortName((long) 1970, locale21);
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now(dateTimeZone17);
        org.joda.time.LocalTime localTime25 = localTime23.withSecondOfMinute(0);
        int int26 = localTime23.getSecondOfMinute();
        org.joda.time.Chronology chronology27 = localTime23.getChronology();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) '#', chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.minuteOfDay();
        boolean boolean30 = dateTimeFieldType10.isSupported(chronology27);
        mutablePeriod7.setPeriod((long) 685, (long) 36, chronology27);
        mutablePeriod7.setWeeks(276);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 59 + "'", int26 == 59);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test5335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5335");
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusSeconds(0);
        org.joda.time.Chronology chronology16 = localDateTime13.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(892, 53221197, 898, 53341267, 841, 56, 53221555, chronology16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53341267 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test5336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5336");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod1 = period0.toMutablePeriod();
        mutablePeriod1.setPeriod((-1L));
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType7 = periodType6.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 7, (long) (short) 1, periodType6);
        mutablePeriod1.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.setMillis(394);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
    }

    @Test
    public void test5337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5337");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType3 = periodType2.withSecondsRemoved();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        boolean boolean12 = localDate9.isSupported(dateTimeFieldType11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate9.toInterval(dateTimeZone13);
        java.lang.String str15 = interval14.toString();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1645454865349L, 53303087L, periodType3, chronology16);
        org.joda.time.PeriodType periodType18 = periodType3.withDaysRemoved();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str15, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(periodType18);
    }

    @Test
    public void test5338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5338");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime14 = property12.setCopy(53221515);
        org.joda.time.LocalTime localTime16 = property12.addCopy(53221515);
        org.joda.time.LocalTime localTime18 = localTime16.minusHours(100);
        org.joda.time.LocalTime localTime20 = localTime16.minusSeconds(11);
        org.joda.time.LocalTime.Property property21 = localTime16.hourOfDay();
        org.joda.time.LocalTime localTime22 = property21.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime23 = property21.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime24 = property21.withMaximumValue();
        org.joda.time.LocalTime localTime25 = property21.getLocalTime();
        org.joda.time.LocalTime localTime26 = property21.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
    }

    @Test
    public void test5339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5339");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds((-1));
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay1.plusMillis(18);
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        int int7 = period6.getYears();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay5.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay5.minusMillis(17);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.withMillisOfSecond((int) (short) 0);
        java.lang.Class<?> wildcardClass13 = timeOfDay12.getClass();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test5340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5340");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes(53221655);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay1.secondOfMinute();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay1.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay6 = property5.withMinimumValue();
        int int7 = property5.get();
        java.lang.String str8 = property5.getAsText();
        org.joda.time.DurationField durationField9 = property5.getRangeDurationField();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = locale10.toLanguageTag();
        java.lang.String str12 = locale10.getISO3Country();
        java.lang.String str13 = property5.getAsShortText(locale10);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0" + "'", str8, "0");
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en" + "'", str11, "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0" + "'", str13, "0");
    }

    @Test
    public void test5341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5341");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate localDate18 = localDate12.withDayOfMonth(13);
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        mutablePeriod8.add((long) ' ', chronology19);
        org.joda.time.DurationField durationField21 = chronology19.weekyears();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(53401975, 53221032, 53221660, 53341015, 299863, 53281118, 53273563, chronology19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53341015 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test5342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5342");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone0);
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale3);
        java.util.Set<java.lang.String> strSet5 = locale3.getUnicodeLocaleAttributes();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone0, locale3);
        calendar6.set(596, 53221310, 53221098, 53341329, 1, 503);
        int int15 = calendar6.getMaximum(15);
        calendar6.setMinimalDaysInFirstWeek(304);
        org.joda.time.YearMonthDay yearMonthDay18 = org.joda.time.YearMonthDay.fromCalendarFields(calendar6);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=144708373444163883,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=304,ERA=1,YEAR=4587595,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=295,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=9,SECOND=23,MILLISECOND=883,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50400000 + "'", int15 == 50400000);
        org.junit.Assert.assertNotNull(yearMonthDay18);
    }

    @Test
    public void test5343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5343");
        long long6 = java.util.Date.UTC(53221180, 86399, 861, (int) 'a', 392, 394);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1679723295694714000L + "'", long6 == 1679723295694714000L);
    }

    @Test
    public void test5344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5344");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) dateMidnight23, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration17, periodType27);
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = localDate33.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight36 = dateTime35.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(1L, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = dateMidnight41.getZone();
        org.joda.time.DateTime dateTime43 = dateTime35.toDateTime(dateTimeZone42);
        boolean boolean44 = interval31.contains((org.joda.time.ReadableInstant) dateTime35);
        long long45 = interval31.toDurationMillis();
        boolean boolean46 = interval31.containsNow();
        org.joda.time.Duration duration47 = interval31.toDuration();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(1L, dateTimeZone49);
        org.joda.time.DateMidnight.Property property51 = dateMidnight50.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight50.minusDays((int) 'a');
        org.joda.time.DateTime dateTime54 = dateMidnight53.toDateTimeISO();
        org.joda.time.Period period59 = new org.joda.time.Period(53221504, (int) 'x', (int) (short) 100, 53221180);
        org.joda.time.DateTime dateTime60 = dateTime54.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Interval interval61 = interval31.withStart((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Period period62 = interval61.toPeriod();
        org.joda.time.Interval interval63 = interval61.toInterval();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval63);
    }

    @Test
    public void test5345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5345");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(1L, dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, readableDuration8);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType11 = periodType10.withSecondsRemoved();
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight4, (org.joda.time.ReadableInstant) dateMidnight7, periodType11);
        org.joda.time.PeriodType periodType13 = periodType11.withWeeksRemoved();
        org.joda.time.PeriodType periodType14 = periodType11.withMillisRemoved();
        org.joda.time.PeriodType periodType15 = periodType11.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone22 = dateMidnight21.getZone();
        int int24 = dateTimeZone22.getStandardOffset((long) 32769);
        java.util.Locale locale26 = java.util.Locale.US;
        java.lang.String str27 = dateTimeZone22.getShortName((long) 1970, locale26);
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(dateTimeZone22);
        org.joda.time.LocalTime localTime30 = localTime28.withSecondOfMinute(0);
        int int31 = localTime28.getSecondOfMinute();
        org.joda.time.Chronology chronology32 = localTime28.getChronology();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) '#', chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.minuteOfDay();
        org.joda.time.Period period35 = new org.joda.time.Period((long) 11, periodType15, chronology32);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(1L, dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(1L, dateTimeZone41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight42, readableDuration43);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType46 = periodType45.withSecondsRemoved();
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight39, (org.joda.time.ReadableInstant) dateMidnight42, periodType46);
        org.joda.time.PeriodType periodType48 = periodType46.withWeeksRemoved();
        org.joda.time.PeriodType periodType49 = periodType46.withMillisRemoved();
        org.joda.time.PeriodType periodType50 = periodType46.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(1L, dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone57 = dateMidnight56.getZone();
        int int59 = dateTimeZone57.getStandardOffset((long) 32769);
        java.util.Locale locale61 = java.util.Locale.US;
        java.lang.String str62 = dateTimeZone57.getShortName((long) 1970, locale61);
        org.joda.time.LocalTime localTime63 = org.joda.time.LocalTime.now(dateTimeZone57);
        org.joda.time.LocalTime localTime65 = localTime63.withSecondOfMinute(0);
        int int66 = localTime63.getSecondOfMinute();
        org.joda.time.Chronology chronology67 = localTime63.getChronology();
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((long) '#', chronology67);
        org.joda.time.DateTimeField dateTimeField69 = chronology67.minuteOfDay();
        org.joda.time.Period period70 = new org.joda.time.Period((long) 11, periodType50, chronology67);
        org.joda.time.Period period71 = new org.joda.time.Period(obj0, periodType15, chronology67);
        int int72 = period71.getDays();
        org.joda.time.TimeOfDay timeOfDay73 = new org.joda.time.TimeOfDay();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((long) 10);
        int int76 = mutablePeriod75.getWeeks();
        org.joda.time.TimeOfDay timeOfDay77 = timeOfDay73.plus((org.joda.time.ReadablePeriod) mutablePeriod75);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateMidnight dateMidnight80 = new org.joda.time.DateMidnight(1L, dateTimeZone79);
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.Period period82 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight80, readableDuration81);
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.Period period84 = period82.normalizedStandard(periodType83);
        org.joda.time.TimeOfDay timeOfDay85 = timeOfDay77.minus((org.joda.time.ReadablePeriod) period84);
        org.joda.time.MutablePeriod mutablePeriod86 = period84.toMutablePeriod();
        mutablePeriod86.setMinutes(53221812);
        org.joda.time.Period period89 = period71.withFields((org.joda.time.ReadablePeriod) mutablePeriod86);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 59 + "'", int31 == 59);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(localTime65);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 59 + "'", int66 == 59);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(timeOfDay77);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(timeOfDay85);
        org.junit.Assert.assertNotNull(mutablePeriod86);
        org.junit.Assert.assertNotNull(period89);
    }

    @Test
    public void test5346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5346");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder1.addUnicodeLocaleAttribute("gregory");
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.lang.String str7 = locale5.getISO3Country();
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.getDefault(category8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone10.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone10);
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale13);
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone10, locale13);
        java.util.Locale.setDefault(category8, locale13);
        java.lang.String str18 = locale5.getDisplayVariant(locale13);
        java.util.Locale.Builder builder19 = builder4.setLocale(locale5);
        java.lang.String str20 = locale5.getScript();
        java.lang.String str21 = locale5.getDisplayVariant();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "cinese" + "'", str6, "cinese");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CHN" + "'", str7, "CHN");
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645455240003,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=54,SECOND=0,MILLISECOND=3,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test5347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5347");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withField(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTime dateTime16 = dateTime6.withField(dateTimeFieldType12, (int) (short) 0);
        org.joda.time.DateTime dateTime18 = dateTime6.plusHours((int) (short) 1);
        int int19 = dateTime18.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight22.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property26 = dateMidnight22.dayOfMonth();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight35.withField(dateTimeFieldType36, (int) 'a');
        org.joda.time.DateTime dateTime40 = dateTime30.withField(dateTimeFieldType36, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight22.withField(dateTimeFieldType36, 7);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 'a', dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 'a', dateTimeZone47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate45, (org.joda.time.ReadablePartial) localDate48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(1L, dateTimeZone51);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight52, readableDuration53);
        org.joda.time.Duration duration55 = period49.toDurationTo((org.joda.time.ReadableInstant) dateMidnight52);
        org.joda.time.Period period57 = period49.minusYears((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight22.withPeriodAdded((org.joda.time.ReadablePeriod) period57, 0);
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateMidnight59);
        org.joda.time.MutablePeriod mutablePeriod61 = mutablePeriod60.copy();
        mutablePeriod61.setMillis(51);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight2.minus((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight64.withDurationAdded((-21L), 210);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 54 + "'", int19 == 54);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(mutablePeriod61);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateMidnight67);
    }

    @Test
    public void test5348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5348");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = dateTime3.toLocalDate();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = dateMidnight14.getZone();
        org.joda.time.DateTime dateTime16 = dateTime8.toDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime3.withZoneRetainFields(dateTimeZone15);
        org.joda.time.DateTime.Property property18 = dateTime17.monthOfYear();
        org.joda.time.DateTime dateTime19 = property18.getDateTime();
        org.joda.time.DateTime dateTime21 = property18.addToCopy((long) 53221848);
        org.joda.time.DateTime dateTime23 = dateTime21.withMillisOfDay(53253508);
        org.joda.time.DateTime dateTime25 = dateTime21.plusSeconds(17);
        org.joda.time.DateTime dateTime28 = dateTime21.withDurationAdded((long) 16, (int) ' ');
        int int29 = dateTime28.getMinuteOfHour();
        org.joda.time.DateTime dateTime31 = dateTime28.minusMillis(53341307);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = dateTime28.withYearOfCentury(53416);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53416 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 54 + "'", int29 == 54);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test5349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5349");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight9, readableDuration10);
        org.joda.time.Duration duration12 = period6.toDurationTo((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.Period period14 = period6.plusSeconds(17);
        org.joda.time.Period period16 = period14.plusDays(53281723);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test5350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5350");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfYear();
        org.joda.time.DateTimeField dateTimeField5 = property4.getField();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.LocalDate localDate7 = property4.roundCeilingCopy();
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfYear();
        org.joda.time.Chronology chronology9 = localDate7.getChronology();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test5351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5351");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeField dateTimeField3 = localDate1.getField(1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        boolean boolean11 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate localDate23 = localDate17.withDayOfMonth(13);
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        mutablePeriod13.add((long) ' ', chronology24);
        org.joda.time.LocalDate localDate26 = localDate1.minus((org.joda.time.ReadablePeriod) mutablePeriod13);
        mutablePeriod13.addYears((int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod29 = mutablePeriod13.copy();
        int int30 = mutablePeriod29.getYears();
        org.joda.time.PeriodType periodType31 = mutablePeriod29.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod32 = mutablePeriod29.copy();
        mutablePeriod29.addSeconds(1961);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(mutablePeriod32);
    }

    @Test
    public void test5352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5352");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        int int11 = dateMidnight5.getMillisOfSecond();
        int int12 = dateMidnight5.getSecondOfDay();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight5.withYear(53352);
        int int15 = dateMidnight14.getSecondOfMinute();
        int int16 = dateMidnight14.getEra();
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test5353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5353");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(0, (int) (short) -1);
        java.util.Calendar.Builder builder6 = builder0.set(0, 32);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        int int9 = calendar8.getWeeksInWeekYear();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone.setDefault(timeZone10);
        calendar8.setTimeZone(timeZone10);
        java.util.Calendar.Builder builder13 = builder0.setTimeZone(timeZone10);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645455240363,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=54,SECOND=0,MILLISECOND=363,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test5354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5354");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight10 = dateTime9.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.withDayOfMonth((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTimeISO();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight4, (org.joda.time.ReadableInstant) dateMidnight12);
        org.joda.time.DateMidnight.Property property15 = dateMidnight4.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight17 = property15.addToCopy((long) 53319778);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plusDays(53221240);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
    }

    @Test
    public void test5355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5355");
        java.lang.Object obj0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(obj0);
    }

    @Test
    public void test5356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5356");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clear();
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("halfdays");
        java.util.Locale locale8 = builder7.build();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType10 = periodType9.withHoursRemoved();
        boolean boolean11 = locale8.equals((java.lang.Object) periodType9);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test5357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5357");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter3.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.parse("8", dateTimeFormatter6);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test5358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5358");
        long long6 = java.util.Date.UTC(53341329, 53620792, 53521779, 53388515, 53281627, 30);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1829116290262050000L + "'", long6 == 1829116290262050000L);
    }

    @Test
    public void test5359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5359");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.weeks();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate5, (org.joda.time.ReadablePartial) localDate8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = localDate8.isSupported(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = localDate8.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 493, (long) 53221161, periodType2, chronology12);
        org.joda.time.DateTimeField dateTimeField17 = chronology12.hourOfHalfday();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test5360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5360");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateTime dateTime6 = dateTime3.minus(2678400000L);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillis(0L);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime10 = property9.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTime10.withMinuteOfHour(53341874);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53341874 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test5361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5361");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse("53521901", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5362");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale0);
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Days days4 = period3.toStandardDays();
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Days days6 = period5.toStandardDays();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.Days days8 = period7.toStandardDays();
        org.joda.time.Period period9 = org.joda.time.Period.ZERO;
        org.joda.time.Days days10 = period9.toStandardDays();
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Days days12 = period11.toStandardDays();
        org.joda.time.Days[] daysArray13 = new org.joda.time.Days[] { days4, days6, days8, days10, days12 };
        org.joda.time.Days[] daysArray14 = strSet2.toArray(daysArray13);
        strSet2.clear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(daysArray13);
        org.junit.Assert.assertNotNull(daysArray14);
    }

    @Test
    public void test5363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5363");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType2 = periodType1.withWeeksRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period3 = new org.joda.time.Period((java.lang.Object) 5L, periodType2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test5364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5364");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight17, readableDuration18);
        org.joda.time.Duration duration20 = period14.toDurationTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.Instant instant21 = instant7.minus((org.joda.time.ReadableDuration) duration20);
        boolean boolean22 = dateMidnight5.isAfter((org.joda.time.ReadableInstant) instant7);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        int int33 = dateTimeZone31.getStandardOffset((long) 32769);
        java.util.Locale locale35 = java.util.Locale.US;
        java.lang.String str36 = dateTimeZone31.getShortName((long) 1970, locale35);
        org.joda.time.DateTime dateTime37 = dateMidnight25.toDateTime(dateTimeZone31);
        boolean boolean38 = instant7.isEqual((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime40 = instant39.toMutableDateTime();
        mutableDateTime40.setSecondOfMinute((int) (byte) 1);
        mutableDateTime40.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime40.year();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime40.era();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant7, (org.joda.time.ReadableInstant) mutableDateTime40);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime40.weekyear();
        int int49 = mutableDateTime40.getWeekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField50 = mutableDateTime40.getRoundingField();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime40.setHourOfDay(891);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 891 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertNull(dateTimeField50);
    }

    @Test
    public void test5365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5365");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(0, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        int int11 = dateTimeZone9.getStandardOffset((long) 32769);
        java.util.Locale locale13 = java.util.Locale.US;
        java.lang.String str14 = dateTimeZone9.getShortName((long) 1970, locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale13.getDisplayCountry(locale15);
        java.util.Calendar.Builder builder17 = builder0.setLocale(locale15);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.Calendar.Builder builder19 = builder17.setTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate22, (org.joda.time.ReadablePartial) localDate25);
        org.joda.time.LocalDate localDate28 = localDate22.withDayOfMonth(13);
        org.joda.time.Chronology chronology29 = localDate28.getChronology();
        long long33 = chronology29.add((long) (short) -1, (long) 1961, 15);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.standard();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 'a', dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 'a', dateTimeZone40);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate38, (org.joda.time.ReadablePartial) localDate41);
        org.joda.time.LocalDate localDate44 = localDate38.withDayOfMonth(13);
        org.joda.time.Chronology chronology45 = localDate44.getChronology();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 0, periodType35, chronology45);
        int[] intArray49 = chronology29.get((org.joda.time.ReadablePeriod) mutablePeriod46, (long) 596, (long) 53221161);
        java.util.Calendar.Builder builder50 = builder17.setFields(intArray49);
        java.util.Locale locale51 = java.util.Locale.PRC;
        java.util.Calendar.Builder builder52 = builder50.setLocale(locale51);
        java.util.Calendar.Builder builder57 = builder50.setTimeOfDay(14, 53221996, (int) '4', 100);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHours(42);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight(1L, dateTimeZone62);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone66 = dateMidnight65.getZone();
        int int68 = dateTimeZone66.getStandardOffset((long) 32769);
        java.util.Locale locale70 = java.util.Locale.US;
        java.lang.String str71 = dateTimeZone66.getShortName((long) 1970, locale70);
        java.lang.String str72 = dateTimeZone59.getShortName(2949042421000L, locale70);
        java.util.Calendar.Builder builder73 = builder50.setLocale(locale70);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ubbf8\uad6d" + "'", str16, "\ubbf8\uad6d");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 29414L + "'", long33 == 29414L);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 0, 0, 14, 47, 0, 565]");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+42:00" + "'", str72, "+42:00");
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test5366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5366");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        org.joda.time.DateMidnight.Property property11 = dateMidnight2.year();
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.lang.String str13 = property11.getAsText(locale12);
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime15 = instant14.toMutableDateTime();
        mutableDateTime15.setSecondOfMinute((int) (byte) 1);
        mutableDateTime15.setSecondOfMinute(52);
        mutableDateTime15.setMillisOfSecond((int) ' ');
        long long22 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate25, (org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = localDate28.isSupported(dateTimeFieldType30);
        org.joda.time.Chronology chronology32 = localDate28.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.minutes();
        org.joda.time.DurationFieldType durationFieldType34 = durationField33.getType();
        mutableDateTime15.add(durationFieldType34, (-19092));
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime15.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime39 = property37.addWrapField(212);
        mutableDateTime39.setMillis(436L);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime39.setMonthOfYear(53341129);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53341129 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970" + "'", str13, "1970");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-52L) + "'", long22 == (-52L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
    }

    @Test
    public void test5367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5367");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withField(dateTimeFieldType9, (int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime3.withField(dateTimeFieldType9, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        org.joda.time.DateTime dateTime20 = dateTime13.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate23, (org.joda.time.ReadablePartial) localDate26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = localDate26.isSupported(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = localDate26.getChronology();
        org.joda.time.LocalDate localDate32 = localDate26.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = localDate32.getFieldType(1);
        boolean boolean35 = dateTime13.isSupported(dateTimeFieldType34);
        org.joda.time.DateTime dateTime36 = dateTime13.toDateTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test5368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5368");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        int int3 = property2.getMaximumValue();
        org.joda.time.TimeOfDay timeOfDay4 = property2.withMaximumValue();
        java.lang.String str5 = property2.getAsText();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 59 + "'", int3 == 59);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0" + "'", str5, "0");
    }

    @Test
    public void test5369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5369");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withDayOfMonth((int) (short) 1);
        int int12 = dateMidnight9.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight9.plusDays((int) (short) 10);
        boolean boolean15 = dateMidnight4.isAfter((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight9.plusYears((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withYear((int) (byte) -1);
        org.joda.time.DateMidnight.Property property20 = dateMidnight17.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay21 = dateMidnight17.toYearMonthDay();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
    }

    @Test
    public void test5370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5370");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.DateTime dateTime10 = localDate8.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate12 = localDate8.withYearOfEra(53221180);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = dateMidnight24.getZone();
        org.joda.time.DateTime dateTime26 = localDate18.toDateTimeAtMidnight(dateTimeZone25);
        org.joda.time.LocalDate localDate28 = localDate18.minusWeeks((int) (byte) 10);
        int int29 = localDate12.compareTo((org.joda.time.ReadablePartial) localDate28);
        int int30 = localDate12.size();
        int int31 = localDate12.getCenturyOfEra();
        org.joda.time.LocalDate localDate33 = localDate12.minusWeeks(39);
        org.joda.time.LocalDate localDate35 = localDate12.plusWeeks(53521779);
        java.util.Date date36 = localDate12.toDate();
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 532211 + "'", int31 == 532211);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Jan 13 00:00:00 GMT+00:00 53221180");
    }

    @Test
    public void test5371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5371");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clear();
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("halfdays");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setRegion("dayOfMonth");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: dayOfMonth [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test5372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5372");
        org.joda.time.Period period1 = org.joda.time.Period.months(53401899);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test5373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5373");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.util.Date date5 = new java.util.Date(2, (int) '#', (int) '#');
        calendar1.setTime(date5);
        calendar1.set((int) (short) -1, (int) (byte) 100, (int) (short) 1, (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromCalendarFields(calendar1);
        org.joda.time.LocalTime localTime15 = localTime13.withMinuteOfHour(4);
        int int16 = localTime13.getSecondOfMinute();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-61936101780000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=7,MONTH=3,WEEK_OF_YEAR=17,WEEK_OF_MONTH=4,DAY_OF_MONTH=30,DAY_OF_YEAR=120,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=17,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date5.toString(), "Wed Jan 04 00:00:00 GMT+00:00 1905");
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test5374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5374");
        org.joda.time.Period period1 = org.joda.time.Period.parse("P8Y");
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 10);
        int int4 = mutablePeriod3.getWeeks();
        org.joda.time.PeriodType periodType5 = mutablePeriod3.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.months();
        boolean boolean7 = mutablePeriod3.isSupported(durationFieldType6);
        org.joda.time.Period period9 = period1.withField(durationFieldType6, 879);
        org.joda.time.Period period11 = period1.plusSeconds(53401783);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
    }

    @Test
    public void test5375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5375");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getLeastMaximum(0);
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonthDay3.getFieldTypes();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1645455013229L, periodType6);
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay3.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455241674,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=54,SECOND=1,MILLISECOND=674,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
    }

    @Test
    public void test5376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5376");
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate localDate16 = localDate10.withDayOfMonth(13);
        org.joda.time.Chronology chronology17 = localDate16.getChronology();
        long long21 = chronology17.add((long) (short) -1, (long) 1961, 15);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.standard();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate26, (org.joda.time.ReadablePartial) localDate29);
        org.joda.time.LocalDate localDate32 = localDate26.withDayOfMonth(13);
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 0, periodType23, chronology33);
        int[] intArray37 = chronology17.get((org.joda.time.ReadablePeriod) mutablePeriod34, (long) 596, (long) 53221161);
        boolean boolean38 = dateTimeFieldType7.isSupported(chronology17);
        org.joda.time.DateTimeField dateTimeField39 = chronology17.secondOfDay();
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime41 = yearMonthDay40.toDateTimeAtMidnight();
        long long43 = chronology17.set((org.joda.time.ReadablePartial) yearMonthDay40, (long) 464);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(3074949, 721437, 53341956, 246, 464, 6, 277, chronology17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 246 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 29414L + "'", long21 == 29414L);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 14, 47, 0, 565]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1645401600464L + "'", long43 == 1645401600464L);
    }

    @Test
    public void test5377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5377");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = new org.joda.time.Period((java.lang.Object) 53401899);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5378");
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        int int7 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate6.toDateTimeAtStartOfDay(dateTimeZone8);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime9.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        boolean boolean20 = localDate17.isSupported(dateTimeFieldType19);
        org.joda.time.Chronology chronology21 = localDate17.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.dayOfYear();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.dayOfMonth();
        org.joda.time.DateTime dateTime24 = dateTime11.toDateTime(chronology21);
        org.joda.time.DurationField durationField25 = chronology21.months();
        boolean boolean26 = durationFieldType4.isSupported(chronology21);
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(3193290900000L, chronology21);
        org.joda.time.DateTimeField dateTimeField28 = chronology21.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(53621946, 426, 709, chronology21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 426 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test5379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5379");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusMonths((int) (byte) 10);
        boolean boolean7 = dateMidnight6.isEqualNow();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.era();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder12 = builder9.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale locale13 = builder12.build();
        java.util.Locale.Builder builder14 = builder12.clear();
        java.util.Locale locale15 = builder12.build();
        java.lang.String str16 = property8.getAsShortText(locale15);
        boolean boolean17 = property8.isLeap();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AD" + "'", str16, "AD");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test5380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5380");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = localDate5.minusDays(100);
        org.joda.time.LocalDate localDate13 = localDate5.withYear((int) (byte) 0);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.weeks();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test5381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5381");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = dateMidnight7.getZone();
        int int10 = dateTimeZone8.getStandardOffset((long) 32769);
        java.util.Locale locale12 = java.util.Locale.US;
        java.lang.String str13 = dateTimeZone8.getShortName((long) 1970, locale12);
        org.joda.time.DateTime dateTime14 = dateMidnight2.toDateTime(dateTimeZone8);
        org.joda.time.MutableDateTime mutableDateTime15 = dateMidnight2.toMutableDateTime();
        org.joda.time.DateMidnight.Property property16 = dateMidnight2.dayOfYear();
        int int17 = dateMidnight2.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test5382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5382");
        java.util.Date date6 = new java.util.Date((int) (byte) -1, 32769, 4, (int) (byte) 1, (int) (short) 10, 11);
        date6.setDate(53221197);
        int int9 = date6.getTimezoneOffset();
        date6.setTime((long) 53341015);
        java.lang.Object obj12 = date6.clone();
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 14:49:01 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "Thu Jan 01 14:49:01 GMT+00:00 1970");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "Thu Jan 01 14:49:01 GMT+00:00 1970");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "Thu Jan 01 14:49:01 GMT+00:00 1970");
    }

    @Test
    public void test5383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5383");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone.setDefault(timeZone0);
        timeZone0.setID("4437072");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.minusDays((int) 'a');
        org.joda.time.DateTime dateTime10 = dateMidnight9.toDateTimeISO();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight21, readableDuration22);
        org.joda.time.Duration duration24 = period18.toDurationTo((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.Instant instant25 = instant11.minus((org.joda.time.ReadableDuration) duration24);
        boolean boolean26 = dateMidnight9.isAfter((org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight34.getZone();
        int int37 = dateTimeZone35.getStandardOffset((long) 32769);
        java.util.Locale locale39 = java.util.Locale.US;
        java.lang.String str40 = dateTimeZone35.getShortName((long) 1970, locale39);
        org.joda.time.DateTime dateTime41 = dateMidnight29.toDateTime(dateTimeZone35);
        boolean boolean42 = instant11.isEqual((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime.Property property43 = dateTime41.era();
        int int44 = dateTime41.getDayOfYear();
        org.joda.time.DateTime.Property property45 = dateTime41.year();
        org.joda.time.DateTimeField dateTimeField46 = property45.getField();
        java.util.Locale locale47 = java.util.Locale.JAPAN;
        java.lang.String str48 = property45.getAsShortText(locale47);
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone0, locale47);
        int int51 = timeZone0.getOffset((long) 36);
        timeZone0.setID("2022-02-21T14:47:50.386");
        java.util.Locale locale56 = new java.util.Locale("1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z", "Feb");
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone0, locale56);
        java.lang.String str58 = timeZone0.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970" + "'", str48, "1970");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1645455241878,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:47:50.386\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=54,SECOND=1,MILLISECOND=878,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertEquals(locale56.toString(), "1970-01-01t00:00:00.000z/1970-01-02t00:00:00.000z_FEB");
        org.junit.Assert.assertNotNull(calendar57);
// flaky:         org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=1645455241878,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:47:50.386\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=54,SECOND=1,MILLISECOND=878,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "GMT+00:00" + "'", str58, "GMT+00:00");
    }

    @Test
    public void test5384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5384");
        java.io.IOException iOException2 = new java.io.IOException("+00:00");
        java.io.IOException iOException3 = new java.io.IOException("weekyear", (java.lang.Throwable) iOException2);
        java.lang.Throwable[] throwableArray4 = iOException3.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test5385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5385");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfYear();
        org.joda.time.LocalDate localDate5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate7 = localDate5.withWeekOfWeekyear(7);
        org.joda.time.DateMidnight dateMidnight8 = localDate5.toDateMidnight();
        org.joda.time.LocalDate localDate10 = localDate5.minusMonths(53401842);
        org.joda.time.LocalDate localDate12 = localDate5.withYearOfEra(13);
        org.joda.time.LocalDate localDate14 = localDate12.plusMonths(53546418);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test5386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5386");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder2.addUnicodeLocaleAttribute("53221655");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder4.setUnicodeLocaleKeyword("3240-03-29T11:01:01.108Z", "2022-02-21T14:52:32.475Z/2022-02-21T14:52:32.475Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 3240-03-29T11:01:01.108Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test5387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5387");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy(10368000047L);
        java.lang.String str6 = property3.getName();
        org.joda.time.LocalDateTime localDateTime8 = property3.addWrapFieldToCopy(2035);
        org.joda.time.LocalDateTime localDateTime9 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = property3.addToCopy(27424248L);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMillisOfDay(53221766);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfYear();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "dayOfYear" + "'", str6, "dayOfYear");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test5388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5388");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withField(dateTimeFieldType9, (int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime3.withField(dateTimeFieldType9, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        org.joda.time.DateTime dateTime20 = dateTime13.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate23, (org.joda.time.ReadablePartial) localDate26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = localDate26.isSupported(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = localDate26.getChronology();
        org.joda.time.LocalDate localDate32 = localDate26.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = localDate32.getFieldType(1);
        boolean boolean35 = dateTime13.isSupported(dateTimeFieldType34);
        org.joda.time.DateTime dateTime37 = dateTime13.minusDays(1961);
        org.joda.time.DateTime.Property property38 = dateTime37.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusMonths((int) (byte) 10);
        org.joda.time.DateMidnight.Property property46 = dateMidnight43.era();
        org.joda.time.DateMidnight dateMidnight47 = property46.roundHalfCeilingCopy();
        long long48 = property38.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight47);
        java.lang.String str49 = property38.getName();
        int int50 = property38.getMinimumValue();
        org.joda.time.DurationField durationField51 = property38.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateMidnight47);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-6L) + "'", long48 == (-6L));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "yearOfEra" + "'", str49, "yearOfEra");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNull(durationField51);
    }

    @Test
    public void test5389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5389");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight17, readableDuration18);
        org.joda.time.Duration duration20 = period14.toDurationTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.Instant instant21 = instant7.minus((org.joda.time.ReadableDuration) duration20);
        boolean boolean22 = dateMidnight5.isAfter((org.joda.time.ReadableInstant) instant7);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        int int33 = dateTimeZone31.getStandardOffset((long) 32769);
        java.util.Locale locale35 = java.util.Locale.US;
        java.lang.String str36 = dateTimeZone31.getShortName((long) 1970, locale35);
        org.joda.time.DateTime dateTime37 = dateMidnight25.toDateTime(dateTimeZone31);
        boolean boolean38 = instant7.isEqual((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime.Property property39 = dateTime37.era();
        int int40 = dateTime37.getDayOfYear();
        org.joda.time.DateTime.Property property41 = dateTime37.year();
        int int42 = property41.get();
        org.joda.time.DateTime dateTime43 = property41.roundCeilingCopy();
        org.joda.time.DateTime dateTime44 = property41.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime45 = property41.withMinimumValue();
        org.joda.time.Period period46 = new org.joda.time.Period();
        org.joda.time.Period period48 = period46.minusMonths((int) '#');
        org.joda.time.DateTime dateTime49 = dateTime45.minus((org.joda.time.ReadablePeriod) period48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime51 = dateTime45.withHourOfDay(53621946);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53621946 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test5390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5390");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime14 = property12.addNoWrapToCopy((int) (byte) 100);
        org.joda.time.LocalTime localTime16 = property12.addCopy(366);
        org.joda.time.LocalTime localTime18 = property12.addWrapFieldToCopy(11);
        org.joda.time.LocalTime localTime19 = property12.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime20 = property12.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime22 = property12.addWrapFieldToCopy(1961);
        org.joda.time.LocalTime localTime24 = localTime22.plusMillis(709);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) 53221102);
        org.joda.time.LocalTime localTime27 = localTime22.withFields((org.joda.time.ReadablePartial) localTime26);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime27);
    }

    @Test
    public void test5391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5391");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property13 = dateMidnight9.dayOfMonth();
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight9.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.withField(dateTimeFieldType22, (int) 'a');
        boolean boolean25 = dateMidnight16.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime6.withField(dateTimeFieldType22, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime6.minusSeconds(18);
        org.joda.time.Chronology chronology30 = localDateTime6.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.Chronology chronology32 = chronology30.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.dayOfMonth();
        long long37 = dateTimeField34.addWrapField((long) (-19092), 53385423);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusYears(13);
        int int41 = localDateTime40.getDayOfWeek();
        int int42 = localDateTime40.getMillisOfSecond();
        org.joda.time.DateTime dateTime43 = localDateTime40.toDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.withYearOfEra(53221655);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime40.minusYears(36);
        java.util.Locale.Category category49 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale50 = java.util.Locale.getDefault(category49);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone51.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone51);
        java.util.Locale locale54 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale54);
        java.util.Set<java.lang.String> strSet56 = locale54.getUnicodeLocaleAttributes();
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone51, locale54);
        java.util.Locale.setDefault(category49, locale54);
        java.util.Locale locale59 = java.util.Locale.PRC;
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category49, locale59);
        java.lang.String str62 = dateTimeField34.getAsText((org.joda.time.ReadablePartial) localDateTime47, 207, locale59);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1555219092L) + "'", long37 == (-1555219092L));
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 135 + "'", int42 == 135);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + category49 + "' != '" + java.util.Locale.Category.FORMAT + "'", category49.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it");
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(calendar57);
// flaky:         org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=1645455242135,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:47:50.386\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=54,SECOND=2,MILLISECOND=135,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "207" + "'", str62, "207");
    }

    @Test
    public void test5392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5392");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        org.joda.time.DateTime dateTime11 = dateTime3.toDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra(53221235);
        org.joda.time.DateTime.Property property14 = dateTime13.millisOfDay();
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test5393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5393");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy(10368000047L);
        java.lang.String str6 = property3.getName();
        org.joda.time.LocalDateTime localDateTime8 = property3.addWrapFieldToCopy(2035);
        org.joda.time.LocalDateTime localDateTime9 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = property3.addToCopy(27424248L);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMillisOfDay(53221766);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minusMinutes(53261499);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "dayOfYear" + "'", str6, "dayOfYear");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test5394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5394");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.LocalDate.Property property10 = localDate8.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((int) (short) 10, 53221147, 14, 13, 4, (int) (byte) 10, (int) (short) -1, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate21 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod19, 2720);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 53221147 * 2720");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test5395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5395");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        java.lang.String str2 = instant0.toString();
        org.joda.time.MutableDateTime mutableDateTime3 = instant0.toMutableDateTimeISO();
        mutableDateTime3.setSecondOfDay(41);
        mutableDateTime3.setMinuteOfDay(0);
        org.junit.Assert.assertNotNull(dateTime1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:54:02.242Z" + "'", str2, "2022-02-21T14:54:02.242Z");
        org.junit.Assert.assertNotNull(mutableDateTime3);
    }

    @Test
    public void test5396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5396");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate9 = localDate3.withDayOfMonth(13);
        org.joda.time.Chronology chronology10 = localDate9.getChronology();
        long long14 = chronology10.add((long) (short) -1, (long) 1961, 15);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.standard();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 'a', dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate19, (org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate localDate25 = localDate19.withDayOfMonth(13);
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 0, periodType16, chronology26);
        int[] intArray30 = chronology10.get((org.joda.time.ReadablePeriod) mutablePeriod27, (long) 596, (long) 53221161);
        boolean boolean31 = dateTimeFieldType0.isSupported(chronology10);
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDate34.toDateTimeAtCurrentTime(dateTimeZone35);
        int int37 = instant32.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime39 = dateTime36.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime40 = dateTime39.toDateTime();
        org.joda.time.DateTime dateTime42 = dateTime40.withDayOfYear(6);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1L, dateTimeZone44);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.minusDays((int) 'a');
        org.joda.time.DateTime dateTime49 = dateMidnight48.toDateTimeISO();
        org.joda.time.Instant instant50 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 'a', dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 'a', dateTimeZone55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate53, (org.joda.time.ReadablePartial) localDate56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(1L, dateTimeZone59);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight60, readableDuration61);
        org.joda.time.Duration duration63 = period57.toDurationTo((org.joda.time.ReadableInstant) dateMidnight60);
        org.joda.time.Instant instant64 = instant50.minus((org.joda.time.ReadableDuration) duration63);
        boolean boolean65 = dateMidnight48.isAfter((org.joda.time.ReadableInstant) instant50);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(1L, dateTimeZone67);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight(1L, dateTimeZone70);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight71.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone74 = dateMidnight73.getZone();
        int int76 = dateTimeZone74.getStandardOffset((long) 32769);
        java.util.Locale locale78 = java.util.Locale.US;
        java.lang.String str79 = dateTimeZone74.getShortName((long) 1970, locale78);
        org.joda.time.DateTime dateTime80 = dateMidnight68.toDateTime(dateTimeZone74);
        boolean boolean81 = instant50.isEqual((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateMidnight dateMidnight84 = new org.joda.time.DateMidnight(1L, dateTimeZone83);
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight84.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight89 = dateMidnight86.withField(dateTimeFieldType87, (int) 'a');
        int int90 = instant50.get(dateTimeFieldType87);
        org.joda.time.Chronology chronology91 = instant50.getChronology();
        org.joda.time.DateTime dateTime92 = dateTime40.toDateTime(chronology91);
        org.joda.time.DateTimeField dateTimeField93 = dateTimeFieldType0.getField(chronology91);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 29414L + "'", long14 == 29414L);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 14, 47, 0, 565]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00" + "'", str79, "+00:00");
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2022 + "'", int90 == 2022);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTimeField93);
    }

    @Test
    public void test5397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5397");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate5, (org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate localDate11 = localDate5.withDayOfMonth(13);
        org.joda.time.Chronology chronology12 = localDate11.getChronology();
        mutablePeriod1.add((long) ' ', chronology12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 'a', dateTimeZone18);
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate16, (org.joda.time.ReadablePartial) localDate19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = localDate19.isSupported(dateTimeFieldType21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = localDate19.toInterval(dateTimeZone23);
        java.lang.String str25 = interval24.toString();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate28, (org.joda.time.ReadablePartial) localDate31);
        org.joda.time.Period period34 = period32.plusYears(8);
        org.joda.time.Interval interval35 = interval24.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period34);
        mutablePeriod1.setPeriod((org.joda.time.ReadableInterval) interval35);
        org.joda.time.DateTime dateTime37 = interval35.getStart();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(1L, dateTimeZone39);
        org.joda.time.DateMidnight.Property property41 = dateMidnight40.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight42 = property41.roundHalfFloorCopy();
        org.joda.time.Interval interval43 = interval35.withStart((org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.Duration duration44 = interval43.toDuration();
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str25, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(duration44);
    }

    @Test
    public void test5398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5398");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.lang.String str2 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test5399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5399");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime localTime13 = localTime11.withSecondOfMinute(0);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime16 = property14.addCopy(0L);
        org.joda.time.LocalTime localTime17 = property14.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime18 = property14.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test5400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5400");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) dateMidnight23, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration17, periodType27);
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadableDuration) duration17);
        long long32 = interval31.getEndMillis();
        org.joda.time.Period period33 = interval31.toPeriod();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = localDate36.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 'a', dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 'a', dateTimeZone43);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate41, (org.joda.time.ReadablePartial) localDate44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(1L, dateTimeZone47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight48, readableDuration49);
        org.joda.time.Duration duration51 = period45.toDurationTo((org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(1L, dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(1L, dateTimeZone56);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight57, readableDuration58);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType61 = periodType60.withSecondsRemoved();
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight54, (org.joda.time.ReadableInstant) dateMidnight57, periodType61);
        org.joda.time.PeriodType periodType63 = periodType61.withWeeksRemoved();
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration51, periodType61);
        org.joda.time.Interval interval65 = new org.joda.time.Interval(readableInstant34, (org.joda.time.ReadableDuration) duration51);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate(chronology66);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = localDate67.toDateTimeAtCurrentTime(dateTimeZone68);
        org.joda.time.DateMidnight dateMidnight70 = dateTime69.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight(1L, dateTimeZone72);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight73.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone76 = dateMidnight75.getZone();
        org.joda.time.DateTime dateTime77 = dateTime69.toDateTime(dateTimeZone76);
        org.joda.time.Interval interval78 = interval65.withEnd((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Duration duration79 = interval65.toDuration();
        org.joda.time.Period period80 = new org.joda.time.Period();
        org.joda.time.Period period82 = period80.minusMonths((int) '#');
        boolean boolean83 = interval65.equals((java.lang.Object) '#');
        boolean boolean84 = interval31.overlaps((org.joda.time.ReadableInterval) interval65);
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((long) 10);
        int int87 = mutablePeriod86.getWeeks();
        org.joda.time.DateTimeZone dateTimeZone89 = null;
        org.joda.time.DateMidnight dateMidnight90 = new org.joda.time.DateMidnight(1L, dateTimeZone89);
        org.joda.time.DateMidnight.Property property91 = dateMidnight90.dayOfMonth();
        org.joda.time.DurationField durationField92 = property91.getDurationField();
        long long95 = durationField92.add((long) (byte) 10, (long) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime96 = new org.joda.time.MutableDateTime((java.lang.Object) long95);
        org.joda.time.Duration duration97 = mutablePeriod86.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime96);
        org.joda.time.Interval interval98 = interval31.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod86);
        boolean boolean99 = interval31.isAfterNow();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1645455242477L + "'", long32 == 1645455242477L);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 86400010L + "'", long95 == 86400010L);
        org.junit.Assert.assertNotNull(duration97);
        org.junit.Assert.assertNotNull(interval98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test5401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5401");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 53319778, (long) 53341381);
    }

    @Test
    public void test5402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5402");
        java.util.Date date6 = new java.util.Date(7, 53221147, 493, 53221660, (int) '4', 53221098);
        int int7 = date6.getYear();
        date6.setHours(2030);
        org.junit.Assert.assertEquals(date6.toString(), "Sat May 05 14:30:18 GMT+00:00 4443077");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4441177 + "'", int7 == 4441177);
    }

    @Test
    public void test5403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5403");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((int) (byte) 100, 53221515, (int) (byte) 100, 53221161, 3, (int) 'a', (int) (byte) 100, 8);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay19.plus((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay19.withDayOfMonth(4);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.minusYears(53221102);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.plusDays(53581751);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
    }

    @Test
    public void test5404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5404");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(18, 53221660, 53221515, 25);
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod4.toMutablePeriod();
        mutablePeriod4.addMillis(22);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod4.setValue(53401521, 23);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53401521");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod5);
    }

    @Test
    public void test5405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5405");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale9.getDisplayCountry(locale11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.withField(dateTimeFieldType22, (int) 'a');
        org.joda.time.DateTime dateTime26 = dateTime16.withField(dateTimeFieldType22, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone32 = dateMidnight31.getZone();
        org.joda.time.DateTime dateTime33 = dateTime26.withZoneRetainFields(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 'a', dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate36, (org.joda.time.ReadablePartial) localDate39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        boolean boolean42 = localDate39.isSupported(dateTimeFieldType41);
        org.joda.time.Chronology chronology43 = localDate39.getChronology();
        org.joda.time.LocalDate localDate45 = localDate39.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = localDate45.getFieldType(1);
        boolean boolean48 = dateTime26.isSupported(dateTimeFieldType47);
        org.joda.time.DateTime dateTime50 = dateTime26.minusDays(1961);
        org.joda.time.DateTime.Property property51 = dateTime50.yearOfEra();
        org.joda.time.DateTime dateTime52 = property51.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField53 = property51.getField();
        java.util.Locale locale57 = new java.util.Locale("inglese (Stati Uniti)", "millisOfDay");
        java.lang.String str58 = dateTimeField53.getAsText((long) 994, locale57);
        java.util.Set<java.lang.Character> charSet59 = locale57.getExtensionKeys();
        java.lang.String str60 = locale11.getDisplayLanguage(locale57);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ubbf8\uad6d" + "'", str12, "\ubbf8\uad6d");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals(locale57.toString(), "inglese (stati uniti)_MILLISOFDAY");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1970" + "'", str58, "1970");
        org.junit.Assert.assertNotNull(charSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Korean" + "'", str60, "Korean");
    }

    @Test
    public void test5406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5406");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withField(dateTimeFieldType9, (int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime3.withField(dateTimeFieldType9, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        org.joda.time.DateTime dateTime20 = dateTime13.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate23, (org.joda.time.ReadablePartial) localDate26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = localDate26.isSupported(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = localDate26.getChronology();
        org.joda.time.LocalDate localDate32 = localDate26.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = localDate32.getFieldType(1);
        boolean boolean35 = dateTime13.isSupported(dateTimeFieldType34);
        org.joda.time.DateTime dateTime37 = dateTime13.minusDays(1961);
        int int38 = dateTime37.getMillisOfSecond();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTimeAtCurrentTime(dateTimeZone41);
        org.joda.time.LocalDate localDate43 = dateTime42.toLocalDate();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight48 = dateTime47.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(1L, dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone54 = dateMidnight53.getZone();
        org.joda.time.DateTime dateTime55 = dateTime47.toDateTime(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = dateTime42.withZoneRetainFields(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime37.toDateTime(dateTimeZone54);
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay(dateTimeZone54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType60 = yearMonthDay58.getFieldType(53410024);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53410024");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 533 + "'", int38 == 533);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test5407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5407");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime14 = property12.setCopy(53221515);
        org.joda.time.LocalTime localTime15 = property12.getLocalTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight18.minusDays((int) 'a');
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateMidnight.Property property27 = dateMidnight23.property(dateTimeFieldType26);
        boolean boolean28 = localTime15.isSupported(dateTimeFieldType26);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusYears(13);
        int int32 = localDateTime31.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withMillisOfSecond(3);
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.lang.String str42 = dateTimeFieldType41.toString();
        int int43 = dateMidnight40.get(dateTimeFieldType41);
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType41.getDurationType();
        org.joda.time.DateTime.Property property45 = dateTime35.property(dateTimeFieldType41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property46 = localTime15.property(dateTimeFieldType41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "weekyearOfCentury" + "'", str42, "weekyearOfCentury");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 61 + "'", int43 == 61);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test5408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5408");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        org.joda.time.DateMidnight dateMidnight5 = property3.roundHalfEvenCopy();
        org.joda.time.Instant instant6 = dateMidnight5.toInstant();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime8 = instant7.toMutableDateTime();
        mutableDateTime8.setSecondOfMinute((int) (byte) 1);
        mutableDateTime8.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime8.year();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime8.era();
        mutableDateTime8.addMillis((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 'a', dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate19, (org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = dateMidnight28.getZone();
        org.joda.time.DateTime dateTime30 = localDate22.toDateTimeAtMidnight(dateTimeZone29);
        mutableDateTime8.setZoneRetainFields(dateTimeZone29);
        long long33 = dateTimeZone29.nextTransition((long) 1);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str35 = dateTimeZone29.toString();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight5.withZoneRetainFields(dateTimeZone29);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertNotNull(dateMidnight36);
    }

    @Test
    public void test5409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5409");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getFirstDayOfWeek();
        java.util.Date date3 = calendar1.getTime();
        calendar1.clear();
        java.util.Date date11 = new java.util.Date((int) (byte) -1, 32769, 4, (int) (byte) 1, (int) (short) 10, 11);
        date11.setDate(53221197);
        calendar1.setTime(date11);
        date11.setHours(3);
        int int17 = date11.getHours();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=4682244877811000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=150344,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=160,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=10,SECOND=11,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Feb 21 14:54:03 GMT+00:00 2022");
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jun 08 03:10:11 GMT+00:00 150344");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
    }

    @Test
    public void test5410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5410");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        int int5 = instant0.compareTo((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute(0);
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate11, (org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight18, readableDuration19);
        org.joda.time.Duration duration21 = period15.toDurationTo((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.Instant instant22 = instant8.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration21);
        java.lang.Object obj24 = mutablePeriod23.clone();
        mutablePeriod23.setYears(0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0S");
    }

    @Test
    public void test5411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5411");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) '4');
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay4 = property2.addNoWrapToCopy((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property2.getFieldType();
        org.joda.time.ReadablePartial readablePartial6 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int7 = property2.compareTo(readablePartial6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
    }

    @Test
    public void test5412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5412");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        org.joda.time.PeriodType periodType11 = periodType9.withWeeksRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withMonthsRemoved();
        org.joda.time.PeriodType periodType13 = periodType11.withWeeksRemoved();
        org.joda.time.PeriodType periodType14 = periodType11.withMonthsRemoved();
        java.lang.String str15 = periodType11.getName();
        org.joda.time.PeriodType periodType16 = periodType11.withMinutesRemoved();
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "StandardNoSecondsNoWeeks" + "'", str15, "StandardNoSecondsNoWeeks");
        org.junit.Assert.assertNotNull(periodType16);
    }

    @Test
    public void test5413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5413");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale4 = new java.util.Locale("weekyear", "java.util.GregorianCalendar[time=1645454832420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]", "gregory");
        java.lang.String str5 = locale4.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale4.getUnicodeLocaleKeys();
        java.lang.String str9 = nameProvider0.getName(locale4, "+14:47:01.655", "ISOChronology[UTC]");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone11.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone11);
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale14);
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleAttributes();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone11, locale14);
        java.lang.String str20 = nameProvider0.getShortName(locale14, "gregory", "2022-02-21T14:48:22.293Z");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertEquals(locale4.toString(), "weekyear_JAVA.UTIL.GREGORIANCALENDAR[TIME=1645454832420,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=2,MINIMALDAYSINFIRSTWEEK=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=12,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]_gregory");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "weekyear-gregory" + "'", str5, "weekyear-gregory");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645455243718,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=54,SECOND=3,MILLISECOND=718,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test5414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5414");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime14 = property12.addNoWrapToCopy((int) (byte) 100);
        org.joda.time.LocalTime localTime16 = property12.addCopy(366);
        org.joda.time.LocalTime localTime18 = localTime16.withHourOfDay(0);
        int int19 = localTime16.size();
        org.joda.time.LocalTime localTime21 = localTime16.minusMinutes(630);
        org.joda.time.LocalTime localTime23 = localTime21.plusMillis(53521452);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
    }

    @Test
    public void test5415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5415");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        int int7 = dateTimeZone5.getStandardOffset((long) 32769);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = dateTimeZone5.getShortName((long) 1970, locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.LocalTime localTime13 = localTime11.withSecondOfMinute(0);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime16 = property14.addCopy(0L);
        org.joda.time.LocalTime.Property property17 = localTime16.millisOfSecond();
        org.joda.time.LocalTime localTime18 = property17.roundHalfEvenCopy();
        org.joda.time.LocalTime.Property property19 = localTime18.secondOfMinute();
        org.joda.time.LocalTime localTime20 = property19.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test5416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5416");
        java.util.Date date6 = new java.util.Date(7, 53221147, 493, 53221660, (int) '4', 53221098);
        java.time.Instant instant7 = date6.toInstant();
        java.util.Date date14 = new java.util.Date((int) (byte) -1, 32769, 4, (int) (byte) 1, (int) (short) 10, 11);
        date14.setDate(53221197);
        int int17 = date14.getTimezoneOffset();
        int int18 = date14.getMonth();
        boolean boolean19 = date6.before(date14);
        int int20 = date6.getHours();
        org.junit.Assert.assertEquals(date6.toString(), "Sat Feb 10 04:30:18 GMT+00:00 4443077");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jun 08 01:10:11 GMT+00:00 150344");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
    }

    @Test
    public void test5417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5417");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=53221147,MONTH=4,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=15,MINUTE=47,SECOND=53221,MILLISECOND=387,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"java.util.GregorianCalendar[time...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5418");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 53521085);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test5419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5419");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 10);
        int int3 = mutablePeriod2.getWeeks();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay0.plus((org.joda.time.ReadablePeriod) mutablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, readableDuration8);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = period9.normalizedStandard(periodType10);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay4.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = dateMidnight17.getZone();
        int int20 = dateTimeZone18.getStandardOffset((long) 32769);
        java.util.Locale locale22 = java.util.Locale.US;
        java.lang.String str23 = dateTimeZone18.getShortName((long) 1970, locale22);
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.now(dateTimeZone18);
        org.joda.time.LocalTime.Property property25 = localTime24.millisOfDay();
        org.joda.time.LocalTime localTime27 = property25.setCopy(53221515);
        org.joda.time.LocalTime localTime29 = property25.addCopy(53221515);
        org.joda.time.LocalTime localTime31 = localTime29.withMillisOfDay(1961);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.minutes();
        java.lang.String str33 = periodType32.toString();
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay12, (org.joda.time.ReadablePartial) localTime29, periodType32);
        int int35 = localTime29.getSecondOfMinute();
        int int36 = localTime29.getMillisOfSecond();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PeriodType[Minutes]" + "'", str33, "PeriodType[Minutes]");
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 404 + "'", int36 == 404);
    }

    @Test
    public void test5420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5420");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate9 = localDate3.withDayOfMonth(13);
        org.joda.time.Chronology chronology10 = localDate9.getChronology();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.DurationField durationField13 = chronology10.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.halfdayOfDay();
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) 2000, chronology10);
        boolean boolean17 = dateMidnight15.isEqual((long) ' ');
        org.joda.time.DateMidnight.Property property18 = dateMidnight15.yearOfEra();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight15.plusWeeks(53221504);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight20);
    }

    @Test
    public void test5421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5421");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod1 = period0.toMutablePeriod();
        org.joda.time.Period period2 = period0.normalizedStandard();
        org.joda.time.Period period4 = period0.withMonths(53461494);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test5422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5422");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = org.joda.time.Period.parse("Italienisch", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5423");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) dateMidnight23, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration17, periodType27);
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((java.lang.Object) interval31);
        mutablePeriod33.setHours(1961);
        mutablePeriod33.addMinutes(0);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(1L, dateTimeZone39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight40, readableDuration41);
        int int43 = period42.size();
        org.joda.time.MutablePeriod mutablePeriod44 = period42.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod45 = mutablePeriod44.copy();
        mutablePeriod33.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(1L, dateTimeZone48);
        org.joda.time.DateMidnight.Property property50 = dateMidnight49.dayOfMonth();
        org.joda.time.DurationField durationField51 = property50.getDurationField();
        int int52 = property50.getMinimumValue();
        int int53 = property50.getMaximumValueOverall();
        org.joda.time.DateMidnight dateMidnight54 = property50.roundHalfFloorCopy();
        org.joda.time.Instant instant56 = new org.joda.time.Instant(0L);
        org.joda.time.DateTime dateTime57 = instant56.toDateTimeISO();
        mutablePeriod33.setPeriod((org.joda.time.ReadableInstant) dateMidnight54, (org.joda.time.ReadableInstant) dateTime57);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod44);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 31 + "'", int53 == 31);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test5424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5424");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = localDate5.minusDays(100);
        org.joda.time.LocalDate localDate13 = localDate5.withYear((int) (byte) 0);
        org.joda.time.DateTime dateTime14 = localDate13.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime15 = localDate13.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(0);
        org.joda.time.DateTime dateTime18 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        int int33 = dateTimeZone31.getStandardOffset((long) 32769);
        java.util.Locale locale35 = java.util.Locale.US;
        java.lang.String str36 = dateTimeZone31.getShortName((long) 1970, locale35);
        org.joda.time.DateTime dateTime37 = dateMidnight25.toDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((java.lang.Object) "52", dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.DateMidnight.Property property42 = dateMidnight41.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight41.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property45 = dateMidnight41.dayOfMonth();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = localDate47.toDateTimeAtCurrentTime(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(1L, dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight54.withField(dateTimeFieldType55, (int) 'a');
        org.joda.time.DateTime dateTime59 = dateTime49.withField(dateTimeFieldType55, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight41.withField(dateTimeFieldType55, 7);
        int int62 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) dateMidnight61);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) 173, (long) 1439, dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(1645454835796L, dateTimeZone31);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((java.lang.Object) dateTime18, dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test5425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5425");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        int int3 = localDateTime2.getDayOfWeek();
        int int4 = localDateTime2.getMillisOfSecond();
        org.joda.time.DateTime dateTime5 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withYearOfEra(53221655);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minusYears(36);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.minusMillis((int) 'a');
        org.joda.time.LocalDateTime.Property property12 = localDateTime2.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime2.minusDays(53281887);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 202 + "'", int4 == 202);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test5426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5426");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = localDate5.toInterval(dateTimeZone9);
        org.joda.time.Interval interval12 = interval10.withEndMillis((long) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight18, readableDuration19);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType22 = periodType21.withSecondsRemoved();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight15, (org.joda.time.ReadableInstant) dateMidnight18, periodType22);
        org.joda.time.PeriodType periodType24 = periodType22.withHoursRemoved();
        org.joda.time.PeriodType periodType25 = periodType24.withMillisRemoved();
        org.joda.time.Period period26 = interval12.toPeriod(periodType24);
        org.joda.time.Period period27 = interval12.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval29 = interval12.withStartMillis((long) 879);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period27);
    }

    @Test
    public void test5427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5427");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        int int7 = localDateTime6.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMillis(17);
        java.util.Date date10 = localDateTime9.toDate();
        date10.setSeconds((int) ' ');
        long long13 = date10.getTime();
        int int14 = date10.getDate();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Mon Feb 21 14:54:32 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645455272232L + "'", long13 == 1645455272232L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 21 + "'", int14 == 21);
    }

    @Test
    public void test5428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5428");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 'a', dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate4, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate10 = localDate4.withDayOfMonth(13);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        long long15 = chronology11.add((long) (short) -1, (long) 1961, 15);
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) 53221407, chronology11);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1645454871964L, chronology11);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withDayOfWeek(3);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField21 = mutableDateTime20.getRoundingField();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        mutableDateTime22.setHourOfDay(11);
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime22.toMutableDateTime();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType29 = periodType28.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 53221197, (long) (byte) 100, periodType28);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime20, (org.joda.time.ReadableInstant) mutableDateTime25, periodType28);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight19.plus((org.joda.time.ReadablePeriod) period31);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 29414L + "'", long15 == 29414L);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNull(dateTimeField21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(dateMidnight32);
    }

    @Test
    public void test5429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5429");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight7 = dateTime6.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        org.joda.time.DateTime dateTime14 = dateTime6.toDateTime(dateTimeZone13);
        org.joda.time.Instant instant15 = dateTime6.toInstant();
        org.joda.time.Chronology chronology16 = instant15.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(0, 851, 605, chronology16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 851 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test5430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5430");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        java.util.Calendar.Builder builder5 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder8 = builder5.set(0, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight13.getZone();
        int int16 = dateTimeZone14.getStandardOffset((long) 32769);
        java.util.Locale locale18 = java.util.Locale.US;
        java.lang.String str19 = dateTimeZone14.getShortName((long) 1970, locale18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale18.getDisplayCountry(locale20);
        java.util.Calendar.Builder builder22 = builder5.setLocale(locale20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withLocale(locale20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter23.withDefaultYear(53221504);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter25.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 'a', dateTimeZone34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate32, (org.joda.time.ReadablePartial) localDate35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        boolean boolean38 = localDate35.isSupported(dateTimeFieldType37);
        org.joda.time.Chronology chronology39 = localDate35.getChronology();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 7, chronology39);
        org.joda.time.DurationField durationField41 = chronology39.centuries();
        org.joda.time.Period period42 = new org.joda.time.Period((long) (byte) 0, (long) 520, chronology39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter26.withChronology(chronology39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime45 = dateTimeFormatter43.parseDateTime("1970-01-01T00:00:00.035Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ubbf8\uad6d" + "'", str21, "\ubbf8\uad6d");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
    }

    @Test
    public void test5431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5431");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setSecondOfMinute(52);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = dateMidnight17.getZone();
        org.joda.time.DateTime dateTime19 = localDate11.toDateTimeAtMidnight(dateTimeZone18);
        boolean boolean21 = dateTimeZone18.isStandardOffset((long) (byte) 10);
        mutableDateTime1.setZone(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.millisOfSecond();
        mutableDateTime1.setMillisOfSecond(13);
        java.lang.Object obj26 = mutableDateTime1.clone();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime1.minuteOfDay();
        mutableDateTime1.setTime((long) 53221626);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime1.weekyear();
        org.joda.time.Instant instant31 = new org.joda.time.Instant((java.lang.Object) mutableDateTime1);
        org.joda.time.MutableDateTime mutableDateTime32 = instant31.toMutableDateTime();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "2022-02-21T14:54:52.013Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "2022-02-21T14:54:52.013Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "2022-02-21T14:54:52.013Z");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
    }

    @Test
    public void test5432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5432");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight6, readableDuration7);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType10 = periodType9.withSecondsRemoved();
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, (org.joda.time.ReadableInstant) dateMidnight6, periodType10);
        org.joda.time.PeriodType periodType12 = periodType10.withHoursRemoved();
        org.joda.time.PeriodType periodType13 = periodType12.withMillisRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period14 = new org.joda.time.Period((java.lang.Object) 53581020, periodType13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
    }

    @Test
    public void test5433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5433");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = dateMidnight7.getZone();
        int int10 = dateTimeZone8.getStandardOffset((long) 32769);
        java.util.Locale locale12 = java.util.Locale.US;
        java.lang.String str13 = dateTimeZone8.getShortName((long) 1970, locale12);
        org.joda.time.DateTime dateTime14 = dateMidnight2.toDateTime(dateTimeZone8);
        long long16 = dateTimeZone8.convertUTCToLocal((long) 971);
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 'a', dateTimeZone23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate21, (org.joda.time.ReadablePartial) localDate24);
        org.joda.time.LocalDate localDate27 = localDate21.withDayOfMonth(13);
        org.joda.time.Chronology chronology28 = localDate27.getChronology();
        long long32 = chronology28.add((long) (short) -1, (long) 1961, 15);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.standard();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 'a', dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 'a', dateTimeZone39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate37, (org.joda.time.ReadablePartial) localDate40);
        org.joda.time.LocalDate localDate43 = localDate37.withDayOfMonth(13);
        org.joda.time.Chronology chronology44 = localDate43.getChronology();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 0, periodType34, chronology44);
        int[] intArray48 = chronology28.get((org.joda.time.ReadablePeriod) mutablePeriod45, (long) 596, (long) 53221161);
        boolean boolean49 = dateTimeFieldType18.isSupported(chronology28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay17.withField(dateTimeFieldType18, 53521793);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 971L + "'", long16 == 971L);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 29414L + "'", long32 == 29414L);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 0, 0, 14, 47, 0, 565]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test5434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5434");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis(4);
        org.joda.time.Period period11 = new org.joda.time.Period();
        org.joda.time.Period period13 = period11.minusMonths((int) '#');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.withPeriodAdded((org.joda.time.ReadablePeriod) period13, 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(3, 11, 2);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.withField(dateTimeFieldType27, (int) 'a');
        java.lang.String str30 = dateTimeFieldType27.getName();
        org.joda.time.LocalDateTime.Property property31 = localDateTime21.property(dateTimeFieldType27);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime21.plusSeconds(246);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withHourOfDay(53341687);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53341687 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "weekyear" + "'", str30, "weekyear");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
    }

    @Test
    public void test5435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5435");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        java.lang.String str1 = dateMidnight0.toString();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.minusMonths(2022);
        java.util.Locale locale4 = java.util.Locale.US;
        java.lang.String str5 = locale4.getDisplayName();
        java.util.Calendar calendar6 = dateMidnight0.toCalendar(locale4);
        calendar6.setFirstDayOfWeek(622);
        // The following exception was thrown during execution in test generation
        try {
            calendar6.roll(938, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str1, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "inglese (Stati Uniti)" + "'", str5, "inglese (Stati Uniti)");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645401600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=622,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test5436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5436");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.year();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekyear();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundFloorCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime11.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.plusMinutes(53521537);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test5437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5437");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType1 = periodType0.withSecondsRemoved();
        java.lang.String str2 = periodType0.getName();
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        int int6 = localDateTime5.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str8 = dateTimeFieldType7.toString();
        int int9 = localDateTime5.get(dateTimeFieldType7);
        boolean boolean10 = periodType4.equals((java.lang.Object) int9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.centuries();
        int int12 = periodType4.indexOf(durationFieldType11);
        int int13 = periodType0.indexOf(durationFieldType11);
        org.joda.time.PeriodType periodType14 = periodType0.withHoursRemoved();
        org.joda.time.PeriodType periodType15 = periodType14.withMillisRemoved();
        org.joda.time.PeriodType periodType16 = periodType14.withYearsRemoved();
        org.joda.time.PeriodType periodType17 = periodType16.withHoursRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "YearDayTime" + "'", str2, "YearDayTime");
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 584 + "'", int6 == 584);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "weekyear" + "'", str8, "weekyear");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
    }

    @Test
    public void test5438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5438");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        org.joda.time.Chronology chronology10 = localDate6.getChronology();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 7, chronology10);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property19 = dateMidnight15.dayOfMonth();
        org.joda.time.Period period20 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod21 = period20.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight15.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight27.withField(dateTimeFieldType28, (int) 'a');
        boolean boolean31 = dateMidnight22.isSupported(dateTimeFieldType28);
        org.joda.time.YearMonthDay yearMonthDay32 = dateMidnight22.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone41 = dateMidnight40.getZone();
        int int43 = dateTimeZone41.getStandardOffset((long) 32769);
        java.util.Locale locale45 = java.util.Locale.US;
        java.lang.String str46 = dateTimeZone41.getShortName((long) 1970, locale45);
        org.joda.time.DateTime dateTime47 = dateMidnight35.toDateTime(dateTimeZone41);
        org.joda.time.Interval interval48 = yearMonthDay32.toInterval(dateTimeZone41);
        mutableDateTime12.setZone(dateTimeZone41);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime12.dayOfWeek();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime12.secondOfMinute();
        boolean boolean53 = mutableDateTime12.equals((java.lang.Object) 53221593);
        mutableDateTime12.add(3391433629762L);
        org.joda.time.Chronology chronology56 = mutableDateTime12.getChronology();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology56);
    }

    @Test
    public void test5439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5439");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1679723295694714000L);
    }

    @Test
    public void test5440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5440");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        org.joda.time.DateTime dateTime17 = localDate9.toDateTimeAtMidnight(dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(dateTimeZone16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withZone(dateTimeZone16);
        org.joda.time.Chronology chronology20 = dateTimeFormatter19.getChronolgy();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(chronology20);
    }

    @Test
    public void test5441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5441");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtCurrentTime(dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight6 = dateTime5.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withDayOfMonth((int) (short) 1);
        int int9 = dateMidnight6.getWeekyear();
        java.lang.String str11 = dateMidnight6.toString("+00:00");
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate localDate23 = localDate17.withDayOfMonth(13);
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        mutablePeriod13.add((long) ' ', chronology24);
        org.joda.time.DurationField durationField26 = chronology24.weekyears();
        org.joda.time.DateTime dateTime27 = dateMidnight6.toDateTime(chronology24);
        org.joda.time.Period period28 = new org.joda.time.Period(0L, (long) 53281601, chronology24);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test5442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5442");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        org.joda.time.Chronology chronology10 = localDate6.getChronology();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 7, chronology10);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight16.minusDays((int) 'a');
        org.joda.time.DateTime dateTime20 = dateMidnight19.toDateTimeISO();
        org.joda.time.Period period25 = new org.joda.time.Period(53221504, (int) 'x', (int) (short) 100, 53221180);
        org.joda.time.DateTime dateTime26 = dateTime20.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone32 = dateMidnight31.getZone();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDate34.toDateTimeAtCurrentTime(dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight37 = dateTime36.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.withDayOfMonth((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime40 = dateMidnight39.toMutableDateTimeISO();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight31, (org.joda.time.ReadableInstant) dateMidnight39);
        int int42 = mutablePeriod41.getMillis();
        org.joda.time.DateTime dateTime43 = dateTime26.minus((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 'a', dateTimeZone52);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate50, (org.joda.time.ReadablePartial) localDate53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(1L, dateTimeZone56);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight57, readableDuration58);
        org.joda.time.Duration duration60 = period54.toDurationTo((org.joda.time.ReadableInstant) dateMidnight57);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight(1L, dateTimeZone62);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(1L, dateTimeZone65);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight66, readableDuration67);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType70 = periodType69.withSecondsRemoved();
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight63, (org.joda.time.ReadableInstant) dateMidnight66, periodType70);
        org.joda.time.PeriodType periodType72 = periodType70.withWeeksRemoved();
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableDuration) duration60, periodType70);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) 'a', dateTimeZone75);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate((long) 'a', dateTimeZone78);
        org.joda.time.Period period80 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate76, (org.joda.time.ReadablePartial) localDate79);
        org.joda.time.Period period81 = period73.plus((org.joda.time.ReadablePeriod) period80);
        org.joda.time.PeriodType periodType84 = null;
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.LocalDate localDate87 = new org.joda.time.LocalDate((long) 'a', dateTimeZone86);
        org.joda.time.DateTimeZone dateTimeZone89 = null;
        org.joda.time.LocalDate localDate90 = new org.joda.time.LocalDate((long) 'a', dateTimeZone89);
        org.joda.time.Period period91 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate87, (org.joda.time.ReadablePartial) localDate90);
        org.joda.time.LocalDate localDate93 = localDate87.withDayOfMonth(13);
        org.joda.time.Chronology chronology94 = localDate93.getChronology();
        org.joda.time.Period period95 = new org.joda.time.Period((long) (short) -1, (long) 'a', periodType84, chronology94);
        org.joda.time.MutablePeriod mutablePeriod96 = new org.joda.time.MutablePeriod((java.lang.Object) period73, chronology94);
        org.joda.time.DateTime dateTime97 = dateTime26.withChronology(chronology94);
        mutableDateTime12.setChronology(chronology94);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(localDate93);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test5443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5443");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = localDate5.toInterval(dateTimeZone9);
        java.lang.String str11 = interval10.toString();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.Period period20 = period18.plusYears(8);
        org.joda.time.Interval interval21 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate25, (org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = localDate28.isSupported(dateTimeFieldType30);
        org.joda.time.Chronology chronology32 = localDate28.getChronology();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 7, chronology32);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.Interval interval35 = interval10.withChronology(chronology32);
        org.joda.time.Duration duration36 = interval35.toDuration();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate39, (org.joda.time.ReadablePartial) localDate42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = localDate42.isSupported(dateTimeFieldType44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Interval interval47 = localDate42.toInterval(dateTimeZone46);
        java.lang.String str48 = interval47.toString();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 'a', dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 'a', dateTimeZone53);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate51, (org.joda.time.ReadablePartial) localDate54);
        org.joda.time.Period period57 = period55.plusYears(8);
        org.joda.time.Interval interval58 = interval47.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Period period60 = period57.withMinutes(0);
        org.joda.time.Period period62 = period60.plusYears(53221626);
        org.joda.time.Interval interval63 = interval35.withPeriodAfterStart((org.joda.time.ReadablePeriod) period60);
        org.joda.time.Instant instant64 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(chronology65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = localDate66.toDateTimeAtCurrentTime(dateTimeZone67);
        int int69 = instant64.compareTo((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime dateTime71 = dateTime68.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime72 = dateTime71.toDateTime();
        org.joda.time.DateTime dateTime73 = dateTime71.toDateTime();
        org.joda.time.DateTime dateTime75 = dateTime71.plusDays(53281118);
        boolean boolean76 = interval35.isBefore((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime77 = dateTime71.withTimeAtStartOfDay();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str11, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str48, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(dateTime77);
    }

    @Test
    public void test5444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5444");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        java.util.Date date2 = mutableDateTime1.toDate();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.fromDateFields(date2);
        date2.setDate(811);
        date2.setMinutes(53641);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Tue May 28 20:01:04 GMT+00:00 2024");
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test5445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5445");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay21 = property20.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay23 = property20.addToCopy((-143999));
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight35.withField(dateTimeFieldType36, (int) 'a');
        org.joda.time.DateTime dateTime40 = dateTime30.withField(dateTimeFieldType36, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(1L, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone46 = dateMidnight45.getZone();
        org.joda.time.DateTime dateTime47 = dateTime40.withZoneRetainFields(dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight48 = localDate26.toDateMidnight(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = yearMonthDay23.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.DateTimeField[] dateTimeFieldArray50 = yearMonthDay23.getFields();
        org.joda.time.YearMonthDay.Property property51 = yearMonthDay23.year();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = yearMonthDay23.getFieldTypes();
        org.joda.time.LocalDate localDate53 = yearMonthDay23.toLocalDate();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldArray50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNotNull(localDate53);
    }

    @Test
    public void test5446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5446");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        int int3 = localDateTime2.getDayOfWeek();
        int int4 = localDateTime2.getEra();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minus(readableDuration5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusYears(53319979);
        int int9 = localDateTime8.getYear();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53322014 + "'", int9 == 53322014);
    }

    @Test
    public void test5447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5447");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(53221930);
        org.joda.time.MutableDateTime mutableDateTime7 = property4.getMutableDateTime();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
    }

    @Test
    public void test5448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5448");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withField(dateTimeFieldType9, (int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime3.withField(dateTimeFieldType9, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        org.joda.time.DateTime dateTime20 = dateTime13.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate23, (org.joda.time.ReadablePartial) localDate26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = localDate26.isSupported(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = localDate26.getChronology();
        org.joda.time.LocalDate localDate32 = localDate26.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = localDate32.getFieldType(1);
        boolean boolean35 = dateTime13.isSupported(dateTimeFieldType34);
        org.joda.time.DateTime dateTime37 = dateTime13.minusDays(1961);
        org.joda.time.DateTime.Property property38 = dateTime37.yearOfEra();
        org.joda.time.DateTime dateTime39 = property38.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField40 = property38.getField();
        org.joda.time.DateTimeField dateTimeField41 = property38.getField();
        org.joda.time.DateTime dateTime42 = property38.withMinimumValue();
        org.joda.time.DateTime dateTime44 = property38.addToCopy(53461884);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test5449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5449");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        int int4 = mutableDateTime1.getMillisOfDay();
        mutableDateTime1.setDayOfYear((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17);
        org.joda.time.Duration duration19 = period13.toDurationTo((org.joda.time.ReadableInstant) dateMidnight16);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration19);
        int int21 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime1.era();
        mutableDateTime1.addMinutes(811);
        org.junit.Assert.assertNotNull(mutableDateTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53641017 + "'", int4 == 53641017);
        org.junit.Assert.assertNotNull(duration19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 17 + "'", int21 == 17);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test5450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5450");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 10);
        int int3 = mutablePeriod2.getWeeks();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay0.plus((org.joda.time.ReadablePeriod) mutablePeriod2);
        int int5 = timeOfDay0.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay0.millisOfSecond();
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        int int9 = calendar8.getWeeksInWeekYear();
        int int11 = calendar8.getActualMinimum(4);
        org.joda.time.TimeOfDay timeOfDay12 = org.joda.time.TimeOfDay.fromCalendarFields(calendar8);
        int int13 = timeOfDay0.compareTo((org.joda.time.ReadablePartial) timeOfDay12);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay12.minusSeconds(53341496);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.withSecondOfMinute(14);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay15.minusSeconds(53221504);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean21 = timeOfDay19.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate25, (org.joda.time.ReadablePartial) localDate28);
        org.joda.time.LocalDate localDate31 = localDate25.withDayOfMonth(13);
        org.joda.time.Chronology chronology32 = localDate31.getChronology();
        long long36 = chronology32.add((long) (short) -1, (long) 1961, 15);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.standard();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 'a', dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 'a', dateTimeZone43);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate41, (org.joda.time.ReadablePartial) localDate44);
        org.joda.time.LocalDate localDate47 = localDate41.withDayOfMonth(13);
        org.joda.time.Chronology chronology48 = localDate47.getChronology();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 0, periodType38, chronology48);
        int[] intArray52 = chronology32.get((org.joda.time.ReadablePeriod) mutablePeriod49, (long) 596, (long) 53221161);
        boolean boolean53 = dateTimeFieldType22.isSupported(chronology32);
        org.joda.time.Period period55 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod56 = period55.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) 'a', dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) 'a', dateTimeZone63);
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate61, (org.joda.time.ReadablePartial) localDate64);
        org.joda.time.LocalDate localDate67 = localDate61.withDayOfMonth(13);
        org.joda.time.Chronology chronology68 = localDate67.getChronology();
        mutablePeriod56.setPeriod((long) 10, (-599990L), chronology68);
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight((-1968L), chronology68);
        org.joda.time.DateTimeZone dateTimeZone71 = chronology68.getZone();
        org.joda.time.DateTimeField dateTimeField72 = chronology68.year();
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType22.getField(chronology68);
        java.lang.String str74 = dateTimeFieldType22.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay76 = timeOfDay19.withField(dateTimeFieldType22, 86398032);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645455245038,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=54,SECOND=5,MILLISECOND=38,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 29414L + "'", long36 == 29414L);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 0, 0, 0, 14, 47, 0, 565]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(mutablePeriod56);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "weekyear" + "'", str74, "weekyear");
    }

    @Test
    public void test5451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5451");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(194);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test5452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5452");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 32770);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test5453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5453");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 10);
        int int3 = mutablePeriod2.getWeeks();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay0.plus((org.joda.time.ReadablePeriod) mutablePeriod2);
        int int5 = timeOfDay4.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.minusMinutes(53461447);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTimeAtCurrentTime(dateTimeZone10);
        org.joda.time.LocalDate localDate12 = dateTime11.toLocalDate();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight17 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = dateMidnight22.getZone();
        org.joda.time.DateTime dateTime24 = dateTime16.toDateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = dateTime11.withZoneRetainFields(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate28, (org.joda.time.ReadablePartial) localDate31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        boolean boolean34 = localDate31.isSupported(dateTimeFieldType33);
        org.joda.time.Chronology chronology35 = localDate31.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.dayOfYear();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = dateTimeField37.getType();
        org.joda.time.DateTime dateTime40 = dateTime25.withField(dateTimeFieldType38, 999);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = timeOfDay7.get(dateTimeFieldType38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test5454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5454");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDayOfMonth((int) (short) 1);
        int int7 = dateMidnight4.getWeekyear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.plusDays((int) (short) 10);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        java.util.Calendar calendar12 = dateMidnight9.toCalendar(locale10);
        org.joda.time.DateMidnight.Property property13 = dateMidnight9.monthOfYear();
        org.joda.time.DateMidnight dateMidnight14 = property13.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = dateMidnight26.getZone();
        org.joda.time.DateTime dateTime28 = localDate20.toDateTimeAtMidnight(dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateMidnight14, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plusWeeks(53221796);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight29.minusDays(53341909);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645455245187,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=54,SECOND=5,MILLISECOND=187,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1646265600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=62,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
    }

    @Test
    public void test5455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5455");
        java.util.Locale locale1 = new java.util.Locale("2022-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(locale1.toString(), "2022-01-01t00:00:00.000z");
    }

    @Test
    public void test5456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5456");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = new org.joda.time.Period((java.lang.Object) dateTimeFieldType0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
    }

    @Test
    public void test5457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5457");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withField(dateTimeFieldType9, (int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime3.withField(dateTimeFieldType9, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        org.joda.time.DateTime dateTime20 = dateTime13.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate23, (org.joda.time.ReadablePartial) localDate26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = localDate26.isSupported(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = localDate26.getChronology();
        org.joda.time.LocalDate localDate32 = localDate26.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = localDate32.getFieldType(1);
        boolean boolean35 = dateTime13.isSupported(dateTimeFieldType34);
        org.joda.time.DateTime dateTime37 = dateTime13.minusDays(1961);
        org.joda.time.DateMidnight dateMidnight38 = dateTime13.toDateMidnight();
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str40 = durationFieldType39.getName();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight38.withFieldAdded(durationFieldType39, 32772);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = localDate44.toDateTimeAtCurrentTime(dateTimeZone45);
        org.joda.time.LocalDate localDate47 = dateTime46.toLocalDate();
        org.joda.time.DateTime.Property property48 = dateTime46.minuteOfHour();
        int int49 = dateTime46.getHourOfDay();
        boolean boolean50 = dateMidnight38.isAfter((org.joda.time.ReadableInstant) dateTime46);
        int int51 = dateMidnight38.getSecondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int53 = dateMidnight38.get(dateTimeFieldType52);
        java.lang.Class<?> wildcardClass54 = dateTimeFieldType52.getClass();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "seconds" + "'", str40, "seconds");
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 14 + "'", int49 == 14);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test5458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5458");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) dateMidnight23, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration17, periodType27);
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = localDate33.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight36 = dateTime35.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(1L, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = dateMidnight41.getZone();
        org.joda.time.DateTime dateTime43 = dateTime35.toDateTime(dateTimeZone42);
        org.joda.time.Interval interval44 = interval31.withEnd((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration45 = interval31.toDuration();
        org.joda.time.Period period46 = new org.joda.time.Period();
        org.joda.time.Period period48 = period46.minusMonths((int) '#');
        boolean boolean49 = interval31.equals((java.lang.Object) '#');
        java.lang.String str50 = interval31.toString();
        org.joda.time.Period period51 = interval31.toPeriod();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-21T14:54:05.336Z/2022-02-21T14:54:05.336Z" + "'", str50, "2022-02-21T14:54:05.336Z/2022-02-21T14:54:05.336Z");
        org.junit.Assert.assertNotNull(period51);
    }

    @Test
    public void test5459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5459");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.monthOfYear();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology9);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test5460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5460");
        org.joda.time.Period period1 = org.joda.time.Period.months(53401578);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test5461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5461");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 'a', dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate4, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        boolean boolean10 = localDate7.isSupported(dateTimeFieldType9);
        org.joda.time.Chronology chronology11 = localDate7.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.millisOfDay();
        org.joda.time.Period period14 = new org.joda.time.Period(1645454865923L, (-19044L), chronology11);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(chronology11);
        org.joda.time.DateTimeField dateTimeField16 = chronology11.millisOfDay();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test5462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5462");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute(3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusWeeks((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfMonth(13);
        org.joda.time.ReadablePartial readablePartial9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period10 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDateTime8, readablePartial9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test5463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5463");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        org.joda.time.Chronology chronology10 = localDate6.getChronology();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 7, chronology10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.LocalDate localDate20 = localDate14.withDayOfMonth(13);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale22);
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str25 = localDate14.toString("+00:00", locale22);
        org.joda.time.DateTime dateTime26 = dateTime11.withFields((org.joda.time.ReadablePartial) localDate14);
        int int27 = dateTime11.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight30.minusDays((int) 'a');
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime35 = instant34.toMutableDateTime();
        mutableDateTime35.setSecondOfMinute((int) (byte) 1);
        mutableDateTime35.setSecondOfMinute(52);
        org.joda.time.DateTime dateTime40 = mutableDateTime35.toDateTimeISO();
        int int41 = mutableDateTime35.getMillisOfSecond();
        boolean boolean42 = mutableDateTime35.isAfterNow();
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime44 = instant43.toMutableDateTime();
        mutableDateTime44.setSecondOfMinute((int) (byte) 1);
        mutableDateTime44.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime44.year();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime44.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = property50.getFieldType();
        mutableDateTime35.set(dateTimeFieldType51, 31);
        boolean boolean54 = dateMidnight30.isSupported(dateTimeFieldType51);
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(53221440, 97, 100, 42, 60, 53221807, 862, 53221235);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((long) 'a', dateTimeZone65);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((long) 'a', dateTimeZone68);
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate66, (org.joda.time.ReadablePartial) localDate69);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = null;
        boolean boolean72 = localDate69.isSupported(dateTimeFieldType71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.Interval interval74 = localDate69.toInterval(dateTimeZone73);
        java.lang.String str75 = interval74.toString();
        org.joda.time.Duration duration76 = interval74.toDuration();
        mutablePeriod63.add((org.joda.time.ReadableDuration) duration76);
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.weeks();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight30, (org.joda.time.ReadableDuration) duration76, periodType78);
        org.joda.time.DateTime dateTime80 = dateTime11.plus((org.joda.time.ReadableDuration) duration76);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 550 + "'", int41 == 550);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str75, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(dateTime80);
    }

    @Test
    public void test5464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5464");
        org.joda.time.Period period4 = new org.joda.time.Period(32769, 1, 53221515, (int) (short) 0);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.standard();
        org.joda.time.Period period6 = period4.withPeriodType(periodType5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((java.lang.Object) periodType5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test5465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5465");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute(3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfSecond();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime8 = instant7.toMutableDateTime();
        mutableDateTime8.setSecondOfMinute((int) (byte) 1);
        mutableDateTime8.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime8.year();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, readableDuration20);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType23 = periodType22.withSecondsRemoved();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, (org.joda.time.ReadableInstant) dateMidnight19, periodType23);
        org.joda.time.DateMidnight.Property property25 = dateMidnight16.year();
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        java.lang.String str27 = property25.getAsText(locale26);
        int int28 = property13.getMaximumShortTextLength(locale26);
        org.joda.time.MutableDateTime mutableDateTime30 = property13.add((long) 914);
        org.joda.time.MutableDateTime mutableDateTime31 = property13.getMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime31.property(dateTimeFieldType32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime35 = localDateTime4.withField(dateTimeFieldType32, 53221310);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53221310 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970" + "'", str27, "1970");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test5466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5466");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property13 = dateMidnight9.dayOfMonth();
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight9.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.withField(dateTimeFieldType22, (int) 'a');
        boolean boolean25 = dateMidnight16.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime6.withField(dateTimeFieldType22, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withYear(7);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.minusDays(685);
        int int32 = localDateTime27.getYear();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
    }

    @Test
    public void test5467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5467");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withField(dateTimeFieldType9, (int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime3.withField(dateTimeFieldType9, (int) (short) 0);
        org.joda.time.DateTime dateTime15 = dateTime3.plusHours((int) (short) 1);
        int int16 = dateTime15.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property17 = dateTime15.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int19 = dateTime15.get(dateTimeFieldType18);
        boolean boolean21 = dateTime15.isAfter(1645454854107L);
        org.joda.time.DateTime dateTime23 = dateTime15.plusDays(14);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfCentury();
        org.joda.time.DateTime.Property property25 = dateTime23.millisOfDay();
        org.joda.time.DateTime dateTime27 = property25.addToCopy(53221550);
        org.joda.time.DateTime dateTime28 = property25.getDateTime();
        int int29 = dateTime28.getSecondOfMinute();
        int int30 = dateTime28.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
    }

    @Test
    public void test5468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5468");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.util.Date date5 = new java.util.Date(2, (int) '#', (int) '#');
        calendar1.setTime(date5);
        calendar1.set((int) (short) -1, (int) (byte) 100, (int) (short) 1, (int) (byte) -1, 17);
        int int14 = calendar1.getMinimum((int) (byte) 0);
        calendar1.setFirstDayOfWeek(53388515);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=53388515,minimalDaysInFirstWeek=4,ERA=1,YEAR=-1,MONTH=100,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=1,DAY_OF_YEAR=4,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=-1,MINUTE=17,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date5.toString(), "Wed Jan 04 00:00:00 GMT+00:00 1905");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test5469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5469");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) 'a');
        int int8 = dateMidnight7.getYearOfCentury();
        java.util.GregorianCalendar gregorianCalendar9 = dateMidnight7.toGregorianCalendar();
        java.time.Instant instant10 = gregorianCalendar9.toInstant();
        org.joda.time.YearMonthDay yearMonthDay11 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar9);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = gregorianCalendar9.getMaximum(899);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 899");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertNotNull(gregorianCalendar9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
    }

    @Test
    public void test5470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5470");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(1645454947730L, dateTimeZone1);
    }

    @Test
    public void test5471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5471");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.DateTime dateTime13 = localDate5.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYear(596);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.getDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime17.toMutableDateTime();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 10);
        mutableDateTime18.add((org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray22 = mutablePeriod20.getValues();
        mutablePeriod20.add(1034184412800000L);
        org.joda.time.Period period26 = org.joda.time.Period.years((int) (short) 10);
        org.joda.time.Period period28 = period26.multipliedBy(0);
        org.joda.time.Period period30 = period28.plusHours(42);
        org.joda.time.Period period32 = period28.minusDays(53281067);
        org.joda.time.Period period34 = period32.plusMinutes(2012);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) period34);
        mutablePeriod20.setPeriod(53401787, (int) (short) 100, 53426130, 2021, (int) (short) 10, 0, (int) (byte) 100, 53401943);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
    }

    @Test
    public void test5472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5472");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setSecondOfMinute(52);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = dateMidnight17.getZone();
        org.joda.time.DateTime dateTime19 = localDate11.toDateTimeAtMidnight(dateTimeZone18);
        boolean boolean21 = dateTimeZone18.isStandardOffset((long) (byte) 10);
        mutableDateTime1.setZone(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.millisOfSecond();
        org.joda.time.Instant instant24 = mutableDateTime1.toInstant();
        org.joda.time.Period period25 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod26 = period25.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 'a', dateTimeZone33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate31, (org.joda.time.ReadablePartial) localDate34);
        org.joda.time.LocalDate localDate37 = localDate31.withDayOfMonth(13);
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        mutablePeriod26.setPeriod((long) 10, (-599990L), chronology38);
        mutableDateTime1.setChronology(chronology38);
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now(chronology38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = localDate43.toDateTimeAtCurrentTime(dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight46 = dateTime45.toDateMidnight();
        org.joda.time.DateTime dateTime48 = dateTime45.plusYears(24);
        mutableDateTime41.setTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 'a', dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 'a', dateTimeZone55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate53, (org.joda.time.ReadablePartial) localDate56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        boolean boolean59 = localDate56.isSupported(dateTimeFieldType58);
        org.joda.time.Chronology chronology60 = localDate56.getChronology();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 7, chronology60);
        org.joda.time.DurationField durationField62 = chronology60.centuries();
        org.joda.time.DurationFieldType durationFieldType63 = durationField62.getType();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime41.add(durationFieldType63, 53261499);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 5326149900");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationFieldType63);
    }

    @Test
    public void test5473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5473");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((int) (byte) 100, 53221515, (int) (byte) 100, 53221161, 3, (int) 'a', (int) (byte) 100, 8);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay19.plus((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay19.withDayOfMonth(4);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.minusYears(53221102);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = localDate35.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight38 = dateTime37.toDateMidnight();
        org.joda.time.DateTime dateTime40 = dateTime37.plusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime37.getZone();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(1L, dateTimeZone43);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.dayOfMonth();
        org.joda.time.DurationField durationField46 = property45.getDurationField();
        boolean boolean47 = dateTimeZone41.equals((java.lang.Object) durationField46);
        org.joda.time.DateTime dateTime48 = yearMonthDay31.toDateTimeAtCurrentTime(dateTimeZone41);
        org.joda.time.YearMonthDay.Property property49 = yearMonthDay31.dayOfMonth();
        int int50 = yearMonthDay31.getYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
    }

    @Test
    public void test5474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5474");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(53273563);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5475");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight9, readableDuration10);
        org.joda.time.Duration duration12 = period6.toDurationTo((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.DateMidnight.Property property13 = dateMidnight9.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight15 = dateMidnight9.withYearOfEra((-101));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -101 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test5476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5476");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.dayOfYear();
        int int14 = dateTimeField13.getMinimumValue();
        org.joda.time.DurationField durationField15 = dateTimeField13.getLeapDurationField();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNull(durationField15);
    }

    @Test
    public void test5477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5477");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("DurationField[centuries]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"DurationField[centuries]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5478");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        int int4 = mutableDateTime1.getMillisOfDay();
        mutableDateTime1.setDayOfYear((int) (byte) 100);
        mutableDateTime1.addMillis(891);
        org.junit.Assert.assertNotNull(mutableDateTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53641415 + "'", int4 == 53641415);
    }

    @Test
    public void test5479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5479");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 'a', dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate4, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight11, readableDuration12);
        org.joda.time.Duration duration14 = period8.toDurationTo((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.Instant instant15 = instant1.minus((org.joda.time.ReadableDuration) duration14);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration14, (int) (short) 100);
        java.lang.Object obj18 = mutableDateTime0.clone();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime0.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime0.set(dateTimeFieldType20, 0);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setMinuteOfHour(2022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(obj18);
// flaky:         org.junit.Assert.assertEquals(obj18.toString(), "2022-02-21T14:54:06.436Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "2022-02-21T14:54:06.436Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "2022-02-21T14:54:06.436Z");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
    }

    @Test
    public void test5480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5480");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.year();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.era();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.DateTimeField dateTimeField11 = localDate9.getField(1);
        java.lang.String str13 = dateTimeField11.getAsShortText((long) '4');
        int int14 = mutableDateTime1.get(dateTimeField11);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.secondOfDay();
        mutableDateTime1.addMinutes(53401899);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "gen" + "'", str13, "gen");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test5481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5481");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setHourOfDay(11);
        mutableDateTime0.addMonths(53221180);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = property5.set("Property[minuteOfHour]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[minuteOfHour]\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test5482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5482");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis(4);
        org.joda.time.Period period11 = new org.joda.time.Period();
        org.joda.time.Period period13 = period11.minusMonths((int) '#');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.withPeriodAdded((org.joda.time.ReadablePeriod) period13, 1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.era();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.withField(dateTimeFieldType22, (int) 'a');
        java.lang.String str25 = dateTimeFieldType22.getName();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType22.getRangeDurationType();
        org.joda.time.LocalDateTime.Property property27 = localDateTime15.property(dateTimeFieldType22);
        java.lang.String str28 = dateTimeFieldType22.toString();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "weekyear" + "'", str25, "weekyear");
        org.junit.Assert.assertNull(durationFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "weekyear" + "'", str28, "weekyear");
    }

    @Test
    public void test5483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5483");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.DateMidnight.Property property20 = dateMidnight9.weekyear();
        org.joda.time.DateMidnight dateMidnight22 = property20.addToCopy(17);
        org.joda.time.DateMidnight dateMidnight24 = property20.addToCopy(954);
        org.joda.time.DateMidnight dateMidnight25 = property20.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight26 = property20.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays(99);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight26.plusDays(2060);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
    }

    @Test
    public void test5484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5484");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.DateTime dateTime13 = localDate5.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYear(596);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.getDateTime();
        org.joda.time.DateTime dateTime18 = property16.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime20 = property16.addWrapFieldToCopy(0);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test5485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5485");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 98);
    }

    @Test
    public void test5486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5486");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getWeeksInWeekYear();
        int int4 = calendar1.getActualMinimum(4);
        calendar1.setLenient(true);
        calendar1.set(53461484, 53341304, 53521226, 459, 53281887, 53341809);
        calendar1.setTimeInMillis(1645455074903L);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455074903,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=51,SECOND=14,MILLISECOND=903,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test5487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5487");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 'a', dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate4, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight11, readableDuration12);
        org.joda.time.Duration duration14 = period8.toDurationTo((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.Instant instant15 = instant1.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        boolean boolean24 = localDate21.isSupported(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = localDate21.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = dateTimeField27.getType();
        boolean boolean29 = instant15.isSupported(dateTimeFieldType28);
        org.joda.time.Instant instant31 = instant15.minus((long) 53221394);
        org.joda.time.Chronology chronology32 = instant15.getChronology();
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) 53581640, chronology32);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(chronology32);
    }

    @Test
    public void test5488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5488");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        mutableDateTime1.setTime((long) 11);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.year();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight12, readableDuration13);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType16 = periodType15.withSecondsRemoved();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight9, (org.joda.time.ReadableInstant) dateMidnight12, periodType16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight9.year();
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.lang.String str20 = property18.getAsText(locale19);
        int int21 = property6.getMaximumShortTextLength(locale19);
        org.joda.time.MutableDateTime mutableDateTime23 = property6.add((long) 914);
        mutableDateTime23.setMillisOfDay(954);
        mutableDateTime23.setYear(36);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = property28.getField();
        java.lang.String str31 = dateTimeField29.getAsText((long) 54);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970" + "'", str20, "1970");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "54" + "'", str31, "54");
    }

    @Test
    public void test5489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5489");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusMillis(33);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plus(readableDuration9);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test5490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5490");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        org.joda.time.Chronology chronology10 = localDate6.getChronology();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 7, chronology10);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property19 = dateMidnight15.dayOfMonth();
        org.joda.time.Period period20 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod21 = period20.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight15.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight27.withField(dateTimeFieldType28, (int) 'a');
        boolean boolean31 = dateMidnight22.isSupported(dateTimeFieldType28);
        org.joda.time.YearMonthDay yearMonthDay32 = dateMidnight22.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone41 = dateMidnight40.getZone();
        int int43 = dateTimeZone41.getStandardOffset((long) 32769);
        java.util.Locale locale45 = java.util.Locale.US;
        java.lang.String str46 = dateTimeZone41.getShortName((long) 1970, locale45);
        org.joda.time.DateTime dateTime47 = dateMidnight35.toDateTime(dateTimeZone41);
        org.joda.time.Interval interval48 = yearMonthDay32.toInterval(dateTimeZone41);
        mutableDateTime12.setZone(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 'a', dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 'a', dateTimeZone54);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate52, (org.joda.time.ReadablePartial) localDate55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        boolean boolean58 = localDate55.isSupported(dateTimeFieldType57);
        org.joda.time.Chronology chronology59 = localDate55.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.minutes();
        mutableDateTime12.setChronology(chronology59);
        java.util.Locale locale63 = null;
        java.lang.String str64 = mutableDateTime12.toString("53281711", locale63);
        int int65 = mutableDateTime12.getMillisOfDay();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "53281711" + "'", str64, "53281711");
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 53646847 + "'", int65 == 53646847);
    }

    @Test
    public void test5491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5491");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears(13);
        int int3 = localDateTime2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str5 = dateTimeFieldType4.toString();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.property(dateTimeFieldType4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withWeekOfWeekyear(47);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMonths(45);
        int int13 = localDateTime12.getYear();
        int int14 = localDateTime12.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDayOfMonth(746);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 746 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "weekyear" + "'", str5, "weekyear");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2030 + "'", int13 == 2030);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
    }

    @Test
    public void test5492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5492");
        org.joda.time.Period period0 = new org.joda.time.Period();
        org.joda.time.Period period1 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod2 = period1.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate localDate13 = localDate7.withDayOfMonth(13);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        mutablePeriod2.setPeriod((long) 10, (-599990L), chronology14);
        mutablePeriod2.addSeconds(13);
        mutablePeriod2.clear();
        org.joda.time.Period period19 = period0.minus((org.joda.time.ReadablePeriod) mutablePeriod2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType21 = period0.getFieldType(953);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(period19);
    }

    @Test
    public void test5493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5493");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeField dateTimeField3 = localDate1.getField(1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        boolean boolean11 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate9);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property13 = localDate9.centuryOfEra();
        org.joda.time.LocalDate localDate14 = property13.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = dateMidnight26.getZone();
        org.joda.time.DateTime dateTime28 = localDate20.toDateTimeAtMidnight(dateTimeZone27);
        org.joda.time.Interval interval29 = localDate14.toInterval(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusMonths((int) (byte) 10);
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime38 = instant37.toMutableDateTime();
        mutableDateTime38.setSecondOfMinute((int) (byte) 1);
        int int41 = mutableDateTime38.getMillisOfDay();
        int int42 = mutableDateTime38.getHourOfDay();
        int int43 = dateMidnight36.compareTo((org.joda.time.ReadableInstant) mutableDateTime38);
        int int44 = dateMidnight36.getYearOfCentury();
        boolean boolean45 = interval29.isAfter((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Interval interval47 = interval29.withChronology(chronology46);
        org.joda.time.Period period48 = interval47.toPeriod();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = localDate51.toDateTimeAtCurrentTime(dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 'a', dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) 'a', dateTimeZone58);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate56, (org.joda.time.ReadablePartial) localDate59);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight(1L, dateTimeZone62);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight63, readableDuration64);
        org.joda.time.Duration duration66 = period60.toDurationTo((org.joda.time.ReadableInstant) dateMidnight63);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight(1L, dateTimeZone68);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight(1L, dateTimeZone71);
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight72, readableDuration73);
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType76 = periodType75.withSecondsRemoved();
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight69, (org.joda.time.ReadableInstant) dateMidnight72, periodType76);
        org.joda.time.PeriodType periodType78 = periodType76.withWeeksRemoved();
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableDuration) duration66, periodType76);
        org.joda.time.Interval interval80 = new org.joda.time.Interval(readableInstant49, (org.joda.time.ReadableDuration) duration66);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate(chronology81);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateTime dateTime84 = localDate82.toDateTimeAtCurrentTime(dateTimeZone83);
        org.joda.time.DateMidnight dateMidnight85 = dateTime84.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone87 = null;
        org.joda.time.DateMidnight dateMidnight88 = new org.joda.time.DateMidnight(1L, dateTimeZone87);
        org.joda.time.DateMidnight dateMidnight90 = dateMidnight88.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone91 = dateMidnight90.getZone();
        org.joda.time.DateTime dateTime92 = dateTime84.toDateTime(dateTimeZone91);
        org.joda.time.Interval interval93 = interval80.withEnd((org.joda.time.ReadableInstant) dateTime84);
        long long94 = interval93.getEndMillis();
        org.joda.time.Interval interval95 = interval93.toInterval();
        boolean boolean96 = interval47.overlaps((org.joda.time.ReadableInterval) interval93);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 53641064 + "'", int41 == 53641064);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 14 + "'", int42 == 14);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 60 + "'", int44 == 60);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(interval93);
// flaky:         org.junit.Assert.assertTrue("'" + long94 + "' != '" + 1645455247064L + "'", long94 == 1645455247064L);
        org.junit.Assert.assertNotNull(interval95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test5494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5494");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology2);
        int int4 = localDate3.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate3.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime6.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate11, (org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = localDate14.isSupported(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = localDate14.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.dayOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.dayOfMonth();
        org.joda.time.DateTime dateTime21 = dateTime8.toDateTime(chronology18);
        org.joda.time.DurationField durationField22 = chronology18.months();
        boolean boolean23 = durationFieldType1.isSupported(chronology18);
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(3193290900000L, chronology18);
        org.joda.time.DateTimeField dateTimeField25 = chronology18.secondOfMinute();
        long long28 = dateTimeField25.addWrapField((long) 898, 53521709);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 29898L + "'", long28 == 29898L);
    }

    @Test
    public void test5495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5495");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3);
        int int5 = period4.size();
        java.lang.String str6 = period4.toString();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.Period period9 = period4.withField(durationFieldType7, 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate localDate18 = localDate12.withDayOfMonth(13);
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        org.joda.time.DurationField durationField21 = durationFieldType7.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekyear();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.yearOfCentury();
        int int25 = dateTimeField23.getLeapAmount(1645455021449L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test5496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5496");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getWeeksInWeekYear();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromCalendarFields(calendar1);
        org.joda.time.YearMonthDay.Property property4 = yearMonthDay3.dayOfMonth();
        int int5 = property4.get();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455247168,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=54,SECOND=7,MILLISECOND=168,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21 + "'", int5 == 21);
    }

    @Test
    public void test5497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5497");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDayOfMonth((int) (short) 1);
        int int7 = dateMidnight4.getWeekyear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.plusDays((int) (short) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight14 = dateTime13.toDateMidnight();
        boolean boolean15 = dateMidnight9.equals((java.lang.Object) dateMidnight14);
        org.joda.time.DateMidnight.Property property16 = dateMidnight9.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight18 = property16.setCopy(53281119);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53281119 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test5498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5498");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        org.joda.time.DateTime dateTime17 = localDate9.toDateTimeAtMidnight(dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(dateTimeZone16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withZone(dateTimeZone16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 36);
        java.lang.Appendable appendable22 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter21.printTo(appendable22, (long) 1964);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
    }

    @Test
    public void test5499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5499");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((int) 'a');
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) 'a');
        boolean boolean18 = dateMidnight9.isSupported(dateTimeFieldType15);
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight9.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay21 = property20.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay23 = property20.addToCopy((-143999));
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight35.withField(dateTimeFieldType36, (int) 'a');
        org.joda.time.DateTime dateTime40 = dateTime30.withField(dateTimeFieldType36, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(1L, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone46 = dateMidnight45.getZone();
        org.joda.time.DateTime dateTime47 = dateTime40.withZoneRetainFields(dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight48 = localDate26.toDateMidnight(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = yearMonthDay23.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.DateTimeField[] dateTimeFieldArray50 = yearMonthDay23.getFields();
        org.joda.time.YearMonthDay.Property property51 = yearMonthDay23.year();
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay23.withYear(47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = yearMonthDay23.getFieldTypes();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldArray50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
    }

    @Test
    public void test5500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5500");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = localDate5.minusDays(100);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.centuries();
        boolean boolean13 = localDate5.isSupported(durationFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate5.weekOfWeekyear();
        org.joda.time.LocalDate localDate15 = property14.roundCeilingCopy();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
    }
}

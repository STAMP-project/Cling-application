import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest24 {

    public static boolean debug = false;

    @Test
    public void test12001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12001");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        boolean boolean40 = subclassRelationshipList39.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor41 = subclassRelationshipList39.listIterator();
        java.lang.Object[] objArray42 = subclassRelationshipList39.toArray();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition43 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition43.setItem("Not declared as a constructor");
        int int46 = stringPosition43.getPositionOnEndLine();
        int int47 = stringPosition43.getPositionOnStartLine();
        int int48 = stringPosition43.getPositionOnStartLine();
        stringPosition43.setItem("Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        int int51 = subclassRelationshipList39.lastIndexOf((java.lang.Object) "Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet52 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet53 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet54 = booleanLiteralSet52.union(booleanLiteralSet53);
        boolean boolean56 = booleanLiteralSet54.contains(true);
        int int57 = subclassRelationshipList39.lastIndexOf((java.lang.Object) booleanLiteralSet54);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipItor41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet52 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet52.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet53 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet53.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet54 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet54.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
    }

    @Test
    public void test12002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12002");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean14 = jSDocInfo13.isNoShadow();
        java.lang.String str16 = jSDocInfo13.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean17 = jSDocInfo13.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = jSDocInfo13.getParameterType("false");
        boolean boolean20 = jSDocInfo13.shouldPreserveTry();
        boolean boolean21 = jSDocInfo13.isInterface();
        java.util.Collection<java.lang.String> strCollection22 = jSDocInfo13.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo13.getTypedefType();
        node6.setJSDocInfo(jSDocInfo13);
        boolean boolean25 = node6.isFalse();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSTypeExpression19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(strCollection22);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test12003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12003");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        com.google.javascript.rhino.jstype.ObjectType objectType92 = enumType88.getImplicitPrototype();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope93 = objectType92.getParentScope();
        boolean boolean94 = objectType92.hasAnyTemplate();
        boolean boolean95 = objectType92.isResolved();
        objectType92.clearCachedValues();
        com.google.javascript.rhino.JSDocInfo jSDocInfo97 = objectType92.getJSDocInfo();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(objectType92);
        org.junit.Assert.assertNotNull(jSTypeStaticScope93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(jSDocInfo97);
    }

    @Test
    public void test12004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12004");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        node13.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node17 = node13.cloneTree();
        boolean boolean18 = node17.isTry();
        boolean boolean19 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node17);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test12005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12005");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(43, "Not declared as a constructor", (int) (byte) 100, (int) (byte) 10);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType5 = null;
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        java.lang.String str10 = node8.getSourceFileName();
        boolean boolean11 = node8.isLabel();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) 10, node15, node18, node21, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node25 = node21.getLastSibling();
        boolean boolean26 = node25.isDec();
        boolean boolean27 = node25.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship28 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType5, node8, node25);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection29 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node25);
        java.lang.String[] strArray34 = new java.lang.String[] { "Not declared as a constructor", "hi!", "Not declared as a constructor", "OR \n" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        node25.setDirectives((java.util.Set<java.lang.String>) strSet35);
        strSet35.clear();
        strSet35.clear();
        com.google.common.collect.ImmutableList.Builder<java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>> subclassRelationshipIterableBuilder40 = new com.google.common.collect.ImmutableList.Builder<java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>>();
        boolean boolean41 = strSet35.contains((java.lang.Object) subclassRelationshipIterableBuilder40);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet35);
        node4.removeProp(10);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable45 = node4.getAncestors();
        boolean boolean46 = node4.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 100.0f, 53, (int) 'a');
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(36, node51);
        boolean boolean53 = node4.hasChild(node52);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeCollection29);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(ancestorIterable45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test12006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12006");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a type name", 40, 3);
        boolean boolean4 = node3.isBlock();
        boolean boolean5 = node3.isDelProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test12007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12007");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.jstype.FunctionType functionType79 = parameterizedType78.getConstructor();
        boolean boolean80 = parameterizedType78.isConstructor();
        com.google.javascript.rhino.jstype.ObjectType objectType81 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType) parameterizedType78);
        com.google.javascript.rhino.jstype.FunctionType functionType82 = parameterizedType78.getConstructor();
        com.google.javascript.rhino.jstype.JSType jSType83 = parameterizedType78.collapseUnion();
        boolean boolean85 = parameterizedType78.isPropertyTypeDeclared("OR  [slash_v: 1]");
        com.google.javascript.rhino.jstype.ObjectType.Property property87 = parameterizedType78.getOwnSlot("InputId: hi!");
        com.google.javascript.rhino.Node node89 = parameterizedType78.getPropertyNode("OR  50");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(functionType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objectType81);
        org.junit.Assert.assertNull(functionType82);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(property87);
        org.junit.Assert.assertNull(node89);
    }

    @Test
    public void test12008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12008");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        boolean boolean80 = parameterizedType78.isInterface();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.getParameterType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = parameterizedType78.getOwnPropertyJSDocInfo("hi!");
        boolean boolean84 = parameterizedType78.isOrdinaryFunction();
        com.google.javascript.rhino.jstype.JSType jSType85 = parameterizedType78.getParameterType();
        boolean boolean86 = parameterizedType78.isOrdinaryFunction();
        boolean boolean88 = parameterizedType78.removeProperty("DIV  [length: 3]\n");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNull(jSDocInfo83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNull(jSType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test12009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12009");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.lang.String str69 = functionType62.getDisplayName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = null;
        functionType62.setPropertyJSDocInfo("Named type with empty name component", jSDocInfo71);
        com.google.javascript.rhino.jstype.JSType jSType73 = functionType62.restrictByNotNullOrUndefined();
        boolean boolean75 = functionType62.hasOwnProperty("enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        com.google.javascript.rhino.jstype.FunctionType functionType76 = functionType62.getOwnerFunction();
        int int77 = functionType62.getExtendedInterfacesCount();
        boolean boolean78 = functionType62.matchesInt32Context();
        boolean boolean79 = functionType62.matchesObjectContext();
        com.google.javascript.rhino.jstype.ObjectType.Property property81 = functionType62.getOwnSlot("Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        boolean boolean82 = functionType62.isFunctionPrototypeType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(jSType73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(functionType76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNull(property81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test12010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12010");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator40 = subclassRelationshipList39.spliterator();
        java.lang.Object[] objArray41 = subclassRelationshipList39.toArray();
        com.google.common.collect.UnmodifiableListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor42 = subclassRelationshipList39.listIterator();
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList43 = subclassRelationshipList39.asList();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean45 = jSDocInfo44.isNoCompile();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) 10, node49, node52, node55, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node59 = node55.getLastSibling();
        boolean boolean60 = node59.isGetterDef();
        boolean boolean61 = node59.isSyntheticBlock();
        jSDocInfo44.setAssociatedNode(node59);
        java.util.Set<java.lang.String> strSet63 = jSDocInfo44.getModifies();
        strSet63.clear();
        boolean boolean65 = subclassRelationshipList39.contains((java.lang.Object) strSet63);
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator66 = subclassRelationshipList39.spliterator();
        java.lang.Object[] objArray67 = subclassRelationshipList39.toArray();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator40);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertNotNull(subclassRelationshipItor42);
        org.junit.Assert.assertNotNull(subclassRelationshipList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator66);
        org.junit.Assert.assertNotNull(objArray67);
    }

    @Test
    public void test12011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12011");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean90 = enumType88.hasReferenceName();
        com.google.javascript.rhino.Node node91 = enumType88.getSource();
        boolean boolean92 = enumType88.canBeCalled();
        boolean boolean94 = enumType88.isPropertyInExterns("{901185568}");
        boolean boolean95 = enumType88.isEnumElementType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test12012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12012");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node1 = namePosition0.getItem();
        namePosition0.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList7 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition0);
        int int8 = namePosition0.getEndLine();
        int int9 = namePosition0.getEndLine();
        namePosition0.setPositionInformation(36, (int) (byte) -1, 54, 0);
        int int15 = namePosition0.getEndLine();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) 10, node19, node22, node25, 0, (int) (byte) 1);
        java.lang.String str29 = node19.getString();
        com.google.javascript.rhino.Node node31 = node19.getAncestor((int) (short) 10);
        int int32 = node19.getSourceOffset();
        int int33 = node19.getChildCount();
        boolean boolean34 = node19.isThrow();
        com.google.javascript.rhino.Node node35 = node19.getNext();
        namePosition0.setItem(node19);
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertNotNull(nodeSourcePositionList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4095 + "'", int8 == 4095);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4095 + "'", int9 == 4095);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 54 + "'", int15 == 54);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
    }

    @Test
    public void test12013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12013");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isNoObjectType();
        boolean boolean69 = functionType62.hasDisplayName();
        boolean boolean70 = functionType62.isUnionType();
        int int71 = functionType62.getMinArguments();
        com.google.common.base.Predicate<com.google.javascript.rhino.jstype.JSType> jSTypePredicate72 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean73 = functionType62.setValidator(jSTypePredicate72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3 + "'", int71 == 3);
    }

    @Test
    public void test12014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12014");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean64 = jSDocInfo63.isNoCompile();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) 10, node68, node71, node74, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node78 = node74.getLastSibling();
        boolean boolean79 = node78.isGetterDef();
        boolean boolean80 = node78.isSyntheticBlock();
        jSDocInfo63.setAssociatedNode(node78);
        java.util.Collection<java.lang.String> strCollection82 = jSDocInfo63.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList83 = jSDocInfo63.getExtendedInterfaces();
        functionType62.setJSDocInfo(jSDocInfo63);
        boolean boolean85 = functionType62.hasAnyTemplate();
        boolean boolean86 = functionType62.isEmptyType();
        boolean boolean87 = functionType62.canBeCalled();
        boolean boolean88 = functionType62.isString();
        boolean boolean89 = functionType62.isEnumElementType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(strCollection82);
        org.junit.Assert.assertNotNull(jSTypeExpressionList83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test12015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12015");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = null;
        parameterizedType78.setPropertyJSDocInfo("hi!", jSDocInfo83);
        boolean boolean85 = parameterizedType78.isCheckedUnknownType();
        boolean boolean86 = parameterizedType78.isOrdinaryFunction();
        com.google.javascript.rhino.jstype.EnumType enumType87 = parameterizedType78.toMaybeEnumType();
        boolean boolean88 = parameterizedType78.isConstructor();
        boolean boolean89 = parameterizedType78.matchesNumberContext();
        boolean boolean90 = parameterizedType78.isNoType();
        com.google.javascript.rhino.jstype.JSType jSType92 = parameterizedType78.getPropertyType("enum{");
        java.lang.String str93 = parameterizedType78.getDisplayName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNull(enumType87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(jSType92);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test12016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12016");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        int int69 = functionType62.getExtendedInterfacesCount();
        functionType62.clearResolved();
        boolean boolean72 = functionType62.removeProperty("Not declared as a type name");
        com.google.javascript.rhino.jstype.JSType jSType73 = functionType62.getReturnType();
        int int74 = functionType62.getPropertiesCount();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(jSType73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test12017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12017");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean90 = enumType88.hasReferenceName();
        com.google.javascript.rhino.Node node91 = enumType88.getSource();
        com.google.javascript.rhino.JSDocInfo jSDocInfo93 = enumType88.getOwnPropertyJSDocInfo("Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n");
        boolean boolean94 = enumType88.isOrdinaryFunction();
        boolean boolean95 = enumType88.canBeCalled();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNull(node91);
        org.junit.Assert.assertNull(jSDocInfo93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test12018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12018");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 10, node22, node25, node28, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = node10.useSourceInfoIfMissingFromForTree(node31);
        com.google.javascript.rhino.Node node34 = node10.getAncestor(53);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(2);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType37 = null;
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        int int41 = node40.getCharno();
        java.lang.String str42 = node40.getSourceFileName();
        boolean boolean43 = node40.isLabel();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) 10, node47, node50, node53, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node57 = node53.getLastSibling();
        boolean boolean58 = node57.isDec();
        boolean boolean59 = node57.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship60 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType37, node40, node57);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection61 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node57);
        java.lang.String[] strArray66 = new java.lang.String[] { "Not declared as a constructor", "hi!", "Not declared as a constructor", "OR \n" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        node57.setDirectives((java.util.Set<java.lang.String>) strSet67);
        strSet67.clear();
        node36.setDirectives((java.util.Set<java.lang.String>) strSet67);
        com.google.javascript.rhino.Node node72 = node10.useSourceInfoIfMissingFromForTree(node36);
        boolean boolean73 = node10.isLocalResultCall();
        node10.setString("GETELEM false");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeCollection61);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test12019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12019");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        java.lang.String str14 = node4.getString();
        boolean boolean15 = node4.isContinue();
        boolean boolean16 = node4.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node4.setStaticSourceFile(staticSourceFile17);
        java.lang.Object obj20 = node4.getProp(37);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean24 = node23.isFunction();
        node4.addChildToFront(node23);
        java.lang.String str26 = com.google.javascript.jscomp.NodeUtil.getSourceName(node23);
        node23.setSourceEncodedPositionForTree(48);
        boolean boolean29 = node23.isExprResult();
        com.google.javascript.rhino.Node node30 = node23.getFirstChild();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) 10, node34, node37, node40, 0, (int) (byte) 1);
        java.lang.String str44 = node34.getString();
        boolean boolean45 = node34.isContinue();
        boolean boolean46 = node34.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = null;
        node34.setStaticSourceFile(staticSourceFile47);
        java.lang.Object obj50 = node34.getProp(37);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean54 = node53.isFunction();
        node34.addChildToFront(node53);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) 10, node59, node62, node65, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node69 = node65.getLastSibling();
        boolean boolean70 = node69.isDec();
        boolean boolean71 = node69.isOr();
        node69.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node74 = node53.srcref(node69);
        boolean boolean75 = node53.isObjectLit();
        boolean boolean76 = node53.isComma();
        boolean boolean77 = node53.isTrue();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean80 = node79.isTrue();
        node79.setQuotedString();
        node79.detachChildren();
        boolean boolean83 = node53.isEquivalentTo(node79);
        int int84 = node53.getCharno();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(24, node30, node53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test12020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12020");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        boolean boolean40 = subclassRelationshipList39.isEmpty();
        boolean boolean41 = subclassRelationshipList39.isEmpty();
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList42 = subclassRelationshipList39.reverse();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship44 = subclassRelationshipList42.get(14);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (14) must be less than size (2)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipList42);
    }

    @Test
    public void test12021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12021");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        boolean boolean19 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node10);
        boolean boolean20 = node10.isDo();
        boolean boolean21 = node10.isScript();
        boolean boolean23 = node10.getBooleanProp(44);
        boolean boolean24 = node10.isDefaultCase();
        boolean boolean25 = node10.isSwitch();
        boolean boolean26 = node10.isQualifiedName();
        boolean boolean27 = node10.isCatch();
        boolean boolean28 = node10.isCatch();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test12022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12022");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        node13.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node17 = node13.cloneTree();
        boolean boolean18 = node17.isThrow();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 10, node22, node25, node28, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = node28.getLastSibling();
        boolean boolean33 = node32.isDec();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) 10, node37, node40, node43, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node47 = node43.getLastSibling();
        boolean boolean48 = node47.isDec();
        boolean boolean49 = node47.isOr();
        node47.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node53 = node47.getAncestor(2);
        java.lang.String str54 = node32.checkTreeEquals(node47);
        boolean boolean55 = node47.isAssign();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("false");
        com.google.javascript.rhino.Node node58 = node47.clonePropsFrom(node57);
        com.google.javascript.rhino.Node node59 = node58.getParent();
        java.lang.String str63 = node58.toString(false, true, false);
        boolean boolean64 = node58.isInstanceOf();
        boolean boolean65 = node58.isRegExp();
        // The following exception was thrown during execution in test generation
        try {
            node17.addChildrenToBack(node58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "OR " + "'", str63, "OR ");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test12023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12023");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.util.Set<java.lang.String> strSet69 = functionType62.getOwnPropertyNames();
        java.lang.Object obj70 = null;
        boolean boolean71 = strSet69.equals(obj70);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test12024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12024");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        java.lang.String str14 = node4.getString();
        boolean boolean15 = node4.isReturn();
        com.google.javascript.rhino.Node node16 = node4.detachFromParent();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(39, node16);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = new com.google.javascript.rhino.JSTypeExpression(node16, "(Not declared as a constructor)");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec21 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("(Not declared as a constructor)");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType22 = null;
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) 10, node26, node29, node32, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        int int39 = node38.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship40 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType22, node32, node38);
        int int42 = node32.getIntProp((int) (byte) 0);
        boolean boolean43 = node32.isWhile();
        boolean boolean44 = node32.isUnscopedQualifiedName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = null;
        com.google.javascript.rhino.jstype.JSType jSType46 = assertionFunctionSpec21.getAssertedType(node32, jSTypeRegistry45);
        boolean boolean47 = jSTypeExpression19.equals((java.lang.Object) assertionFunctionSpec21);
        java.lang.String str48 = assertionFunctionSpec21.getFunctionName();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1));
        boolean boolean51 = node50.isTypeOf();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        com.google.javascript.rhino.jstype.JSType jSType55 = assertionFunctionSpec21.getAssertedType(node50, jSTypeRegistry54);
        boolean boolean56 = node50.isCall();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        int int60 = node59.getCharno();
        boolean boolean61 = node59.isNull();
        boolean boolean62 = node59.isString();
        boolean boolean63 = node50.hasChild(node59);
        boolean boolean64 = node59.isFromExterns();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(Not declared as a constructor)" + "'", str48, "(Not declared as a constructor)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test12025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12025");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        boolean boolean19 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node10);
        boolean boolean20 = node10.isDo();
        boolean boolean21 = node10.isThis();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = new com.google.javascript.rhino.JSTypeExpression(node10, "false");
        boolean boolean24 = jSTypeExpression23.isOptionalArg();
        boolean boolean25 = jSTypeExpression23.isVarArgs();
        boolean boolean26 = jSTypeExpression23.isOptionalArg();
        com.google.javascript.rhino.Node node27 = jSTypeExpression23.getRoot();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
    }

    @Test
    public void test12026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12026");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean4 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("false");
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        boolean boolean8 = jSDocInfo0.isInterface();
        com.google.javascript.rhino.Node node9 = jSDocInfo0.getAssociatedNode();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getSuppressions();
        boolean boolean11 = jSDocInfo0.hasType();
        java.lang.String str13 = jSDocInfo0.getDescriptionForParameter("false");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test12027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12027");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        boolean boolean94 = parameterizedType78.isInterface();
        java.lang.Iterable iterable95 = parameterizedType78.getCtorImplementedInterfaces();
        java.util.Set set96 = parameterizedType78.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.FunctionType functionType97 = parameterizedType78.toMaybeFunctionType();
        boolean boolean98 = parameterizedType78.isObject();
        boolean boolean99 = parameterizedType78.isNoType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(iterable95);
        org.junit.Assert.assertNotNull(set96);
        org.junit.Assert.assertNotNull(functionType97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test12028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12028");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        boolean boolean93 = enumType88.isPropertyInExterns("Function");
        int int94 = enumType88.getPropertiesCount();
        boolean boolean95 = enumType88.hasCachedValues();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType96 = enumType88.getElementsType();
        boolean boolean97 = enumElementType96.matchesObjectContext();
        com.google.javascript.rhino.jstype.JSType jSType98 = enumElementType96.autoboxesTo();
        boolean boolean99 = enumElementType96.isNullable();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(enumElementType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNull(jSType98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test12029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12029");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.jstype.JSType jSType13 = jSTypeRegistry2.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14, false);
        boolean boolean18 = jSTypeRegistry16.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22, false);
        boolean boolean26 = jSTypeRegistry24.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray27 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList28 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList28, jSTypeArray27);
        com.google.javascript.rhino.Node node30 = jSTypeRegistry24.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList28);
        com.google.javascript.rhino.jstype.JSType jSType35 = jSTypeRegistry24.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36, false);
        boolean boolean40 = jSTypeRegistry38.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray41 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList42 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList42, jSTypeArray41);
        com.google.javascript.rhino.Node node44 = jSTypeRegistry38.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList42);
        com.google.javascript.rhino.jstype.JSType jSType49 = jSTypeRegistry38.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50, false);
        boolean boolean54 = jSTypeRegistry52.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray55 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList56 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList56, jSTypeArray55);
        com.google.javascript.rhino.Node node58 = jSTypeRegistry52.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList56);
        com.google.javascript.rhino.jstype.JSType jSType63 = jSTypeRegistry52.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType64 = jSType63.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65, false);
        boolean boolean69 = jSTypeRegistry67.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray70 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList71 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList71, jSTypeArray70);
        com.google.javascript.rhino.Node node73 = jSTypeRegistry67.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList71);
        com.google.javascript.rhino.jstype.JSType jSType78 = jSTypeRegistry67.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType79 = jSType78.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray80 = new com.google.javascript.rhino.jstype.JSType[] { jSType49, jSType64, jSType79 };
        com.google.javascript.rhino.jstype.FunctionType functionType81 = jSTypeRegistry21.createFunctionType(jSType35, jSTypeArray80);
        boolean boolean82 = functionType81.matchesNumberContext();
        boolean boolean84 = functionType81.hasProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry16.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType81);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray86 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType87 = jSTypeRegistry16.createUnionType(jSTypeArray86);
        com.google.javascript.rhino.Node node88 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray86);
        com.google.javascript.rhino.jstype.JSType jSType89 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType90 = jSTypeRegistry2.createNullableType(jSType89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(jSType35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSTypeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(jSType49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSTypeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(jSType63);
        org.junit.Assert.assertNull(jSType64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(jSTypeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(jSType78);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(jSTypeArray80);
        org.junit.Assert.assertNotNull(functionType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNotNull(jSTypeArray86);
        org.junit.Assert.assertNotNull(jSType87);
        org.junit.Assert.assertNotNull(node88);
    }

    @Test
    public void test12030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12030");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType jSType6 = jSTypeRegistry2.getType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter7 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        boolean boolean12 = jSTypeRegistry10.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray13 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList14 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList14, jSTypeArray13);
        com.google.javascript.rhino.Node node16 = jSTypeRegistry10.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList14);
        com.google.javascript.rhino.jstype.JSType jSType21 = jSTypeRegistry10.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry10.resetForTypeCheck();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = com.google.common.collect.ImmutableList.of();
        jSTypeRegistry10.setTemplateTypeNames((java.util.List<java.lang.String>) strList23);
        com.google.javascript.rhino.jstype.JSTypeNative[] jSTypeNativeArray25 = new com.google.javascript.rhino.jstype.JSTypeNative[] {};
        com.google.javascript.rhino.jstype.JSType jSType26 = jSTypeRegistry10.createUnionType(jSTypeNativeArray25);
        com.google.javascript.rhino.jstype.JSType jSType28 = jSTypeRegistry10.getType("(OR  0)");
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        boolean boolean33 = jSTypeRegistry31.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray34 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList35 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList35, jSTypeArray34);
        com.google.javascript.rhino.Node node37 = jSTypeRegistry31.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList35);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSTypeRegistry31.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry31.resetForTypeCheck();
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of();
        jSTypeRegistry31.setTemplateTypeNames((java.util.List<java.lang.String>) strList44);
        com.google.javascript.rhino.jstype.JSTypeNative[] jSTypeNativeArray46 = new com.google.javascript.rhino.jstype.JSTypeNative[] {};
        com.google.javascript.rhino.jstype.JSType jSType47 = jSTypeRegistry31.createUnionType(jSTypeNativeArray46);
        com.google.javascript.rhino.jstype.JSType jSType48 = jSTypeRegistry10.createUnionType(jSTypeNativeArray46);
        com.google.javascript.rhino.jstype.JSType jSType49 = jSTypeRegistry2.createUnionType(jSTypeNativeArray46);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = jSType49.toObjectType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNull(errorReporter7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(jSTypeNativeArray25);
        org.junit.Assert.assertNotNull(jSType26);
        org.junit.Assert.assertNull(jSType28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSTypeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(jSTypeNativeArray46);
        org.junit.Assert.assertNotNull(jSType47);
        org.junit.Assert.assertNotNull(jSType48);
        org.junit.Assert.assertNotNull(jSType49);
        org.junit.Assert.assertNotNull(objectType50);
    }

    @Test
    public void test12031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12031");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean2 = node1.isTrue();
        node1.setQuotedString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 100.0f, 53, (int) 'a');
        node1.addChildToFront(node7);
        java.lang.String str9 = node7.getSourceFileName();
        com.google.javascript.rhino.Node node10 = node7.removeChildren();
        boolean boolean11 = node7.isFalse();
        com.google.javascript.rhino.Node node12 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node13 = node7.srcref(node12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test12032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12032");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        com.google.javascript.rhino.JSDocInfo jSDocInfo90 = enumType88.getOwnPropertyJSDocInfo("Node tree inequality:\nTree1:\nEXPR_RESULT\n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: EXPR_RESULT\n    OR \n\n\nSubtree2: OR \n");
        com.google.javascript.rhino.jstype.FunctionType functionType91 = enumType88.getConstructor();
        java.lang.Iterable iterable92 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumType88.matchesStringContext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo96 = enumType88.getOwnPropertyJSDocInfo("OR  [source_file: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)]");
        java.util.Set set97 = enumType88.getOwnPropertyNames();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertNull(jSDocInfo90);
        org.junit.Assert.assertNull(functionType91);
        org.junit.Assert.assertNotNull(iterable92);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNull(jSDocInfo96);
        org.junit.Assert.assertNotNull(set97);
    }

    @Test
    public void test12033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12033");
        boolean boolean1 = com.google.javascript.jscomp.NodeUtil.isValidQualifiedName("{2104272530}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test12034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12034");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable10 = jSTypeRegistry2.getTypesWithProperty("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSTypeNative[] jSTypeNativeArray20 = new com.google.javascript.rhino.jstype.JSTypeNative[] {};
        com.google.javascript.rhino.jstype.JSType jSType21 = jSTypeRegistry13.createUnionType(jSTypeNativeArray20);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry2.createUnionType(jSTypeNativeArray20);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSType22.getRestrictedTypeGivenToBooleanOutcome(false);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType25 = jSType24.toMaybeEnumElementType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSTypeIterable10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSTypeNativeArray20);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertNull(enumElementType25);
    }

    @Test
    public void test12035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12035");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        java.lang.Object[] objArray40 = subclassRelationshipList38.toArray();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType41 = null;
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) 10, node45, node48, node51, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        int int58 = node57.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship59 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType41, node51, node57);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType60 = null;
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 10, node64, node67, node70, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString(100, "");
        int int77 = node76.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship78 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType60, node70, node76);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList79 = com.google.common.collect.ImmutableList.of(subclassRelationship59, subclassRelationship78);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList80 = subclassRelationshipList79.asList();
        boolean boolean81 = subclassRelationshipList38.containsAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList80);
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor82 = subclassRelationshipList38.iterator();
        boolean boolean83 = subclassRelationshipItor82.hasNext();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList79);
        org.junit.Assert.assertNotNull(subclassRelationshipList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipItor82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test12036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12036");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean4 = jSDocInfo0.isNoTypeCheck();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        jSDocInfo0.setDeprecated(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
    }

    @Test
    public void test12037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12037");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (byte) 0, 4095, 0);
        com.google.javascript.rhino.Node node4 = node3.getParent();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test12038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12038");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable69 = functionType62.getCtorExtendedInterfaces();
        boolean boolean70 = functionType62.isInterface();
        boolean boolean72 = functionType62.isPropertyTypeInferred("Not declared as a type name");
        com.google.javascript.rhino.jstype.ObjectType.Property property74 = functionType62.getSlot("Not declared as a type name");
        com.google.javascript.rhino.jstype.JSType jSType75 = functionType62.getTypeOfThis();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable76 = functionType62.getExtendedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertNotNull(objectTypeIterable69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(property74);
        org.junit.Assert.assertNotNull(jSType75);
        org.junit.Assert.assertNotNull(objectTypeIterable76);
    }

    @Test
    public void test12039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12039");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("Not declared as a constructor");
        java.lang.String str2 = inputId1.toString();
        com.google.javascript.rhino.JSDocInfo.Marker marker3 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition4 = marker3.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = marker3.getType();
        boolean boolean6 = inputId1.equals((java.lang.Object) marker3);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node20 = node16.getLastSibling();
        boolean boolean21 = node20.isDec();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) 10, node25, node28, node31, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = node31.getLastSibling();
        boolean boolean36 = node35.isDec();
        boolean boolean37 = node35.isOr();
        node35.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node41 = node35.getAncestor(2);
        java.lang.String str42 = node20.checkTreeEquals(node35);
        boolean boolean43 = node35.isInstanceOf();
        boolean boolean44 = node35.isInstanceOf();
        boolean boolean45 = node35.isTypeOf();
        int int46 = node35.getSourcePosition();
        boolean boolean47 = node35.isString();
        boolean boolean48 = node35.isComma();
        boolean boolean49 = inputId1.equals((java.lang.Object) boolean48);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "InputId: Not declared as a constructor" + "'", str2, "InputId: Not declared as a constructor");
        org.junit.Assert.assertNull(nodeSourcePosition4);
        org.junit.Assert.assertNull(typePosition5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test12040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12040");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        boolean boolean69 = functionType62.isDateType();
        com.google.javascript.rhino.ErrorReporter errorReporter70 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry72 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter70, false);
        boolean boolean74 = jSTypeRegistry72.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray75 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList76 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList76, jSTypeArray75);
        com.google.javascript.rhino.Node node78 = jSTypeRegistry72.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList76);
        com.google.javascript.rhino.jstype.JSType jSType83 = jSTypeRegistry72.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry72.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray85 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType86 = jSTypeRegistry72.createUnionType(jSTypeArray85);
        boolean boolean87 = functionType62.canTestForShallowEqualityWith(jSType86);
        com.google.javascript.rhino.Node node89 = functionType62.getPropertyNode("(java.io.IOException: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n))");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertNotNull(jSTypeArray85);
        org.junit.Assert.assertNotNull(jSType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNull(node89);
    }

    @Test
    public void test12041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12041");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean64 = jSDocInfo63.isNoCompile();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) 10, node68, node71, node74, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node78 = node74.getLastSibling();
        boolean boolean79 = node78.isGetterDef();
        boolean boolean80 = node78.isSyntheticBlock();
        jSDocInfo63.setAssociatedNode(node78);
        java.util.Collection<java.lang.String> strCollection82 = jSDocInfo63.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList83 = jSDocInfo63.getExtendedInterfaces();
        functionType62.setJSDocInfo(jSDocInfo63);
        boolean boolean85 = functionType62.hasAnyTemplate();
        boolean boolean86 = functionType62.matchesStringContext();
        boolean boolean87 = functionType62.isObject();
        boolean boolean89 = functionType62.hasOwnProperty("(Node tree inequality:\nTree1:\nBITXOR 0\n    OR \n    OR \n\n\nTree2:\nSTRING hi! 100 [empty_block: 1]\n\n\nSubtree1: BITXOR 0\n    OR \n    OR \n\n\nSubtree2: STRING hi! 100 [empty_block: 1]\n)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(strCollection82);
        org.junit.Assert.assertNotNull(jSTypeExpressionList83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test12042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12042");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        java.lang.String str4 = node2.getSourceFileName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        int int8 = node7.getCharno();
        boolean boolean9 = node7.isExprResult();
        node2.addChildToFront(node7);
        java.lang.String str11 = node2.getSourceFileName();
        boolean boolean13 = node2.getBooleanProp(4095);
        boolean boolean14 = node2.isAssign();
        boolean boolean15 = node2.hasChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test12043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12043");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getParentScope();
        com.google.common.base.Predicate<com.google.javascript.rhino.jstype.JSType> jSTypePredicate70 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean71 = functionType62.setValidator(jSTypePredicate70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
    }

    @Test
    public void test12044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12044");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        boolean boolean15 = node13.isNot();
        java.lang.String str16 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node13);
        boolean boolean17 = node13.isNumber();
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative19 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec20 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("STRING hi! 100\n", jSTypeNative19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        java.lang.String str34 = node24.getString();
        boolean boolean35 = node24.isContinue();
        boolean boolean36 = node24.isCall();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType37 = null;
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) 10, node41, node44, node47, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        int int54 = node53.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship55 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType37, node47, node53);
        com.google.javascript.rhino.Node node56 = node24.copyInformationFromForTree(node53);
        java.lang.String str57 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node56);
        com.google.javascript.rhino.Node node58 = assertionFunctionSpec20.getAssertedParam(node56);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 1, (int) (short) 100, 31);
        com.google.javascript.rhino.jstype.JSType jSType63 = node62.getJSType();
        node62.setVarArgs(true);
        com.google.javascript.rhino.Node node66 = null;
        node56.addChildAfter(node62, node66);
        com.google.javascript.rhino.Node node68 = node56.getNext();
        com.google.javascript.rhino.Node node69 = node13.useSourceInfoFrom(node68);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(jSType63);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
    }

    @Test
    public void test12045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12045");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        boolean boolean6 = jSTypeRegistry2.isForwardDeclaredType("(?)");
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        boolean boolean11 = jSTypeRegistry9.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry9.setResolveMode(resolveMode12);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable18 = jSTypeRegistry16.getTypesWithProperty("");
        boolean boolean19 = jSTypeRegistry16.shouldTolerateUndefinedValues();
        jSTypeRegistry16.clearNamedTypes();
        jSTypeRegistry16.clearTemplateTypeNames();
        jSTypeRegistry16.identifyNonNullableName("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable28 = jSTypeRegistry26.getTypesWithProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable30 = jSTypeRegistry26.getEachReferenceTypeWithProperty("Not declared as a type name");
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.Node node40 = jSTypeRegistry26.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.Node node41 = jSTypeRegistry16.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.Node node42 = jSTypeRegistry9.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.Node node43 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSTypeRegistry2.getType("(STRING OR \n)");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(jSTypeIterable18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable28);
        org.junit.Assert.assertNotNull(objectTypeIterable30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(jSType45);
    }

    @Test
    public void test12046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12046");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        boolean boolean80 = parameterizedType78.isInterface();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.getParameterType();
        boolean boolean82 = parameterizedType78.isOrdinaryFunction();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType83 = parameterizedType78.toMaybeParameterizedType();
        com.google.javascript.rhino.Node node84 = parameterizedType83.getRootNode();
        boolean boolean85 = parameterizedType83.isVoidType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType86 = parameterizedType83.toMaybeParameterizedType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(parameterizedType83);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(parameterizedType86);
    }

    @Test
    public void test12047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12047");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType1 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        java.lang.String str15 = node5.getString();
        boolean boolean16 = node5.isContinue();
        boolean boolean17 = node5.isCall();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType18 = null;
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 10, node22, node25, node28, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        int int35 = node34.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship36 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType18, node28, node34);
        com.google.javascript.rhino.Node node37 = node5.copyInformationFromForTree(node34);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) 10, node41, node44, node47, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node51 = node47.getLastSibling();
        boolean boolean52 = node51.isDec();
        node51.setIsSyntheticBlock(true);
        com.google.javascript.rhino.InputId inputId55 = node51.getInputId();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship56 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType1, node37, node51);
        boolean boolean57 = node51.isAdd();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        int int61 = node60.getCharno();
        boolean boolean62 = node60.isExprResult();
        int int63 = node60.getChildCount();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        int int67 = node66.getCharno();
        boolean boolean68 = node66.isAssignAdd();
        boolean boolean69 = node66.isNot();
        java.lang.String str70 = node66.toString();
        boolean boolean71 = node66.isVarArgs();
        boolean boolean72 = node60.isEquivalentToTyped(node66);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (byte) 10, node76, node79, node82, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node86 = node82.getLastSibling();
        boolean boolean87 = node86.isDebugger();
        boolean boolean88 = node86.isNull();
        com.google.javascript.rhino.Node node89 = node60.clonePropsFrom(node86);
        int int90 = node86.getCharno();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((int) (short) 10, node51, node86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + subclassType1 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType1.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(inputId55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "OR " + "'", str70, "OR ");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
    }

    @Test
    public void test12048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12048");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("false");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        java.lang.String str15 = node5.getString();
        boolean boolean16 = node5.isReturn();
        com.google.javascript.rhino.Node node17 = assertionFunctionSpec1.getAssertedParam(node5);
        java.lang.String str18 = assertionFunctionSpec1.getFunctionName();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        java.lang.String str33 = node23.getString();
        boolean boolean34 = node23.isContinue();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        int int38 = node37.getCharno();
        boolean boolean39 = node37.isAssignAdd();
        node37.putBooleanProp(10, false);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship43 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node23, node37);
        com.google.javascript.rhino.Node node44 = com.google.javascript.jscomp.NodeUtil.newExpr(node37);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection45 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node44);
        com.google.javascript.rhino.Node node46 = node44.getLastChild();
        node46.setSourceEncodedPositionForTree(36);
        com.google.javascript.rhino.Node node49 = assertionFunctionSpec1.getAssertedParam(node46);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "false" + "'", str18, "false");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(nodeCollection45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
    }

    @Test
    public void test12049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12049");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        boolean boolean80 = parameterizedType78.isInterface();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.getParameterType();
        boolean boolean82 = parameterizedType78.isOrdinaryFunction();
        boolean boolean84 = parameterizedType78.isPropertyTypeInferred("Function");
        boolean boolean85 = parameterizedType78.isNoObjectType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType86 = parameterizedType78.toMaybeEnumElementType();
        int int87 = parameterizedType78.getPropertiesCount();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(enumElementType86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test12050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12050");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        java.lang.String str10 = node8.getSourceFileName();
        com.google.javascript.rhino.Node node11 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean12 = node11.isNE();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        boolean boolean20 = jSTypeRegistry18.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry18.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        com.google.javascript.rhino.jstype.JSType jSType29 = jSTypeRegistry18.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        boolean boolean34 = jSTypeRegistry32.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry32.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry32.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44, false);
        boolean boolean48 = jSTypeRegistry46.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList50, jSTypeArray49);
        com.google.javascript.rhino.Node node52 = jSTypeRegistry46.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList50);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry46.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSType57.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        boolean boolean63 = jSTypeRegistry61.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList65, jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry61.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList65);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSTypeRegistry61.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSType72.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] { jSType43, jSType58, jSType73 };
        com.google.javascript.rhino.jstype.FunctionType functionType75 = jSTypeRegistry15.createFunctionType(jSType29, jSTypeArray74);
        boolean boolean76 = functionType75.matchesNumberContext();
        boolean boolean78 = functionType75.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable79 = functionType75.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node81 = functionType75.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType82 = functionType75.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType83 = functionType75.getImplicitPrototype();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable84 = functionType75.getAllImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry2.createObjectType("false", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType75);
        com.google.javascript.rhino.jstype.TemplateType templateType86 = functionType75.toMaybeTemplateType();
        boolean boolean87 = functionType75.isBooleanObjectType();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType89 = functionType75.getTopMostDefiningType("OR  0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertNull(jSType58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable79);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertNotNull(objectType83);
        org.junit.Assert.assertNotNull(objectTypeIterable84);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNull(templateType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test12051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12051");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING (Function)");
        node1.setSourceEncodedPositionForTree(37);
        boolean boolean4 = node1.isString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test12052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12052");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getParentScope();
        boolean boolean71 = functionType62.isPropertyTypeDeclared("OR \n");
        functionType62.clearCachedValues();
        boolean boolean73 = functionType62.hasReferenceName();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test12053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12053");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        boolean boolean19 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node10);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType20 = null;
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        int int37 = node36.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship38 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType20, node30, node36);
        com.google.javascript.rhino.Node node39 = node30.removeChildren();
        com.google.javascript.rhino.Node node40 = node10.useSourceInfoFrom(node30);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        int int44 = node43.getCharno();
        boolean boolean45 = node43.isAssignAdd();
        boolean boolean46 = node43.isNot();
        java.lang.String str47 = node43.toString();
        com.google.javascript.rhino.Node node48 = com.google.javascript.jscomp.NodeUtil.newExpr(node43);
        node30.addChildToFront(node48);
        boolean boolean50 = node30.wasEmptyNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile51 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node30);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "OR " + "'", str47, "OR ");
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(staticSourceFile51);
    }

    @Test
    public void test12054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12054");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        int int69 = functionType62.getExtendedInterfacesCount();
        functionType62.clearResolved();
        boolean boolean72 = functionType62.removeProperty("Not declared as a type name");
        boolean boolean73 = functionType62.matchesObjectContext();
        java.lang.String str74 = functionType62.getReferenceName();
        com.google.javascript.rhino.Node node76 = functionType62.getPropertyNode("Node tree inequality:\nTree1:\nERROR\n\n\nTree2:\nOR \n\n\nSubtree1: ERROR\n\n\nSubtree2: OR \n");
        boolean boolean78 = functionType62.isPropertyTypeDeclared("enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test12055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12055");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        boolean boolean4 = node2.isExprResult();
        int int5 = node2.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        boolean boolean10 = node8.isAssignAdd();
        boolean boolean11 = node8.isNot();
        java.lang.String str12 = node8.toString();
        boolean boolean13 = node8.isVarArgs();
        boolean boolean14 = node2.isEquivalentToTyped(node8);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 10, node18, node21, node24, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node28 = node24.getLastSibling();
        boolean boolean29 = node28.isDebugger();
        boolean boolean30 = node28.isNull();
        com.google.javascript.rhino.Node node31 = node2.clonePropsFrom(node28);
        boolean boolean32 = node2.isRegExp();
        boolean boolean33 = node2.isString();
        int int34 = node2.getChildCount();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(31, 0, (int) (short) 100);
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean40 = node2.isCase();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR " + "'", str12, "OR ");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test12056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12056");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        boolean boolean82 = parameterizedType78.isObject();
        com.google.javascript.rhino.jstype.TemplateType templateType83 = parameterizedType78.toMaybeTemplateType();
        boolean boolean84 = parameterizedType78.isUnknownType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNull(templateType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test12057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12057");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 10, node22, node25, node28, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = node10.useSourceInfoIfMissingFromForTree(node31);
        com.google.javascript.rhino.Node node34 = node10.getAncestor(53);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(2);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType37 = null;
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        int int41 = node40.getCharno();
        java.lang.String str42 = node40.getSourceFileName();
        boolean boolean43 = node40.isLabel();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) 10, node47, node50, node53, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node57 = node53.getLastSibling();
        boolean boolean58 = node57.isDec();
        boolean boolean59 = node57.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship60 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType37, node40, node57);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection61 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node57);
        java.lang.String[] strArray66 = new java.lang.String[] { "Not declared as a constructor", "hi!", "Not declared as a constructor", "OR \n" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        node57.setDirectives((java.util.Set<java.lang.String>) strSet67);
        strSet67.clear();
        node36.setDirectives((java.util.Set<java.lang.String>) strSet67);
        com.google.javascript.rhino.Node node72 = node10.useSourceInfoIfMissingFromForTree(node36);
        java.lang.String str73 = node10.toString();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable74 = node10.siblings();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeCollection61);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "OR " + "'", str73, "OR ");
        org.junit.Assert.assertNotNull(nodeIterable74);
    }

    @Test
    public void test12058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12058");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        java.lang.String str10 = node8.getSourceFileName();
        com.google.javascript.rhino.Node node11 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean12 = node11.isNE();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        boolean boolean20 = jSTypeRegistry18.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry18.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        com.google.javascript.rhino.jstype.JSType jSType29 = jSTypeRegistry18.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        boolean boolean34 = jSTypeRegistry32.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry32.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry32.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44, false);
        boolean boolean48 = jSTypeRegistry46.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList50, jSTypeArray49);
        com.google.javascript.rhino.Node node52 = jSTypeRegistry46.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList50);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry46.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSType57.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        boolean boolean63 = jSTypeRegistry61.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList65, jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry61.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList65);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSTypeRegistry61.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSType72.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] { jSType43, jSType58, jSType73 };
        com.google.javascript.rhino.jstype.FunctionType functionType75 = jSTypeRegistry15.createFunctionType(jSType29, jSTypeArray74);
        boolean boolean76 = functionType75.matchesNumberContext();
        boolean boolean78 = functionType75.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable79 = functionType75.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node81 = functionType75.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType82 = functionType75.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType83 = functionType75.getImplicitPrototype();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable84 = functionType75.getAllImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry2.createObjectType("false", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType75);
        com.google.javascript.rhino.jstype.TemplateType templateType86 = functionType75.toMaybeTemplateType();
        int int87 = functionType75.getPropertiesCount();
        boolean boolean88 = functionType75.hasDisplayName();
        boolean boolean90 = functionType75.isPropertyInExterns("Function");
        boolean boolean91 = functionType75.isTemplateType();
        boolean boolean93 = functionType75.hasProperty("OR  [slash_v: 1]");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet94 = functionType75.getPossibleToBooleanOutcomes();
        boolean boolean95 = functionType75.isFunctionPrototypeType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertNull(jSType58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable79);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertNotNull(objectType83);
        org.junit.Assert.assertNotNull(objectTypeIterable84);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNull(templateType86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet94 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet94.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test12059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12059");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isExpose();
        jSDocInfo0.setDeprecated(false);
        boolean boolean5 = jSDocInfo0.isInterface();
        boolean boolean7 = jSDocInfo0.hasParameter("(STRING OR  [quoted: 1])");
        boolean boolean8 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test12060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12060");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getReturnType();
        boolean boolean70 = functionType62.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType71 = functionType62.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType72 = functionType62.toMaybeFunctionType();
        java.lang.Iterable iterable73 = functionType62.getCtorExtendedInterfaces();
        boolean boolean75 = functionType62.removeProperty("hi!");
        boolean boolean77 = functionType62.isPropertyTypeInferred("Unknown class name");
        com.google.javascript.rhino.jstype.JSType jSType78 = functionType62.restrictByNotNullOrUndefined();
        com.google.javascript.rhino.jstype.FunctionType functionType79 = functionType62.getOwnerFunction();
        com.google.javascript.rhino.Node node81 = functionType62.getPropertyNode("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        boolean boolean82 = functionType62.matchesStringContext();
        com.google.javascript.rhino.jstype.ObjectType objectType83 = functionType62.getTypeOfThis();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSType71);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertNotNull(iterable73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(jSType78);
        org.junit.Assert.assertNull(functionType79);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objectType83);
    }

    @Test
    public void test12061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12061");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        java.lang.String str14 = node4.getString();
        boolean boolean15 = node4.isContinue();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) 10, node19, node22, node25, 0, (int) (byte) 1);
        java.lang.String str29 = node19.getString();
        boolean boolean30 = node19.isContinue();
        boolean boolean31 = node19.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node19.setStaticSourceFile(staticSourceFile32);
        java.lang.Object obj35 = node19.getProp(37);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean39 = node38.isFunction();
        node19.addChildToFront(node38);
        boolean boolean41 = node4.hasChild(node19);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        int int45 = node44.getCharno();
        java.lang.String str46 = node44.getSourceFileName();
        com.google.javascript.rhino.Node node47 = com.google.javascript.jscomp.NodeUtil.newExpr(node44);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType48 = null;
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) 10, node52, node55, node58, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        int int65 = node64.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship66 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType48, node58, node64);
        boolean boolean67 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node58);
        int int68 = node58.getLineno();
        boolean boolean69 = node44.isEquivalentToTyped(node58);
        node44.setQuotedString();
        boolean boolean71 = node44.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node72 = node19.useSourceInfoIfMissingFrom(node44);
        com.google.javascript.rhino.Node node74 = node19.getAncestor((int) 'a');
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (byte) 10, node78, node81, node84, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node88 = node84.getLastSibling();
        boolean boolean89 = node88.isDec();
        boolean boolean90 = node88.isNot();
        boolean boolean91 = node88.isTrue();
        boolean boolean92 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node88);
        node88.setType(2);
        com.google.javascript.rhino.Node node95 = node19.srcref(node88);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node96 = new com.google.javascript.rhino.Node((int) (byte) 100, node88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node95);
    }

    @Test
    public void test12062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12062");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.jstype.JSType jSType13 = jSTypeRegistry2.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry2.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray15 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry2.createUnionType(jSTypeArray15);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18, false);
        boolean boolean22 = jSTypeRegistry20.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        boolean boolean30 = jSTypeRegistry28.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList32 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList32, jSTypeArray31);
        com.google.javascript.rhino.Node node34 = jSTypeRegistry28.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList32);
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry28.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        boolean boolean44 = jSTypeRegistry42.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList46 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList46, jSTypeArray45);
        com.google.javascript.rhino.Node node48 = jSTypeRegistry42.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList46);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry42.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter69 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter69, false);
        boolean boolean73 = jSTypeRegistry71.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList75 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList75, jSTypeArray74);
        com.google.javascript.rhino.Node node77 = jSTypeRegistry71.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList75);
        com.google.javascript.rhino.jstype.JSType jSType82 = jSTypeRegistry71.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType83 = jSType82.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray84 = new com.google.javascript.rhino.jstype.JSType[] { jSType53, jSType68, jSType83 };
        com.google.javascript.rhino.jstype.FunctionType functionType85 = jSTypeRegistry25.createFunctionType(jSType39, jSTypeArray84);
        boolean boolean86 = functionType85.matchesNumberContext();
        boolean boolean88 = functionType85.hasProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType89 = jSTypeRegistry20.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType85);
        com.google.javascript.rhino.jstype.FunctionType functionType90 = functionType85.getConstructor();
        com.google.javascript.rhino.jstype.JSType jSType91 = jSType16.resolve(errorReporter17, (com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) functionType85);
        com.google.javascript.rhino.JSDocInfo jSDocInfo93 = functionType85.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo95 = new com.google.javascript.rhino.JSDocInfo();
        functionType85.setPropertyJSDocInfo("Named type with empty name component", jSDocInfo95);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility97 = jSDocInfo95.getVisibility();
        int int98 = jSDocInfo95.getExtendedInterfacesCount();
        int int99 = jSDocInfo95.getExtendedInterfacesCount();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertNotNull(jSTypeArray15);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(jSTypeArray84);
        org.junit.Assert.assertNotNull(functionType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objectType89);
        org.junit.Assert.assertNull(functionType90);
        org.junit.Assert.assertNotNull(jSType91);
        org.junit.Assert.assertNull(jSDocInfo93);
        org.junit.Assert.assertNull(visibility97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test12063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12063");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setAllFlags();
    }

    @Test
    public void test12064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12064");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        java.lang.String str14 = node4.getString();
        boolean boolean15 = node4.isContinue();
        boolean boolean16 = node4.isCall();
        boolean boolean17 = node4.isVar();
        boolean boolean18 = node4.isIn();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 10, node22, node25, node28, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = node28.getLastSibling();
        boolean boolean33 = node32.isDec();
        node32.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node36 = node32.cloneTree();
        com.google.javascript.rhino.Node node37 = node32.getLastSibling();
        boolean boolean38 = node32.isString();
        boolean boolean39 = node32.isOptionalArg();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(40, node4, node32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test12065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12065");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.isNativeObjectType();
        boolean boolean90 = enumType88.hasReferenceName();
        com.google.javascript.rhino.jstype.FunctionType functionType91 = enumType88.getConstructor();
        java.lang.Iterable iterable92 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.FunctionType functionType93 = enumType88.getOwnerFunction();
        java.util.Set set94 = enumType88.getOwnPropertyNames();
        boolean boolean95 = enumType88.hasCachedValues();
        com.google.javascript.rhino.jstype.EnumType enumType96 = enumType88.toMaybeEnumType();
        java.lang.String str97 = enumType88.getReferenceName();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNull(functionType91);
        org.junit.Assert.assertNotNull(iterable92);
        org.junit.Assert.assertNull(functionType93);
        org.junit.Assert.assertNotNull(set94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(enumType96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}" + "'", str97, "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
    }

    @Test
    public void test12066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12066");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        boolean boolean4 = node2.isExprResult();
        int int5 = node2.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        boolean boolean10 = node8.isAssignAdd();
        boolean boolean11 = node8.isNot();
        java.lang.String str12 = node8.toString();
        boolean boolean13 = node8.isVarArgs();
        boolean boolean14 = node2.isEquivalentToTyped(node8);
        boolean boolean15 = node8.isDec();
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR " + "'", str12, "OR ");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
    }

    @Test
    public void test12067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12067");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] { node14 };
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) ' ', nodeArray15, (int) (short) 100, 48);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(37, node18, 35, (int) ' ');
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean23 = jSDocInfo22.isExpose();
        boolean boolean24 = jSDocInfo22.isExpose();
        boolean boolean25 = jSDocInfo22.hasEnumParameterType();
        java.lang.String str26 = jSDocInfo22.getMeaning();
        int int27 = jSDocInfo22.getParameterCount();
        java.lang.String str28 = jSDocInfo22.getVersion();
        node18.setJSDocInfo(jSDocInfo22);
        java.lang.String str30 = jSDocInfo22.getBlockDescription();
        java.util.Collection<java.lang.String> strCollection31 = jSDocInfo22.getReferences();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(strCollection31);
    }

    @Test
    public void test12068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12068");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        boolean boolean80 = parameterizedType78.hasReferenceName();
        com.google.javascript.rhino.jstype.JSType jSType82 = parameterizedType78.findPropertyType("");
        boolean boolean83 = parameterizedType78.isInstanceType();
        com.google.javascript.rhino.jstype.ObjectType.Property property85 = parameterizedType78.getSlot("Not declared as a constructor");
        com.google.javascript.rhino.jstype.JSType jSType86 = parameterizedType78.getIndexType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(property85);
        org.junit.Assert.assertNull(jSType86);
    }

    @Test
    public void test12069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12069");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(43, "Named type with empty name component", 37, (int) '4');
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node4);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(nodeCollection5);
    }

    @Test
    public void test12070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12070");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = null;
        parameterizedType78.setPropertyJSDocInfo("hi!", jSDocInfo83);
        boolean boolean85 = parameterizedType78.isCheckedUnknownType();
        com.google.javascript.rhino.jstype.EnumType enumType86 = parameterizedType78.toMaybeEnumType();
        boolean boolean87 = parameterizedType78.isNullable();
        com.google.javascript.rhino.Node node89 = parameterizedType78.getPropertyNode("Node tree inequality:\nTree1:\nEXPR_RESULT\n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: EXPR_RESULT\n    OR \n\n\nSubtree2: OR \n");
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType90 = parameterizedType78.toMaybeParameterizedType();
        com.google.javascript.rhino.jstype.FunctionType functionType91 = parameterizedType90.toMaybeFunctionType();
        com.google.javascript.rhino.jstype.FunctionType functionType92 = parameterizedType90.toMaybeFunctionType();
        int int93 = parameterizedType90.getPropertiesCount();
        boolean boolean95 = parameterizedType90.hasProperty("true");
        boolean boolean96 = parameterizedType90.isUnknownType();
        boolean boolean97 = parameterizedType90.isNoType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(enumType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(node89);
        org.junit.Assert.assertNotNull(parameterizedType90);
        org.junit.Assert.assertNotNull(functionType91);
        org.junit.Assert.assertNotNull(functionType92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test12071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12071");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean64 = jSDocInfo63.isNoCompile();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) 10, node68, node71, node74, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node78 = node74.getLastSibling();
        boolean boolean79 = node78.isGetterDef();
        boolean boolean80 = node78.isSyntheticBlock();
        jSDocInfo63.setAssociatedNode(node78);
        java.util.Collection<java.lang.String> strCollection82 = jSDocInfo63.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList83 = jSDocInfo63.getExtendedInterfaces();
        functionType62.setJSDocInfo(jSDocInfo63);
        boolean boolean85 = functionType62.hasAnyTemplate();
        boolean boolean86 = functionType62.isEmptyType();
        com.google.javascript.rhino.jstype.ObjectType objectType88 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType) functionType62, "Not declared as a constructor");
        java.util.List<com.google.javascript.rhino.jstype.FunctionType> functionTypeList89 = functionType62.getSubTypes();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(strCollection82);
        org.junit.Assert.assertNotNull(jSTypeExpressionList83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(objectType88);
        org.junit.Assert.assertNull(functionTypeList89);
    }

    @Test
    public void test12072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12072");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable6 = jSTypeRegistry2.getEachReferenceTypeWithProperty("Not declared as a type name");
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        boolean boolean11 = jSTypeRegistry9.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray12 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList13, jSTypeArray12);
        com.google.javascript.rhino.Node node15 = jSTypeRegistry9.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList13);
        com.google.javascript.rhino.Node node16 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList13);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 10, node20, node23, node26, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node30 = node26.getLastSibling();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) 10, node34, node37, node40, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node44 = node40.getLastSibling();
        boolean boolean45 = node44.isGetterDef();
        boolean boolean46 = node44.isSyntheticBlock();
        boolean boolean47 = node44.isNE();
        com.google.javascript.rhino.Node node48 = node30.useSourceInfoFromForTree(node44);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        int int53 = node52.getCharno();
        java.lang.String str54 = node52.getSourceFileName();
        int int55 = node52.getSourcePosition();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        boolean boolean60 = node59.isFromExterns();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition61 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node62 = namePosition61.getItem();
        namePosition61.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList68 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition61);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        int int72 = node71.getCharno();
        boolean boolean73 = node71.isAssignAdd();
        boolean boolean74 = node71.isNot();
        java.lang.String str75 = node71.toString();
        namePosition61.setItem(node71);
        node71.setSourceFileForTesting("Not declared as a constructor");
        com.google.javascript.rhino.Node node79 = node59.copyInformationFrom(node71);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        int int83 = node82.getCharno();
        boolean boolean84 = node82.isExprResult();
        int int85 = node82.getChildCount();
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node(16, node52, node59, node82, 4095, (int) ' ');
        node48.addChildToFront(node88);
        boolean boolean90 = node16.isEquivalentTo(node48);
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNotNull(objectTypeIterable6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(nodeSourcePositionList68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "OR " + "'", str75, "OR ");
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test12073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12073");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        node13.setIsSyntheticBlock(true);
        com.google.javascript.rhino.InputId inputId17 = node13.getInputId();
        com.google.javascript.rhino.InputId inputId18 = node13.getInputId();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node13.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node20 = node13.detachFromParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node20.getJsDocBuilderForNode();
        fileLevelJsDocBuilder21.append("OR  [is_optional_param: 100]");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(inputId17);
        org.junit.Assert.assertNull(inputId18);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder21);
    }

    @Test
    public void test12074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12074");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        int int4 = node3.getType();
        node3.setWasEmptyNode(true);
        java.lang.String str10 = node3.toString(true, false, true);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder11 = node3.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 40 + "'", int4 == 40);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "STRING hi! 100" + "'", str10, "STRING hi! 100");
    }

    @Test
    public void test12075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12075");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = parameterizedType78.getJSDocInfo();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("ERROR 0");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.EnumElementType enumElementType82 = jSType81.toMaybeEnumElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(jSDocInfo79);
        org.junit.Assert.assertNull(jSType81);
    }

    @Test
    public void test12076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12076");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OR ");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType2 = null;
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        int int19 = node18.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship20 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType2, node12, node18);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node34 = node12.useSourceInfoIfMissingFromForTree(node33);
        boolean boolean35 = node34.isThis();
        com.google.javascript.rhino.Node node36 = null;
        com.google.javascript.jscomp.CodingConvention.Bind bind37 = new com.google.javascript.jscomp.CodingConvention.Bind(node1, node34, node36);
        node34.setType((int) (byte) 1);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType40 = null;
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        int int44 = node43.getCharno();
        java.lang.String str45 = node43.getSourceFileName();
        boolean boolean46 = node43.isLabel();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (byte) 10, node50, node53, node56, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node60 = node56.getLastSibling();
        boolean boolean61 = node60.isDec();
        boolean boolean62 = node60.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship63 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType40, node43, node60);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (byte) 10, node67, node70, node73, 0, (int) (byte) 1);
        boolean boolean77 = node43.hasChild(node70);
        boolean boolean78 = node70.isIf();
        int int79 = node34.getIndexOfChild(node70);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile80 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node70);
        boolean boolean81 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node70);
        boolean boolean82 = node70.isReturn();
        java.lang.String str83 = node70.getSourceFileName();
        boolean boolean84 = node70.isAssign();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNull(staticSourceFile80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test12077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12077");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("{1912950188}", (int) (short) 1, (int) (short) -1);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test12078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12078");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        boolean boolean4 = node2.isAssignAdd();
        boolean boolean5 = node2.isNot();
        java.lang.String str6 = node2.toString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        boolean boolean8 = node2.hasMoreThanOneChild();
        node2.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) -1);
        boolean boolean13 = node2.isEquivalentToTyped(node12);
        com.google.javascript.rhino.Node node14 = node12.getLastSibling();
        com.google.javascript.rhino.Node node15 = node14.cloneNode();
        boolean boolean16 = node14.isAssignAdd();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OR " + "'", str6, "OR ");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test12079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12079");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable6 = jSTypeRegistry2.getEachReferenceTypeWithProperty("(((Not declared as a constructor)))");
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        boolean boolean11 = jSTypeRegistry9.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray12 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList13, jSTypeArray12);
        com.google.javascript.rhino.Node node15 = jSTypeRegistry9.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList13);
        com.google.javascript.rhino.jstype.JSType jSType20 = jSTypeRegistry9.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21, false);
        boolean boolean25 = jSTypeRegistry23.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray26 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList27 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList27, jSTypeArray26);
        com.google.javascript.rhino.Node node29 = jSTypeRegistry23.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList27);
        com.google.javascript.rhino.jstype.JSType jSType34 = jSTypeRegistry23.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry23.resetForTypeCheck();
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36, false);
        boolean boolean40 = jSTypeRegistry38.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray41 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList42 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList42, jSTypeArray41);
        com.google.javascript.rhino.Node node44 = jSTypeRegistry38.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList42);
        com.google.javascript.rhino.jstype.JSType jSType49 = jSTypeRegistry38.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry38.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry38.createUnionType(jSTypeArray51);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry23.createUnionType(jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry9.createOptionalParameters(jSTypeArray51);
        com.google.javascript.rhino.jstype.JSType jSType55 = jSTypeRegistry2.createUnionType(jSTypeArray51);
        jSTypeRegistry2.clearTemplateTypeNames();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNotNull(objectTypeIterable6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(jSType20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(jSType34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSTypeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(jSType49);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType55);
    }

    @Test
    public void test12080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12080");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        java.lang.Iterable iterable93 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = enumType88.getElementsType();
        boolean boolean95 = enumElementType94.isNullable();
        com.google.javascript.rhino.jstype.JSType jSType96 = enumElementType94.getPrimitiveType();
        boolean boolean97 = enumElementType94.matchesStringContext();
        com.google.javascript.rhino.jstype.ObjectType.Property property99 = enumElementType94.getSlot("({})");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(iterable93);
        org.junit.Assert.assertNotNull(enumElementType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(jSType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNull(property99);
    }

    @Test
    public void test12081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12081");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable67 = functionType62.getCtorImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllExtendedInterfaces();
        boolean boolean69 = functionType62.isFunctionPrototypeType();
        boolean boolean71 = functionType62.isPropertyTypeDeclared("java.io.IOException: java.io.IOException");
        com.google.javascript.rhino.jstype.JSType jSType73 = functionType62.findPropertyType("(OR  [opt_arg: 1])");
        functionType62.clearCachedValues();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectTypeIterable67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSType73);
    }

    @Test
    public void test12082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12082");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        int int4 = node3.getCharno();
        java.lang.String str5 = node3.getSourceFileName();
        boolean boolean6 = node3.isLabel();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node20 = node16.getLastSibling();
        boolean boolean21 = node20.isDec();
        boolean boolean22 = node20.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship23 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node3, node20);
        boolean boolean24 = node3.isParamList();
        int int25 = node3.getSourcePosition();
        boolean boolean26 = node3.isFalse();
        int int27 = node3.getSourceOffset();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = new com.google.javascript.rhino.JSTypeExpression(node3, "Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType30 = null;
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) 10, node34, node37, node40, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        int int47 = node46.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship48 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType30, node40, node46);
        boolean boolean49 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node40);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType50 = null;
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 10, node54, node57, node60, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        int int67 = node66.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship68 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType50, node60, node66);
        com.google.javascript.rhino.Node node69 = node60.removeChildren();
        com.google.javascript.rhino.Node node70 = node40.useSourceInfoFrom(node60);
        com.google.javascript.rhino.Node node71 = node3.useSourceInfoIfMissingFrom(node70);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable72 = node3.siblings();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(nodeIterable72);
    }

    @Test
    public void test12083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12083");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoCompile();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node15 = node11.getLastSibling();
        boolean boolean16 = node15.isGetterDef();
        boolean boolean17 = node15.isSyntheticBlock();
        jSDocInfo0.setAssociatedNode(node15);
        java.util.Collection<java.lang.String> strCollection19 = jSDocInfo0.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList20 = jSDocInfo0.getExtendedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo0.getTypedefType();
        boolean boolean22 = jSDocInfo0.isConstructor();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean24 = jSDocInfo0.isNoTypeCheck();
        boolean boolean25 = jSDocInfo0.isDeprecated();
        boolean boolean26 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strCollection19);
        org.junit.Assert.assertNotNull(jSTypeExpressionList20);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test12084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12084");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isNoObjectType();
        boolean boolean69 = functionType62.isStringObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot71 = functionType62.getOwnSlot("Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n");
        boolean boolean72 = functionType62.matchesStringContext();
        com.google.javascript.rhino.jstype.ObjectType objectType73 = functionType62.getTypeOfThis();
        com.google.javascript.rhino.Node node75 = functionType62.getPropertyNode("{1693323672}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(jSTypeStaticSlot71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objectType73);
        org.junit.Assert.assertNull(node75);
    }

    @Test
    public void test12085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12085");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean90 = enumType88.hasReferenceName();
        boolean boolean92 = enumType88.isPropertyTypeInferred("");
        com.google.javascript.rhino.jstype.ObjectType.Property property94 = enumType88.getSlot("");
        com.google.javascript.rhino.jstype.JSType jSType96 = enumType88.getPropertyType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n).<Function>");
        boolean boolean97 = jSType96.hasAnyTemplate();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(property94);
        org.junit.Assert.assertNotNull(jSType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test12086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12086");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.isNullable();
        com.google.javascript.rhino.jstype.ObjectType.Property property96 = enumElementType93.getSlot("enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        com.google.javascript.rhino.jstype.EnumElementType enumElementType97 = enumElementType93.toMaybeEnumElementType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo98 = enumElementType97.getJSDocInfo();
        com.google.javascript.rhino.jstype.JSType jSType99 = enumElementType97.autoboxesTo();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(property96);
        org.junit.Assert.assertNotNull(enumElementType97);
        org.junit.Assert.assertNull(jSDocInfo98);
        org.junit.Assert.assertNull(jSType99);
    }

    @Test
    public void test12087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12087");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getParentScope();
        boolean boolean71 = functionType62.isPropertyTypeDeclared("OR \n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType62.getOwnPropertyJSDocInfo("Not declared as a constructor");
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean76 = jSDocInfo75.isNoShadow();
        boolean boolean77 = jSDocInfo75.isNoAlias();
        com.google.common.collect.ImmutableList<java.lang.String> strList78 = jSDocInfo75.getTemplateTypeNames();
        int int79 = jSDocInfo75.getParameterCount();
        boolean boolean80 = jSDocInfo75.isInterface();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList81 = jSDocInfo75.getThrownTypes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression82 = jSDocInfo75.getReturnType();
        java.lang.String str83 = jSDocInfo75.getMeaning();
        com.google.javascript.rhino.Node node84 = jSDocInfo75.getAssociatedNode();
        functionType62.setPropertyJSDocInfo("(Not declared as a constructor)", jSDocInfo75);
        boolean boolean86 = functionType62.isAllType();
        int int87 = functionType62.getPropertiesCount();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList81);
        org.junit.Assert.assertNull(jSTypeExpression82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
    }

    @Test
    public void test12088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12088");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) 'a');
    }

    @Test
    public void test12089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12089");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        com.google.javascript.rhino.Node node58 = node56.cloneTree();
        boolean boolean59 = node58.isVoid();
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean61 = jSDocInfo60.isNoShadow();
        java.lang.String str63 = jSDocInfo60.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean64 = jSDocInfo60.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = jSDocInfo60.getParameterType("false");
        boolean boolean67 = jSDocInfo60.shouldPreserveTry();
        boolean boolean68 = jSDocInfo60.isInterface();
        java.util.Collection<java.lang.String> strCollection69 = jSDocInfo60.getReferences();
        java.lang.String str70 = jSDocInfo60.getOriginalCommentString();
        node58.setJSDocInfo(jSDocInfo60);
        java.lang.String str72 = jSDocInfo60.getOriginalCommentString();
        boolean boolean73 = jSDocInfo60.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression74 = jSDocInfo60.getTypedefType();
        java.lang.String str75 = jSDocInfo60.toString();
        boolean boolean77 = jSDocInfo60.hasParameter("OR  [quoted: 1]");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSTypeExpression66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(strCollection69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(jSTypeExpression74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "JSDocInfo" + "'", str75, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test12090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12090");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 10, node18, node21, node24, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node28 = node24.getLastSibling();
        boolean boolean29 = node28.isDec();
        boolean boolean30 = node28.isOr();
        node28.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node34 = node28.getAncestor(2);
        java.lang.String str35 = node13.checkTreeEquals(node28);
        boolean boolean36 = node28.isInstanceOf();
        boolean boolean37 = node28.isNumber();
        com.google.javascript.rhino.Node node39 = node28.getAncestor(36);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(node39);
    }

    @Test
    public void test12091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12091");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        node13.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node17 = node13.cloneTree();
        com.google.javascript.rhino.Node node18 = node13.getLastSibling();
        boolean boolean19 = node18.isContinue();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType20 = null;
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        int int37 = node36.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship38 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType20, node30, node36);
        int int39 = node36.getLength();
        java.lang.String str40 = node36.getString();
        boolean boolean41 = node36.isWith();
        com.google.javascript.rhino.Node node42 = com.google.javascript.jscomp.NodeUtil.newExpr(node36);
        boolean boolean43 = node42.isIn();
        boolean boolean44 = node42.isEmpty();
        com.google.javascript.rhino.Node node45 = node18.useSourceInfoFrom(node42);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        int int49 = node48.getCharno();
        boolean boolean50 = node48.isExprResult();
        int int51 = node48.getChildCount();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(100, "");
        int int55 = node54.getCharno();
        boolean boolean56 = node54.isAssignAdd();
        boolean boolean57 = node54.isNot();
        java.lang.String str58 = node54.toString();
        boolean boolean59 = node54.isVarArgs();
        boolean boolean60 = node48.isEquivalentToTyped(node54);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 10, node64, node67, node70, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node74 = node70.getLastSibling();
        boolean boolean75 = node74.isDebugger();
        boolean boolean76 = node74.isNull();
        com.google.javascript.rhino.Node node77 = node48.clonePropsFrom(node74);
        com.google.javascript.rhino.Node node78 = node42.useSourceInfoFrom(node77);
        boolean boolean79 = node78.isDefaultCase();
        node78.setSourceEncodedPositionForTree(31);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "OR " + "'", str58, "OR ");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test12092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12092");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        com.google.javascript.rhino.Node node15 = node3.getAncestor((int) (short) 10);
        int int16 = node3.getSourceOffset();
        int int17 = node3.getType();
        com.google.javascript.rhino.Node node18 = node3.getParent();
        com.google.javascript.rhino.Node node19 = node18.removeFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test12093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12093");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        com.google.javascript.rhino.jstype.ObjectType objectType64 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType) functionType62, "Not declared as a type name");
        int int65 = functionType62.getPropertiesCount();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType66 = functionType62.toMaybeParameterizedType();
        boolean boolean68 = functionType62.isPropertyTypeDeclared("InputId: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        com.google.javascript.rhino.jstype.FunctionType functionType70 = functionType62.getBindReturnType(52);
        boolean boolean72 = functionType70.hasProperty("OR  [slash_v: 1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertNull(objectType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNull(parameterizedType66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test12094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12094");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean2 = node1.hasOneChild();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("false");
        com.google.javascript.rhino.InputId inputId6 = new com.google.javascript.rhino.InputId("hi!");
        java.lang.String str7 = inputId6.getIdName();
        node4.setInputId(inputId6);
        node1.setInputId(inputId6);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder10 = node1.new FileLevelJsDocBuilder();
        boolean boolean11 = node1.isNE();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test12095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12095");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(30, "{1693323672}");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test12096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12096");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean68 = jSDocInfo67.isNoShadow();
        java.lang.String str70 = jSDocInfo67.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean71 = jSDocInfo67.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = jSDocInfo67.getParameterType("false");
        boolean boolean74 = jSDocInfo67.shouldPreserveTry();
        boolean boolean75 = jSDocInfo67.isInterface();
        boolean boolean76 = jSDocInfo67.hasBaseType();
        functionType62.setPropertyJSDocInfo("OR \n", jSDocInfo67);
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = functionType62.getOwnPropertyJSDocInfo("Named type with empty name component");
        boolean boolean80 = functionType62.canBeCalled();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSTypeExpression73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(jSDocInfo79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test12097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12097");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        boolean boolean19 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node10);
        boolean boolean20 = node10.isDo();
        boolean boolean21 = node10.isThis();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = new com.google.javascript.rhino.JSTypeExpression(node10, "false");
        boolean boolean24 = jSTypeExpression23.isVarArgs();
        com.google.javascript.rhino.Node node25 = jSTypeExpression23.getRoot();
        com.google.javascript.rhino.Node node26 = jSTypeExpression23.getRoot();
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = new com.google.javascript.rhino.JSTypeExpression(node26, "(java.io.IOException: java.io.IOException: java.io.IOException)");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test12098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12098");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 1L, 36, 16);
        com.google.javascript.rhino.Node node4 = node3.cloneTree();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test12099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12099");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        boolean boolean12 = jSTypeRegistry10.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray13 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList14 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList14, jSTypeArray13);
        com.google.javascript.rhino.Node node16 = jSTypeRegistry10.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList14);
        com.google.javascript.rhino.jstype.JSType jSType21 = jSTypeRegistry10.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22, false);
        boolean boolean26 = jSTypeRegistry24.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray27 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList28 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList28, jSTypeArray27);
        com.google.javascript.rhino.Node node30 = jSTypeRegistry24.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList28);
        com.google.javascript.rhino.jstype.JSType jSType35 = jSTypeRegistry24.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36, false);
        boolean boolean40 = jSTypeRegistry38.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray41 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList42 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList42, jSTypeArray41);
        com.google.javascript.rhino.Node node44 = jSTypeRegistry38.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList42);
        com.google.javascript.rhino.jstype.JSType jSType49 = jSTypeRegistry38.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSType49.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        boolean boolean55 = jSTypeRegistry53.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray56 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList57 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList57, jSTypeArray56);
        com.google.javascript.rhino.Node node59 = jSTypeRegistry53.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList57);
        com.google.javascript.rhino.jstype.JSType jSType64 = jSTypeRegistry53.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSType64.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray66 = new com.google.javascript.rhino.jstype.JSType[] { jSType35, jSType50, jSType65 };
        com.google.javascript.rhino.jstype.FunctionType functionType67 = jSTypeRegistry7.createFunctionType(jSType21, jSTypeArray66);
        boolean boolean68 = functionType67.matchesNumberContext();
        boolean boolean70 = functionType67.hasProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType71 = jSTypeRegistry2.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType67);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType73 = jSTypeRegistry2.createUnionType(jSTypeArray72);
        jSTypeRegistry2.clearNamedTypes();
        jSTypeRegistry2.resetForTypeCheck();
        jSTypeRegistry2.setLastGeneration(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(jSType35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSTypeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(jSType49);
        org.junit.Assert.assertNull(jSType50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(jSType64);
        org.junit.Assert.assertNull(jSType65);
        org.junit.Assert.assertNotNull(jSTypeArray66);
        org.junit.Assert.assertNotNull(functionType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertNotNull(jSType73);
    }

    @Test
    public void test12100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12100");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getParentScope();
        boolean boolean71 = functionType62.isPropertyTypeDeclared("OR \n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType62.getOwnPropertyJSDocInfo("Not declared as a constructor");
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean76 = jSDocInfo75.isNoShadow();
        boolean boolean77 = jSDocInfo75.isNoAlias();
        com.google.common.collect.ImmutableList<java.lang.String> strList78 = jSDocInfo75.getTemplateTypeNames();
        int int79 = jSDocInfo75.getParameterCount();
        boolean boolean80 = jSDocInfo75.isInterface();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList81 = jSDocInfo75.getThrownTypes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression82 = jSDocInfo75.getReturnType();
        java.lang.String str83 = jSDocInfo75.getMeaning();
        com.google.javascript.rhino.Node node84 = jSDocInfo75.getAssociatedNode();
        functionType62.setPropertyJSDocInfo("(Not declared as a constructor)", jSDocInfo75);
        int int86 = jSDocInfo75.getParameterCount();
        boolean boolean87 = jSDocInfo75.isConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList81);
        org.junit.Assert.assertNull(jSTypeExpression82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test12101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12101");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        boolean boolean6 = jSDocInfo0.isInterface();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.Node node8 = jSDocInfo0.getAssociatedNode();
        boolean boolean9 = jSDocInfo0.hasEnumParameterType();
        jSDocInfo0.addSuppression("(OR  [is_optional_param: 100])");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test12102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12102");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDebugger();
        boolean boolean15 = node13.isNoSideEffectsCall();
        node13.setVarArgs(false);
        com.google.javascript.rhino.Node node18 = node13.cloneNode();
        boolean boolean19 = node13.isInstanceOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test12103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12103");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        int int19 = node16.getLength();
        java.lang.String str20 = node16.getString();
        boolean boolean21 = node16.isWith();
        com.google.javascript.rhino.Node node22 = com.google.javascript.jscomp.NodeUtil.newExpr(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) 10, node26, node29, node32, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node36 = node32.getLastSibling();
        boolean boolean37 = node36.isDec();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) 10, node41, node44, node47, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node51 = node47.getLastSibling();
        boolean boolean52 = node51.isDec();
        boolean boolean53 = node51.isOr();
        node51.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node57 = node51.getAncestor(2);
        java.lang.String str58 = node36.checkTreeEquals(node51);
        boolean boolean59 = node51.isInstanceOf();
        com.google.javascript.rhino.Node node60 = node51.detachFromParent();
        boolean boolean61 = node51.isNew();
        com.google.javascript.rhino.Node node62 = node16.copyInformationFromForTree(node51);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable63 = node51.getAncestors();
        boolean boolean64 = node51.isFalse();
        boolean boolean65 = node51.isQualifiedName();
        boolean boolean66 = node51.isRegExp();
        int int67 = node51.getLineno();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(ancestorIterable63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test12104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12104");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("STRING hi! 100\n", jSTypeNative1);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        java.lang.String str16 = node6.getString();
        boolean boolean17 = node6.isContinue();
        boolean boolean18 = node6.isCall();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.javascript.rhino.Node node38 = node6.copyInformationFromForTree(node35);
        java.lang.String str39 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node38);
        com.google.javascript.rhino.Node node40 = assertionFunctionSpec2.getAssertedParam(node38);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 1, (int) (short) 100, 31);
        com.google.javascript.rhino.jstype.JSType jSType45 = node44.getJSType();
        node44.setVarArgs(true);
        com.google.javascript.rhino.Node node48 = null;
        node38.addChildAfter(node44, node48);
        boolean boolean50 = node44.isInstanceOf();
        boolean boolean51 = node44.isTry();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test12105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12105");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node9.isAnd();
        boolean boolean15 = node9.isThrow();
        boolean boolean16 = node9.isTrue();
        boolean boolean17 = node9.isArrayLit();
        com.google.javascript.rhino.InputId inputId18 = node9.getInputId();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(inputId18);
    }

    @Test
    public void test12106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12106");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        java.lang.String str10 = node8.getSourceFileName();
        com.google.javascript.rhino.Node node11 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean12 = node11.isNE();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        boolean boolean20 = jSTypeRegistry18.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry18.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        com.google.javascript.rhino.jstype.JSType jSType29 = jSTypeRegistry18.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        boolean boolean34 = jSTypeRegistry32.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry32.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry32.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44, false);
        boolean boolean48 = jSTypeRegistry46.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList50, jSTypeArray49);
        com.google.javascript.rhino.Node node52 = jSTypeRegistry46.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList50);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry46.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSType57.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        boolean boolean63 = jSTypeRegistry61.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList65, jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry61.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList65);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSTypeRegistry61.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSType72.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] { jSType43, jSType58, jSType73 };
        com.google.javascript.rhino.jstype.FunctionType functionType75 = jSTypeRegistry15.createFunctionType(jSType29, jSTypeArray74);
        boolean boolean76 = functionType75.matchesNumberContext();
        boolean boolean78 = functionType75.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable79 = functionType75.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node81 = functionType75.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType82 = functionType75.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType83 = functionType75.getImplicitPrototype();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable84 = functionType75.getAllImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry2.createObjectType("false", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType75);
        com.google.javascript.rhino.jstype.TemplateType templateType86 = functionType75.toMaybeTemplateType();
        boolean boolean88 = functionType75.hasOwnProperty("(Named type with empty name component)");
        com.google.javascript.rhino.jstype.FunctionType functionType89 = functionType75.toMaybeFunctionType();
        com.google.javascript.rhino.jstype.ObjectType objectType90 = functionType89.getImplicitPrototype();
        com.google.javascript.rhino.jstype.ObjectType objectType91 = functionType89.getImplicitPrototype();
        boolean boolean92 = functionType89.isNominalType();
        com.google.javascript.rhino.jstype.JSType jSType93 = functionType89.unboxesTo();
        com.google.javascript.rhino.jstype.FunctionType functionType94 = functionType89.toMaybeFunctionType();
        boolean boolean95 = functionType89.matchesStringContext();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertNull(jSType58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable79);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertNotNull(objectType83);
        org.junit.Assert.assertNotNull(objectTypeIterable84);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNull(templateType86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(functionType89);
        org.junit.Assert.assertNotNull(objectType90);
        org.junit.Assert.assertNotNull(objectType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(jSType93);
        org.junit.Assert.assertNotNull(functionType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test12107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12107");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        int int69 = functionType62.getExtendedInterfacesCount();
        functionType62.clearResolved();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet71 = functionType62.getPossibleToBooleanOutcomes();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet71 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet71.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
    }

    @Test
    public void test12108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12108");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 10, node18, node21, node24, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node28 = node24.getLastSibling();
        boolean boolean29 = node28.isDec();
        boolean boolean30 = node28.isOr();
        node28.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node34 = node28.getAncestor(2);
        java.lang.String str35 = node13.checkTreeEquals(node28);
        boolean boolean36 = node28.isAssign();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("false");
        com.google.javascript.rhino.Node node39 = node28.clonePropsFrom(node38);
        com.google.javascript.rhino.Node node40 = node39.getParent();
        com.google.javascript.rhino.InputId inputId42 = new com.google.javascript.rhino.InputId("Not declared as a constructor");
        node39.setInputId(inputId42);
        boolean boolean44 = node39.isHook();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test12109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12109");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        java.lang.String str4 = node2.getSourceFileName();
        com.google.javascript.rhino.Node node5 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType6 = null;
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        int int23 = node22.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship24 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType6, node16, node22);
        boolean boolean25 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node16);
        int int26 = node16.getLineno();
        boolean boolean27 = node2.isEquivalentToTyped(node16);
        node2.setQuotedString();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) 10, node32, node35, node38, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node42 = node38.getLastSibling();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType43 = null;
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        int int47 = node46.getCharno();
        java.lang.String str48 = node46.getSourceFileName();
        boolean boolean49 = node46.isLabel();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (byte) 10, node53, node56, node59, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        boolean boolean64 = node63.isDec();
        boolean boolean65 = node63.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship66 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType43, node46, node63);
        boolean boolean67 = node46.isParamList();
        com.google.javascript.rhino.Node node68 = node38.clonePropsFrom(node46);
        boolean boolean69 = node46.isNumber();
        boolean boolean70 = node46.isWhile();
        boolean boolean71 = node46.isNE();
        node2.addChildrenToBack(node46);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString((int) (short) 1, "InputId: hi!");
        boolean boolean76 = node2.isEquivalentTo(node75);
        boolean boolean77 = node2.isGetterDef();
        boolean boolean78 = node2.hasChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test12110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12110");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.util.Set<java.lang.String> strSet69 = functionType62.getOwnPropertyNames();
        boolean boolean70 = functionType62.isNullType();
        boolean boolean71 = functionType62.isObject();
        com.google.javascript.rhino.jstype.JSType jSType72 = functionType62.unboxesTo();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable73 = functionType62.getImplementedInterfaces();
        boolean boolean75 = functionType62.hasOwnProperty("Unknown class name");
        java.util.Set<java.lang.String> strSet76 = functionType62.getOwnPropertyNames();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = functionType62.toDebugHashCodeString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(jSType72);
        org.junit.Assert.assertNotNull(objectTypeIterable73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strSet76);
    }

    @Test
    public void test12111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12111");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        java.lang.String str4 = node2.getSourceFileName();
        com.google.javascript.rhino.Node node5 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        boolean boolean6 = node2.isComma();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType7 = null;
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 10, node11, node14, node17, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        int int24 = node23.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship25 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType7, node17, node23);
        int int26 = node23.getLength();
        java.lang.String str27 = node23.getString();
        boolean boolean28 = node23.isWith();
        com.google.javascript.rhino.Node node29 = com.google.javascript.jscomp.NodeUtil.newExpr(node23);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) 10, node33, node36, node39, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node43 = node39.getLastSibling();
        boolean boolean44 = node43.isDec();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (byte) 10, node48, node51, node54, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node58 = node54.getLastSibling();
        boolean boolean59 = node58.isDec();
        boolean boolean60 = node58.isOr();
        node58.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node64 = node58.getAncestor(2);
        java.lang.String str65 = node43.checkTreeEquals(node58);
        boolean boolean66 = node58.isInstanceOf();
        com.google.javascript.rhino.Node node67 = node58.detachFromParent();
        boolean boolean68 = node58.isNew();
        com.google.javascript.rhino.Node node69 = node23.copyInformationFromForTree(node58);
        node23.addSuppression("InputId: hi!");
        java.lang.String str72 = node23.getString();
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildrenToBack(node23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test12112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12112");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.hasCachedValues();
        java.lang.String str90 = enumType88.getReferenceName();
        java.lang.String str91 = enumType88.getReferenceName();
        com.google.javascript.rhino.jstype.JSType jSType93 = enumType88.getPropertyType("Object");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}" + "'", str90, "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}" + "'", str91, "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        org.junit.Assert.assertNotNull(jSType93);
    }

    @Test
    public void test12113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12113");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node15 = node11.getLastSibling();
        boolean boolean16 = node15.isDec();
        boolean boolean17 = node15.isOr();
        node15.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node20 = node15.cloneTree();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node34 = node30.getLastSibling();
        boolean boolean35 = node34.isDec();
        boolean boolean36 = node34.isOr();
        node34.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node39 = node34.cloneTree();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(50, node20, node39);
        boolean boolean41 = node39.isString();
        com.google.javascript.rhino.Node node42 = node39.detachFromParent();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node39);
        java.lang.String str44 = node39.toString();
        com.google.javascript.rhino.Node node45 = node39.getLastSibling();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "OR " + "'", str44, "OR ");
        org.junit.Assert.assertNotNull(node45);
    }

    @Test
    public void test12114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12114");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.canBeCalled();
        com.google.javascript.rhino.jstype.JSType jSType96 = enumElementType93.getPropertyType("{-1304721502}");
        com.google.javascript.rhino.jstype.JSType jSType98 = enumElementType93.getPropertyType("OR  [directives: []]\n");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(jSType96);
        org.junit.Assert.assertNotNull(jSType98);
    }

    @Test
    public void test12115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12115");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType58 = null;
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) 10, node62, node65, node68, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        int int75 = node74.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship76 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType58, node68, node74);
        int int77 = node74.getLength();
        int int78 = subclassRelationshipList38.lastIndexOf((java.lang.Object) int77);
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor79 = subclassRelationshipList38.iterator();
        com.google.common.collect.UnmodifiableListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor81 = subclassRelationshipList38.listIterator(1);
        java.lang.Object[] objArray82 = subclassRelationshipList38.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean84 = jSDocInfo83.isExpose();
        boolean boolean85 = jSDocInfo83.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression86 = jSDocInfo83.getThisType();
        java.lang.String str88 = jSDocInfo83.getDescriptionForParameter("JSDocInfo");
        boolean boolean89 = jSDocInfo83.isExterns();
        boolean boolean90 = subclassRelationshipList38.equals((java.lang.Object) boolean89);
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator91 = subclassRelationshipList38.spliterator();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipItor79);
        org.junit.Assert.assertNotNull(subclassRelationshipItor81);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(jSTypeExpression86);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator91);
    }

    @Test
    public void test12116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12116");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        int int69 = functionType62.getExtendedInterfacesCount();
        boolean boolean70 = functionType62.isFunctionType();
        boolean boolean71 = functionType62.matchesObjectContext();
        com.google.javascript.rhino.jstype.TemplateType templateType72 = functionType62.toMaybeTemplateType();
        com.google.javascript.rhino.jstype.FunctionType functionType74 = functionType62.getBindReturnType(39);
        java.util.Set<java.lang.String> strSet75 = functionType62.getPropertyNames();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable76 = functionType62.getOwnImplementedInterfaces();
        int int77 = functionType62.getMaxArguments();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(templateType72);
        org.junit.Assert.assertNotNull(functionType74);
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(objectTypeIterable76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
    }

    @Test
    public void test12117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12117");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType70 = functionType62.getPropertyType("");
        int int71 = functionType62.getPropertiesCount();
        com.google.javascript.rhino.jstype.ObjectType.Property property73 = functionType62.getOwnSlot("Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n");
        com.google.javascript.rhino.jstype.JSType jSType74 = functionType62.getReturnType();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        int int78 = node77.getCharno();
        java.lang.String str79 = node77.getSourceFileName();
        com.google.javascript.rhino.Node node80 = com.google.javascript.jscomp.NodeUtil.newExpr(node77);
        boolean boolean81 = node77.isComma();
        functionType62.setSource(node77);
        boolean boolean83 = node77.isGetterDef();
        int int84 = node77.getLineno();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNull(property73);
        org.junit.Assert.assertNotNull(jSType74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test12118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12118");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition1 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node2 = namePosition1.getItem();
        namePosition1.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList8 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        int int12 = node11.getCharno();
        boolean boolean13 = node11.isAssignAdd();
        boolean boolean14 = node11.isNot();
        java.lang.String str15 = node11.toString();
        namePosition1.setItem(node11);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        int int21 = node20.getCharno();
        com.google.javascript.rhino.Node node22 = node20.cloneTree();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(4095, node11, node22);
        boolean boolean24 = node11.isTrue();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(29, 12, 2);
        boolean boolean29 = node11.isEquivalentToTyped(node28);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(nodeSourcePositionList8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "OR " + "'", str15, "OR ");
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test12119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12119");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) '4', 16384, 36);
        com.google.javascript.rhino.Node node5 = node3.getAncestor(42);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test12120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12120");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope66 = functionType62.getParentScope();
        boolean boolean67 = functionType62.isRegexpType();
        boolean boolean69 = functionType62.hasProperty("false");
        boolean boolean70 = functionType62.isNoResolvedType();
        boolean boolean71 = functionType62.isCheckedUnknownType();
        boolean boolean72 = functionType62.isRecordType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test12121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12121");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean4 = jSDocInfo0.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str6 = jSDocInfo0.getSourceName();
        int int7 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getTypedefType();
        java.lang.String str10 = jSDocInfo0.getVersion();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType11 = null;
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) 10, node15, node18, node21, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        int int28 = node27.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship29 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType11, node21, node27);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType30 = null;
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) 10, node34, node37, node40, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        int int47 = node46.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship48 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType30, node40, node46);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList49 = com.google.common.collect.ImmutableList.of(subclassRelationship29, subclassRelationship48);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (byte) 10, node53, node56, node59, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        boolean boolean64 = node63.isDec();
        node63.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node67 = node63.cloneTree();
        int int68 = subclassRelationshipList49.indexOf((java.lang.Object) node67);
        com.google.javascript.rhino.Node node69 = node67.cloneTree();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable70 = node67.siblings();
        jSDocInfo0.setAssociatedNode(node67);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = jSDocInfo0.getParameterType("Node tree inequality:\nTree1:\nSTRING OR \n\n\nTree2:\nOR  0\n    OR  [synthetic: 1]\n\n\nSubtree1: STRING OR \n\n\nSubtree2: OR  0\n    OR  [synthetic: 1]\n");
        boolean boolean75 = jSDocInfo0.hasParameterType("BITXOR");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(nodeIterable70);
        org.junit.Assert.assertNull(jSTypeExpression73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test12122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12122");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        java.lang.Iterable iterable93 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = enumType88.getElementsType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType95 = enumType88.getElementsType();
        com.google.javascript.rhino.jstype.JSType jSType96 = enumElementType95.autoboxesTo();
        boolean boolean97 = enumElementType95.isNominalType();
        com.google.javascript.rhino.jstype.TemplateType templateType98 = enumElementType95.toMaybeTemplateType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(iterable93);
        org.junit.Assert.assertNotNull(enumElementType94);
        org.junit.Assert.assertNotNull(enumElementType95);
        org.junit.Assert.assertNull(jSType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNull(templateType98);
    }

    @Test
    public void test12123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12123");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.UnionType unionType80 = parameterizedType78.toMaybeUnionType();
        java.lang.String str81 = parameterizedType78.getReferenceName();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType82 = parameterizedType78.toMaybeEnumElementType();
        boolean boolean84 = parameterizedType78.hasProperty("STRING hi!");
        boolean boolean85 = parameterizedType78.canBeCalled();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(unionType80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(enumElementType82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test12124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12124");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        boolean boolean15 = node3.isCall();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType16 = null;
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 10, node20, node23, node26, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        int int33 = node32.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship34 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType16, node26, node32);
        com.google.javascript.rhino.Node node35 = node3.copyInformationFromForTree(node32);
        node3.setSourceEncodedPositionForTree(40);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType39 = null;
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        int int43 = node42.getCharno();
        java.lang.String str44 = node42.getSourceFileName();
        boolean boolean45 = node42.isLabel();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) 10, node49, node52, node55, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node59 = node55.getLastSibling();
        boolean boolean60 = node59.isDec();
        boolean boolean61 = node59.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship62 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType39, node42, node59);
        boolean boolean63 = node42.isParamList();
        boolean boolean64 = node42.isGetterDef();
        boolean boolean65 = node42.isTry();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, 52, 0);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType69 = null;
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (byte) 10, node73, node76, node79, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString(100, "");
        int int86 = node85.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship87 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType69, node79, node85);
        com.google.javascript.rhino.Node node89 = node85.getAncestor((int) (short) 10);
        boolean boolean90 = node85.isQualifiedName();
        java.lang.String str91 = node85.toString();
        com.google.javascript.rhino.Node node92 = node68.srcrefTree(node85);
        com.google.javascript.rhino.Node node93 = node3.clonePropsFrom(node85);
        node3.setVarArgs(false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "OR " + "'", str91, "OR ");
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node93);
    }

    @Test
    public void test12125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12125");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.UnionType unionType80 = parameterizedType78.toMaybeUnionType();
        java.lang.String str81 = parameterizedType78.getReferenceName();
        boolean boolean82 = parameterizedType78.isNominalType();
        boolean boolean83 = parameterizedType78.isOrdinaryFunction();
        boolean boolean84 = parameterizedType78.hasReferenceName();
        boolean boolean86 = parameterizedType78.hasOwnProperty("java.io.IOException: ?");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(unionType80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test12126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12126");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        boolean boolean15 = node3.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node3.setStaticSourceFile(staticSourceFile16);
        java.lang.Object obj19 = node3.getProp(37);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.isFunction();
        node3.addChildToFront(node22);
        java.lang.String str25 = com.google.javascript.jscomp.NodeUtil.getSourceName(node22);
        node22.setSourceEncodedPositionForTree(48);
        boolean boolean28 = node22.isExprResult();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str30 = jSDocInfo29.getVersion();
        boolean boolean31 = jSDocInfo29.isConstructor();
        boolean boolean32 = jSDocInfo29.isConstructor();
        com.google.javascript.rhino.Node node33 = jSDocInfo29.getAssociatedNode();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo29.getSuppressions();
        boolean boolean35 = jSDocInfo29.hasBaseType();
        node22.setJSDocInfo(jSDocInfo29);
        java.util.Collection<java.lang.String> strCollection37 = jSDocInfo29.getReferences();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(strCollection37);
    }

    @Test
    public void test12127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12127");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        boolean boolean39 = subclassRelationshipList38.isEmpty();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType40 = null;
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) 10, node44, node47, node50, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        int int57 = node56.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship58 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType40, node50, node56);
        boolean boolean59 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node50);
        boolean boolean60 = node50.isDo();
        boolean boolean61 = node50.isThis();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression63 = new com.google.javascript.rhino.JSTypeExpression(node50, "false");
        boolean boolean64 = jSTypeExpression63.isOptionalArg();
        boolean boolean65 = jSTypeExpression63.isOptionalArg();
        com.google.javascript.rhino.Node node66 = jSTypeExpression63.getRoot();
        int int67 = subclassRelationshipList38.lastIndexOf((java.lang.Object) node66);
        boolean boolean68 = node66.isLabel();
        int int69 = node66.getLength();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node71 = node66.getChildAtIndex(83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test12128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12128");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] { node14 };
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) ' ', nodeArray15, (int) (short) 100, 48);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(37, node18, 35, (int) ' ');
        com.google.javascript.rhino.InputId inputId22 = com.google.javascript.jscomp.NodeUtil.getInputId(node21);
        boolean boolean23 = node21.isSetterDef();
        int int24 = node21.getLineno();
        boolean boolean25 = node21.isObjectLit();
        boolean boolean26 = node21.isComma();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNull(inputId22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test12129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12129");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 10, node22, node25, node28, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = node10.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean33 = node10.hasOneChild();
        int int34 = node10.getType();
        boolean boolean35 = node10.isQuotedString();
        boolean boolean36 = node10.isGetElem();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test12130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12130");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        boolean boolean93 = enumType88.isPropertyInExterns("Function");
        int int94 = enumType88.getPropertiesCount();
        boolean boolean95 = enumType88.hasCachedValues();
        java.lang.String str96 = enumType88.getDisplayName();
        com.google.javascript.rhino.jstype.JSType jSType98 = enumType88.getPropertyType("");
        boolean boolean99 = enumType88.hasReferenceName();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertNotNull(jSType98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test12131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12131");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = booleanLiteralSet0.union(booleanLiteralSet1);
        boolean boolean4 = booleanLiteralSet2.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = booleanLiteralSet5.union(booleanLiteralSet6);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet8 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = booleanLiteralSet8.union(booleanLiteralSet9);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet11 = booleanLiteralSet5.intersection(booleanLiteralSet8);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = booleanLiteralSet12.union(booleanLiteralSet13);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet15 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet17 = booleanLiteralSet15.union(booleanLiteralSet16);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = booleanLiteralSet12.intersection(booleanLiteralSet15);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet21 = booleanLiteralSet19.union(booleanLiteralSet20);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet23 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = booleanLiteralSet22.union(booleanLiteralSet23);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = booleanLiteralSet19.intersection(booleanLiteralSet22);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = booleanLiteralSet18.union(booleanLiteralSet22);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet27 = booleanLiteralSet11.intersection(booleanLiteralSet26);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = booleanLiteralSet28.union(booleanLiteralSet29);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet32 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet33 = booleanLiteralSet31.union(booleanLiteralSet32);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet34 = booleanLiteralSet28.intersection(booleanLiteralSet31);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet35 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet36 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet37 = booleanLiteralSet35.union(booleanLiteralSet36);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet38 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet39 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet40 = booleanLiteralSet38.union(booleanLiteralSet39);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet41 = booleanLiteralSet37.intersection(booleanLiteralSet38);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet42 = booleanLiteralSet28.intersection(booleanLiteralSet41);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet43 = booleanLiteralSet26.intersection(booleanLiteralSet28);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet44 = booleanLiteralSet2.intersection(booleanLiteralSet26);
        boolean boolean46 = booleanLiteralSet2.contains(false);
        boolean boolean48 = booleanLiteralSet2.contains(true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet8 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet8.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet11 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet11.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet15 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet15.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet17 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet17.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet21 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet21.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet23 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet23.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet27 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet27.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet32 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet32.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet33 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet33.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet34 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet34.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet35 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet35.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet36 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet36.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet37 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet37.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet38 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet38.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet39 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet39.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet40 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet40.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet41 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet41.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet42 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet42.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet43 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet43.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet44 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet44.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test12132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12132");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        boolean boolean93 = enumType88.isPropertyInExterns("Function");
        int int94 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.FunctionType functionType95 = enumType88.getOwnerFunction();
        int int96 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.FunctionType functionType97 = enumType88.getConstructor();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = functionType97.canBeCalled();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNull(functionType95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNull(functionType97);
    }

    @Test
    public void test12133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12133");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.jstype.JSType jSType13 = jSTypeRegistry2.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry2.resetForTypeCheck();
        boolean boolean15 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.jstype.JSType jSType20 = jSTypeRegistry2.createNamedType("(Function)", "java.io.IOException: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", 12, (int) (byte) 100);
        com.google.javascript.rhino.ErrorReporter errorReporter21 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter22 = jSTypeRegistry2.getErrorReporter();
        boolean boolean24 = jSTypeRegistry2.hasNamespace("(OR  [opt_arg: 1])");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSType20);
        org.junit.Assert.assertNull(errorReporter21);
        org.junit.Assert.assertNull(errorReporter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test12134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12134");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        java.lang.String str10 = node8.getSourceFileName();
        com.google.javascript.rhino.Node node11 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean12 = node11.isNE();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        boolean boolean20 = jSTypeRegistry18.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry18.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        com.google.javascript.rhino.jstype.JSType jSType29 = jSTypeRegistry18.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        boolean boolean34 = jSTypeRegistry32.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry32.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry32.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44, false);
        boolean boolean48 = jSTypeRegistry46.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList50, jSTypeArray49);
        com.google.javascript.rhino.Node node52 = jSTypeRegistry46.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList50);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry46.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSType57.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        boolean boolean63 = jSTypeRegistry61.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList65, jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry61.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList65);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSTypeRegistry61.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSType72.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] { jSType43, jSType58, jSType73 };
        com.google.javascript.rhino.jstype.FunctionType functionType75 = jSTypeRegistry15.createFunctionType(jSType29, jSTypeArray74);
        boolean boolean76 = functionType75.matchesNumberContext();
        boolean boolean78 = functionType75.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable79 = functionType75.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node81 = functionType75.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType82 = functionType75.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType83 = functionType75.getImplicitPrototype();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable84 = functionType75.getAllImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry2.createObjectType("false", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType75);
        com.google.javascript.rhino.jstype.TemplateType templateType86 = functionType75.toMaybeTemplateType();
        boolean boolean88 = functionType75.hasOwnProperty("(Named type with empty name component)");
        com.google.javascript.rhino.jstype.JSType jSType89 = functionType75.unboxesTo();
        com.google.javascript.rhino.jstype.FunctionType functionType90 = functionType75.toMaybeFunctionType();
        com.google.common.collect.ImmutableList<java.lang.String> strList91 = functionType90.getTemplateTypeNames();
        int int92 = functionType90.getPropertiesCount();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertNull(jSType58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable79);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertNotNull(objectType83);
        org.junit.Assert.assertNotNull(objectTypeIterable84);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNull(templateType86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(jSType89);
        org.junit.Assert.assertNotNull(functionType90);
        org.junit.Assert.assertNotNull(strList91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test12135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12135");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExpose();
        boolean boolean2 = jSDocInfo0.isExpose();
        boolean boolean3 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getMeaning();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        boolean boolean6 = jSDocInfo0.isNoShadow();
        boolean boolean7 = jSDocInfo0.isHidden();
        boolean boolean8 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test12136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12136");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = parameterizedType78.toMaybeEnumElementType();
        boolean boolean95 = parameterizedType78.isInterface();
        com.google.javascript.rhino.JSDocInfo jSDocInfo96 = parameterizedType78.getJSDocInfo();
        boolean boolean97 = parameterizedType78.canBeCalled();
        com.google.javascript.rhino.jstype.FunctionType functionType98 = parameterizedType78.getConstructor();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(enumElementType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(jSDocInfo96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNull(functionType98);
    }

    @Test
    public void test12137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12137");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        com.google.javascript.rhino.Node node15 = node3.getAncestor((int) (short) 10);
        int int16 = node3.getSourceOffset();
        int int17 = node3.getChildCount();
        boolean boolean18 = node3.isVoid();
        boolean boolean19 = node3.isWhile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test12138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12138");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean2 = node1.isVarArgs();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node1.children();
        com.google.javascript.rhino.Node node4 = node1.cloneNode();
        node4.setOptionalArg(true);
        int int7 = node4.getType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(nodeIterable3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 40 + "'", int7 == 40);
    }

    @Test
    public void test12139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12139");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        jSTypeRegistry2.setLastGeneration(false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable6 = jSTypeRegistry2.getTypesWithProperty("Not declared as a type name");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable13 = jSTypeRegistry11.getTypesWithProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable15 = jSTypeRegistry11.getTypesWithProperty("OR \n");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        boolean boolean23 = jSTypeRegistry21.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList25, jSTypeArray24);
        com.google.javascript.rhino.Node node27 = jSTypeRegistry21.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList25);
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry21.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33, false);
        boolean boolean37 = jSTypeRegistry35.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray38 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList39 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList39, jSTypeArray38);
        com.google.javascript.rhino.Node node41 = jSTypeRegistry35.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList39);
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry35.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        boolean boolean51 = jSTypeRegistry49.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray52 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList53 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList53, jSTypeArray52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry49.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList53);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSTypeRegistry49.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType61 = jSType60.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62, false);
        boolean boolean66 = jSTypeRegistry64.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList68 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList68, jSTypeArray67);
        com.google.javascript.rhino.Node node70 = jSTypeRegistry64.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        com.google.javascript.rhino.jstype.JSType jSType75 = jSTypeRegistry64.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType76 = jSType75.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray77 = new com.google.javascript.rhino.jstype.JSType[] { jSType46, jSType61, jSType76 };
        com.google.javascript.rhino.jstype.FunctionType functionType78 = jSTypeRegistry18.createFunctionType(jSType32, jSTypeArray77);
        boolean boolean79 = functionType78.matchesNumberContext();
        boolean boolean81 = functionType78.hasProperty("");
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope82 = functionType78.getParentScope();
        com.google.javascript.rhino.jstype.JSType jSType87 = jSTypeRegistry11.getType(jSTypeStaticScope82, "Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n", "(Named type with empty name component)", 44, 36);
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(OR  0)", node8, jSType87);
        boolean boolean90 = enumType88.isPropertyInExterns("enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        boolean boolean91 = enumType88.isNumberObjectType();
        boolean boolean92 = enumType88.matchesObjectContext();
        boolean boolean93 = enumType88.isNominalType();
        boolean boolean95 = enumType88.removeProperty("java.io.IOException: ");
        boolean boolean96 = enumType88.canBeCalled();
        org.junit.Assert.assertNotNull(jSTypeIterable6);
        org.junit.Assert.assertNotNull(jSTypeIterable13);
        org.junit.Assert.assertNotNull(jSTypeIterable15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSType60);
        org.junit.Assert.assertNull(jSType61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(jSType75);
        org.junit.Assert.assertNull(jSType76);
        org.junit.Assert.assertNotNull(jSTypeArray77);
        org.junit.Assert.assertNotNull(functionType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope82);
        org.junit.Assert.assertNotNull(jSType87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test12140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12140");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        int int69 = functionType62.getExtendedInterfacesCount();
        boolean boolean70 = functionType62.isFunctionType();
        boolean boolean71 = functionType62.matchesObjectContext();
        com.google.javascript.rhino.jstype.TemplateType templateType72 = functionType62.toMaybeTemplateType();
        com.google.javascript.rhino.jstype.FunctionType functionType74 = functionType62.getBindReturnType(39);
        boolean boolean76 = functionType74.isPropertyTypeInferred("OR  [directives: [, Not declared as a constructor]]");
        com.google.javascript.rhino.jstype.FunctionType functionType77 = functionType74.toMaybeFunctionType();
        boolean boolean78 = functionType77.isNativeObjectType();
        boolean boolean80 = functionType77.isPropertyInExterns("Node tree inequality:\nTree1:\nOR \n\n\nTree2:\nOR {913046089}\n\n\nSubtree1: OR \n\n\nSubtree2: OR {913046089}\n");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(templateType72);
        org.junit.Assert.assertNotNull(functionType74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(functionType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test12141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12141");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        java.lang.String str10 = node8.getSourceFileName();
        com.google.javascript.rhino.Node node11 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean12 = node11.isNE();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        boolean boolean20 = jSTypeRegistry18.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry18.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        com.google.javascript.rhino.jstype.JSType jSType29 = jSTypeRegistry18.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        boolean boolean34 = jSTypeRegistry32.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry32.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry32.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44, false);
        boolean boolean48 = jSTypeRegistry46.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList50, jSTypeArray49);
        com.google.javascript.rhino.Node node52 = jSTypeRegistry46.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList50);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry46.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSType57.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        boolean boolean63 = jSTypeRegistry61.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList65, jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry61.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList65);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSTypeRegistry61.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSType72.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] { jSType43, jSType58, jSType73 };
        com.google.javascript.rhino.jstype.FunctionType functionType75 = jSTypeRegistry15.createFunctionType(jSType29, jSTypeArray74);
        boolean boolean76 = functionType75.matchesNumberContext();
        boolean boolean78 = functionType75.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable79 = functionType75.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node81 = functionType75.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType82 = functionType75.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType83 = functionType75.getImplicitPrototype();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable84 = functionType75.getAllImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry2.createObjectType("false", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType75);
        boolean boolean86 = functionType75.hasImplementedInterfaces();
        java.lang.Iterable iterable87 = functionType75.getCtorImplementedInterfaces();
        boolean boolean88 = functionType75.matchesNumberContext();
        java.lang.Iterable iterable89 = functionType75.getCtorExtendedInterfaces();
        boolean boolean91 = functionType75.hasProperty("(Node tree inequality:\nTree1:\nTYPEOF Not declared as a constructor 32\n\n\nTree2:\nOR \n\n\nSubtree1: TYPEOF Not declared as a constructor 32\n\n\nSubtree2: OR \n)");
        boolean boolean92 = functionType75.isNativeObjectType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertNull(jSType58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable79);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertNotNull(objectType83);
        org.junit.Assert.assertNotNull(objectTypeIterable84);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(iterable87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(iterable89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test12142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12142");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExpose();
        boolean boolean2 = jSDocInfo0.isExpose();
        java.lang.String str3 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean7 = jSDocInfo0.hasParameter("");
        boolean boolean8 = jSDocInfo0.isIdGenerator();
        boolean boolean10 = jSDocInfo0.hasParameterType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        com.google.common.collect.ImmutableList<java.lang.String> strList11 = jSDocInfo0.getTemplateTypeNames();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test12143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12143");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getImplicitPrototype();
        boolean boolean70 = objectType69.isUnknownType();
        java.lang.String str71 = objectType69.toString();
        boolean boolean72 = objectType69.isStringObjectType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Function" + "'", str71, "Function");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test12144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12144");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("false");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        java.lang.String str15 = node5.getString();
        boolean boolean16 = node5.isReturn();
        com.google.javascript.rhino.Node node17 = assertionFunctionSpec1.getAssertedParam(node5);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        int int21 = node20.getCharno();
        java.lang.String str22 = node20.getSourceFileName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node20);
        boolean boolean24 = node23.isNE();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = null;
        com.google.javascript.rhino.jstype.JSType jSType26 = assertionFunctionSpec1.getAssertedType(node23, jSTypeRegistry25);
        boolean boolean27 = node23.isVarArgs();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        int int31 = node30.getCharno();
        boolean boolean32 = node30.isAssignAdd();
        boolean boolean33 = node30.isNot();
        java.lang.String str34 = node30.toString();
        com.google.javascript.rhino.Node node35 = com.google.javascript.jscomp.NodeUtil.newExpr(node30);
        com.google.javascript.rhino.Node node36 = node23.useSourceInfoIfMissingFromForTree(node30);
        boolean boolean37 = node23.isEmpty();
        boolean boolean38 = node23.isDefaultCase();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "OR " + "'", str34, "OR ");
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test12145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12145");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.lang.String str69 = functionType62.getDisplayName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = null;
        functionType62.setPropertyJSDocInfo("Named type with empty name component", jSDocInfo71);
        com.google.javascript.rhino.jstype.JSType jSType73 = functionType62.restrictByNotNullOrUndefined();
        boolean boolean75 = functionType62.hasOwnProperty("enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        com.google.javascript.rhino.jstype.FunctionType functionType76 = functionType62.getOwnerFunction();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType77 = functionType76.getTypeOfThis();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(jSType73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(functionType76);
    }

    @Test
    public void test12146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12146");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = null;
        parameterizedType78.setPropertyJSDocInfo("hi!", jSDocInfo83);
        boolean boolean85 = parameterizedType78.isCheckedUnknownType();
        com.google.javascript.rhino.jstype.EnumType enumType86 = parameterizedType78.toMaybeEnumType();
        boolean boolean87 = parameterizedType78.isNoResolvedType();
        boolean boolean88 = parameterizedType78.matchesNumberContext();
        boolean boolean89 = parameterizedType78.isUnionType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(enumType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test12147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12147");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        int int4 = node3.getCharno();
        java.lang.String str5 = node3.getSourceFileName();
        int int6 = node3.getSourcePosition();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        boolean boolean11 = node10.isFromExterns();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition12 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node13 = namePosition12.getItem();
        namePosition12.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList19 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition12);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        int int23 = node22.getCharno();
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.isNot();
        java.lang.String str26 = node22.toString();
        namePosition12.setItem(node22);
        node22.setSourceFileForTesting("Not declared as a constructor");
        com.google.javascript.rhino.Node node30 = node10.copyInformationFrom(node22);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        int int34 = node33.getCharno();
        boolean boolean35 = node33.isExprResult();
        int int36 = node33.getChildCount();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(16, node3, node10, node33, 4095, (int) ' ');
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = node10.getJSDocInfo();
        java.lang.String str41 = com.google.javascript.jscomp.NodeUtil.getSourceName(node10);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType43 = null;
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        int int47 = node46.getCharno();
        java.lang.String str48 = node46.getSourceFileName();
        boolean boolean49 = node46.isLabel();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (byte) 10, node53, node56, node59, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        boolean boolean64 = node63.isDec();
        boolean boolean65 = node63.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship66 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType43, node46, node63);
        boolean boolean67 = node46.isParamList();
        boolean boolean68 = node46.isGetterDef();
        boolean boolean69 = node46.isTry();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (byte) -1, node46, 52, 0);
        node46.putIntProp((int) (short) 100, 16);
        boolean boolean76 = node10.isEquivalentTo(node46);
        boolean boolean77 = node10.isRegExp();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile78 = node10.getStaticSourceFile();
        int int80 = staticSourceFile78.getLineOffset(16384);
        boolean boolean81 = staticSourceFile78.isExtern();
        int int83 = staticSourceFile78.getLineOffset(39);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNotNull(nodeSourcePositionList19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "OR " + "'", str26, "OR ");
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(jSDocInfo40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Not declared as a constructor" + "'", str41, "Not declared as a constructor");
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(staticSourceFile78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-2147483648) + "'", int80 == (-2147483648));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-2147483648) + "'", int83 == (-2147483648));
    }

    @Test
    public void test12148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12148");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(12);
        com.google.javascript.rhino.ErrorReporter errorReporter2 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter2, false);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        boolean boolean9 = jSTypeRegistry7.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray10 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList11, jSTypeArray10);
        com.google.javascript.rhino.Node node13 = jSTypeRegistry7.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList11);
        com.google.javascript.rhino.jstype.JSType jSType18 = jSTypeRegistry7.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        boolean boolean23 = jSTypeRegistry21.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList25, jSTypeArray24);
        com.google.javascript.rhino.Node node27 = jSTypeRegistry21.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList25);
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry21.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33, false);
        boolean boolean37 = jSTypeRegistry35.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray38 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList39 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList39, jSTypeArray38);
        com.google.javascript.rhino.Node node41 = jSTypeRegistry35.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList39);
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry35.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType47 = jSType46.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48, false);
        boolean boolean52 = jSTypeRegistry50.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray53 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList54 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList54, jSTypeArray53);
        com.google.javascript.rhino.Node node56 = jSTypeRegistry50.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList54);
        com.google.javascript.rhino.jstype.JSType jSType61 = jSTypeRegistry50.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType62 = jSType61.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray63 = new com.google.javascript.rhino.jstype.JSType[] { jSType32, jSType47, jSType62 };
        com.google.javascript.rhino.jstype.FunctionType functionType64 = jSTypeRegistry4.createFunctionType(jSType18, jSTypeArray63);
        boolean boolean65 = functionType64.matchesNumberContext();
        boolean boolean67 = functionType64.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType64.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node70 = functionType64.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType71 = functionType64.getParentScope();
        java.util.List<com.google.javascript.rhino.jstype.FunctionType> functionTypeList72 = functionType64.getSubTypes();
        boolean boolean73 = functionType64.isInstanceType();
        boolean boolean74 = functionType64.isInstanceType();
        node1.setJSType((com.google.javascript.rhino.jstype.JSType) functionType64);
        boolean boolean76 = functionType64.matchesStringContext();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(jSType18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertNull(jSType47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(jSType61);
        org.junit.Assert.assertNull(jSType62);
        org.junit.Assert.assertNotNull(jSTypeArray63);
        org.junit.Assert.assertNotNull(functionType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertNull(functionTypeList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test12149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12149");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        java.lang.String str14 = node4.getString();
        boolean boolean15 = node4.isContinue();
        boolean boolean16 = node4.isTrue();
        boolean boolean17 = node4.isEmpty();
        boolean boolean18 = node4.isAssign();
        boolean boolean19 = node4.isIf();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(53, node4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test12150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12150");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList1 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getParameterType("Unknown class name");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString((int) '#', "false");
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.hasChildren();
        boolean boolean11 = node8.hasChildren();
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec14 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("Not declared as a constructor");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 10, node18, node21, node24, 0, (int) (byte) 1);
        java.lang.String str28 = node18.getString();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29);
        com.google.javascript.rhino.jstype.JSType jSType35 = jSTypeRegistry30.createNamedType("Unknown class name", "", (int) 'a', 4);
        com.google.javascript.rhino.ErrorReporter errorReporter36 = jSTypeRegistry30.getErrorReporter();
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable38 = jSTypeRegistry30.getTypesWithProperty("Function");
        com.google.javascript.rhino.jstype.JSType jSType39 = assertionFunctionSpec14.getAssertedType(node18, jSTypeRegistry30);
        node8.putProp(10, (java.lang.Object) assertionFunctionSpec14);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList43 = jSDocInfo42.getTemplateTypeNames();
        boolean boolean44 = jSDocInfo42.isDeprecated();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = jSDocInfo42.getParameterType("(Not declared as a constructor)");
        jSDocInfo42.setLicense("(GETELEM false)");
        node8.putProp((int) (byte) 10, (java.lang.Object) jSDocInfo42);
        boolean boolean50 = jSDocInfo42.shouldPreserveTry();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList51 = jSDocInfo42.getThrownTypes();
        boolean boolean52 = strSet5.remove((java.lang.Object) jSTypeExpressionList51);
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(jSType35);
        org.junit.Assert.assertNull(errorReporter36);
        org.junit.Assert.assertNotNull(jSTypeIterable38);
        org.junit.Assert.assertNull(jSType39);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSTypeExpression46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test12151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12151");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 10, node18, node21, node24, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node28 = node24.getLastSibling();
        boolean boolean29 = node28.isDec();
        boolean boolean30 = node28.isOr();
        node28.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node34 = node28.getAncestor(2);
        java.lang.String str35 = node13.checkTreeEquals(node28);
        boolean boolean36 = node28.isAssign();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("false");
        com.google.javascript.rhino.Node node39 = node28.clonePropsFrom(node38);
        com.google.javascript.rhino.Node node40 = node39.getParent();
        boolean boolean41 = node39.isContinue();
        boolean boolean42 = node39.isDo();
        com.google.javascript.rhino.Node node43 = node39.cloneNode();
        node39.setOptionalArg(true);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
    }

    @Test
    public void test12152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12152");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        java.lang.Iterable iterable93 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = enumType88.getElementsType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType95 = enumType88.getElementsType();
        boolean boolean96 = enumElementType95.matchesObjectContext();
        com.google.javascript.rhino.jstype.FunctionType functionType97 = enumElementType95.getConstructor();
        boolean boolean98 = enumElementType95.isEnumType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(iterable93);
        org.junit.Assert.assertNotNull(enumElementType94);
        org.junit.Assert.assertNotNull(enumElementType95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNull(functionType97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test12153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12153");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isNoObjectType();
        boolean boolean81 = parameterizedType78.isOrdinaryFunction();
        com.google.javascript.rhino.jstype.TemplateType templateType82 = parameterizedType78.toMaybeTemplateType();
        boolean boolean83 = parameterizedType78.isNativeObjectType();
        boolean boolean85 = parameterizedType78.isPropertyTypeInferred("java.io.IOException: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        com.google.javascript.rhino.jstype.ObjectType objectType86 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType) parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNull(templateType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objectType86);
    }

    @Test
    public void test12154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12154");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        com.google.javascript.rhino.jstype.JSType jSType68 = functionType62.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getIndexType();
        com.google.javascript.rhino.jstype.JSType jSType71 = functionType62.getPropertyType("Unknown class name");
        boolean boolean73 = functionType62.isPropertyInExterns("");
        java.lang.String str74 = functionType62.getReferenceName();
        boolean boolean75 = functionType62.isInstanceType();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType77 = functionType62.getTopMostDefiningType("OR  [is_optional_param: 100]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNull(jSType69);
        org.junit.Assert.assertNotNull(jSType71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test12155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12155");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        int int4 = node3.getCharno();
        java.lang.String str5 = node3.getSourceFileName();
        boolean boolean6 = node3.isLabel();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node20 = node16.getLastSibling();
        boolean boolean21 = node20.isDec();
        boolean boolean22 = node20.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship23 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node3, node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 10, node27, node30, node33, 0, (int) (byte) 1);
        boolean boolean37 = node3.hasChild(node30);
        com.google.javascript.rhino.Node node38 = node30.getLastSibling();
        com.google.javascript.rhino.Node node39 = node30.getLastSibling();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
    }

    @Test
    public void test12156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12156");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isGetterDef();
        boolean boolean15 = node13.isSyntheticBlock();
        boolean boolean16 = node13.isNE();
        int int17 = node13.getSideEffectFlags();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = new com.google.javascript.rhino.JSTypeExpression(node13, "((Not declared as a constructor))");
        com.google.javascript.rhino.Node node20 = jSTypeExpression19.getRoot();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test12157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12157");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isNoObjectType();
        boolean boolean81 = parameterizedType78.isInstanceType();
        int int82 = parameterizedType78.getPropertiesCount();
        com.google.javascript.rhino.jstype.FunctionType functionType83 = parameterizedType78.getConstructor();
        java.util.Set set84 = parameterizedType78.getOwnPropertyNames();
        boolean boolean85 = parameterizedType78.isAllType();
        boolean boolean87 = parameterizedType78.isPropertyTypeInferred("Object");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNull(functionType83);
        org.junit.Assert.assertNotNull(set84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test12158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12158");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getEnumParameterType();
        boolean boolean3 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.Node node5 = jSDocInfo0.getAssociatedNode();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getAuthors();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strCollection7);
    }

    @Test
    public void test12159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12159");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        java.lang.Iterable iterable82 = parameterizedType78.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType83 = parameterizedType78.collapseUnion();
        boolean boolean84 = parameterizedType78.isNativeObjectType();
        boolean boolean85 = parameterizedType78.isObject();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNotNull(iterable82);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test12160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12160");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        java.lang.Iterable iterable82 = parameterizedType78.getCtorImplementedInterfaces();
        boolean boolean83 = parameterizedType78.matchesStringContext();
        java.lang.String str84 = parameterizedType78.getReferenceName();
        com.google.javascript.rhino.jstype.UnionType unionType85 = parameterizedType78.toMaybeUnionType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNotNull(iterable82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(unionType85);
    }

    @Test
    public void test12161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12161");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker3 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition4 = marker3.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition5 = marker3.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition6 = marker3.getNameNode();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList7 = com.google.common.collect.ImmutableList.of(marker0, marker3);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = marker0.getType();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(typePosition2);
        org.junit.Assert.assertNull(nodeSourcePosition4);
        org.junit.Assert.assertNull(nodeSourcePosition5);
        org.junit.Assert.assertNull(nodeSourcePosition6);
        org.junit.Assert.assertNotNull(markerList7);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(typePosition9);
    }

    @Test
    public void test12162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12162");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable63 = functionType62.getImplementedInterfaces();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean66 = jSDocInfo65.hasBaseType();
        int int67 = jSDocInfo65.getExtendedInterfacesCount();
        functionType62.setPropertyJSDocInfo("Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n", jSDocInfo65);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression69 = jSDocInfo65.getEnumParameterType();
        java.lang.String str70 = jSDocInfo65.getLendsName();
        java.lang.String str71 = jSDocInfo65.getOriginalCommentString();
        boolean boolean72 = jSDocInfo65.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertNotNull(objectTypeIterable63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNull(jSTypeExpression69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test12163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12163");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        int int4 = node3.getCharno();
        java.lang.String str5 = node3.getSourceFileName();
        boolean boolean6 = node3.isLabel();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node20 = node16.getLastSibling();
        boolean boolean21 = node20.isDec();
        boolean boolean22 = node20.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship23 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node3, node20);
        boolean boolean24 = node3.isParamList();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 10, node28, node31, node34, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node38 = node34.getLastSibling();
        boolean boolean39 = node38.isGetterDef();
        boolean boolean40 = node38.isSyntheticBlock();
        node38.setVarArgs(false);
        boolean boolean43 = node38.isFunction();
        com.google.javascript.rhino.InputId inputId44 = com.google.javascript.jscomp.NodeUtil.getInputId(node38);
        com.google.javascript.rhino.Node node45 = node3.srcref(node38);
        int int46 = node3.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(inputId44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test12164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12164");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("unknown");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test12165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12165");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType70 = functionType62.getImplicitPrototype();
        com.google.javascript.rhino.ErrorReporter errorReporter71 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter71, false);
        boolean boolean75 = jSTypeRegistry73.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray76 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList77 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList77, jSTypeArray76);
        com.google.javascript.rhino.Node node79 = jSTypeRegistry73.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList77);
        com.google.javascript.rhino.jstype.JSTypeNative[] jSTypeNativeArray80 = new com.google.javascript.rhino.jstype.JSTypeNative[] {};
        com.google.javascript.rhino.jstype.JSType jSType81 = jSTypeRegistry73.createUnionType(jSTypeNativeArray80);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair82 = objectType70.getTypesUnderInequality(jSType81);
        com.google.javascript.rhino.jstype.JSType jSType83 = typePair82.typeB;
        com.google.javascript.rhino.jstype.JSType jSType84 = typePair82.typeA;
        com.google.javascript.rhino.jstype.JSType jSType85 = typePair82.typeB;
        com.google.javascript.rhino.jstype.JSType jSType86 = typePair82.typeA;
        com.google.javascript.rhino.jstype.JSType jSType87 = typePair82.typeB;
        com.google.javascript.rhino.jstype.JSType jSType88 = typePair82.typeA;
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertNotNull(objectType70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(jSTypeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(jSTypeNativeArray80);
        org.junit.Assert.assertNotNull(jSType81);
        org.junit.Assert.assertNotNull(typePair82);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertNotNull(jSType85);
        org.junit.Assert.assertNotNull(jSType86);
        org.junit.Assert.assertNotNull(jSType87);
        org.junit.Assert.assertNotNull(jSType88);
    }

    @Test
    public void test12166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12166");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("Not declared as a constructor");
        int int3 = stringPosition0.getPositionOnEndLine();
        int int4 = stringPosition0.getPositionOnStartLine();
        int int5 = stringPosition0.getPositionOnEndLine();
        int int6 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setItem("GETELEM false");
        int int9 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setPositionInformation((int) (byte) -1, 29, 42, 100);
        stringPosition0.setPositionInformation(7, (int) 'a', 15, 31);
        int int20 = stringPosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
    }

    @Test
    public void test12167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12167");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType1 = null;
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        int int18 = node17.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship19 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType1, node11, node17);
        com.google.javascript.rhino.Node node20 = node11.removeChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship24 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node11, node23);
        java.util.Set<java.lang.String> strSet25 = node23.getDirectives();
        node23.setQuotedString();
        boolean boolean27 = node23.isDec();
        org.junit.Assert.assertTrue("'" + subclassType0 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType0.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test12168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12168");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList1 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        boolean boolean4 = jSDocInfo0.hasParameter("OR  0");
        boolean boolean5 = jSDocInfo0.isConstructor();
        java.lang.String str6 = jSDocInfo0.getMeaning();
        java.lang.String str7 = jSDocInfo0.getLicense();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str9 = jSDocInfo8.getVersion();
        boolean boolean10 = jSDocInfo8.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo8.setVisibility(visibility11);
        jSDocInfo0.setVisibility(visibility11);
        boolean boolean14 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.Node node15 = jSDocInfo0.getAssociatedNode();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) 10, node19, node22, node25, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node29 = node25.getLastSibling();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType30 = null;
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        int int34 = node33.getCharno();
        java.lang.String str35 = node33.getSourceFileName();
        boolean boolean36 = node33.isLabel();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) 10, node40, node43, node46, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node50 = node46.getLastSibling();
        boolean boolean51 = node50.isDec();
        boolean boolean52 = node50.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship53 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType30, node33, node50);
        boolean boolean54 = node33.isParamList();
        com.google.javascript.rhino.Node node55 = node25.clonePropsFrom(node33);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) 10, node59, node62, node65, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node69 = node65.getLastSibling();
        boolean boolean70 = node69.isDebugger();
        com.google.javascript.rhino.Node node71 = node55.useSourceInfoFromForTree(node69);
        boolean boolean72 = node55.isStringKey();
        boolean boolean73 = node55.isTypeOf();
        boolean boolean74 = node55.isReturn();
        boolean boolean75 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node55);
        jSDocInfo0.setAssociatedNode(node55);
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test12169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12169");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoCompile();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node15 = node11.getLastSibling();
        boolean boolean16 = node15.isGetterDef();
        boolean boolean17 = node15.isSyntheticBlock();
        jSDocInfo0.setAssociatedNode(node15);
        java.util.Set<java.lang.String> strSet19 = jSDocInfo0.getModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str21 = jSDocInfo0.toString();
        java.lang.String str22 = jSDocInfo0.getOriginalCommentString();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean24 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JSDocInfo" + "'", str21, "JSDocInfo");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test12170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12170");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType1 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        int int5 = node4.getCharno();
        java.lang.String str6 = node4.getSourceFileName();
        boolean boolean7 = node4.isLabel();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 10, node11, node14, node17, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node21 = node17.getLastSibling();
        boolean boolean22 = node21.isDec();
        boolean boolean23 = node21.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship24 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType1, node4, node21);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 10, node28, node31, node34, 0, (int) (byte) 1);
        boolean boolean38 = node4.hasChild(node31);
        com.google.javascript.rhino.Node node39 = node4.removeFirstChild();
        boolean boolean40 = node4.isArrayLit();
        boolean boolean41 = node4.isThrow();
        int int43 = node4.getIntProp(52);
        boolean boolean44 = node4.isLocalResultCall();
        boolean boolean45 = node4.isNot();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.isNoShadow();
        boolean boolean48 = jSDocInfo46.isExpose();
        boolean boolean49 = jSDocInfo46.containsDeclaration();
        boolean boolean50 = jSDocInfo46.isConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition51 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node52 = namePosition51.getItem();
        namePosition51.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList58 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition51);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        int int62 = node61.getCharno();
        boolean boolean63 = node61.isAssignAdd();
        boolean boolean64 = node61.isNot();
        java.lang.String str65 = node61.toString();
        namePosition51.setItem(node61);
        boolean boolean67 = node61.isIf();
        jSDocInfo46.setAssociatedNode(node61);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (byte) 10, node72, node75, node78, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString(100, "");
        int int85 = node84.getCharno();
        com.google.javascript.rhino.InputId inputId87 = new com.google.javascript.rhino.InputId("hi!");
        java.lang.String str88 = inputId87.getIdName();
        node84.setInputId(inputId87);
        com.google.javascript.rhino.JSDocInfo jSDocInfo90 = node84.getJSDocInfo();
        int int91 = node81.getIndexOfChild(node84);
        node84.setVarArgs(false);
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node(16, node4, node61, node84);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(nodeSourcePositionList58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "OR " + "'", str65, "OR ");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!" + "'", str88, "hi!");
        org.junit.Assert.assertNull(jSDocInfo90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
    }

    @Test
    public void test12171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12171");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        boolean boolean69 = functionType62.isEnumElementType();
        int int70 = functionType62.getExtendedInterfacesCount();
        boolean boolean71 = functionType62.isInterface();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test12172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12172");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getReturnType();
        boolean boolean70 = functionType62.matchesStringContext();
        com.google.javascript.rhino.jstype.ObjectType objectType71 = functionType62.getPrototype();
        boolean boolean72 = objectType71.matchesObjectContext();
        boolean boolean73 = objectType71.isNominalConstructor();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test12173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12173");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        int int5 = node4.getCharno();
        boolean boolean6 = node4.isExprResult();
        java.lang.String str7 = node4.toStringTree();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(0, node4);
        node8.setVarArgs(true);
        com.google.javascript.rhino.Node node11 = node8.getLastSibling();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(4095, node8, (int) '#', 44);
        node8.putIntProp(35, 12);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "OR \n" + "'", str7, "OR \n");
        org.junit.Assert.assertNotNull(node11);
    }

    @Test
    public void test12174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12174");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        com.google.javascript.rhino.Node node95 = enumType88.getPropertyNode("{1912950188}");
        com.google.javascript.rhino.Node node97 = enumType88.getPropertyNode("Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        com.google.javascript.rhino.jstype.JSType jSType98 = enumType88.unboxesTo();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertNull(node95);
        org.junit.Assert.assertNull(node97);
        org.junit.Assert.assertNull(jSType98);
    }

    @Test
    public void test12175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12175");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = parameterizedType78.getJSDocInfo();
        boolean boolean80 = parameterizedType78.isEmptyType();
        boolean boolean81 = parameterizedType78.isUnknownType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(jSDocInfo79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test12176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12176");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(100.0d, (int) (byte) 10, (int) 'a');
        com.google.javascript.rhino.InputId inputId4 = com.google.javascript.jscomp.NodeUtil.getInputId(node3);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(inputId4);
    }

    @Test
    public void test12177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12177");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        node13.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node17 = node13.cloneTree();
        com.google.javascript.rhino.Node node18 = node13.getLastSibling();
        boolean boolean19 = node13.isLocalResultCall();
        boolean boolean20 = node13.isThis();
        boolean boolean21 = node13.isIf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test12178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12178");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType70 = functionType62.getImplicitPrototype();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable71 = functionType62.getAllImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType72 = functionType62.autobox();
        boolean boolean73 = functionType62.isObject();
        boolean boolean75 = functionType62.isPropertyTypeInferred("Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n");
        boolean boolean77 = functionType62.isPropertyTypeInferred("?");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable78 = functionType62.getParameters();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertNotNull(objectType70);
        org.junit.Assert.assertNotNull(objectTypeIterable71);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(nodeIterable78);
    }

    @Test
    public void test12179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12179");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.jstype.FunctionType functionType79 = parameterizedType78.getConstructor();
        java.util.Set set80 = parameterizedType78.getOwnPropertyNames();
        boolean boolean81 = parameterizedType78.isUnknownType();
        com.google.javascript.rhino.jstype.ObjectType objectType82 = parameterizedType78.getImplicitPrototype();
        boolean boolean83 = parameterizedType78.matchesUint32Context();
        boolean boolean84 = parameterizedType78.isNullType();
        boolean boolean86 = parameterizedType78.isPropertyTypeDeclared("Node tree inequality:\nTree1:\nOR  [free_call: 40]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [free_call: 40]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(functionType79);
        org.junit.Assert.assertNotNull(set80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test12180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12180");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str1 = ternaryValue0.toString();
        boolean boolean3 = ternaryValue0.toBoolean(true);
        boolean boolean5 = ternaryValue0.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue8.or(ternaryValue10);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue10.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue7.and(ternaryValue12);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue14.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue15.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = ternaryValue18.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = ternaryValue17.and(ternaryValue18);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = ternaryValue15.or(ternaryValue18);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = ternaryValue13.or(ternaryValue15);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str24 = ternaryValue23.toString();
        boolean boolean26 = ternaryValue23.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue23.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue27.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str30 = ternaryValue29.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str32 = ternaryValue31.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = ternaryValue29.or(ternaryValue31);
        boolean boolean35 = ternaryValue31.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = ternaryValue28.and(ternaryValue31);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str38 = ternaryValue37.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str40 = ternaryValue39.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = ternaryValue37.or(ternaryValue39);
        boolean boolean43 = ternaryValue39.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = ternaryValue28.or(ternaryValue39);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = ternaryValue15.or(ternaryValue44);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = ternaryValue0.or(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "false" + "'", str1, "false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "false" + "'", str24, "false");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "false" + "'", str30, "false");
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "false" + "'", str32, "false");
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "false" + "'", str38, "false");
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "false" + "'", str40, "false");
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
    }

    @Test
    public void test12181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12181");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        int int4 = node3.getCharno();
        java.lang.String str5 = node3.getSourceFileName();
        boolean boolean6 = node3.isLabel();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node20 = node16.getLastSibling();
        boolean boolean21 = node20.isDec();
        boolean boolean22 = node20.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship23 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node3, node20);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection24 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node20);
        java.lang.String[] strArray29 = new java.lang.String[] { "Not declared as a constructor", "hi!", "Not declared as a constructor", "OR \n" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node20.setDirectives((java.util.Set<java.lang.String>) strSet30);
        strSet30.clear();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType34 = null;
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) 10, node38, node41, node44, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        int int51 = node50.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship52 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType34, node44, node50);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType53 = null;
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) 10, node57, node60, node63, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        int int70 = node69.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship71 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType53, node63, node69);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList72 = com.google.common.collect.ImmutableList.of(subclassRelationship52, subclassRelationship71);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList73 = subclassRelationshipList72.asList();
        int int75 = subclassRelationshipList73.lastIndexOf((java.lang.Object) (byte) 10);
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor76 = subclassRelationshipList73.iterator();
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator77 = subclassRelationshipList73.spliterator();
        boolean boolean78 = strSet30.retainAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList73);
        java.lang.Object[] objArray79 = subclassRelationshipList73.toArray();
        java.util.stream.Stream<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipStream80 = subclassRelationshipList73.stream();
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator81 = subclassRelationshipList73.spliterator();
        java.util.ListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor82 = subclassRelationshipList73.listIterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeCollection24);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList72);
        org.junit.Assert.assertNotNull(subclassRelationshipList73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipItor76);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(subclassRelationshipStream80);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator81);
        org.junit.Assert.assertNotNull(subclassRelationshipItor82);
    }

    @Test
    public void test12182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12182");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        boolean boolean4 = node3.isFromExterns();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node3);
        boolean boolean6 = node3.isSetterDef();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isHook();
        java.lang.String str9 = node3.toStringTree();
        com.google.javascript.rhino.Node node10 = com.google.javascript.jscomp.NodeUtil.newExpr(node3);
        node3.setCharno(2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "STRING hi! 100\n" + "'", str9, "STRING hi! 100\n");
        org.junit.Assert.assertNotNull(node10);
    }

    @Test
    public void test12183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12183");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable69 = functionType62.getCtorExtendedInterfaces();
        boolean boolean70 = functionType62.isInterface();
        java.lang.Iterable iterable71 = functionType62.getCtorExtendedInterfaces();
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean74 = jSDocInfo73.isNoCompile();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (byte) 10, node78, node81, node84, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node88 = node84.getLastSibling();
        boolean boolean89 = node88.isGetterDef();
        boolean boolean90 = node88.isSyntheticBlock();
        jSDocInfo73.setAssociatedNode(node88);
        java.util.Set<java.lang.String> strSet92 = jSDocInfo73.getModifies();
        functionType62.setPropertyJSDocInfo("", jSDocInfo73);
        boolean boolean94 = functionType62.isStringObjectType();
        boolean boolean95 = functionType62.isRegexpType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable96 = functionType62.getExtendedInterfaces();
        boolean boolean97 = functionType62.matchesInt32Context();
        com.google.javascript.rhino.Node node99 = functionType62.getPropertyNode("()");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertNotNull(objectTypeIterable69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(iterable71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNull(node99);
    }

    @Test
    public void test12184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12184");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        int int69 = functionType62.getExtendedInterfacesCount();
        functionType62.clearResolved();
        com.google.javascript.rhino.jstype.JSType jSType71 = functionType62.getTypeOfThis();
        com.google.javascript.rhino.jstype.JSType jSType72 = functionType62.getReturnType();
        boolean boolean74 = functionType62.isPropertyInExterns("GETELEM false");
        boolean boolean75 = functionType62.isNullType();
        com.google.javascript.rhino.jstype.FunctionType functionType76 = functionType62.toMaybeFunctionType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(jSType71);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(functionType76);
    }

    @Test
    public void test12185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12185");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet68 = functionType62.getPossibleToBooleanOutcomes();
        boolean boolean70 = functionType62.removeProperty("Not declared as a constructor");
        com.google.javascript.rhino.jstype.JSType jSType71 = functionType62.getParameterType();
        java.util.Set<java.lang.String> strSet72 = functionType62.getOwnPropertyNames();
        java.lang.Iterable iterable73 = functionType62.getCtorExtendedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType62.getExtendedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType62.getImplicitPrototype();
        boolean boolean77 = objectType75.isPropertyInExterns("(?)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet68 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet68.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSType71);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(iterable73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test12186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12186");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.jstype.JSType jSType13 = jSTypeRegistry2.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry2.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray15 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry2.createUnionType(jSTypeArray15);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18, false);
        boolean boolean22 = jSTypeRegistry20.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        boolean boolean30 = jSTypeRegistry28.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList32 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList32, jSTypeArray31);
        com.google.javascript.rhino.Node node34 = jSTypeRegistry28.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList32);
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry28.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        boolean boolean44 = jSTypeRegistry42.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList46 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList46, jSTypeArray45);
        com.google.javascript.rhino.Node node48 = jSTypeRegistry42.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList46);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry42.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter69 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter69, false);
        boolean boolean73 = jSTypeRegistry71.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList75 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList75, jSTypeArray74);
        com.google.javascript.rhino.Node node77 = jSTypeRegistry71.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList75);
        com.google.javascript.rhino.jstype.JSType jSType82 = jSTypeRegistry71.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType83 = jSType82.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray84 = new com.google.javascript.rhino.jstype.JSType[] { jSType53, jSType68, jSType83 };
        com.google.javascript.rhino.jstype.FunctionType functionType85 = jSTypeRegistry25.createFunctionType(jSType39, jSTypeArray84);
        boolean boolean86 = functionType85.matchesNumberContext();
        boolean boolean88 = functionType85.hasProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType89 = jSTypeRegistry20.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType85);
        com.google.javascript.rhino.jstype.FunctionType functionType90 = functionType85.getConstructor();
        com.google.javascript.rhino.jstype.JSType jSType91 = jSType16.resolve(errorReporter17, (com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) functionType85);
        boolean boolean92 = functionType85.isVoidType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertNotNull(jSTypeArray15);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(jSTypeArray84);
        org.junit.Assert.assertNotNull(functionType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objectType89);
        org.junit.Assert.assertNull(functionType90);
        org.junit.Assert.assertNotNull(jSType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test12187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12187");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("(Not declared as a constructor)");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType2 = null;
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        int int19 = node18.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship20 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType2, node12, node18);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType21 = null;
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) 10, node25, node28, node31, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        int int38 = node37.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship39 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType21, node31, node37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList40 = com.google.common.collect.ImmutableList.of(subclassRelationship20, subclassRelationship39);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) 10, node44, node47, node50, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node54 = node50.getLastSibling();
        boolean boolean55 = node54.isDec();
        node54.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node58 = node54.cloneTree();
        int int59 = subclassRelationshipList40.indexOf((java.lang.Object) node58);
        com.google.javascript.rhino.Node node60 = node58.cloneTree();
        boolean boolean61 = node58.isCase();
        boolean boolean62 = node58.isFunction();
        boolean boolean63 = node58.isCatch();
        com.google.javascript.rhino.Node node64 = assertionFunctionSpec1.getAssertedParam(node58);
        boolean boolean65 = node58.isInc();
        boolean boolean66 = node58.isTypeOf();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test12188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12188");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(31, "java.io.IOException: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", 29, (int) (byte) 1);
        boolean boolean5 = node4.isObjectLit();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test12189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12189");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        boolean boolean80 = parameterizedType78.isInterface();
        boolean boolean82 = parameterizedType78.removeProperty("Function");
        com.google.javascript.rhino.jstype.TemplateType templateType83 = parameterizedType78.toMaybeTemplateType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(templateType83);
    }

    @Test
    public void test12190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12190");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = null;
        parameterizedType78.setPropertyJSDocInfo("hi!", jSDocInfo83);
        boolean boolean85 = parameterizedType78.isCheckedUnknownType();
        com.google.javascript.rhino.jstype.EnumType enumType86 = parameterizedType78.toMaybeEnumType();
        boolean boolean87 = parameterizedType78.isNullable();
        com.google.javascript.rhino.Node node89 = parameterizedType78.getPropertyNode("Node tree inequality:\nTree1:\nEXPR_RESULT\n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: EXPR_RESULT\n    OR \n\n\nSubtree2: OR \n");
        boolean boolean90 = parameterizedType78.isInstanceType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo92 = parameterizedType78.getOwnPropertyJSDocInfo("JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(enumType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(jSDocInfo92);
    }

    @Test
    public void test12191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12191");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("Not declared as a constructor");
        int int3 = stringPosition0.getPositionOnEndLine();
        int int4 = stringPosition0.getPositionOnStartLine();
        int int5 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setItem("Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        int int8 = stringPosition0.getPositionOnStartLine();
        int int9 = stringPosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test12192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12192");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = parameterizedType78.getOwnPropertyJSDocInfo("(Named type with empty name component)");
        com.google.javascript.rhino.jstype.JSType jSType82 = parameterizedType78.autobox();
        boolean boolean83 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType84 = parameterizedType78.toMaybeParameterizedType();
        boolean boolean85 = parameterizedType78.hasReferenceName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNull(jSDocInfo81);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(parameterizedType84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test12193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12193");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        boolean boolean94 = parameterizedType78.isInterface();
        com.google.javascript.rhino.jstype.ObjectType objectType95 = parameterizedType78.getParentScope();
        boolean boolean96 = objectType95.isRecordType();
        boolean boolean97 = objectType95.matchesObjectContext();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(objectType95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test12194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12194");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getReturnType();
        boolean boolean70 = functionType62.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType71 = functionType62.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType72 = functionType62.toMaybeFunctionType();
        java.lang.Iterable iterable73 = functionType62.getCtorExtendedInterfaces();
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = functionType62.getOwnPropertyJSDocInfo("Unknown class name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean78 = jSDocInfo77.isNoShadow();
        java.lang.String str80 = jSDocInfo77.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean81 = jSDocInfo77.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression83 = jSDocInfo77.getParameterType("false");
        java.lang.String str84 = jSDocInfo77.getOriginalCommentString();
        functionType62.setPropertyJSDocInfo("((Not declared as a constructor))", jSDocInfo77);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSType71);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertNotNull(iterable73);
        org.junit.Assert.assertNull(jSDocInfo75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(jSTypeExpression83);
        org.junit.Assert.assertNull(str84);
    }

    @Test
    public void test12195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12195");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isGetterDef();
        boolean boolean15 = node13.isSyntheticBlock();
        node13.setVarArgs(false);
        int int18 = node13.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        boolean boolean38 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node29);
        boolean boolean39 = node29.isDo();
        boolean boolean40 = node29.isScript();
        boolean boolean42 = node29.getBooleanProp(44);
        boolean boolean43 = node13.isEquivalentTo(node29);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) 10, node47, node50, node53, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node57 = node53.getLastSibling();
        boolean boolean58 = node57.isDec();
        node57.setIsSyntheticBlock(true);
        com.google.javascript.rhino.InputId inputId61 = node57.getInputId();
        com.google.javascript.rhino.InputId inputId62 = node57.getInputId();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder63 = node57.getJsDocBuilderForNode();
        boolean boolean64 = node57.isCase();
        com.google.javascript.rhino.Node node65 = node13.useSourceInfoFromForTree(node57);
        int int66 = node57.getSourcePosition();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(inputId61);
        org.junit.Assert.assertNull(inputId62);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test12196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12196");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        java.lang.String str10 = node8.getSourceFileName();
        com.google.javascript.rhino.Node node11 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean12 = node11.isNE();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        boolean boolean20 = jSTypeRegistry18.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry18.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        com.google.javascript.rhino.jstype.JSType jSType29 = jSTypeRegistry18.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        boolean boolean34 = jSTypeRegistry32.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry32.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry32.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44, false);
        boolean boolean48 = jSTypeRegistry46.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList50, jSTypeArray49);
        com.google.javascript.rhino.Node node52 = jSTypeRegistry46.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList50);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry46.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSType57.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        boolean boolean63 = jSTypeRegistry61.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList65, jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry61.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList65);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSTypeRegistry61.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSType72.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] { jSType43, jSType58, jSType73 };
        com.google.javascript.rhino.jstype.FunctionType functionType75 = jSTypeRegistry15.createFunctionType(jSType29, jSTypeArray74);
        boolean boolean76 = functionType75.matchesNumberContext();
        boolean boolean78 = functionType75.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable79 = functionType75.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node81 = functionType75.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType82 = functionType75.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType83 = functionType75.getImplicitPrototype();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable84 = functionType75.getAllImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry2.createObjectType("false", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType75);
        com.google.javascript.rhino.jstype.TemplateType templateType86 = functionType75.toMaybeTemplateType();
        boolean boolean88 = functionType75.hasOwnProperty("(Named type with empty name component)");
        com.google.javascript.rhino.jstype.FunctionType functionType89 = functionType75.toMaybeFunctionType();
        boolean boolean91 = functionType89.isPropertyInExterns("OR  [directives: [, Not declared as a constructor]]");
        boolean boolean92 = functionType89.isRegexpType();
        boolean boolean94 = functionType89.removeProperty("OR  [directives: [, Not declared as a constructor]]");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertNull(jSType58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable79);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertNotNull(objectType83);
        org.junit.Assert.assertNotNull(objectTypeIterable84);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNull(templateType86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(functionType89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test12197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12197");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getReturnType();
        com.google.javascript.rhino.Node node4 = jSDocInfo0.getAssociatedNode();
        java.lang.String str5 = jSDocInfo0.getVersion();
        java.lang.String str6 = jSDocInfo0.toString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
    }

    @Test
    public void test12198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12198");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = parameterizedType78.getOwnPropertyJSDocInfo("(Named type with empty name component)");
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType82 = parameterizedType78.toMaybeParameterizedType();
        boolean boolean83 = parameterizedType78.isInterface();
        boolean boolean84 = parameterizedType78.canBeCalled();
        boolean boolean85 = parameterizedType78.isOrdinaryFunction();
        com.google.javascript.rhino.jstype.TemplateType templateType86 = parameterizedType78.toMaybeTemplateType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNull(jSDocInfo81);
        org.junit.Assert.assertNotNull(parameterizedType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNull(templateType86);
    }

    @Test
    public void test12199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12199");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.shouldPreserveTry();
        boolean boolean3 = jSDocInfo0.isNoSideEffects();
        boolean boolean4 = jSDocInfo0.isNoCompile();
        boolean boolean5 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test12200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12200");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(4, 16384, 30);
    }

    @Test
    public void test12201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12201");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isNoObjectType();
        boolean boolean81 = parameterizedType78.isOrdinaryFunction();
        com.google.javascript.rhino.JSDocInfo jSDocInfo82 = parameterizedType78.getJSDocInfo();
        java.util.Set set83 = parameterizedType78.getOwnPropertyNames();
        java.util.Spliterator<java.lang.String> strSpliterator84 = set83.spliterator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNull(jSDocInfo82);
        org.junit.Assert.assertNotNull(set83);
        org.junit.Assert.assertNotNull(strSpliterator84);
    }

    @Test
    public void test12202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12202");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        boolean boolean13 = node6.isThrow();
        boolean boolean14 = node6.isExprResult();
        boolean boolean15 = node6.isComma();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder16 = node6.getJsDocBuilderForNode();
        boolean boolean17 = node6.isString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = node6.getJSDocInfo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSDocInfo18);
    }

    @Test
    public void test12203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12203");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        com.google.javascript.rhino.jstype.ObjectType objectType63 = jSTypeRegistry2.createAnonymousObjectType();
        boolean boolean64 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65, false);
        boolean boolean69 = jSTypeRegistry67.isForwardDeclaredType("((Not declared as a constructor))");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable71 = jSTypeRegistry67.getEachReferenceTypeWithProperty("((Not declared as a constructor))");
        jSTypeRegistry67.clearNamedTypes();
        jSTypeRegistry67.clearTemplateTypeNames();
        com.google.javascript.rhino.ErrorReporter errorReporter74 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry76 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter74, false);
        boolean boolean78 = jSTypeRegistry76.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList80 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList80, jSTypeArray79);
        com.google.javascript.rhino.Node node82 = jSTypeRegistry76.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList80);
        com.google.javascript.rhino.Node node83 = jSTypeRegistry67.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList80);
        com.google.javascript.rhino.Node node84 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList80);
        boolean boolean85 = node84.isTrue();
        int int87 = node84.getIntProp((int) (byte) -1);
        node84.setSourceFileForTesting("DIV");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertNotNull(objectType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable71);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test12204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12204");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType94 = parameterizedType78.toMaybeParameterizedType();
        boolean boolean95 = parameterizedType78.isNoResolvedType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo96 = parameterizedType78.getJSDocInfo();
        java.lang.String str97 = parameterizedType78.getReferenceName();
        boolean boolean98 = parameterizedType78.matchesNumberContext();
        boolean boolean99 = parameterizedType78.isEmptyType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(parameterizedType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(jSDocInfo96);
        org.junit.Assert.assertNull(str97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test12205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12205");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("unknown");
    }

    @Test
    public void test12206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12206");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        java.lang.Iterable iterable82 = parameterizedType78.getCtorImplementedInterfaces();
        boolean boolean83 = parameterizedType78.isTemplateType();
        boolean boolean84 = parameterizedType78.matchesStringContext();
        boolean boolean85 = parameterizedType78.isNoResolvedType();
        com.google.javascript.rhino.jstype.FunctionType functionType86 = parameterizedType78.getConstructor();
        com.google.javascript.rhino.jstype.FunctionType functionType87 = parameterizedType78.toMaybeFunctionType();
        boolean boolean88 = parameterizedType78.isAllType();
        com.google.javascript.rhino.jstype.EnumType enumType89 = parameterizedType78.toMaybeEnumType();
        boolean boolean90 = parameterizedType78.hasReferenceName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNotNull(iterable82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(functionType86);
        org.junit.Assert.assertNotNull(functionType87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(enumType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test12207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12207");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        java.lang.String str64 = functionType62.getNormalizedReferenceName();
        boolean boolean66 = functionType62.hasOwnProperty("hi!");
        boolean boolean67 = functionType62.isNominalConstructor();
        boolean boolean68 = functionType62.isNominalConstructor();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test12208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12208");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        int int42 = node41.getCharno();
        boolean boolean43 = node41.isExprResult();
        boolean boolean44 = subclassRelationshipList38.equals((java.lang.Object) node41);
        boolean boolean45 = node41.isBreak();
        int int46 = node41.getLength();
        node41.setWasEmptyNode(true);
        boolean boolean49 = node41.isNot();
        boolean boolean50 = node41.isInstanceOf();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test12209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12209");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OR ");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType2 = null;
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        int int19 = node18.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship20 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType2, node12, node18);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node34 = node12.useSourceInfoIfMissingFromForTree(node33);
        boolean boolean35 = node34.isThis();
        com.google.javascript.rhino.Node node36 = null;
        com.google.javascript.jscomp.CodingConvention.Bind bind37 = new com.google.javascript.jscomp.CodingConvention.Bind(node1, node34, node36);
        boolean boolean38 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node34);
        int int39 = node34.getType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
    }

    @Test
    public void test12210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12210");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getParentScope();
        java.util.List<com.google.javascript.rhino.jstype.FunctionType> functionTypeList70 = functionType62.getSubTypes();
        int int71 = functionType62.getPropertiesCount();
        boolean boolean73 = functionType62.removeProperty("InputId: hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType74 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType) functionType62);
        boolean boolean75 = functionType62.isNativeObjectType();
        com.google.javascript.rhino.Node node77 = functionType62.getPropertyNode("");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.FunctionType functionType78 = functionType62.getSuperClassConstructor();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertNull(functionTypeList70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(node77);
    }

    @Test
    public void test12211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12211");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(7, "(java.io.IOException: java.io.IOException)");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        java.lang.String str16 = node6.getString();
        boolean boolean17 = node6.isContinue();
        boolean boolean18 = node6.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node6.setStaticSourceFile(staticSourceFile19);
        java.lang.Object obj22 = node6.getProp(37);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean26 = node25.isFunction();
        node6.addChildToFront(node25);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 10, node31, node34, node37, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node41 = node37.getLastSibling();
        boolean boolean42 = node41.isDec();
        boolean boolean43 = node41.isOr();
        node41.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node46 = node25.srcref(node41);
        com.google.javascript.rhino.Node node47 = node2.clonePropsFrom(node46);
        boolean boolean48 = node46.isIf();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test12212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12212");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = parameterizedType78.getOwnPropertyJSDocInfo("(Named type with empty name component)");
        com.google.javascript.rhino.jstype.JSType jSType82 = parameterizedType78.autobox();
        boolean boolean83 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType84 = parameterizedType78.toMaybeParameterizedType();
        boolean boolean85 = parameterizedType84.isFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType86 = parameterizedType84.getParameterType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNull(jSDocInfo81);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(parameterizedType84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNull(jSType86);
    }

    @Test
    public void test12213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12213");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 100);
        int int2 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
    }

    @Test
    public void test12214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12214");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(15, 97, 2);
        boolean boolean4 = node3.isReturn();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test12215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12215");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.lang.String str58 = subclassRelationshipList38.toString();
        java.lang.Object[] objArray59 = subclassRelationshipList38.toArray();
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator60 = subclassRelationshipList38.spliterator();
        java.util.stream.Stream<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipStream61 = subclassRelationshipList38.parallelStream();
        boolean boolean62 = subclassRelationshipList38.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor64 = subclassRelationshipList38.listIterator((int) (short) 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator60);
        org.junit.Assert.assertNotNull(subclassRelationshipStream61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipItor64);
    }

    @Test
    public void test12216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12216");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        boolean boolean94 = parameterizedType78.isFunctionType();
        com.google.javascript.rhino.jstype.ObjectType objectType95 = parameterizedType78.getImplicitPrototype();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType96 = parameterizedType78.toMaybeParameterizedType();
        boolean boolean97 = parameterizedType96.isNominalType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(objectType95);
        org.junit.Assert.assertNotNull(parameterizedType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test12217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12217");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.jstype.JSType jSType13 = jSTypeRegistry2.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15, false);
        boolean boolean19 = jSTypeRegistry17.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        boolean boolean55 = jSTypeRegistry53.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray56 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList57 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList57, jSTypeArray56);
        com.google.javascript.rhino.Node node59 = jSTypeRegistry53.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList57);
        com.google.javascript.rhino.jstype.JSType jSType64 = jSTypeRegistry53.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSType64.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter66 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter66, false);
        boolean boolean70 = jSTypeRegistry68.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray71 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList72 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList72, jSTypeArray71);
        com.google.javascript.rhino.Node node74 = jSTypeRegistry68.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList72);
        com.google.javascript.rhino.jstype.JSType jSType79 = jSTypeRegistry68.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType80 = jSType79.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray81 = new com.google.javascript.rhino.jstype.JSType[] { jSType50, jSType65, jSType80 };
        com.google.javascript.rhino.jstype.FunctionType functionType82 = jSTypeRegistry22.createFunctionType(jSType36, jSTypeArray81);
        boolean boolean83 = functionType82.matchesNumberContext();
        boolean boolean85 = functionType82.hasProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType86 = jSTypeRegistry17.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType82);
        jSTypeRegistry2.registerPropertyOnType("JSDocInfo", (com.google.javascript.rhino.jstype.JSType) objectType86);
        com.google.javascript.rhino.jstype.ObjectType objectType88 = jSTypeRegistry2.createAnonymousObjectType();
        boolean boolean90 = jSTypeRegistry2.isForwardDeclaredType("{1912950188}");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node92 = jSTypeRegistry2.createOptionalParameters(jSTypeArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(jSType64);
        org.junit.Assert.assertNull(jSType65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(jSTypeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(jSType79);
        org.junit.Assert.assertNull(jSType80);
        org.junit.Assert.assertNotNull(jSTypeArray81);
        org.junit.Assert.assertNotNull(functionType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objectType86);
        org.junit.Assert.assertNotNull(objectType88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test12218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12218");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        boolean boolean69 = functionType62.hasCachedValues();
        com.google.javascript.rhino.jstype.JSType jSType70 = functionType62.getReturnType();
        com.google.javascript.rhino.jstype.ObjectType.Property property72 = functionType62.getSlot("");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(jSType70);
        org.junit.Assert.assertNull(property72);
    }

    @Test
    public void test12219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12219");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getReturnType();
        boolean boolean4 = jSDocInfo0.isConsistentIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo0.getVisibility();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        java.lang.String str8 = jSDocInfo0.getOriginalCommentString();
        boolean boolean9 = jSDocInfo0.shouldPreserveTry();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(visibility6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test12220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12220");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean90 = enumType88.hasReferenceName();
        boolean boolean92 = enumType88.isPropertyTypeInferred("");
        boolean boolean94 = enumType88.removeProperty("STRING \n");
        java.lang.String str95 = enumType88.getReferenceName();
        com.google.javascript.rhino.Node node97 = enumType88.getPropertyNode("(Node tree inequality:\nTree1:\nTYPEOF Not declared as a constructor 32\n\n\nTree2:\nOR \n\n\nSubtree1: TYPEOF Not declared as a constructor 32\n\n\nSubtree2: OR \n)");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}" + "'", str95, "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        org.junit.Assert.assertNull(node97);
    }

    @Test
    public void test12221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12221");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean64 = jSDocInfo63.isNoCompile();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) 10, node68, node71, node74, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node78 = node74.getLastSibling();
        boolean boolean79 = node78.isGetterDef();
        boolean boolean80 = node78.isSyntheticBlock();
        jSDocInfo63.setAssociatedNode(node78);
        java.util.Collection<java.lang.String> strCollection82 = jSDocInfo63.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList83 = jSDocInfo63.getExtendedInterfaces();
        functionType62.setJSDocInfo(jSDocInfo63);
        com.google.javascript.rhino.jstype.ObjectType objectType85 = functionType62.getParentScope();
        com.google.javascript.rhino.jstype.JSType jSType86 = functionType62.autobox();
        com.google.javascript.rhino.jstype.ObjectType objectType87 = functionType62.getPrototype();
        com.google.javascript.rhino.jstype.ObjectType objectType88 = objectType87.getImplicitPrototype();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(strCollection82);
        org.junit.Assert.assertNotNull(jSTypeExpressionList83);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNotNull(jSType86);
        org.junit.Assert.assertNotNull(objectType87);
        org.junit.Assert.assertNull(objectType88);
    }

    @Test
    public void test12222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12222");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean4 = jSDocInfo0.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection6 = jSDocInfo0.getMarkers();
        boolean boolean8 = jSDocInfo0.hasParameterType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        java.lang.String str9 = jSDocInfo0.getOriginalCommentString();
        java.lang.String str10 = jSDocInfo0.getReturnDescription();
        java.lang.String str11 = jSDocInfo0.getBlockDescription();
        boolean boolean12 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(markerCollection6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test12223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12223");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        int int16 = node15.getCharno();
        com.google.javascript.rhino.InputId inputId18 = new com.google.javascript.rhino.InputId("hi!");
        java.lang.String str19 = inputId18.getIdName();
        node15.setInputId(inputId18);
        com.google.javascript.rhino.Node node21 = node12.useSourceInfoIfMissingFrom(node15);
        int int22 = node21.getSideEffectFlags();
        boolean boolean23 = node21.isContinue();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test12224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12224");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(41, "function (this:{450207892}, {336579408}): {225103946}", 46, 32);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test12225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12225");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("(Not declared as a constructor)");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType2 = null;
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        int int19 = node18.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship20 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType2, node12, node18);
        int int22 = node12.getIntProp((int) (byte) 0);
        boolean boolean23 = node12.isWhile();
        boolean boolean24 = node12.isUnscopedQualifiedName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = null;
        com.google.javascript.rhino.jstype.JSType jSType26 = assertionFunctionSpec1.getAssertedType(node12, jSTypeRegistry25);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) 10, node30, node33, node36, 0, (int) (byte) 1);
        boolean boolean40 = node33.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node33);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("false");
        com.google.javascript.rhino.Node node44 = node33.copyInformationFromForTree(node43);
        com.google.javascript.rhino.Node node45 = assertionFunctionSpec1.getAssertedParam(node43);
        boolean boolean46 = node43.hasMoreThanOneChild();
        node43.putBooleanProp(48, true);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition50 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node51 = namePosition50.getItem();
        namePosition50.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList57 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition50);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        int int61 = node60.getCharno();
        boolean boolean62 = node60.isAssignAdd();
        boolean boolean63 = node60.isNot();
        java.lang.String str64 = node60.toString();
        namePosition50.setItem(node60);
        node60.setSourceFileForTesting("Not declared as a constructor");
        boolean boolean68 = node60.isNE();
        node60.removeProp(36);
        boolean boolean71 = node60.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node72 = node43.useSourceInfoIfMissingFrom(node60);
        int int73 = node60.getSourceOffset();
        boolean boolean74 = node60.isLabel();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(staticSourceFile41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(nodeSourcePositionList57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "OR " + "'", str64, "OR ");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test12226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12226");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = parameterizedType78.toMaybeEnumElementType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo95 = parameterizedType78.getJSDocInfo();
        com.google.javascript.rhino.jstype.JSType jSType96 = parameterizedType78.getParameterType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope97 = parameterizedType78.getParentScope();
        boolean boolean99 = parameterizedType78.hasOwnProperty("Object");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(enumElementType94);
        org.junit.Assert.assertNull(jSDocInfo95);
        org.junit.Assert.assertNull(jSType96);
        org.junit.Assert.assertNotNull(jSTypeStaticScope97);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test12227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12227");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(44, 8, 39);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) 10, node7, node10, node13, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node17 = node13.getLastSibling();
        boolean boolean18 = node17.isDec();
        node17.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node21 = node17.cloneTree();
        com.google.javascript.rhino.Node node22 = node17.getLastSibling();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType23 = null;
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 10, node27, node30, node33, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        int int40 = node39.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship41 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType23, node33, node39);
        com.google.javascript.rhino.Node node42 = node22.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node43 = node3.copyInformationFrom(node42);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) 10, node47, node50, node53, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node57 = node53.getLastSibling();
        boolean boolean58 = node57.isDec();
        node57.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node61 = node57.cloneTree();
        boolean boolean62 = node61.isTry();
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean64 = jSDocInfo63.isNoShadow();
        java.lang.String str66 = jSDocInfo63.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean67 = jSDocInfo63.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList68 = jSDocInfo63.getExtendedInterfaces();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection69 = jSDocInfo63.getMarkers();
        java.util.Set<java.lang.String> strSet70 = jSDocInfo63.getParameterNames();
        boolean boolean71 = jSDocInfo63.isConstant();
        java.util.Set<java.lang.String> strSet72 = jSDocInfo63.getSuppressions();
        node61.setDirectives(strSet72);
        node3.addChildToFront(node61);
        node3.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList68);
        org.junit.Assert.assertNotNull(markerCollection69);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strSet72);
    }

    @Test
    public void test12228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12228");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean90 = enumType88.hasReferenceName();
        com.google.javascript.rhino.Node node91 = enumType88.getSource();
        com.google.javascript.rhino.JSDocInfo jSDocInfo93 = enumType88.getOwnPropertyJSDocInfo("Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n");
        boolean boolean95 = enumType88.isPropertyInExterns("InputId: OR  0");
        java.lang.Iterable iterable96 = enumType88.getCtorImplementedInterfaces();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNull(node91);
        org.junit.Assert.assertNull(jSDocInfo93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(iterable96);
    }

    @Test
    public void test12229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12229");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesThis();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.clearSideEffectFlags();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test12230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12230");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        com.google.javascript.rhino.JSDocInfo jSDocInfo90 = enumType88.getOwnPropertyJSDocInfo("Node tree inequality:\nTree1:\nEXPR_RESULT\n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: EXPR_RESULT\n    OR \n\n\nSubtree2: OR \n");
        com.google.javascript.rhino.jstype.FunctionType functionType91 = enumType88.getOwnerFunction();
        boolean boolean93 = enumType88.removeProperty("STRING \n");
        boolean boolean95 = enumType88.isPropertyTypeDeclared("Node tree inequality:\nTree1:\nEXPR_RESULT\n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: EXPR_RESULT\n    OR \n\n\nSubtree2: OR \n");
        com.google.javascript.rhino.jstype.ObjectType objectType96 = enumType88.dereference();
        boolean boolean97 = enumType88.isBooleanValueType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertNull(jSDocInfo90);
        org.junit.Assert.assertNull(functionType91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(objectType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test12231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12231");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.jstype.JSTypeNative[] jSTypeNativeArray9 = new com.google.javascript.rhino.jstype.JSTypeNative[] {};
        com.google.javascript.rhino.jstype.JSType jSType10 = jSTypeRegistry2.createUnionType(jSTypeNativeArray9);
        jSTypeRegistry2.forwardDeclareType("Function");
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        boolean boolean17 = jSTypeRegistry15.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode18);
        jSTypeRegistry2.setResolveMode(resolveMode18);
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType jSType27 = jSTypeRegistry22.createNamedType("Unknown class name", "", (int) 'a', 4);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = jSTypeRegistry22.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        boolean boolean33 = jSTypeRegistry31.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray34 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList35 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList35, jSTypeArray34);
        com.google.javascript.rhino.Node node37 = jSTypeRegistry31.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList35);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSTypeRegistry31.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry31.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType45 = jSTypeRegistry31.createUnionType(jSTypeArray44);
        com.google.javascript.rhino.Node node46 = jSTypeRegistry22.createParameters(jSTypeArray44);
        com.google.javascript.rhino.jstype.JSType jSType47 = jSTypeRegistry2.createUnionType(jSTypeArray44);
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter49 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter49, false);
        boolean boolean53 = jSTypeRegistry51.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray54 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList55 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList55, jSTypeArray54);
        com.google.javascript.rhino.Node node57 = jSTypeRegistry51.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList55);
        com.google.javascript.rhino.jstype.JSType jSType62 = jSTypeRegistry51.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63, false);
        boolean boolean67 = jSTypeRegistry65.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray68 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList69 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList69, jSTypeArray68);
        com.google.javascript.rhino.Node node71 = jSTypeRegistry65.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList69);
        com.google.javascript.rhino.jstype.JSType jSType76 = jSTypeRegistry65.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry65.resetForTypeCheck();
        com.google.javascript.rhino.ErrorReporter errorReporter78 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry80 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter78, false);
        boolean boolean82 = jSTypeRegistry80.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray83 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList84 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList84, jSTypeArray83);
        com.google.javascript.rhino.Node node86 = jSTypeRegistry80.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList84);
        com.google.javascript.rhino.jstype.JSType jSType91 = jSTypeRegistry80.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry80.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray93 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType94 = jSTypeRegistry80.createUnionType(jSTypeArray93);
        com.google.javascript.rhino.jstype.JSType jSType95 = jSTypeRegistry65.createUnionType(jSTypeArray93);
        com.google.javascript.rhino.Node node96 = jSTypeRegistry51.createOptionalParameters(jSTypeArray93);
        com.google.javascript.rhino.jstype.FunctionType functionType97 = jSTypeRegistry2.createConstructorTypeWithVarArgs(jSType48, jSTypeArray93);
        boolean boolean98 = functionType97.isUnknownType();
        boolean boolean99 = functionType97.canBeCalled();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSTypeNativeArray9);
        org.junit.Assert.assertNotNull(jSType10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(jSType27);
        org.junit.Assert.assertNull(errorReporter28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSTypeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertNotNull(jSType45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(jSType47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(jSTypeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(jSType62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(jSTypeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(jSType76);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(jSTypeArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(jSType91);
        org.junit.Assert.assertNotNull(jSTypeArray93);
        org.junit.Assert.assertNotNull(jSType94);
        org.junit.Assert.assertNotNull(jSType95);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertNotNull(functionType97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test12232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12232");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.hasReferenceName();
        boolean boolean95 = enumElementType93.isObject();
        boolean boolean97 = enumElementType93.isPropertyTypeDeclared("java.io.IOException: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        java.lang.String str98 = null; // flaky: enumElementType93.toAnnotationString();
        java.lang.String str99 = enumElementType93.getReferenceName();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str98 + "' != '" + "Function" + "'", str98, "Function");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)" + "'", str99, "(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
    }

    @Test
    public void test12233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12233");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (short) 10);
    }

    @Test
    public void test12234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12234");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.hasCachedValues();
        java.lang.String str90 = enumType88.getReferenceName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo91 = enumType88.getJSDocInfo();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable92 = enumType88.getCtorExtendedInterfaces();
        java.lang.String str93 = enumType88.getDisplayName();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}" + "'", str90, "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        org.junit.Assert.assertNull(jSDocInfo91);
        org.junit.Assert.assertNotNull(objectTypeIterable92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
    }

    @Test
    public void test12235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12235");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("java.io.IOException: ");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        int int5 = node4.getCharno();
        java.lang.String str6 = node4.getSourceFileName();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        int int10 = node9.getCharno();
        boolean boolean11 = node9.isExprResult();
        node4.addChildToFront(node9);
        java.lang.String str13 = node4.getSourceFileName();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14, false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45, false);
        boolean boolean49 = jSTypeRegistry47.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray50 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList51 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList51, jSTypeArray50);
        com.google.javascript.rhino.Node node53 = jSTypeRegistry47.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList51);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSTypeRegistry47.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSType58.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter60 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter60, false);
        boolean boolean64 = jSTypeRegistry62.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray65 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList66 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList66, jSTypeArray65);
        com.google.javascript.rhino.Node node68 = jSTypeRegistry62.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList66);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSTypeRegistry62.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType74 = jSType73.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray75 = new com.google.javascript.rhino.jstype.JSType[] { jSType44, jSType59, jSType74 };
        com.google.javascript.rhino.jstype.FunctionType functionType76 = jSTypeRegistry16.createFunctionType(jSType30, jSTypeArray75);
        boolean boolean78 = jSTypeRegistry16.isForwardDeclaredType("");
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode79 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_NAMES;
        jSTypeRegistry16.setResolveMode(resolveMode79);
        com.google.javascript.rhino.jstype.JSType jSType81 = assertionFunctionSpec1.getAssertedType(node4, jSTypeRegistry16);
        java.lang.String str82 = node4.toString();
        int int83 = node4.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSTypeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(jSType58);
        org.junit.Assert.assertNull(jSType59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSTypeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(jSType73);
        org.junit.Assert.assertNull(jSType74);
        org.junit.Assert.assertNotNull(jSTypeArray75);
        org.junit.Assert.assertNotNull(functionType76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + resolveMode79 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_NAMES + "'", resolveMode79.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_NAMES));
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "OR " + "'", str82, "OR ");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test12236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12236");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.hasReferenceName();
        boolean boolean95 = enumElementType93.matchesNumberContext();
        boolean boolean97 = enumElementType93.isPropertyTypeInferred("(Function)");
        com.google.javascript.rhino.jstype.EnumElementType enumElementType98 = enumElementType93.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.ObjectType objectType99 = enumElementType98.dereference();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(enumElementType98);
        org.junit.Assert.assertNotNull(objectType99);
    }

    @Test
    public void test12237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12237");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 10, node22, node25, node28, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = node28.getLastSibling();
        boolean boolean33 = node32.isDec();
        com.google.javascript.rhino.Node node34 = node10.srcrefTree(node32);
        boolean boolean35 = node10.isDefaultCase();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test12238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12238");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        boolean boolean81 = parameterizedType78.isPropertyTypeInferred("java.io.IOException: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        com.google.javascript.rhino.jstype.JSType jSType82 = parameterizedType78.getIndexType();
        boolean boolean83 = parameterizedType78.isOrdinaryFunction();
        java.util.Set<java.lang.String> strSet84 = parameterizedType78.getOwnPropertyNames();
        boolean boolean85 = parameterizedType78.isNullable();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(jSType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test12239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12239");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        boolean boolean17 = jSTypeRegistry15.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray18 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList19 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList19, jSTypeArray18);
        com.google.javascript.rhino.Node node21 = jSTypeRegistry15.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList19);
        com.google.javascript.rhino.jstype.JSType jSType26 = jSTypeRegistry15.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27, false);
        boolean boolean31 = jSTypeRegistry29.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList33 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList33, jSTypeArray32);
        com.google.javascript.rhino.Node node35 = jSTypeRegistry29.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList33);
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry29.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41, false);
        boolean boolean45 = jSTypeRegistry43.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray46 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList47 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList47, jSTypeArray46);
        com.google.javascript.rhino.Node node49 = jSTypeRegistry43.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList47);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSTypeRegistry43.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType55 = jSType54.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56, false);
        boolean boolean60 = jSTypeRegistry58.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList62 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList62, jSTypeArray61);
        com.google.javascript.rhino.Node node64 = jSTypeRegistry58.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList62);
        com.google.javascript.rhino.jstype.JSType jSType69 = jSTypeRegistry58.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType70 = jSType69.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray71 = new com.google.javascript.rhino.jstype.JSType[] { jSType40, jSType55, jSType70 };
        com.google.javascript.rhino.jstype.FunctionType functionType72 = jSTypeRegistry12.createFunctionType(jSType26, jSTypeArray71);
        boolean boolean73 = functionType72.matchesNumberContext();
        java.lang.String str74 = functionType72.getNormalizedReferenceName();
        jSTypeRegistry2.unregisterPropertyOnType("Not declared as a type name", (com.google.javascript.rhino.jstype.JSType) functionType72);
        com.google.javascript.rhino.ErrorReporter errorReporter76 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter77 = jSTypeRegistry2.getErrorReporter();
        boolean boolean79 = jSTypeRegistry2.isForwardDeclaredType("(Function)");
        boolean boolean81 = jSTypeRegistry2.hasNamespace("InputId: Not declared as a constructor");
        jSTypeRegistry2.resetForTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(jSType26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSType54);
        org.junit.Assert.assertNull(jSType55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertNull(jSType70);
        org.junit.Assert.assertNotNull(jSTypeArray71);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(errorReporter76);
        org.junit.Assert.assertNull(errorReporter77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test12240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12240");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean4 = jSDocInfo0.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection6 = jSDocInfo0.getMarkers();
        boolean boolean7 = jSDocInfo0.hasModifies();
        java.lang.String str8 = jSDocInfo0.getReturnDescription();
        java.lang.String str9 = jSDocInfo0.getSourceName();
        java.lang.String str10 = jSDocInfo0.getDeprecationReason();
        boolean boolean11 = jSDocInfo0.isConsistentIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getReturnType();
        boolean boolean13 = jSDocInfo0.isExterns();
        jSDocInfo0.setLicense("(((Not declared as a constructor)))");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(markerCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test12241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12241");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isInstanceType();
        boolean boolean81 = parameterizedType78.isCheckedUnknownType();
        boolean boolean82 = parameterizedType78.isOrdinaryFunction();
        com.google.javascript.rhino.jstype.FunctionType functionType83 = parameterizedType78.toMaybeFunctionType();
        com.google.javascript.rhino.Node node84 = functionType83.getParametersNode();
        boolean boolean85 = node84.isInc();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(functionType83);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test12242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12242");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((-1), "false");
        boolean boolean3 = node2.isTrue();
        boolean boolean4 = node2.isScript();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test12243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12243");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isCheckedUnknownType();
        int int81 = parameterizedType78.getPropertiesCount();
        boolean boolean82 = parameterizedType78.hasCachedValues();
        boolean boolean83 = parameterizedType78.isFunctionType();
        com.google.javascript.rhino.jstype.FunctionType functionType84 = parameterizedType78.toMaybeFunctionType();
        parameterizedType78.clearResolved();
        com.google.javascript.rhino.jstype.FunctionType functionType86 = parameterizedType78.toMaybeFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType88 = parameterizedType78.findPropertyType("OR  [synthetic: 1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(functionType84);
        org.junit.Assert.assertNotNull(functionType86);
        org.junit.Assert.assertNull(jSType88);
    }

    @Test
    public void test12244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12244");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isEnumElementType();
        boolean boolean81 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType82 = parameterizedType78.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.JSType jSType83 = parameterizedType78.collapseUnion();
        java.util.Set<java.lang.String> strSet84 = parameterizedType78.getOwnPropertyNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo85 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean86 = jSDocInfo85.isExpose();
        boolean boolean87 = jSDocInfo85.isExpose();
        boolean boolean88 = jSDocInfo85.hasEnumParameterType();
        java.lang.String str89 = jSDocInfo85.getMeaning();
        boolean boolean90 = jSDocInfo85.isHidden();
        parameterizedType78.setJSDocInfo(jSDocInfo85);
        boolean boolean92 = jSDocInfo85.isDefine();
        boolean boolean93 = jSDocInfo85.isConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(enumElementType82);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test12245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12245");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean64 = jSDocInfo63.isNoCompile();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) 10, node68, node71, node74, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node78 = node74.getLastSibling();
        boolean boolean79 = node78.isGetterDef();
        boolean boolean80 = node78.isSyntheticBlock();
        jSDocInfo63.setAssociatedNode(node78);
        java.util.Collection<java.lang.String> strCollection82 = jSDocInfo63.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList83 = jSDocInfo63.getExtendedInterfaces();
        functionType62.setJSDocInfo(jSDocInfo63);
        boolean boolean85 = functionType62.hasAnyTemplate();
        boolean boolean86 = functionType62.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType87 = functionType62.autobox();
        com.google.javascript.rhino.jstype.EnumType enumType88 = functionType62.toMaybeEnumType();
        int int89 = functionType62.getPropertiesCount();
        boolean boolean90 = functionType62.isInstanceType();
        com.google.javascript.rhino.Node node92 = functionType62.getPropertyNode("STRING OR \n");
        com.google.javascript.rhino.jstype.JSType jSType94 = functionType62.getPropertyType("{2083075630}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(strCollection82);
        org.junit.Assert.assertNotNull(jSTypeExpressionList83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(jSType87);
        org.junit.Assert.assertNull(enumType88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(node92);
        org.junit.Assert.assertNotNull(jSType94);
    }

    @Test
    public void test12246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12246");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExpose();
        int int2 = jSDocInfo0.getParameterCount();
        boolean boolean3 = jSDocInfo0.isNoShadow();
        boolean boolean4 = jSDocInfo0.isInterface();
        boolean boolean5 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str6 = jSDocInfo0.getLicense();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test12247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12247");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean64 = jSDocInfo63.isNoCompile();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) 10, node68, node71, node74, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node78 = node74.getLastSibling();
        boolean boolean79 = node78.isGetterDef();
        boolean boolean80 = node78.isSyntheticBlock();
        jSDocInfo63.setAssociatedNode(node78);
        java.util.Collection<java.lang.String> strCollection82 = jSDocInfo63.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList83 = jSDocInfo63.getExtendedInterfaces();
        functionType62.setJSDocInfo(jSDocInfo63);
        boolean boolean85 = functionType62.isTemplateType();
        boolean boolean86 = functionType62.matchesStringContext();
        boolean boolean87 = functionType62.isNoResolvedType();
        com.google.javascript.rhino.Node node89 = functionType62.getPropertyNode("({})");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(strCollection82);
        org.junit.Assert.assertNotNull(jSTypeExpressionList83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(node89);
    }

    @Test
    public void test12248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12248");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("?");
    }

    @Test
    public void test12249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12249");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        boolean boolean15 = node3.isCall();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType16 = null;
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 10, node20, node23, node26, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        int int33 = node32.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship34 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType16, node26, node32);
        com.google.javascript.rhino.Node node35 = node3.copyInformationFromForTree(node32);
        boolean boolean36 = node3.hasChildren();
        boolean boolean37 = node3.isOr();
        boolean boolean38 = node3.isComma();
        boolean boolean39 = node3.isOr();
        boolean boolean40 = node3.isThrow();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test12250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12250");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.ObjectType objectType93 = enumType88.getImplicitPrototype();
        com.google.javascript.rhino.jstype.ObjectType objectType94 = enumType88.getImplicitPrototype();
        com.google.javascript.rhino.jstype.ObjectType objectType95 = enumType88.getImplicitPrototype();
        boolean boolean96 = enumType88.hasCachedValues();
        java.lang.Class<?> wildcardClass97 = enumType88.getClass();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(objectType93);
        org.junit.Assert.assertNotNull(objectType94);
        org.junit.Assert.assertNotNull(objectType95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test12251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12251");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 35);
        node1.putBooleanProp(100, true);
        boolean boolean5 = node1.isSyntheticBlock();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) 10, node9, node12, node15, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node19 = node15.getLastSibling();
        boolean boolean20 = node19.isDec();
        node19.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node23 = node19.cloneTree();
        com.google.javascript.rhino.Node node24 = node19.getLastSibling();
        boolean boolean25 = node24.isContinue();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType26 = null;
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) 10, node30, node33, node36, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        int int43 = node42.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship44 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType26, node36, node42);
        int int45 = node42.getLength();
        java.lang.String str46 = node42.getString();
        boolean boolean47 = node42.isWith();
        com.google.javascript.rhino.Node node48 = com.google.javascript.jscomp.NodeUtil.newExpr(node42);
        boolean boolean49 = node48.isIn();
        boolean boolean50 = node48.isEmpty();
        com.google.javascript.rhino.Node node51 = node24.useSourceInfoFrom(node48);
        boolean boolean52 = node51.isOr();
        com.google.javascript.rhino.Node node53 = node1.useSourceInfoFrom(node51);
        com.google.javascript.rhino.Node node54 = node51.getLastChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node54);
    }

    @Test
    public void test12252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12252");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList1 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getTypedefType();
        boolean boolean3 = jSDocInfo0.isInterface();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) 10, node7, node10, node13, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node17 = node13.getLastSibling();
        boolean boolean18 = node17.isDec();
        node17.setIsSyntheticBlock(true);
        com.google.javascript.rhino.InputId inputId21 = node17.getInputId();
        com.google.javascript.rhino.Node node22 = node17.detachFromParent();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) 10, node26, node29, node32, 0, (int) (byte) 1);
        java.lang.String str36 = node26.getString();
        node26.setOptionalArg(false);
        boolean boolean39 = node26.isTypeOf();
        int int40 = node26.getSideEffectFlags();
        com.google.javascript.rhino.Node node41 = node22.srcref(node26);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node22);
        jSDocInfo0.setAssociatedNode(node22);
        boolean boolean44 = node22.isDelProp();
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(inputId21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(staticSourceFile42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test12253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12253");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        java.lang.String str69 = null; // flaky: functionType62.toAnnotationString();
        boolean boolean70 = functionType62.isFunctionType();
        boolean boolean71 = functionType62.isNativeObjectType();
        int int72 = functionType62.getPropertiesCount();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope73 = functionType62.getParentScope();
        com.google.javascript.rhino.Node node75 = functionType62.getPropertyNode("?");
        boolean boolean76 = functionType62.hasReferenceName();
        boolean boolean77 = functionType62.isDateType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Function" + "'", str69, "Function");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(jSTypeStaticScope73);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test12254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12254");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor40 = subclassRelationshipList38.iterator();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags42 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags42.setThrows();
        sideEffectFlags42.setReturnsTainted();
        sideEffectFlags42.clearAllFlags();
        boolean boolean46 = subclassRelationshipList38.contains((java.lang.Object) sideEffectFlags42);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (byte) 10, node50, node53, node56, 0, (int) (byte) 1);
        java.lang.String str60 = node50.getString();
        node50.setLineno(4);
        boolean boolean63 = node50.isGetterDef();
        com.google.javascript.rhino.Node node64 = node50.detachFromParent();
        boolean boolean65 = node50.isDebugger();
        boolean boolean66 = subclassRelationshipList38.contains((java.lang.Object) boolean65);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        int int71 = node70.getType();
        node70.setWasEmptyNode(true);
        java.lang.String str77 = node70.toString(true, false, true);
        node70.addSuppression("{618989675}");
        boolean boolean80 = subclassRelationshipList38.contains((java.lang.Object) "{618989675}");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(subclassRelationshipItor40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 40 + "'", int71 == 40);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "STRING hi! 100" + "'", str77, "STRING hi! 100");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test12255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12255");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        java.lang.Object obj39 = null;
        boolean boolean40 = subclassRelationshipList38.contains(obj39);
        int int41 = subclassRelationshipList38.size();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
    }

    @Test
    public void test12256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12256");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        java.lang.String str4 = node2.getSourceFileName();
        int int5 = node2.getSourcePosition();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) 'a', "({913046089})", 43, 42);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable11 = node10.siblings();
        node2.addChildrenToFront(node10);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType13 = null;
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) 10, node17, node20, node23, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        int int30 = node29.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship31 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType13, node23, node29);
        boolean boolean32 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node23);
        boolean boolean33 = node23.isDo();
        boolean boolean34 = node23.isThis();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = new com.google.javascript.rhino.JSTypeExpression(node23, "false");
        boolean boolean37 = node23.isIf();
        boolean boolean38 = node23.isLabelName();
        boolean boolean39 = node23.isAssignAdd();
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildrenToBack(node23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeIterable11);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test12257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12257");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        java.lang.Iterable iterable82 = parameterizedType78.getCtorImplementedInterfaces();
        boolean boolean83 = parameterizedType78.isTemplateType();
        boolean boolean85 = parameterizedType78.isPropertyTypeInferred("Not declared as a constructor");
        java.util.Set<java.lang.String> strSet86 = parameterizedType78.getPropertyNames();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType87 = parameterizedType78.toMaybeEnumElementType();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType88 = enumElementType87.collapseUnion();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNotNull(iterable82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNull(enumElementType87);
    }

    @Test
    public void test12258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12258");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isNoObjectType();
        boolean boolean69 = functionType62.isStringObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot71 = functionType62.getOwnSlot("Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n");
        boolean boolean72 = functionType62.matchesStringContext();
        com.google.javascript.rhino.jstype.ObjectType objectType73 = functionType62.getTypeOfThis();
        com.google.javascript.rhino.jstype.JSType jSType75 = objectType73.findPropertyType("{339216418}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(jSTypeStaticSlot71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objectType73);
        org.junit.Assert.assertNotNull(jSType75);
    }

    @Test
    public void test12259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12259");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = null;
        parameterizedType78.setPropertyJSDocInfo("hi!", jSDocInfo83);
        boolean boolean85 = parameterizedType78.isCheckedUnknownType();
        com.google.javascript.rhino.jstype.EnumType enumType86 = parameterizedType78.toMaybeEnumType();
        boolean boolean87 = parameterizedType78.isNullable();
        com.google.javascript.rhino.jstype.JSType jSType88 = parameterizedType78.getIndexType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType89 = parameterizedType78.toMaybeEnumElementType();
        boolean boolean90 = parameterizedType78.matchesStringContext();
        com.google.javascript.rhino.jstype.EnumType enumType91 = parameterizedType78.toMaybeEnumType();
        boolean boolean93 = parameterizedType78.hasOwnProperty("(OR \n)");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(enumType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertNull(enumElementType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(enumType91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test12260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12260");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean4 = jSDocInfo0.isImplicitCast();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection5 = jSDocInfo0.getMarkers();
        java.lang.String str6 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getType();
        boolean boolean8 = jSDocInfo0.isHidden();
        int int9 = jSDocInfo0.getParameterCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(markerCollection5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test12261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12261");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType70 = functionType62.getImplicitPrototype();
        com.google.javascript.rhino.jstype.ObjectType objectType71 = functionType62.getPrototype();
        boolean boolean72 = functionType62.isObject();
        boolean boolean73 = functionType62.hasCachedValues();
        com.google.javascript.rhino.jstype.FunctionType functionType75 = functionType62.getBindReturnType(2147483647);
        boolean boolean76 = functionType75.hasAnyTemplateInternal();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertNotNull(objectType70);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test12262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12262");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        boolean boolean9 = jSTypeRegistry7.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray10 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList11, jSTypeArray10);
        com.google.javascript.rhino.Node node13 = jSTypeRegistry7.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList11);
        com.google.javascript.rhino.jstype.JSType jSType18 = jSTypeRegistry7.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry7.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray20 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType21 = jSTypeRegistry7.createUnionType(jSTypeArray20);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        boolean boolean30 = jSTypeRegistry28.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList32 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList32, jSTypeArray31);
        com.google.javascript.rhino.Node node34 = jSTypeRegistry28.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList32);
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry28.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        boolean boolean44 = jSTypeRegistry42.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList46 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList46, jSTypeArray45);
        com.google.javascript.rhino.Node node48 = jSTypeRegistry42.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList46);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry42.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter69 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter69, false);
        boolean boolean73 = jSTypeRegistry71.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList75 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList75, jSTypeArray74);
        com.google.javascript.rhino.Node node77 = jSTypeRegistry71.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList75);
        com.google.javascript.rhino.jstype.JSType jSType82 = jSTypeRegistry71.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType83 = jSType82.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray84 = new com.google.javascript.rhino.jstype.JSType[] { jSType53, jSType68, jSType83 };
        com.google.javascript.rhino.jstype.FunctionType functionType85 = jSTypeRegistry25.createFunctionType(jSType39, jSTypeArray84);
        com.google.javascript.rhino.jstype.FunctionType functionType86 = jSTypeRegistry2.createFunctionType(jSType21, false, jSTypeArray84);
        com.google.javascript.rhino.jstype.ObjectType objectType87 = jSTypeRegistry2.createAnonymousObjectType();
        jSTypeRegistry2.forwardDeclareType("Unknown");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(jSType18);
        org.junit.Assert.assertNotNull(jSTypeArray20);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(jSTypeArray84);
        org.junit.Assert.assertNotNull(functionType85);
        org.junit.Assert.assertNotNull(functionType86);
        org.junit.Assert.assertNotNull(objectType87);
    }

    @Test
    public void test12263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12263");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        node3.setOptionalArg(false);
        boolean boolean16 = node3.isHook();
        boolean boolean17 = node3.isVarArgs();
        boolean boolean18 = node3.isTrue();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(43, "Not declared as a constructor", (int) (byte) 100, (int) (byte) 10);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType24 = null;
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        int int28 = node27.getCharno();
        java.lang.String str29 = node27.getSourceFileName();
        boolean boolean30 = node27.isLabel();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) 10, node34, node37, node40, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node44 = node40.getLastSibling();
        boolean boolean45 = node44.isDec();
        boolean boolean46 = node44.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship47 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType24, node27, node44);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection48 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node44);
        java.lang.String[] strArray53 = new java.lang.String[] { "Not declared as a constructor", "hi!", "Not declared as a constructor", "OR \n" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        node44.setDirectives((java.util.Set<java.lang.String>) strSet54);
        strSet54.clear();
        strSet54.clear();
        com.google.common.collect.ImmutableList.Builder<java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>> subclassRelationshipIterableBuilder59 = new com.google.common.collect.ImmutableList.Builder<java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>>();
        boolean boolean60 = strSet54.contains((java.lang.Object) subclassRelationshipIterableBuilder59);
        node23.setDirectives((java.util.Set<java.lang.String>) strSet54);
        node23.removeProp(10);
        boolean boolean64 = node23.isCall();
        com.google.javascript.rhino.Node node65 = node3.useSourceInfoFrom(node23);
        boolean boolean66 = node65.isCatch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeCollection48);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test12264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12264");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        boolean boolean12 = jSTypeRegistry10.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray13 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList14 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList14, jSTypeArray13);
        com.google.javascript.rhino.Node node16 = jSTypeRegistry10.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList14);
        com.google.javascript.rhino.jstype.JSType jSType21 = jSTypeRegistry10.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22, false);
        boolean boolean26 = jSTypeRegistry24.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray27 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList28 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList28, jSTypeArray27);
        com.google.javascript.rhino.Node node30 = jSTypeRegistry24.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList28);
        com.google.javascript.rhino.jstype.JSType jSType35 = jSTypeRegistry24.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36, false);
        boolean boolean40 = jSTypeRegistry38.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray41 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList42 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList42, jSTypeArray41);
        com.google.javascript.rhino.Node node44 = jSTypeRegistry38.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList42);
        com.google.javascript.rhino.jstype.JSType jSType49 = jSTypeRegistry38.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSType49.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        boolean boolean55 = jSTypeRegistry53.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray56 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList57 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList57, jSTypeArray56);
        com.google.javascript.rhino.Node node59 = jSTypeRegistry53.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList57);
        com.google.javascript.rhino.jstype.JSType jSType64 = jSTypeRegistry53.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSType64.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray66 = new com.google.javascript.rhino.jstype.JSType[] { jSType35, jSType50, jSType65 };
        com.google.javascript.rhino.jstype.FunctionType functionType67 = jSTypeRegistry7.createFunctionType(jSType21, jSTypeArray66);
        boolean boolean68 = functionType67.matchesNumberContext();
        boolean boolean70 = functionType67.hasProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType71 = jSTypeRegistry2.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType67);
        com.google.javascript.rhino.jstype.FunctionType functionType72 = functionType67.getConstructor();
        boolean boolean73 = functionType67.isBooleanObjectType();
        boolean boolean74 = functionType67.isOrdinaryFunction();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType67.getExtendedInterfaces();
        boolean boolean76 = functionType67.isInstanceType();
        java.lang.String str77 = functionType67.getReferenceName();
        boolean boolean79 = functionType67.hasOwnProperty("true");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType67.getSuperClassConstructor();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(jSType35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSTypeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(jSType49);
        org.junit.Assert.assertNull(jSType50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(jSType64);
        org.junit.Assert.assertNull(jSType65);
        org.junit.Assert.assertNotNull(jSTypeArray66);
        org.junit.Assert.assertNotNull(functionType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertNull(functionType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test12265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12265");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        jSTypeRegistry2.setLastGeneration(false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable6 = jSTypeRegistry2.getTypesWithProperty("Not declared as a type name");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable13 = jSTypeRegistry11.getTypesWithProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable15 = jSTypeRegistry11.getTypesWithProperty("OR \n");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        boolean boolean23 = jSTypeRegistry21.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList25, jSTypeArray24);
        com.google.javascript.rhino.Node node27 = jSTypeRegistry21.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList25);
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry21.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33, false);
        boolean boolean37 = jSTypeRegistry35.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray38 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList39 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList39, jSTypeArray38);
        com.google.javascript.rhino.Node node41 = jSTypeRegistry35.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList39);
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry35.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        boolean boolean51 = jSTypeRegistry49.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray52 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList53 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList53, jSTypeArray52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry49.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList53);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSTypeRegistry49.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType61 = jSType60.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62, false);
        boolean boolean66 = jSTypeRegistry64.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList68 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList68, jSTypeArray67);
        com.google.javascript.rhino.Node node70 = jSTypeRegistry64.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        com.google.javascript.rhino.jstype.JSType jSType75 = jSTypeRegistry64.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType76 = jSType75.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray77 = new com.google.javascript.rhino.jstype.JSType[] { jSType46, jSType61, jSType76 };
        com.google.javascript.rhino.jstype.FunctionType functionType78 = jSTypeRegistry18.createFunctionType(jSType32, jSTypeArray77);
        boolean boolean79 = functionType78.matchesNumberContext();
        boolean boolean81 = functionType78.hasProperty("");
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope82 = functionType78.getParentScope();
        com.google.javascript.rhino.jstype.JSType jSType87 = jSTypeRegistry11.getType(jSTypeStaticScope82, "Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n", "(Named type with empty name component)", 44, 36);
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(OR  0)", node8, jSType87);
        boolean boolean89 = enumType88.isTemplateType();
        java.lang.Iterable iterable90 = enumType88.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.FunctionType functionType91 = enumType88.getOwnerFunction();
        com.google.javascript.rhino.JSDocInfo jSDocInfo93 = enumType88.getOwnPropertyJSDocInfo("{339216418}");
        com.google.javascript.rhino.jstype.JSType jSType94 = enumType88.getTypeOfThis();
        org.junit.Assert.assertNotNull(jSTypeIterable6);
        org.junit.Assert.assertNotNull(jSTypeIterable13);
        org.junit.Assert.assertNotNull(jSTypeIterable15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSType60);
        org.junit.Assert.assertNull(jSType61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(jSType75);
        org.junit.Assert.assertNull(jSType76);
        org.junit.Assert.assertNotNull(jSTypeArray77);
        org.junit.Assert.assertNotNull(functionType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope82);
        org.junit.Assert.assertNotNull(jSType87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(iterable90);
        org.junit.Assert.assertNull(functionType91);
        org.junit.Assert.assertNull(jSDocInfo93);
        org.junit.Assert.assertNull(jSType94);
    }

    @Test
    public void test12266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12266");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable63 = functionType62.getImplementedInterfaces();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean66 = jSDocInfo65.hasBaseType();
        int int67 = jSDocInfo65.getExtendedInterfacesCount();
        functionType62.setPropertyJSDocInfo("Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n", jSDocInfo65);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression69 = jSDocInfo65.getEnumParameterType();
        boolean boolean70 = jSDocInfo65.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList71 = jSDocInfo65.getImplementedInterfaces();
        java.lang.String str72 = jSDocInfo65.getVersion();
        boolean boolean73 = jSDocInfo65.hasType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertNotNull(objectTypeIterable63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNull(jSTypeExpression69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test12267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12267");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        boolean boolean19 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node10);
        boolean boolean20 = node10.isDo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean22 = jSDocInfo21.isNoShadow();
        java.lang.String str24 = jSDocInfo21.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean25 = jSDocInfo21.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo21.getParameterType("false");
        boolean boolean28 = jSDocInfo21.shouldPreserveTry();
        boolean boolean29 = jSDocInfo21.isInterface();
        java.util.Collection<java.lang.String> strCollection30 = jSDocInfo21.getReferences();
        boolean boolean31 = jSDocInfo21.isNoTypeCheck();
        jSDocInfo21.setDeprecated(false);
        node10.setJSDocInfo(jSDocInfo21);
        boolean boolean35 = jSDocInfo21.isIdGenerator();
        com.google.javascript.rhino.Node node36 = jSDocInfo21.getAssociatedNode();
        boolean boolean37 = jSDocInfo21.hasThisType();
        java.lang.String str38 = jSDocInfo21.getDescription();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strCollection30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test12268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12268");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean64 = jSDocInfo63.isNoCompile();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) 10, node68, node71, node74, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node78 = node74.getLastSibling();
        boolean boolean79 = node78.isGetterDef();
        boolean boolean80 = node78.isSyntheticBlock();
        jSDocInfo63.setAssociatedNode(node78);
        java.util.Collection<java.lang.String> strCollection82 = jSDocInfo63.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList83 = jSDocInfo63.getExtendedInterfaces();
        functionType62.setJSDocInfo(jSDocInfo63);
        boolean boolean85 = functionType62.hasAnyTemplate();
        boolean boolean86 = functionType62.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType87 = functionType62.autobox();
        com.google.javascript.rhino.jstype.EnumType enumType88 = functionType62.toMaybeEnumType();
        boolean boolean89 = functionType62.isOrdinaryFunction();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(strCollection82);
        org.junit.Assert.assertNotNull(jSTypeExpressionList83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(jSType87);
        org.junit.Assert.assertNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test12269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12269");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType1 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        int int5 = node4.getCharno();
        java.lang.String str6 = node4.getSourceFileName();
        boolean boolean7 = node4.isLabel();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 10, node11, node14, node17, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node21 = node17.getLastSibling();
        boolean boolean22 = node21.isDec();
        boolean boolean23 = node21.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship24 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType1, node4, node21);
        boolean boolean25 = node4.isParamList();
        boolean boolean26 = node4.isGetterDef();
        boolean boolean27 = node4.isTry();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, 52, 0);
        node4.putIntProp((int) (short) 100, 16);
        boolean boolean34 = node4.isCase();
        boolean boolean35 = node4.isQualifiedName();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType36 = null;
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) 10, node40, node43, node46, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        int int53 = node52.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship54 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType36, node46, node52);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) 10, node58, node61, node64, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node68 = node46.useSourceInfoIfMissingFromForTree(node67);
        boolean boolean69 = node46.hasOneChild();
        com.google.javascript.rhino.Node node70 = node4.copyInformationFrom(node46);
        int int71 = node4.getLength();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test12270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12270");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        boolean boolean19 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node10);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType20 = null;
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        int int37 = node36.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship38 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType20, node30, node36);
        com.google.javascript.rhino.Node node39 = node30.removeChildren();
        com.google.javascript.rhino.Node node40 = node10.useSourceInfoFrom(node30);
        boolean boolean41 = node40.isNot();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) ' ', "Not declared as a constructor", 32, 16);
        com.google.javascript.rhino.Node node47 = node46.getLastSibling();
        int int48 = node40.getIndexOfChild(node46);
        boolean boolean49 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node46);
        boolean boolean50 = node46.isDebugger();
        boolean boolean51 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node46);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test12271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12271");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean90 = enumType88.matchesNumberContext();
        com.google.javascript.rhino.Node node91 = enumType88.getSource();
        boolean boolean92 = enumType88.isNativeObjectType();
        boolean boolean93 = enumType88.matchesNumberContext();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test12272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12272");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        java.lang.Object[] objArray40 = subclassRelationshipList38.toArray();
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator41 = subclassRelationshipList38.spliterator();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType42 = null;
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (byte) 10, node46, node49, node52, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        int int59 = node58.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship60 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType42, node52, node58);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType61 = null;
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (byte) 10, node65, node68, node71, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        int int78 = node77.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship79 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType61, node71, node77);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList80 = com.google.common.collect.ImmutableList.of(subclassRelationship60, subclassRelationship79);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList81 = subclassRelationshipList80.asList();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node88 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node91 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node((int) (byte) 10, node85, node88, node91, 0, (int) (byte) 1);
        boolean boolean95 = subclassRelationshipList81.equals((java.lang.Object) (byte) 1);
        java.util.stream.Stream<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipStream96 = subclassRelationshipList81.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean97 = subclassRelationshipList38.addAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList81);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator41);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList80);
        org.junit.Assert.assertNotNull(subclassRelationshipList81);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipStream96);
    }

    @Test
    public void test12273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12273");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.jstype.JSType jSType13 = jSTypeRegistry2.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14, false);
        boolean boolean18 = jSTypeRegistry16.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray19 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList20 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList20, jSTypeArray19);
        com.google.javascript.rhino.Node node22 = jSTypeRegistry16.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList20);
        com.google.javascript.rhino.jstype.JSType jSType27 = jSTypeRegistry16.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry16.resetForTypeCheck();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        boolean boolean33 = jSTypeRegistry31.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray34 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList35 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList35, jSTypeArray34);
        com.google.javascript.rhino.Node node37 = jSTypeRegistry31.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList35);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSTypeRegistry31.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry31.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType45 = jSTypeRegistry31.createUnionType(jSTypeArray44);
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry16.createUnionType(jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry2.createOptionalParameters(jSTypeArray44);
        jSTypeRegistry2.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter49 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter49, false);
        boolean boolean53 = jSTypeRegistry51.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray54 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList55 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList55, jSTypeArray54);
        com.google.javascript.rhino.Node node57 = jSTypeRegistry51.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList55);
        com.google.javascript.rhino.jstype.JSTypeNative[] jSTypeNativeArray58 = new com.google.javascript.rhino.jstype.JSTypeNative[] {};
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry51.createUnionType(jSTypeNativeArray58);
        jSTypeRegistry51.forwardDeclareType("Function");
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62, false);
        boolean boolean66 = jSTypeRegistry64.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode67 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry64.setResolveMode(resolveMode67);
        jSTypeRegistry51.setResolveMode(resolveMode67);
        com.google.javascript.rhino.ErrorReporter errorReporter70 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter70);
        com.google.javascript.rhino.jstype.JSType jSType76 = jSTypeRegistry71.createNamedType("Unknown class name", "", (int) 'a', 4);
        com.google.javascript.rhino.ErrorReporter errorReporter77 = jSTypeRegistry71.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter78 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry80 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter78, false);
        boolean boolean82 = jSTypeRegistry80.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray83 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList84 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList84, jSTypeArray83);
        com.google.javascript.rhino.Node node86 = jSTypeRegistry80.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList84);
        com.google.javascript.rhino.jstype.JSType jSType91 = jSTypeRegistry80.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry80.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray93 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType94 = jSTypeRegistry80.createUnionType(jSTypeArray93);
        com.google.javascript.rhino.Node node95 = jSTypeRegistry71.createParameters(jSTypeArray93);
        com.google.javascript.rhino.jstype.JSType jSType96 = jSTypeRegistry51.createUnionType(jSTypeArray93);
        com.google.javascript.rhino.Node node97 = jSTypeRegistry2.createOptionalParameters(jSTypeArray93);
        com.google.javascript.rhino.jstype.ObjectType objectType98 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.jstype.JSType jSType99 = objectType98.autoboxesTo();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSTypeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(jSType27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSTypeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertNotNull(jSType45);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(jSTypeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(jSTypeNativeArray58);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + resolveMode67 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode67.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(jSType76);
        org.junit.Assert.assertNull(errorReporter77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(jSTypeArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(jSType91);
        org.junit.Assert.assertNotNull(jSTypeArray93);
        org.junit.Assert.assertNotNull(jSType94);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertNotNull(jSType96);
        org.junit.Assert.assertNotNull(node97);
        org.junit.Assert.assertNotNull(objectType98);
        org.junit.Assert.assertNull(jSType99);
    }

    @Test
    public void test12274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12274");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0.0f, 40, (int) ' ');
        node3.setType(38);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test12275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12275");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        boolean boolean4 = node2.isAssignAdd();
        boolean boolean5 = node2.isNot();
        java.lang.String str6 = node2.getQualifiedName();
        boolean boolean7 = node2.isNoSideEffectsCall();
        boolean boolean8 = node2.isRegExp();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.isNoShadow();
        java.lang.String str12 = jSDocInfo9.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean13 = jSDocInfo9.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList14 = jSDocInfo9.getExtendedInterfaces();
        java.lang.String str15 = jSDocInfo9.getSourceName();
        boolean boolean16 = jSDocInfo9.isNoShadow();
        java.lang.String str18 = jSDocInfo9.getDescriptionForParameter("((Not declared as a constructor))");
        java.util.Collection<java.lang.String> strCollection19 = jSDocInfo9.getAuthors();
        boolean boolean20 = jSDocInfo9.isConstant();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo9.getModifies();
        node2.setJSDocInfo(jSDocInfo9);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(strCollection19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet21);
    }

    @Test
    public void test12276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12276");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.hasReferenceName();
        boolean boolean95 = enumElementType93.matchesStringContext();
        int int96 = enumElementType93.getPropertiesCount();
        com.google.javascript.rhino.jstype.JSType jSType97 = enumElementType93.autoboxesTo();
        boolean boolean99 = enumElementType93.isPropertyTypeInferred("DIV");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNull(jSType97);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test12277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12277");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        boolean boolean94 = parameterizedType78.isInterface();
        java.lang.Iterable iterable95 = parameterizedType78.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.FunctionType functionType96 = parameterizedType78.getOwnerFunction();
        com.google.javascript.rhino.jstype.JSType jSType97 = parameterizedType78.getTypeOfThis();
        boolean boolean98 = parameterizedType78.isNoType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(iterable95);
        org.junit.Assert.assertNull(functionType96);
        org.junit.Assert.assertNotNull(jSType97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test12278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12278");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = parameterizedType78.getOwnPropertyJSDocInfo("(Named type with empty name component)");
        com.google.javascript.rhino.jstype.JSType jSType82 = parameterizedType78.autobox();
        com.google.javascript.rhino.jstype.FunctionType functionType83 = parameterizedType78.getConstructor();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType84 = parameterizedType78.toMaybeParameterizedType();
        boolean boolean86 = parameterizedType78.isPropertyTypeDeclared("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n).<Function>");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNull(jSDocInfo81);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertNull(functionType83);
        org.junit.Assert.assertNotNull(parameterizedType84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test12279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12279");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        com.google.javascript.rhino.Node node15 = node3.getAncestor((int) (short) 10);
        int int16 = node3.getSourceOffset();
        int int17 = node3.getChildCount();
        boolean boolean18 = node3.isThrow();
        boolean boolean19 = node3.isInstanceOf();
        boolean boolean20 = node3.isDo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test12280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12280");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType70 = functionType62.getImplicitPrototype();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable71 = functionType62.getAllImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType72 = functionType62.autobox();
        boolean boolean74 = functionType62.isPropertyTypeInferred("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType jSType75 = functionType62.autoboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType62.getPropertyType("");
        int int78 = functionType62.getMinArguments();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable79 = functionType62.getOwnImplementedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertNotNull(objectType70);
        org.junit.Assert.assertNotNull(objectTypeIterable71);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(jSType75);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 3 + "'", int78 == 3);
        org.junit.Assert.assertNotNull(objectTypeIterable79);
    }

    @Test
    public void test12281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12281");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        boolean boolean81 = parameterizedType78.isPropertyTypeDeclared("Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        java.lang.Iterable iterable82 = parameterizedType78.getCtorImplementedInterfaces();
        boolean boolean83 = parameterizedType78.isNullable();
        com.google.javascript.rhino.Node node84 = parameterizedType78.getRootNode();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(iterable82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(node84);
    }

    @Test
    public void test12282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12282");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        boolean boolean6 = jSDocInfo0.isInterface();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType8 = null;
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) 10, node12, node15, node18, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        int int25 = node24.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship26 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType8, node18, node24);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType27 = null;
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 10, node31, node34, node37, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        int int44 = node43.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship45 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType27, node37, node43);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList46 = com.google.common.collect.ImmutableList.of(subclassRelationship26, subclassRelationship45);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList47 = subclassRelationshipList46.asList();
        boolean boolean49 = subclassRelationshipList47.contains((java.lang.Object) 12);
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator50 = subclassRelationshipList47.spliterator();
        boolean boolean51 = strSet7.removeAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList47);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship52 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean53 = subclassRelationshipList47.add(subclassRelationship52);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList46);
        org.junit.Assert.assertNotNull(subclassRelationshipList47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test12283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12283");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter8 = jSTypeRegistry5.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        boolean boolean16 = jSTypeRegistry14.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray17 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList18 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList18, jSTypeArray17);
        com.google.javascript.rhino.Node node20 = jSTypeRegistry14.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList18);
        com.google.javascript.rhino.jstype.JSType jSType25 = jSTypeRegistry14.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        boolean boolean30 = jSTypeRegistry28.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList32 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList32, jSTypeArray31);
        com.google.javascript.rhino.Node node34 = jSTypeRegistry28.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList32);
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry28.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        boolean boolean44 = jSTypeRegistry42.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList46 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList46, jSTypeArray45);
        com.google.javascript.rhino.Node node48 = jSTypeRegistry42.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList46);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry42.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSType53.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55, false);
        boolean boolean59 = jSTypeRegistry57.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList61, jSTypeArray60);
        com.google.javascript.rhino.Node node63 = jSTypeRegistry57.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList61);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSTypeRegistry57.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType69 = jSType68.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray70 = new com.google.javascript.rhino.jstype.JSType[] { jSType39, jSType54, jSType69 };
        com.google.javascript.rhino.jstype.FunctionType functionType71 = jSTypeRegistry11.createFunctionType(jSType25, jSTypeArray70);
        boolean boolean72 = functionType71.matchesNumberContext();
        boolean boolean74 = functionType71.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = functionType71.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable77 = functionType71.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable78 = functionType71.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node79 = functionType71.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType80 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType81 = jSTypeRegistry5.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType71, jSType80);
        jSTypeRegistry1.registerPropertyOnType("?", (com.google.javascript.rhino.jstype.JSType) functionType71);
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative83 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.FunctionType functionType84 = jSTypeRegistry1.getNativeFunctionType(jSTypeNative83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(errorReporter8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(jSType25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNull(jSType54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertNull(jSType69);
        org.junit.Assert.assertNotNull(jSTypeArray70);
        org.junit.Assert.assertNotNull(functionType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(jSDocInfo76);
        org.junit.Assert.assertNotNull(objectTypeIterable77);
        org.junit.Assert.assertNotNull(objectTypeIterable78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(parameterizedType81);
    }

    @Test
    public void test12284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12284");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        java.lang.String str64 = functionType62.getNormalizedReferenceName();
        com.google.javascript.rhino.jstype.ObjectType objectType65 = functionType62.toObjectType();
        boolean boolean66 = functionType62.isResolved();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getJSDocInfo();
        boolean boolean68 = functionType62.hasAnyTemplate();
        boolean boolean69 = functionType62.hasReferenceName();
        boolean boolean70 = functionType62.hasReferenceName();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test12285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12285");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        jSTypeRegistry2.setLastGeneration(false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable6 = jSTypeRegistry2.getTypesWithProperty("Not declared as a type name");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable13 = jSTypeRegistry11.getTypesWithProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable15 = jSTypeRegistry11.getTypesWithProperty("OR \n");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        boolean boolean23 = jSTypeRegistry21.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList25, jSTypeArray24);
        com.google.javascript.rhino.Node node27 = jSTypeRegistry21.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList25);
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry21.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33, false);
        boolean boolean37 = jSTypeRegistry35.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray38 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList39 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList39, jSTypeArray38);
        com.google.javascript.rhino.Node node41 = jSTypeRegistry35.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList39);
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry35.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        boolean boolean51 = jSTypeRegistry49.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray52 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList53 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList53, jSTypeArray52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry49.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList53);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSTypeRegistry49.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType61 = jSType60.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62, false);
        boolean boolean66 = jSTypeRegistry64.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList68 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList68, jSTypeArray67);
        com.google.javascript.rhino.Node node70 = jSTypeRegistry64.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        com.google.javascript.rhino.jstype.JSType jSType75 = jSTypeRegistry64.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType76 = jSType75.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray77 = new com.google.javascript.rhino.jstype.JSType[] { jSType46, jSType61, jSType76 };
        com.google.javascript.rhino.jstype.FunctionType functionType78 = jSTypeRegistry18.createFunctionType(jSType32, jSTypeArray77);
        boolean boolean79 = functionType78.matchesNumberContext();
        boolean boolean81 = functionType78.hasProperty("");
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope82 = functionType78.getParentScope();
        com.google.javascript.rhino.jstype.JSType jSType87 = jSTypeRegistry11.getType(jSTypeStaticScope82, "Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n", "(Named type with empty name component)", 44, 36);
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(OR  0)", node8, jSType87);
        boolean boolean90 = enumType88.isPropertyInExterns("enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        boolean boolean91 = enumType88.isNumberObjectType();
        com.google.javascript.rhino.jstype.JSType jSType93 = enumType88.getRestrictedTypeGivenToBooleanOutcome(false);
        com.google.javascript.rhino.jstype.ObjectType objectType94 = enumType88.getImplicitPrototype();
        org.junit.Assert.assertNotNull(jSTypeIterable6);
        org.junit.Assert.assertNotNull(jSTypeIterable13);
        org.junit.Assert.assertNotNull(jSTypeIterable15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSType60);
        org.junit.Assert.assertNull(jSType61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(jSType75);
        org.junit.Assert.assertNull(jSType76);
        org.junit.Assert.assertNotNull(jSTypeArray77);
        org.junit.Assert.assertNotNull(functionType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope82);
        org.junit.Assert.assertNotNull(jSType87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(jSType93);
        org.junit.Assert.assertNotNull(objectType94);
    }

    @Test
    public void test12286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12286");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getSourceName();
        boolean boolean3 = jSDocInfo0.hasFileOverview();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean5 = jSDocInfo0.isHidden();
        boolean boolean6 = jSDocInfo0.isNoCompile();
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        jSDocInfo0.setLicense("STRING OR  [quoted: 1]");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getBaseType();
        boolean boolean12 = jSDocInfo0.isInterface();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test12287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12287");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable6 = jSTypeRegistry2.getTypesWithProperty("InputId: OR ");
        jSTypeRegistry2.clearTemplateTypeNames();
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        boolean boolean12 = jSTypeRegistry10.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray13 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList14 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList14, jSTypeArray13);
        com.google.javascript.rhino.Node node16 = jSTypeRegistry10.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList14);
        com.google.javascript.rhino.jstype.JSType jSType21 = jSTypeRegistry10.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22, false);
        boolean boolean26 = jSTypeRegistry24.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray27 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList28 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList28, jSTypeArray27);
        com.google.javascript.rhino.Node node30 = jSTypeRegistry24.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList28);
        com.google.javascript.rhino.jstype.JSType jSType35 = jSTypeRegistry24.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry24.resetForTypeCheck();
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry39.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray52 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry39.createUnionType(jSTypeArray52);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSTypeRegistry24.createUnionType(jSTypeArray52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry10.createOptionalParameters(jSTypeArray52);
        com.google.javascript.rhino.jstype.JSType jSType56 = jSTypeRegistry2.createUnionType(jSTypeArray52);
        com.google.javascript.rhino.jstype.ObjectType objectType57 = jSType56.toObjectType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(jSType35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNotNull(jSTypeArray52);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNotNull(jSType54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSType56);
        org.junit.Assert.assertNotNull(objectType57);
    }

    @Test
    public void test12288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12288");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable69 = functionType62.getCtorExtendedInterfaces();
        boolean boolean70 = functionType62.isInterface();
        boolean boolean71 = functionType62.isNoResolvedType();
        boolean boolean72 = functionType62.isFunctionPrototypeType();
        boolean boolean73 = functionType62.isNominalType();
        com.google.javascript.rhino.jstype.JSType jSType74 = functionType62.unboxesTo();
        boolean boolean75 = functionType62.isInterface();
        com.google.javascript.rhino.jstype.JSType jSType76 = functionType62.restrictByNotNullOrUndefined();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertNotNull(objectTypeIterable69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(jSType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(jSType76);
    }

    @Test
    public void test12289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12289");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoAlias();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str4 = jSDocInfo0.getSourceName();
        java.lang.String str5 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.Node node6 = jSDocInfo0.getAssociatedNode();
        int int7 = jSDocInfo0.getParameterCount();
        boolean boolean8 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
    }

    @Test
    public void test12290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12290");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = null;
        parameterizedType78.setPropertyJSDocInfo("hi!", jSDocInfo83);
        boolean boolean85 = parameterizedType78.isCheckedUnknownType();
        com.google.javascript.rhino.jstype.EnumType enumType86 = parameterizedType78.toMaybeEnumType();
        boolean boolean87 = parameterizedType78.isNullable();
        com.google.javascript.rhino.jstype.JSType jSType88 = parameterizedType78.getIndexType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType89 = parameterizedType78.toMaybeEnumElementType();
        boolean boolean90 = parameterizedType78.isNominalType();
        com.google.javascript.rhino.jstype.JSType jSType92 = parameterizedType78.findPropertyType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        boolean boolean93 = parameterizedType78.isInstanceType();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet94 = parameterizedType78.getPossibleToBooleanOutcomes();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(enumType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertNull(enumElementType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(jSType92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet94 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet94.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
    }

    @Test
    public void test12291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12291");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 10, node16, node19, node22, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node26 = node22.getLastSibling();
        boolean boolean27 = node26.isDec();
        com.google.javascript.rhino.Node node28 = node3.copyInformationFrom(node26);
        node3.setWasEmptyNode(false);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node3.setStaticSourceFile(staticSourceFile31);
        node3.setLineno((int) (byte) 0);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
    }

    @Test
    public void test12292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12292");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable6 = jSTypeRegistry2.getEachReferenceTypeWithProperty("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        boolean boolean11 = jSTypeRegistry9.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray12 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList13, jSTypeArray12);
        com.google.javascript.rhino.Node node15 = jSTypeRegistry9.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList13);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        boolean boolean23 = jSTypeRegistry21.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList25, jSTypeArray24);
        com.google.javascript.rhino.Node node27 = jSTypeRegistry21.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList25);
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry21.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33, false);
        boolean boolean37 = jSTypeRegistry35.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray38 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList39 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList39, jSTypeArray38);
        com.google.javascript.rhino.Node node41 = jSTypeRegistry35.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList39);
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry35.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        boolean boolean51 = jSTypeRegistry49.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray52 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList53 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList53, jSTypeArray52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry49.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList53);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSTypeRegistry49.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType61 = jSType60.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62, false);
        boolean boolean66 = jSTypeRegistry64.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList68 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList68, jSTypeArray67);
        com.google.javascript.rhino.Node node70 = jSTypeRegistry64.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        com.google.javascript.rhino.jstype.JSType jSType75 = jSTypeRegistry64.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType76 = jSType75.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray77 = new com.google.javascript.rhino.jstype.JSType[] { jSType46, jSType61, jSType76 };
        com.google.javascript.rhino.jstype.FunctionType functionType78 = jSTypeRegistry18.createFunctionType(jSType32, jSTypeArray77);
        boolean boolean79 = functionType78.matchesNumberContext();
        boolean boolean81 = functionType78.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable82 = functionType78.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType83 = functionType78.dereference();
        com.google.javascript.rhino.ErrorReporter errorReporter84 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry86 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter84, false);
        boolean boolean88 = jSTypeRegistry86.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray89 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList90 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList90, jSTypeArray89);
        com.google.javascript.rhino.Node node92 = jSTypeRegistry86.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList90);
        com.google.javascript.rhino.jstype.FunctionType functionType93 = jSTypeRegistry9.createFunctionTypeWithVarArgs((com.google.javascript.rhino.jstype.JSType) objectType83, (java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList90);
        com.google.javascript.rhino.Node node94 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList90);
        com.google.javascript.rhino.Node node95 = node94.cloneNode();
        boolean boolean96 = node95.isGetterDef();
        boolean boolean97 = node95.isTry();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSType60);
        org.junit.Assert.assertNull(jSType61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(jSType75);
        org.junit.Assert.assertNull(jSType76);
        org.junit.Assert.assertNotNull(jSTypeArray77);
        org.junit.Assert.assertNotNull(functionType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable82);
        org.junit.Assert.assertNotNull(objectType83);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(jSTypeArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(functionType93);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test12293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12293");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getSourceName();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        java.lang.Object[] objArray4 = strSet3.toArray();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType5 = null;
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) 10, node9, node12, node15, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        int int22 = node21.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship23 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType5, node15, node21);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType24 = null;
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 10, node28, node31, node34, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        int int41 = node40.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship42 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType24, node34, node40);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList43 = com.google.common.collect.ImmutableList.of(subclassRelationship23, subclassRelationship42);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList44 = subclassRelationshipList43.asList();
        boolean boolean46 = subclassRelationshipList44.contains((java.lang.Object) 12);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        boolean boolean51 = jSTypeRegistry49.isForwardDeclaredType("((Not declared as a constructor))");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable53 = jSTypeRegistry49.getEachReferenceTypeWithProperty("((Not declared as a constructor))");
        jSTypeRegistry49.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable60 = jSTypeRegistry58.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean61 = jSTypeRegistry58.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (byte) 10, node66, node69, node72, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node76 = node72.getLastSibling();
        com.google.javascript.rhino.Node node77 = node76.removeFirstChild();
        boolean boolean78 = node76.isNE();
        node76.setWasEmptyNode(false);
        com.google.javascript.rhino.jstype.FunctionType functionType81 = jSTypeRegistry58.createFunctionType(jSType62, node76);
        boolean boolean82 = jSTypeRegistry49.declareType("(((Not declared as a constructor)))", (com.google.javascript.rhino.jstype.JSType) functionType81);
        com.google.javascript.rhino.jstype.ObjectType objectType83 = functionType81.getImplicitPrototype();
        boolean boolean84 = subclassRelationshipList44.contains((java.lang.Object) functionType81);
        boolean boolean85 = strSet3.removeAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList44);
        java.lang.Object[] objArray86 = strSet3.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator87 = strSet3.spliterator();
        java.lang.Object[] objArray88 = strSet3.toArray();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList43);
        org.junit.Assert.assertNotNull(subclassRelationshipList44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable53);
        org.junit.Assert.assertNotNull(jSTypeIterable60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(functionType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(objectType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
        org.junit.Assert.assertNotNull(strSpliterator87);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
    }

    @Test
    public void test12294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12294");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        boolean boolean69 = functionType62.isEnumElementType();
        java.lang.String str70 = functionType62.getNormalizedReferenceName();
        com.google.javascript.rhino.jstype.JSType jSType72 = functionType62.getPropertyType("(Not declared as a constructor)");
        com.google.javascript.rhino.jstype.ObjectType objectType73 = functionType62.getTypeOfThis();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNotNull(objectType73);
    }

    @Test
    public void test12295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12295");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 10, node22, node25, node28, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = node28.getLastSibling();
        boolean boolean33 = node32.isDec();
        com.google.javascript.rhino.Node node34 = node10.srcrefTree(node32);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node35 = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(node32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
    }

    @Test
    public void test12296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12296");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getReturnType();
        boolean boolean70 = functionType62.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType71 = functionType62.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType72 = functionType62.toMaybeFunctionType();
        java.lang.Iterable iterable73 = functionType62.getCtorExtendedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType62.getAllExtendedInterfaces();
        boolean boolean76 = functionType62.isPropertyTypeInferred("(OR  [directives: [, Not declared as a constructor]])");
        com.google.javascript.rhino.JSDocInfo jSDocInfo78 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean79 = jSDocInfo78.isNoShadow();
        boolean boolean80 = jSDocInfo78.isNoAlias();
        boolean boolean81 = jSDocInfo78.isHidden();
        int int82 = jSDocInfo78.getExtendedInterfacesCount();
        functionType62.setPropertyJSDocInfo("(java.io.IOException)", jSDocInfo78);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSType71);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertNotNull(iterable73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test12297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12297");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        java.lang.String str5 = jSDocInfo0.getLendsName();
        boolean boolean6 = jSDocInfo0.hasFileOverview();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        java.lang.String str8 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test12298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12298");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        boolean boolean4 = node2.isExprResult();
        int int5 = node2.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        boolean boolean10 = node8.isAssignAdd();
        boolean boolean11 = node8.isNot();
        java.lang.String str12 = node8.toString();
        boolean boolean13 = node8.isVarArgs();
        boolean boolean14 = node2.isEquivalentToTyped(node8);
        boolean boolean15 = node8.isCall();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = node8.getExistingIntProp(38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 38");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR " + "'", str12, "OR ");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test12299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12299");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoCompile();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node15 = node11.getLastSibling();
        boolean boolean16 = node15.isGetterDef();
        boolean boolean17 = node15.isSyntheticBlock();
        jSDocInfo0.setAssociatedNode(node15);
        java.util.Collection<java.lang.String> strCollection19 = jSDocInfo0.getReferences();
        java.lang.String str20 = jSDocInfo0.getVersion();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo0.getSuppressions();
        strSet21.clear();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strCollection19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strSet21);
    }

    @Test
    public void test12300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12300");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.ObjectType objectType93 = enumType88.dereference();
        com.google.javascript.rhino.jstype.ObjectType objectType94 = enumType88.getImplicitPrototype();
        boolean boolean95 = enumType88.isBooleanObjectType();
        java.util.Set set96 = enumType88.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.FunctionType functionType97 = enumType88.getOwnerFunction();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(objectType93);
        org.junit.Assert.assertNotNull(objectType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(set96);
        org.junit.Assert.assertNull(functionType97);
    }

    @Test
    public void test12301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12301");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getReturnType();
        boolean boolean70 = functionType62.matchesUint32Context();
        boolean boolean71 = functionType62.matchesNumberContext();
        com.google.javascript.rhino.jstype.ObjectType.Property property73 = functionType62.getSlot("hi!");
        boolean boolean74 = functionType62.isOrdinaryFunction();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(property73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test12302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12302");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable69 = functionType62.getCtorExtendedInterfaces();
        boolean boolean70 = functionType62.isInterface();
        java.lang.Iterable iterable71 = functionType62.getCtorExtendedInterfaces();
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean74 = jSDocInfo73.isNoCompile();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (byte) 10, node78, node81, node84, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node88 = node84.getLastSibling();
        boolean boolean89 = node88.isGetterDef();
        boolean boolean90 = node88.isSyntheticBlock();
        jSDocInfo73.setAssociatedNode(node88);
        java.util.Set<java.lang.String> strSet92 = jSDocInfo73.getModifies();
        functionType62.setPropertyJSDocInfo("", jSDocInfo73);
        boolean boolean94 = functionType62.matchesObjectContext();
        boolean boolean95 = functionType62.isReturnTypeInferred();
        com.google.javascript.rhino.jstype.JSType jSType96 = functionType62.getReturnType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertNotNull(objectTypeIterable69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(iterable71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(jSType96);
    }

    @Test
    public void test12303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12303");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        jSTypeRegistry2.setLastGeneration(false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable6 = jSTypeRegistry2.getTypesWithProperty("Not declared as a type name");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable13 = jSTypeRegistry11.getTypesWithProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable15 = jSTypeRegistry11.getTypesWithProperty("OR \n");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        boolean boolean23 = jSTypeRegistry21.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList25, jSTypeArray24);
        com.google.javascript.rhino.Node node27 = jSTypeRegistry21.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList25);
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry21.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33, false);
        boolean boolean37 = jSTypeRegistry35.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray38 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList39 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList39, jSTypeArray38);
        com.google.javascript.rhino.Node node41 = jSTypeRegistry35.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList39);
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry35.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        boolean boolean51 = jSTypeRegistry49.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray52 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList53 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList53, jSTypeArray52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry49.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList53);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSTypeRegistry49.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType61 = jSType60.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62, false);
        boolean boolean66 = jSTypeRegistry64.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList68 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList68, jSTypeArray67);
        com.google.javascript.rhino.Node node70 = jSTypeRegistry64.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        com.google.javascript.rhino.jstype.JSType jSType75 = jSTypeRegistry64.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType76 = jSType75.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray77 = new com.google.javascript.rhino.jstype.JSType[] { jSType46, jSType61, jSType76 };
        com.google.javascript.rhino.jstype.FunctionType functionType78 = jSTypeRegistry18.createFunctionType(jSType32, jSTypeArray77);
        boolean boolean79 = functionType78.matchesNumberContext();
        boolean boolean81 = functionType78.hasProperty("");
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope82 = functionType78.getParentScope();
        com.google.javascript.rhino.jstype.JSType jSType87 = jSTypeRegistry11.getType(jSTypeStaticScope82, "Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n", "(Named type with empty name component)", 44, 36);
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(OR  0)", node8, jSType87);
        boolean boolean89 = enumType88.isTemplateType();
        boolean boolean91 = enumType88.isPropertyTypeDeclared("OR \n");
        java.util.Set set92 = enumType88.getOwnPropertyNames();
        boolean boolean94 = enumType88.isPropertyTypeInferred("java.io.IOException: java.io.IOException: java.io.IOException");
        boolean boolean96 = enumType88.removeProperty("Function");
        org.junit.Assert.assertNotNull(jSTypeIterable6);
        org.junit.Assert.assertNotNull(jSTypeIterable13);
        org.junit.Assert.assertNotNull(jSTypeIterable15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSType60);
        org.junit.Assert.assertNull(jSType61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(jSType75);
        org.junit.Assert.assertNull(jSType76);
        org.junit.Assert.assertNotNull(jSTypeArray77);
        org.junit.Assert.assertNotNull(functionType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope82);
        org.junit.Assert.assertNotNull(jSType87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(set92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test12304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12304");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        boolean boolean5 = node4.isFromExterns();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType6 = null;
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        int int23 = node22.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship24 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType6, node16, node22);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType25 = null;
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 10, node29, node32, node35, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        int int42 = node41.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship43 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType25, node35, node41);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList44 = com.google.common.collect.ImmutableList.of(subclassRelationship24, subclassRelationship43);
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor45 = subclassRelationshipList44.iterator();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType46 = null;
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        int int50 = node49.getCharno();
        java.lang.String str51 = node49.getSourceFileName();
        boolean boolean52 = node49.isLabel();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (byte) 10, node56, node59, node62, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node66 = node62.getLastSibling();
        boolean boolean67 = node66.isDec();
        boolean boolean68 = node66.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship69 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType46, node49, node66);
        boolean boolean70 = node49.isParamList();
        int int71 = node49.getSourcePosition();
        boolean boolean72 = node49.isFalse();
        int int73 = node49.getSourceOffset();
        boolean boolean74 = node49.isNull();
        boolean boolean75 = node49.isCatch();
        int int76 = subclassRelationshipList44.indexOf((java.lang.Object) node49);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString(100, "");
        int int80 = node79.getCharno();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(43, node4, node49, node79);
        java.lang.String str82 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node49);
        com.google.javascript.rhino.Node node83 = node49.getFirstChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList44);
        org.junit.Assert.assertNotNull(subclassRelationshipItor45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(node83);
    }

    @Test
    public void test12305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12305");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("false");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("OR ");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType4 = null;
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) 10, node8, node11, node14, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        int int21 = node20.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship22 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType4, node14, node20);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) 10, node26, node29, node32, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node36 = node14.useSourceInfoIfMissingFromForTree(node35);
        boolean boolean37 = node36.isThis();
        com.google.javascript.rhino.Node node38 = null;
        com.google.javascript.jscomp.CodingConvention.Bind bind39 = new com.google.javascript.jscomp.CodingConvention.Bind(node3, node36, node38);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        boolean boolean44 = jSTypeRegistry42.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.jstype.JSType jSType45 = assertionFunctionSpec1.getAssertedType(node3, jSTypeRegistry42);
        com.google.javascript.rhino.Node node46 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47);
        com.google.javascript.rhino.jstype.JSType jSType49 = assertionFunctionSpec1.getAssertedType(node46, jSTypeRegistry48);
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50);
        com.google.javascript.rhino.jstype.JSType jSType56 = jSTypeRegistry51.createNamedType("Unknown class name", "", (int) 'a', 4);
        com.google.javascript.rhino.ErrorReporter errorReporter57 = jSTypeRegistry51.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58, false);
        boolean boolean62 = jSTypeRegistry60.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray63 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList64 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList64, jSTypeArray63);
        com.google.javascript.rhino.Node node66 = jSTypeRegistry60.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList64);
        com.google.javascript.rhino.jstype.JSType jSType71 = jSTypeRegistry60.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry60.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray73 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType74 = jSTypeRegistry60.createUnionType(jSTypeArray73);
        com.google.javascript.rhino.Node node75 = jSTypeRegistry51.createParameters(jSTypeArray73);
        com.google.javascript.rhino.Node node76 = jSTypeRegistry48.createParametersWithVarArgs(jSTypeArray73);
        com.google.javascript.rhino.Node node78 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType79 = jSTypeRegistry48.createInterfaceType("(STRING OR  [quoted: 1])", node78);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable81 = jSTypeRegistry48.getTypesWithProperty("(java.io.IOException: java.io.IOException)");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable83 = jSTypeRegistry48.getTypesWithProperty("{618989675}");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertNull(jSType49);
        org.junit.Assert.assertNotNull(jSType56);
        org.junit.Assert.assertNull(errorReporter57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(jSTypeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(jSType71);
        org.junit.Assert.assertNotNull(jSTypeArray73);
        org.junit.Assert.assertNotNull(jSType74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(functionType79);
        org.junit.Assert.assertNotNull(jSTypeIterable81);
        org.junit.Assert.assertNotNull(jSTypeIterable83);
    }

    @Test
    public void test12306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12306");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        boolean boolean69 = functionType62.isPropertyInExterns("(Not declared as a constructor)");
        com.google.javascript.rhino.jstype.JSType jSType70 = functionType62.getTypeOfThis();
        java.lang.String str71 = null; // flaky: functionType62.toString();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(jSType70);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Function" + "'", str71, "Function");
    }

    @Test
    public void test12307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12307");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.util.Set<java.lang.String> strSet69 = functionType62.getOwnPropertyNames();
        boolean boolean70 = functionType62.isNullType();
        boolean boolean71 = functionType62.isObject();
        int int72 = functionType62.getPropertiesCount();
        java.util.List<com.google.javascript.rhino.jstype.FunctionType> functionTypeList73 = functionType62.getSubTypes();
        boolean boolean74 = functionType62.isFunctionType();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType62.toObjectType();
        com.google.javascript.rhino.jstype.ObjectType objectType76 = functionType62.getPrototype();
        com.google.javascript.rhino.Node node78 = objectType76.getPropertyNode("false");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNull(functionTypeList73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertNotNull(objectType76);
        org.junit.Assert.assertNull(node78);
    }

    @Test
    public void test12308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12308");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        boolean boolean17 = jSTypeRegistry15.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray18 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList19 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList19, jSTypeArray18);
        com.google.javascript.rhino.Node node21 = jSTypeRegistry15.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList19);
        com.google.javascript.rhino.jstype.JSType jSType26 = jSTypeRegistry15.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27, false);
        boolean boolean31 = jSTypeRegistry29.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList33 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList33, jSTypeArray32);
        com.google.javascript.rhino.Node node35 = jSTypeRegistry29.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList33);
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry29.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41, false);
        boolean boolean45 = jSTypeRegistry43.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray46 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList47 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList47, jSTypeArray46);
        com.google.javascript.rhino.Node node49 = jSTypeRegistry43.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList47);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSTypeRegistry43.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType55 = jSType54.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56, false);
        boolean boolean60 = jSTypeRegistry58.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList62 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList62, jSTypeArray61);
        com.google.javascript.rhino.Node node64 = jSTypeRegistry58.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList62);
        com.google.javascript.rhino.jstype.JSType jSType69 = jSTypeRegistry58.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType70 = jSType69.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray71 = new com.google.javascript.rhino.jstype.JSType[] { jSType40, jSType55, jSType70 };
        com.google.javascript.rhino.jstype.FunctionType functionType72 = jSTypeRegistry12.createFunctionType(jSType26, jSTypeArray71);
        boolean boolean73 = functionType72.matchesNumberContext();
        java.lang.String str74 = functionType72.getNormalizedReferenceName();
        jSTypeRegistry2.unregisterPropertyOnType("Not declared as a type name", (com.google.javascript.rhino.jstype.JSType) functionType72);
        com.google.javascript.rhino.ErrorReporter errorReporter76 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter77 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter78 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry80 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter78, false);
        boolean boolean82 = jSTypeRegistry80.isForwardDeclaredType("((Not declared as a constructor))");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable84 = jSTypeRegistry80.getEachReferenceTypeWithProperty("((Not declared as a constructor))");
        jSTypeRegistry80.clearNamedTypes();
        jSTypeRegistry80.clearTemplateTypeNames();
        com.google.javascript.rhino.ErrorReporter errorReporter87 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry89 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter87, false);
        boolean boolean91 = jSTypeRegistry89.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray92 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList93 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList93, jSTypeArray92);
        com.google.javascript.rhino.Node node95 = jSTypeRegistry89.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList93);
        com.google.javascript.rhino.Node node96 = jSTypeRegistry80.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList93);
        com.google.javascript.rhino.Node node97 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList93);
        node97.setVarArgs(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(jSType26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSType54);
        org.junit.Assert.assertNull(jSType55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertNull(jSType70);
        org.junit.Assert.assertNotNull(jSTypeArray71);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(errorReporter76);
        org.junit.Assert.assertNull(errorReporter77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable84);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(jSTypeArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertNotNull(node97);
    }

    @Test
    public void test12309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12309");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        boolean boolean12 = jSTypeRegistry10.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray13 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList14 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList14, jSTypeArray13);
        com.google.javascript.rhino.Node node16 = jSTypeRegistry10.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList14);
        com.google.javascript.rhino.jstype.JSType jSType21 = jSTypeRegistry10.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22, false);
        boolean boolean26 = jSTypeRegistry24.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray27 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList28 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList28, jSTypeArray27);
        com.google.javascript.rhino.Node node30 = jSTypeRegistry24.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList28);
        com.google.javascript.rhino.jstype.JSType jSType35 = jSTypeRegistry24.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36, false);
        boolean boolean40 = jSTypeRegistry38.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray41 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList42 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList42, jSTypeArray41);
        com.google.javascript.rhino.Node node44 = jSTypeRegistry38.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList42);
        com.google.javascript.rhino.jstype.JSType jSType49 = jSTypeRegistry38.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSType49.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        boolean boolean55 = jSTypeRegistry53.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray56 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList57 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList57, jSTypeArray56);
        com.google.javascript.rhino.Node node59 = jSTypeRegistry53.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList57);
        com.google.javascript.rhino.jstype.JSType jSType64 = jSTypeRegistry53.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSType64.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray66 = new com.google.javascript.rhino.jstype.JSType[] { jSType35, jSType50, jSType65 };
        com.google.javascript.rhino.jstype.FunctionType functionType67 = jSTypeRegistry7.createFunctionType(jSType21, jSTypeArray66);
        boolean boolean68 = functionType67.matchesNumberContext();
        boolean boolean70 = functionType67.hasProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType71 = jSTypeRegistry2.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType67);
        jSTypeRegistry2.resetForTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList74 = jSDocInfo73.getTemplateTypeNames();
        jSTypeRegistry2.setTemplateTypeNames((java.util.List<java.lang.String>) strList74);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable77 = jSTypeRegistry2.getEachReferenceTypeWithProperty("InputId: OR ");
        com.google.javascript.rhino.ErrorReporter errorReporter78 = jSTypeRegistry2.getErrorReporter();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(jSType35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSTypeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(jSType49);
        org.junit.Assert.assertNull(jSType50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(jSType64);
        org.junit.Assert.assertNull(jSType65);
        org.junit.Assert.assertNotNull(jSTypeArray66);
        org.junit.Assert.assertNotNull(functionType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNotNull(objectTypeIterable77);
        org.junit.Assert.assertNull(errorReporter78);
    }

    @Test
    public void test12310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12310");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType70 = functionType62.getImplicitPrototype();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable71 = functionType62.getAllImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType72 = functionType62.autobox();
        com.google.javascript.rhino.jstype.JSType jSType73 = functionType62.getIndexType();
        boolean boolean74 = functionType62.canBeCalled();
        boolean boolean75 = functionType62.isOrdinaryFunction();
        boolean boolean76 = functionType62.hasReferenceName();
        boolean boolean77 = functionType62.isDateType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertNotNull(objectType70);
        org.junit.Assert.assertNotNull(objectTypeIterable71);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test12311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12311");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean2 = node1.hasOneChild();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder3 = node1.new FileLevelJsDocBuilder();
        boolean boolean4 = node1.isQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test12312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12312");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        boolean boolean9 = node8.isFunction();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        boolean boolean14 = node13.isFromExterns();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition15 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node16 = namePosition15.getItem();
        namePosition15.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList22 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition15);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        int int26 = node25.getCharno();
        boolean boolean27 = node25.isAssignAdd();
        boolean boolean28 = node25.isNot();
        java.lang.String str29 = node25.toString();
        namePosition15.setItem(node25);
        node25.setSourceFileForTesting("Not declared as a constructor");
        com.google.javascript.rhino.Node node33 = node13.copyInformationFrom(node25);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) 10, node37, node40, node43, 0, (int) (byte) 1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node46.getStaticSourceFile();
        node33.addChildrenToBack(node46);
        boolean boolean49 = node46.isFromExterns();
        boolean boolean50 = node46.isFromExterns();
        boolean boolean51 = node46.isWhile();
        com.google.javascript.rhino.Node node52 = node46.removeFirstChild();
        boolean boolean53 = node46.isAssignAdd();
        java.lang.Object obj55 = node46.getProp(16384);
        com.google.javascript.rhino.Node node56 = null;
        // The following exception was thrown during execution in test generation
        try {
            node8.replaceChildAfter(node46, node56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(nodeSourcePositionList22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "OR " + "'", str29, "OR ");
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(obj55);
    }

    @Test
    public void test12313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12313");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        namePosition0.setPositionInformation(41, (int) ' ', 48, 10);
        int int6 = namePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition7 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node8 = namePosition7.getItem();
        namePosition7.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList14 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition7);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition15 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node16 = namePosition15.getItem();
        namePosition15.setPositionInformation(0, 35, 4095, 0);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition22 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node23 = namePosition22.getItem();
        int int24 = namePosition22.getStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition25 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node26 = namePosition25.getItem();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition27 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node28 = namePosition27.getItem();
        int int29 = namePosition27.getStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition30 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node31 = namePosition30.getItem();
        namePosition30.setPositionInformation(8, 40, 50, 12);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition37 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int38 = namePosition37.getEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition39 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node40 = namePosition39.getItem();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList41 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition7, namePosition15, namePosition22, namePosition25, namePosition27, namePosition30, namePosition37, namePosition39);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean44 = node43.isTrue();
        node43.setQuotedString();
        node43.detachChildren();
        namePosition39.setItem(node43);
        int int48 = namePosition39.getEndLine();
        int int49 = namePosition39.getPositionOnEndLine();
        com.google.javascript.rhino.Node node50 = namePosition39.getItem();
        int int51 = namePosition39.getStartLine();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(nodeSourcePositionList14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(namePositionList41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test12314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12314");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship[] subclassRelationshipArray39 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship[] { subclassRelationship18 };
        java.util.ArrayList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList40 = new java.util.ArrayList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList40, subclassRelationshipArray39);
        int int42 = subclassRelationshipList40.size();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType43 = null;
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        int int47 = node46.getCharno();
        java.lang.String str48 = node46.getSourceFileName();
        boolean boolean49 = node46.isLabel();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (byte) 10, node53, node56, node59, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        boolean boolean64 = node63.isDec();
        boolean boolean65 = node63.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship66 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType43, node46, node63);
        boolean boolean67 = node46.isParamList();
        boolean boolean68 = node46.isGetterDef();
        boolean boolean69 = node46.isTry();
        node46.setIsSyntheticBlock(true);
        boolean boolean72 = subclassRelationshipList40.remove((java.lang.Object) node46);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test12315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12315");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExpose();
        boolean boolean2 = jSDocInfo0.isExpose();
        java.lang.String str3 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean5 = jSDocInfo0.isNoCompile();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getModifies();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType8 = null;
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) 10, node12, node15, node18, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        int int25 = node24.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship26 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType8, node18, node24);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType27 = null;
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 10, node31, node34, node37, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        int int44 = node43.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship45 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType27, node37, node43);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList46 = com.google.common.collect.ImmutableList.of(subclassRelationship26, subclassRelationship45);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList47 = subclassRelationshipList46.asList();
        java.lang.Object[] objArray48 = subclassRelationshipList46.toArray();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship50 = subclassRelationshipList46.get((int) (byte) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean52 = jSDocInfo51.isNoShadow();
        java.lang.String str54 = jSDocInfo51.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean55 = jSDocInfo51.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = jSDocInfo51.getParameterType("false");
        java.lang.String str58 = jSDocInfo51.getBlockDescription();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList59 = jSDocInfo51.getExtendedInterfaces();
        int int60 = subclassRelationshipList46.indexOf((java.lang.Object) jSDocInfo51);
        boolean boolean61 = strSet7.retainAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList46);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList46);
        org.junit.Assert.assertNotNull(subclassRelationshipList47);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNotNull(subclassRelationship50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(jSTypeExpression57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(jSTypeExpressionList59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test12316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12316");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        node13.setIsSyntheticBlock(true);
        com.google.javascript.rhino.InputId inputId17 = node13.getInputId();
        com.google.javascript.rhino.InputId inputId18 = node13.getInputId();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node13.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        java.lang.String str33 = node13.checkTreeEquals(node32);
        com.google.javascript.rhino.Node node34 = node32.removeFirstChild();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        int int38 = node37.getCharno();
        boolean boolean39 = node37.isAssignAdd();
        boolean boolean40 = node37.isNot();
        java.lang.String str41 = node37.toString();
        boolean boolean42 = node37.isVarArgs();
        com.google.javascript.rhino.Node node43 = node32.copyInformationFrom(node37);
        java.lang.String str44 = node43.toString();
        boolean boolean45 = node43.isQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(inputId17);
        org.junit.Assert.assertNull(inputId18);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n" + "'", str33, "Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "OR " + "'", str41, "OR ");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "BITXOR" + "'", str44, "BITXOR");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test12317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12317");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.jstype.JSType jSType80 = parameterizedType78.findPropertyType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = parameterizedType78.getJSDocInfo();
        boolean boolean82 = parameterizedType78.isInterface();
        boolean boolean83 = parameterizedType78.isNominalType();
        int int84 = parameterizedType78.getPropertiesCount();
        com.google.javascript.rhino.jstype.FunctionType functionType85 = parameterizedType78.getConstructor();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(jSType80);
        org.junit.Assert.assertNull(jSDocInfo81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNull(functionType85);
    }

    @Test
    public void test12318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12318");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable63 = functionType62.getImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType65 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType) functionType62, "Not declared as a type name");
        com.google.javascript.rhino.jstype.FunctionType functionType66 = functionType62.toMaybeFunctionType();
        boolean boolean68 = functionType66.isPropertyTypeInferred("Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        boolean boolean69 = functionType66.isNoObjectType();
        boolean boolean71 = functionType66.isPropertyTypeDeclared("OR  [free_call: 40]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertNotNull(objectTypeIterable63);
        org.junit.Assert.assertNull(objectType65);
        org.junit.Assert.assertNotNull(functionType66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test12319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12319");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        boolean boolean12 = jSTypeRegistry10.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray13 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList14 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList14, jSTypeArray13);
        com.google.javascript.rhino.Node node16 = jSTypeRegistry10.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList14);
        com.google.javascript.rhino.jstype.JSType jSType21 = jSTypeRegistry10.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22, false);
        boolean boolean26 = jSTypeRegistry24.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray27 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList28 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList28, jSTypeArray27);
        com.google.javascript.rhino.Node node30 = jSTypeRegistry24.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList28);
        com.google.javascript.rhino.jstype.JSType jSType35 = jSTypeRegistry24.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36, false);
        boolean boolean40 = jSTypeRegistry38.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray41 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList42 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList42, jSTypeArray41);
        com.google.javascript.rhino.Node node44 = jSTypeRegistry38.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList42);
        com.google.javascript.rhino.jstype.JSType jSType49 = jSTypeRegistry38.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSType49.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        boolean boolean55 = jSTypeRegistry53.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray56 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList57 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList57, jSTypeArray56);
        com.google.javascript.rhino.Node node59 = jSTypeRegistry53.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList57);
        com.google.javascript.rhino.jstype.JSType jSType64 = jSTypeRegistry53.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSType64.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray66 = new com.google.javascript.rhino.jstype.JSType[] { jSType35, jSType50, jSType65 };
        com.google.javascript.rhino.jstype.FunctionType functionType67 = jSTypeRegistry7.createFunctionType(jSType21, jSTypeArray66);
        boolean boolean68 = functionType67.matchesNumberContext();
        boolean boolean70 = functionType67.hasProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType71 = jSTypeRegistry2.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType67);
        jSTypeRegistry2.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType jSType77 = jSTypeRegistry2.createNamedType("OR \n", "OR \n", (int) (short) 1, 46);
        com.google.javascript.rhino.ErrorReporter errorReporter78 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry80 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter78, false);
        boolean boolean82 = jSTypeRegistry80.isForwardDeclaredType("((Not declared as a constructor))");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable84 = jSTypeRegistry80.getEachReferenceTypeWithProperty("((Not declared as a constructor))");
        jSTypeRegistry80.clearNamedTypes();
        jSTypeRegistry80.clearTemplateTypeNames();
        com.google.javascript.rhino.ErrorReporter errorReporter87 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry89 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter87, false);
        boolean boolean91 = jSTypeRegistry89.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray92 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList93 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList93, jSTypeArray92);
        com.google.javascript.rhino.Node node95 = jSTypeRegistry89.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList93);
        com.google.javascript.rhino.Node node96 = jSTypeRegistry80.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList93);
        com.google.javascript.rhino.Node node97 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList93);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(jSType35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSTypeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(jSType49);
        org.junit.Assert.assertNull(jSType50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(jSType64);
        org.junit.Assert.assertNull(jSType65);
        org.junit.Assert.assertNotNull(jSTypeArray66);
        org.junit.Assert.assertNotNull(functionType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable84);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(jSTypeArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertNotNull(node97);
    }

    @Test
    public void test12320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12320");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasDescriptionForParameter("Not declared as a constructor");
        java.lang.String str4 = jSDocInfo0.getDescription();
        boolean boolean5 = jSDocInfo0.isHidden();
        java.lang.String str6 = jSDocInfo0.getReturnDescription();
        boolean boolean7 = jSDocInfo0.isDefine();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test12321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12321");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.util.Set<java.lang.String> strSet69 = functionType62.getOwnPropertyNames();
        boolean boolean70 = functionType62.isNullType();
        boolean boolean71 = functionType62.isObject();
        boolean boolean73 = functionType62.isPropertyTypeInferred("Named type with empty name component");
        int int74 = functionType62.getPropertiesCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean77 = jSDocInfo76.isNoShadow();
        boolean boolean78 = jSDocInfo76.isExpose();
        functionType62.setPropertyJSDocInfo("EXPR_RESULT", jSDocInfo76);
        com.google.common.collect.ImmutableList<java.lang.String> strList80 = functionType62.getTemplateTypeNames();
        boolean boolean81 = functionType62.hasAnyTemplateInternal();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test12322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12322");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoCompile();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node15 = node11.getLastSibling();
        boolean boolean16 = node15.isGetterDef();
        boolean boolean17 = node15.isSyntheticBlock();
        jSDocInfo0.setAssociatedNode(node15);
        java.util.Set<java.lang.String> strSet19 = jSDocInfo0.getModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = jSDocInfo0.getTemplateTypeNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList21 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean22 = jSDocInfo0.isExpose();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo0.getThrownTypes();
        boolean boolean24 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(jSTypeExpressionList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test12323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12323");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType74 = jSTypeRegistry5.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType70);
        boolean boolean75 = objectType74.hasCachedValues();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection76 = jSTypeRegistry2.getDirectImplementors(objectType74);
        jSTypeRegistry2.identifyNonNullableName("");
        boolean boolean79 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable81 = jSTypeRegistry2.getEachReferenceTypeWithProperty("Unknown class name");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable83 = jSTypeRegistry2.getEachReferenceTypeWithProperty("Not declared as a type name");
        jSTypeRegistry2.forwardDeclareType("({913046089})");
        jSTypeRegistry2.identifyNonNullableName("STRING (Function)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(functionTypeCollection76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable81);
        org.junit.Assert.assertNotNull(objectTypeIterable83);
    }

    @Test
    public void test12324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12324");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        boolean boolean80 = parameterizedType78.isInterface();
        boolean boolean81 = parameterizedType78.isString();
        boolean boolean82 = parameterizedType78.matchesObjectContext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList85 = jSDocInfo84.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression87 = jSDocInfo84.getParameterType("Unknown class name");
        int int88 = jSDocInfo84.getParameterCount();
        java.lang.String str89 = jSDocInfo84.getVersion();
        parameterizedType78.setPropertyJSDocInfo("java.io.IOException: java.io.IOException: Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n", jSDocInfo84);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertNull(jSTypeExpression87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test12325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12325");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = parameterizedType78.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.JSType jSType96 = parameterizedType78.findPropertyType("Named type with empty name component");
        boolean boolean97 = parameterizedType78.isNoType();
        java.lang.String str98 = parameterizedType78.getDisplayName();
        java.lang.Iterable iterable99 = parameterizedType78.getCtorImplementedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(enumElementType94);
        org.junit.Assert.assertNull(jSType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNull(str98);
        org.junit.Assert.assertNotNull(iterable99);
    }

    @Test
    public void test12326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12326");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        jSTypeRegistry1.resetForTypeCheck();
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter8 = jSTypeRegistry5.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        boolean boolean16 = jSTypeRegistry14.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray17 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList18 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList18, jSTypeArray17);
        com.google.javascript.rhino.Node node20 = jSTypeRegistry14.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList18);
        com.google.javascript.rhino.jstype.JSType jSType25 = jSTypeRegistry14.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        boolean boolean30 = jSTypeRegistry28.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList32 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList32, jSTypeArray31);
        com.google.javascript.rhino.Node node34 = jSTypeRegistry28.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList32);
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry28.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        boolean boolean44 = jSTypeRegistry42.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList46 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList46, jSTypeArray45);
        com.google.javascript.rhino.Node node48 = jSTypeRegistry42.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList46);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry42.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSType53.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55, false);
        boolean boolean59 = jSTypeRegistry57.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList61, jSTypeArray60);
        com.google.javascript.rhino.Node node63 = jSTypeRegistry57.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList61);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSTypeRegistry57.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType69 = jSType68.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray70 = new com.google.javascript.rhino.jstype.JSType[] { jSType39, jSType54, jSType69 };
        com.google.javascript.rhino.jstype.FunctionType functionType71 = jSTypeRegistry11.createFunctionType(jSType25, jSTypeArray70);
        boolean boolean72 = functionType71.matchesNumberContext();
        boolean boolean74 = functionType71.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = functionType71.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable77 = functionType71.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable78 = functionType71.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node79 = functionType71.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType80 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType81 = jSTypeRegistry5.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType71, jSType80);
        boolean boolean82 = parameterizedType81.matchesObjectContext();
        boolean boolean83 = parameterizedType81.isEnumElementType();
        boolean boolean84 = parameterizedType81.matchesNumberContext();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType85 = parameterizedType81.toMaybeEnumElementType();
        boolean boolean87 = parameterizedType81.isPropertyTypeDeclared("Node tree inequality:\nTree1:\nEXPR_RESULT\n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: EXPR_RESULT\n    OR \n\n\nSubtree2: OR \n");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable88 = parameterizedType81.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType89 = parameterizedType81.getImplicitPrototype();
        boolean boolean90 = objectType89.hasDisplayName();
        com.google.javascript.rhino.jstype.JSType jSType91 = jSTypeRegistry1.createOptionalType((com.google.javascript.rhino.jstype.JSType) objectType89);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(errorReporter8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(jSType25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNull(jSType54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertNull(jSType69);
        org.junit.Assert.assertNotNull(jSTypeArray70);
        org.junit.Assert.assertNotNull(functionType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(jSDocInfo76);
        org.junit.Assert.assertNotNull(objectTypeIterable77);
        org.junit.Assert.assertNotNull(objectTypeIterable78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(parameterizedType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(enumElementType85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable88);
        org.junit.Assert.assertNotNull(objectType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(jSType91);
    }

    @Test
    public void test12327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12327");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.isNativeObjectType();
        com.google.javascript.rhino.jstype.FunctionType functionType90 = enumType88.getOwnerFunction();
        boolean boolean92 = enumType88.isPropertyTypeDeclared("enum{");
        boolean boolean94 = enumType88.hasProperty("enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        java.lang.Iterable iterable95 = enumType88.getCtorImplementedInterfaces();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(functionType90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(iterable95);
    }

    @Test
    public void test12328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12328");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoCompile();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node15 = node11.getLastSibling();
        boolean boolean16 = node15.isGetterDef();
        boolean boolean17 = node15.isSyntheticBlock();
        jSDocInfo0.setAssociatedNode(node15);
        java.util.Collection<java.lang.String> strCollection19 = jSDocInfo0.getReferences();
        java.lang.String str20 = jSDocInfo0.getVersion();
        int int21 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strCollection19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test12329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12329");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node14 = node10.getLastSibling();
        boolean boolean15 = node14.isDec();
        boolean boolean16 = node14.isOr();
        node14.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node19 = node14.cloneTree();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node33 = node29.getLastSibling();
        boolean boolean34 = node33.isDec();
        boolean boolean35 = node33.isOr();
        node33.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node38 = node33.cloneTree();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(50, node19, node38);
        boolean boolean40 = node38.isNew();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node41 = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(node38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test12330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12330");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.util.Set<java.lang.String> strSet69 = functionType62.getOwnPropertyNames();
        boolean boolean70 = functionType62.isNullType();
        boolean boolean71 = functionType62.isObject();
        com.google.javascript.rhino.jstype.JSType jSType72 = functionType62.unboxesTo();
        boolean boolean73 = functionType62.isBooleanObjectType();
        int int74 = functionType62.getPropertiesCount();
        boolean boolean75 = functionType62.hasCachedValues();
        com.google.javascript.rhino.jstype.TemplateType templateType76 = functionType62.toMaybeTemplateType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(jSType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(templateType76);
    }

    @Test
    public void test12331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12331");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        java.lang.String str14 = node4.getString();
        boolean boolean15 = node4.isContinue();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        int int19 = node18.getCharno();
        boolean boolean20 = node18.isAssignAdd();
        node18.putBooleanProp(10, false);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship24 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node4, node18);
        com.google.javascript.rhino.Node node25 = com.google.javascript.jscomp.NodeUtil.newExpr(node18);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection26 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node25);
        com.google.javascript.rhino.Node node27 = node25.getLastChild();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder28 = node27.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeCollection26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder28);
    }

    @Test
    public void test12332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12332");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        java.lang.String str10 = node8.getSourceFileName();
        com.google.javascript.rhino.Node node11 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean12 = node11.isNE();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        boolean boolean20 = jSTypeRegistry18.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry18.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        com.google.javascript.rhino.jstype.JSType jSType29 = jSTypeRegistry18.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        boolean boolean34 = jSTypeRegistry32.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry32.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry32.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44, false);
        boolean boolean48 = jSTypeRegistry46.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList50, jSTypeArray49);
        com.google.javascript.rhino.Node node52 = jSTypeRegistry46.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList50);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry46.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSType57.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        boolean boolean63 = jSTypeRegistry61.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList65, jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry61.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList65);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSTypeRegistry61.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSType72.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] { jSType43, jSType58, jSType73 };
        com.google.javascript.rhino.jstype.FunctionType functionType75 = jSTypeRegistry15.createFunctionType(jSType29, jSTypeArray74);
        boolean boolean76 = functionType75.matchesNumberContext();
        boolean boolean78 = functionType75.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable79 = functionType75.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node81 = functionType75.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType82 = functionType75.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType83 = functionType75.getImplicitPrototype();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable84 = functionType75.getAllImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry2.createObjectType("false", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType75);
        com.google.javascript.rhino.jstype.TemplateType templateType86 = functionType75.toMaybeTemplateType();
        boolean boolean88 = functionType75.hasOwnProperty("(Named type with empty name component)");
        com.google.javascript.rhino.jstype.JSType jSType89 = functionType75.unboxesTo();
        com.google.javascript.rhino.jstype.ObjectType.Property property91 = functionType75.getSlot("Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        com.google.javascript.rhino.jstype.ObjectType objectType92 = functionType75.getImplicitPrototype();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertNull(jSType58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable79);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertNotNull(objectType83);
        org.junit.Assert.assertNotNull(objectTypeIterable84);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNull(templateType86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(jSType89);
        org.junit.Assert.assertNull(property91);
        org.junit.Assert.assertNotNull(objectType92);
    }

    @Test
    public void test12333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12333");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.jstype.FunctionType functionType79 = parameterizedType78.getConstructor();
        boolean boolean80 = parameterizedType78.isConstructor();
        com.google.javascript.rhino.jstype.ObjectType objectType81 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType) parameterizedType78);
        com.google.javascript.rhino.jstype.FunctionType functionType82 = parameterizedType78.getOwnerFunction();
        boolean boolean84 = parameterizedType78.isPropertyTypeInferred("Node tree inequality:\nTree1:\nEXPR_RESULT\n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: EXPR_RESULT\n    OR \n\n\nSubtree2: OR \n");
        boolean boolean85 = parameterizedType78.isOrdinaryFunction();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(functionType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objectType81);
        org.junit.Assert.assertNull(functionType82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test12334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12334");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("");
        jSTypeRegistry2.clearNamedTypes();
        com.google.javascript.rhino.jstype.JSType jSType7 = jSTypeRegistry2.getType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType70.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType77 = functionType70.getParentScope();
        boolean boolean79 = functionType70.isPropertyTypeDeclared("OR \n");
        com.google.javascript.rhino.jstype.JSType jSType80 = functionType70.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType81 = jSTypeRegistry2.createNullableType((com.google.javascript.rhino.jstype.JSType) functionType70);
        java.lang.String str82 = functionType70.getReferenceName();
        java.lang.String str83 = null; // flaky: functionType70.toAnnotationString();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertNotNull(objectType77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType80);
        org.junit.Assert.assertNotNull(jSType81);
        org.junit.Assert.assertNull(str82);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Function" + "'", str83, "Function");
    }

    @Test
    public void test12335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12335");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        jSTypeRegistry2.setLastGeneration(false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable6 = jSTypeRegistry2.getTypesWithProperty("Not declared as a type name");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable13 = jSTypeRegistry11.getTypesWithProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable15 = jSTypeRegistry11.getTypesWithProperty("OR \n");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        boolean boolean23 = jSTypeRegistry21.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList25, jSTypeArray24);
        com.google.javascript.rhino.Node node27 = jSTypeRegistry21.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList25);
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry21.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33, false);
        boolean boolean37 = jSTypeRegistry35.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray38 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList39 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList39, jSTypeArray38);
        com.google.javascript.rhino.Node node41 = jSTypeRegistry35.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList39);
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry35.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        boolean boolean51 = jSTypeRegistry49.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray52 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList53 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList53, jSTypeArray52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry49.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList53);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSTypeRegistry49.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType61 = jSType60.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62, false);
        boolean boolean66 = jSTypeRegistry64.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList68 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList68, jSTypeArray67);
        com.google.javascript.rhino.Node node70 = jSTypeRegistry64.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        com.google.javascript.rhino.jstype.JSType jSType75 = jSTypeRegistry64.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType76 = jSType75.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray77 = new com.google.javascript.rhino.jstype.JSType[] { jSType46, jSType61, jSType76 };
        com.google.javascript.rhino.jstype.FunctionType functionType78 = jSTypeRegistry18.createFunctionType(jSType32, jSTypeArray77);
        boolean boolean79 = functionType78.matchesNumberContext();
        boolean boolean81 = functionType78.hasProperty("");
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope82 = functionType78.getParentScope();
        com.google.javascript.rhino.jstype.JSType jSType87 = jSTypeRegistry11.getType(jSTypeStaticScope82, "Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n", "(Named type with empty name component)", 44, 36);
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(OR  0)", node8, jSType87);
        boolean boolean89 = enumType88.isTemplateType();
        java.lang.Iterable iterable90 = enumType88.getCtorImplementedInterfaces();
        int int91 = enumType88.getPropertiesCount();
        boolean boolean92 = enumType88.isNominalType();
        boolean boolean93 = enumType88.matchesNumberContext();
        boolean boolean95 = enumType88.removeProperty("(Node tree inequality:\nTree1:\nTYPEOF Not declared as a constructor 32\n\n\nTree2:\nOR \n\n\nSubtree1: TYPEOF Not declared as a constructor 32\n\n\nSubtree2: OR \n)");
        org.junit.Assert.assertNotNull(jSTypeIterable6);
        org.junit.Assert.assertNotNull(jSTypeIterable13);
        org.junit.Assert.assertNotNull(jSTypeIterable15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSType60);
        org.junit.Assert.assertNull(jSType61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(jSType75);
        org.junit.Assert.assertNull(jSType76);
        org.junit.Assert.assertNotNull(jSTypeArray77);
        org.junit.Assert.assertNotNull(functionType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope82);
        org.junit.Assert.assertNotNull(jSType87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(iterable90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test12336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12336");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str2 = ternaryValue1.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str4 = ternaryValue3.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = ternaryValue1.or(ternaryValue3);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = ternaryValue0.and(ternaryValue1);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str9 = ternaryValue8.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str11 = ternaryValue10.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue8.or(ternaryValue10);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue7.and(ternaryValue8);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = ternaryValue6.or(ternaryValue8);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList17 = com.google.common.collect.ImmutableList.of((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue8, (java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue16);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = ternaryValue16.not();
        boolean boolean20 = ternaryValue16.toBoolean(false);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "false" + "'", str2, "false");
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "false" + "'", str4, "false");
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "false" + "'", str9, "false");
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "false" + "'", str11, "false");
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValueEnumList17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test12337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12337");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.util.Set<java.lang.String> strSet69 = functionType62.getOwnPropertyNames();
        boolean boolean70 = functionType62.isNullType();
        boolean boolean71 = functionType62.isObject();
        int int72 = functionType62.getPropertiesCount();
        com.google.javascript.rhino.jstype.FunctionType functionType73 = functionType62.toMaybeFunctionType();
        boolean boolean74 = functionType73.isOrdinaryFunction();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType73.getImplementedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
    }

    @Test
    public void test12338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12338");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isNE();
        com.google.javascript.rhino.Node node15 = node13.getLastChild();
        boolean boolean16 = node13.isFromExterns();
        boolean boolean17 = node13.isVar();
        node13.setVarArgs(false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test12339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12339");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        boolean boolean40 = subclassRelationshipList39.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor41 = subclassRelationshipList39.listIterator();
        java.lang.Object[] objArray42 = subclassRelationshipList39.toArray();
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList43 = subclassRelationshipList39.asList();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList46 = subclassRelationshipList43.subList(29, 43);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (29) must not be greater than size (2)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipItor41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertNotNull(subclassRelationshipList43);
    }

    @Test
    public void test12340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12340");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType14 = null;
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        int int18 = node17.getCharno();
        java.lang.String str19 = node17.getSourceFileName();
        boolean boolean20 = node17.isLabel();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node34 = node30.getLastSibling();
        boolean boolean35 = node34.isDec();
        boolean boolean36 = node34.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType14, node17, node34);
        boolean boolean38 = node17.isParamList();
        com.google.javascript.rhino.Node node39 = node9.clonePropsFrom(node17);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType40 = null;
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) 10, node44, node47, node50, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        int int57 = node56.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship58 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType40, node50, node56);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) 10, node62, node65, node68, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node72 = node50.useSourceInfoIfMissingFromForTree(node71);
        boolean boolean73 = node72.isThis();
        boolean boolean74 = node72.isVarArgs();
        com.google.javascript.rhino.InputId inputId75 = node72.getInputId();
        boolean boolean76 = node17.isEquivalentToTyped(node72);
        com.google.javascript.rhino.Node node77 = node72.getNext();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSDocInfo jSDocInfo78 = com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(node77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(inputId75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNull(node77);
    }

    @Test
    public void test12341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12341");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        boolean boolean16 = jSTypeRegistry14.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray17 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList18 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList18, jSTypeArray17);
        com.google.javascript.rhino.Node node20 = jSTypeRegistry14.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList18);
        com.google.javascript.rhino.jstype.JSType jSType25 = jSTypeRegistry14.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        boolean boolean30 = jSTypeRegistry28.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList32 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList32, jSTypeArray31);
        com.google.javascript.rhino.Node node34 = jSTypeRegistry28.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList32);
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry28.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        boolean boolean44 = jSTypeRegistry42.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList46 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList46, jSTypeArray45);
        com.google.javascript.rhino.Node node48 = jSTypeRegistry42.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList46);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry42.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSType53.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55, false);
        boolean boolean59 = jSTypeRegistry57.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList61, jSTypeArray60);
        com.google.javascript.rhino.Node node63 = jSTypeRegistry57.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList61);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSTypeRegistry57.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType69 = jSType68.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray70 = new com.google.javascript.rhino.jstype.JSType[] { jSType39, jSType54, jSType69 };
        com.google.javascript.rhino.jstype.FunctionType functionType71 = jSTypeRegistry11.createFunctionType(jSType25, jSTypeArray70);
        boolean boolean72 = functionType71.matchesNumberContext();
        boolean boolean74 = functionType71.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType71.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType76 = functionType71.dereference();
        com.google.javascript.rhino.ErrorReporter errorReporter77 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry79 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter77, false);
        boolean boolean81 = jSTypeRegistry79.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray82 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList83 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList83, jSTypeArray82);
        com.google.javascript.rhino.Node node85 = jSTypeRegistry79.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList83);
        com.google.javascript.rhino.jstype.FunctionType functionType86 = jSTypeRegistry2.createFunctionTypeWithVarArgs((com.google.javascript.rhino.jstype.JSType) objectType76, (java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList83);
        boolean boolean88 = functionType86.isPropertyTypeDeclared("GETELEM false");
        com.google.javascript.rhino.Node node89 = functionType86.getSource();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(jSType25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNull(jSType54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertNull(jSType69);
        org.junit.Assert.assertNotNull(jSTypeArray70);
        org.junit.Assert.assertNotNull(functionType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(objectType76);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(jSTypeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(functionType86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(node89);
    }

    @Test
    public void test12342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12342");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("false");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        java.lang.String str15 = node5.getString();
        boolean boolean16 = node5.isReturn();
        com.google.javascript.rhino.Node node17 = assertionFunctionSpec1.getAssertedParam(node5);
        com.google.javascript.rhino.InputId inputId19 = new com.google.javascript.rhino.InputId("OR ");
        node17.setInputId(inputId19);
        java.lang.String str21 = inputId19.toString();
        java.lang.String str22 = inputId19.getIdName();
        java.lang.String str23 = inputId19.toString();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        int int27 = node26.getCharno();
        com.google.javascript.rhino.InputId inputId29 = new com.google.javascript.rhino.InputId("hi!");
        java.lang.String str30 = inputId29.getIdName();
        node26.setInputId(inputId29);
        boolean boolean32 = inputId19.equals((java.lang.Object) inputId29);
        java.lang.String str33 = inputId29.toString();
        java.lang.String str34 = inputId29.getIdName();
        java.lang.String str35 = inputId29.toString();
        java.lang.String str36 = inputId29.getIdName();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "InputId: OR " + "'", str21, "InputId: OR ");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR " + "'", str22, "OR ");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "InputId: OR " + "'", str23, "InputId: OR ");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "InputId: hi!" + "'", str33, "InputId: hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "InputId: hi!" + "'", str35, "InputId: hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
    }

    @Test
    public void test12343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12343");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        com.google.javascript.rhino.Node node14 = node13.removeFirstChild();
        boolean boolean15 = node13.isNE();
        node13.setSourceEncodedPosition((int) ' ');
        boolean boolean18 = node13.hasChildren();
        boolean boolean19 = node13.isIf();
        int int20 = node13.getCharno();
        int int21 = node13.getCharno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 32 + "'", int20 == 32);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 32 + "'", int21 == 32);
    }

    @Test
    public void test12344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12344");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getReturnType();
        boolean boolean70 = functionType62.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType71 = functionType62.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType72 = functionType62.toMaybeFunctionType();
        boolean boolean73 = functionType62.isFunctionType();
        boolean boolean74 = functionType62.hasAnyTemplate();
        boolean boolean75 = functionType62.matchesUint32Context();
        functionType62.clearResolved();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSType71);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test12345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12345");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getReturnType();
        boolean boolean70 = functionType62.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType71 = functionType62.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType72 = functionType62.toMaybeFunctionType();
        java.lang.Iterable iterable73 = functionType62.getCtorExtendedInterfaces();
        boolean boolean75 = functionType62.removeProperty("hi!");
        boolean boolean77 = functionType62.isPropertyTypeInferred("Unknown class name");
        int int78 = functionType62.getExtendedInterfacesCount();
        boolean boolean79 = functionType62.isString();
        boolean boolean80 = functionType62.isInterface();
        java.lang.Iterable iterable81 = functionType62.getCtorImplementedInterfaces();
        boolean boolean82 = functionType62.matchesStringContext();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType83 = functionType62.getInstanceType();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSType71);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertNotNull(iterable73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test12346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12346");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node14 = node10.getLastSibling();
        boolean boolean15 = node14.isDec();
        boolean boolean16 = node14.isOr();
        node14.setCharno((int) (byte) 0);
        node14.addSuppression("OR ");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 100, node14, 40, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test12347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12347");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        jSTypeRegistry2.clearNamedTypes();
        boolean boolean8 = jSTypeRegistry2.hasNamespace("STRING OR ");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable10 = jSTypeRegistry2.getEachReferenceTypeWithProperty("STRING hi!");
        jSTypeRegistry2.identifyNonNullableName("Node tree inequality:\nTree1:\nEXPR_RESULT\n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: EXPR_RESULT\n    OR \n\n\nSubtree2: OR \n");
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType14 = jSTypeRegistry2.createOptionalNullableType(jSType13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable10);
    }

    @Test
    public void test12348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12348");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        boolean boolean4 = node3.isFromExterns();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node3);
        com.google.javascript.rhino.Node node6 = com.google.javascript.jscomp.NodeUtil.newExpr(node3);
        int int7 = node3.getLineno();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 10, node11, node14, node17, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node21 = node17.getLastSibling();
        boolean boolean22 = node21.isDec();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) 10, node26, node29, node32, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node36 = node32.getLastSibling();
        boolean boolean37 = node36.isDec();
        boolean boolean38 = node36.isOr();
        node36.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node42 = node36.getAncestor(2);
        java.lang.String str43 = node21.checkTreeEquals(node36);
        boolean boolean44 = node36.isAssign();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("false");
        com.google.javascript.rhino.Node node47 = node36.clonePropsFrom(node46);
        boolean boolean48 = node47.isLocalResultCall();
        node47.setIsSyntheticBlock(false);
        node47.setQuotedString();
        boolean boolean52 = node47.isNew();
        com.google.javascript.rhino.Node node53 = node3.clonePropsFrom(node47);
        node3.addSuppression("enum{");
        boolean boolean56 = node3.isTry();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test12349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12349");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.jstype.FunctionType functionType79 = parameterizedType78.getConstructor();
        boolean boolean80 = parameterizedType78.isConstructor();
        com.google.javascript.rhino.jstype.ObjectType objectType81 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType) parameterizedType78);
        com.google.javascript.rhino.jstype.FunctionType functionType82 = parameterizedType78.getConstructor();
        com.google.javascript.rhino.jstype.JSType jSType83 = parameterizedType78.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType84 = parameterizedType78.collapseUnion();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = parameterizedType78.toDebugHashCodeString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(functionType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objectType81);
        org.junit.Assert.assertNull(functionType82);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertNotNull(jSType84);
    }

    @Test
    public void test12350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12350");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType70 = functionType62.getImplicitPrototype();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable71 = functionType62.getAllImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType72 = functionType62.autobox();
        boolean boolean73 = functionType62.isObject();
        boolean boolean74 = functionType62.isNativeObjectType();
        boolean boolean75 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.EnumType enumType76 = functionType62.toMaybeEnumType();
        java.lang.String str77 = functionType62.getReferenceName();
        com.google.javascript.rhino.Node node78 = functionType62.getSource();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertNotNull(objectType70);
        org.junit.Assert.assertNotNull(objectTypeIterable71);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(enumType76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(node78);
    }

    @Test
    public void test12351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12351");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        int int19 = node16.getLength();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean21 = jSDocInfo20.isExpose();
        jSDocInfo20.addSuppression("((Not declared as a constructor))");
        java.util.Set<java.lang.String> strSet24 = jSDocInfo20.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList25 = jSDocInfo20.getExtendedInterfaces();
        java.lang.String str26 = jSDocInfo20.getMeaning();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection27 = jSDocInfo20.getTypeNodes();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection28 = jSDocInfo20.getTypeNodes();
        node16.setJSDocInfo(jSDocInfo20);
        com.google.javascript.rhino.Node node30 = node16.removeChildren();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(jSTypeExpressionList25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(nodeCollection27);
        org.junit.Assert.assertNotNull(nodeCollection28);
        org.junit.Assert.assertNull(node30);
    }

    @Test
    public void test12352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12352");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        node6.setSourceEncodedPositionForTree((-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 10, node18, node21, node24, 0, (int) (byte) 1);
        java.lang.String str28 = node18.getString();
        boolean boolean29 = node18.isContinue();
        boolean boolean30 = node18.isCall();
        boolean boolean31 = node18.isVar();
        int int32 = node6.getIndexOfChild(node18);
        boolean boolean33 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node18);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test12353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12353");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.lang.String str69 = functionType62.getDisplayName();
        boolean boolean70 = functionType62.matchesNumberContext();
        boolean boolean71 = functionType62.isStringValueType();
        java.lang.String str72 = functionType62.getDisplayName();
        boolean boolean73 = functionType62.isConstructor();
        java.util.Set<java.lang.String> strSet74 = functionType62.getOwnPropertyNames();
        boolean boolean75 = functionType62.isNumber();
        com.google.javascript.rhino.jstype.ObjectType objectType76 = functionType62.toObjectType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objectType76);
    }

    @Test
    public void test12354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12354");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        java.lang.Iterable iterable93 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = enumType88.getElementsType();
        boolean boolean95 = enumType88.isStringObjectType();
        boolean boolean96 = enumType88.isNativeObjectType();
        java.lang.String str97 = enumType88.getReferenceName();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(iterable93);
        org.junit.Assert.assertNotNull(enumElementType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}" + "'", str97, "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
    }

    @Test
    public void test12355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12355");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isExpose();
        boolean boolean3 = jSDocInfo0.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        jSDocInfo0.addSuppression("(Not declared as a constructor)");
        boolean boolean7 = jSDocInfo0.hasType();
        java.lang.String str8 = jSDocInfo0.getDeprecationReason();
        java.lang.String str9 = jSDocInfo0.toString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
    }

    @Test
    public void test12356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12356");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        int int69 = functionType62.getExtendedInterfacesCount();
        boolean boolean70 = functionType62.isFunctionType();
        boolean boolean71 = functionType62.matchesObjectContext();
        com.google.javascript.rhino.jstype.TemplateType templateType72 = functionType62.toMaybeTemplateType();
        com.google.javascript.rhino.jstype.JSType jSType73 = functionType62.getTypeOfThis();
        boolean boolean74 = functionType62.isInstanceType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean77 = jSDocInfo76.isNoShadow();
        java.lang.String str79 = jSDocInfo76.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean80 = jSDocInfo76.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList81 = jSDocInfo76.getExtendedInterfaces();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection82 = jSDocInfo76.getMarkers();
        int int83 = jSDocInfo76.getParameterCount();
        java.lang.String str84 = jSDocInfo76.getLicense();
        boolean boolean86 = jSDocInfo76.hasDescriptionForParameter("java.io.IOException: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        com.google.common.collect.ImmutableList<java.lang.String> strList87 = jSDocInfo76.getTemplateTypeNames();
        boolean boolean88 = jSDocInfo76.isHidden();
        functionType62.setPropertyJSDocInfo("(OR  0)", jSDocInfo76);
        java.lang.String str90 = jSDocInfo76.getMeaning();
        int int91 = jSDocInfo76.getImplementedInterfaceCount();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(templateType72);
        org.junit.Assert.assertNotNull(jSType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList81);
        org.junit.Assert.assertNotNull(markerCollection82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test12357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12357");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.hasReferenceName();
        java.lang.String str95 = enumElementType93.getDisplayName();
        boolean boolean96 = enumElementType93.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType97 = enumElementType93.autoboxesTo();
        boolean boolean98 = enumElementType93.isObject();
        boolean boolean99 = enumElementType93.matchesObjectContext();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(jSType97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test12358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12358");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        java.util.Set<java.lang.String> strSet69 = functionType62.getOwnPropertyNames();
        java.util.List<com.google.javascript.rhino.jstype.FunctionType> functionTypeList70 = functionType62.getSubTypes();
        boolean boolean71 = functionType62.isReturnTypeInferred();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNull(functionTypeList70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test12359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12359");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        java.lang.String str5 = jSDocInfo0.getLendsName();
        boolean boolean6 = jSDocInfo0.hasFileOverview();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getModifies();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection8 = jSDocInfo0.getMarkers();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getType();
        java.lang.String str11 = jSDocInfo0.getDescriptionForParameter("(Named type with empty name component)");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection12 = jSDocInfo0.getTypeNodes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(markerCollection8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(nodeCollection12);
    }

    @Test
    public void test12360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12360");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isNoObjectType();
        boolean boolean69 = functionType62.isStringObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot71 = functionType62.getOwnSlot("Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n");
        boolean boolean72 = functionType62.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType73 = functionType62.unboxesTo();
        boolean boolean75 = functionType62.hasProperty("(GETELEM false)");
        java.lang.String str76 = functionType62.getReferenceName();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(jSTypeStaticSlot71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(str76);
    }

    @Test
    public void test12361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12361");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        java.lang.String str14 = node4.getString();
        boolean boolean15 = node4.isReturn();
        com.google.javascript.rhino.Node node16 = node4.detachFromParent();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(39, node16);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = new com.google.javascript.rhino.JSTypeExpression(node16, "(Not declared as a constructor)");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec21 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("(Not declared as a constructor)");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType22 = null;
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) 10, node26, node29, node32, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        int int39 = node38.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship40 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType22, node32, node38);
        int int42 = node32.getIntProp((int) (byte) 0);
        boolean boolean43 = node32.isWhile();
        boolean boolean44 = node32.isUnscopedQualifiedName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = null;
        com.google.javascript.rhino.jstype.JSType jSType46 = assertionFunctionSpec21.getAssertedType(node32, jSTypeRegistry45);
        boolean boolean47 = jSTypeExpression19.equals((java.lang.Object) assertionFunctionSpec21);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType48 = null;
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) 10, node52, node55, node58, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        int int65 = node64.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship66 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType48, node58, node64);
        boolean boolean67 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node58);
        int int68 = node58.getLineno();
        node58.putIntProp(54, 1);
        com.google.javascript.rhino.ErrorReporter errorReporter72 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry74 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter72, false);
        jSTypeRegistry74.setLastGeneration(false);
        com.google.javascript.rhino.jstype.JSType jSType77 = assertionFunctionSpec21.getAssertedType(node58, jSTypeRegistry74);
        boolean boolean78 = node58.isIf();
        com.google.javascript.rhino.Node node79 = node58.removeChildren();
        com.google.javascript.rhino.jstype.JSType jSType80 = node58.getJSType();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertNull(jSType80);
    }

    @Test
    public void test12362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12362");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor40 = subclassRelationshipList39.iterator();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType41 = null;
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) 10, node45, node48, node51, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        int int58 = node57.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship59 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType41, node51, node57);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType60 = null;
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 10, node64, node67, node70, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString(100, "");
        int int77 = node76.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship78 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType60, node70, node76);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList79 = com.google.common.collect.ImmutableList.of(subclassRelationship59, subclassRelationship78);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = subclassRelationshipList39.add(subclassRelationship59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(subclassRelationshipItor40);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList79);
    }

    @Test
    public void test12363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12363");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        jSTypeRegistry2.setLastGeneration(false);
        boolean boolean6 = jSTypeRegistry2.hasNamespace("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable8 = jSTypeRegistry2.getTypesWithProperty("OR  [is_optional_param: 100]");
        boolean boolean10 = jSTypeRegistry2.hasNamespace("{-733738656}");
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14, false);
        boolean boolean18 = jSTypeRegistry16.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray19 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList20 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList20, jSTypeArray19);
        com.google.javascript.rhino.Node node22 = jSTypeRegistry16.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList20);
        com.google.javascript.rhino.jstype.JSType jSType27 = jSTypeRegistry16.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        boolean boolean32 = jSTypeRegistry30.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray33 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList34 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList34, jSTypeArray33);
        com.google.javascript.rhino.Node node36 = jSTypeRegistry30.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList34);
        com.google.javascript.rhino.jstype.JSType jSType41 = jSTypeRegistry30.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter42 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter42, false);
        boolean boolean46 = jSTypeRegistry44.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray47 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList48 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList48, jSTypeArray47);
        com.google.javascript.rhino.Node node50 = jSTypeRegistry44.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList48);
        com.google.javascript.rhino.jstype.JSType jSType55 = jSTypeRegistry44.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType56 = jSType55.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57, false);
        boolean boolean61 = jSTypeRegistry59.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray62 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList63 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList63, jSTypeArray62);
        com.google.javascript.rhino.Node node65 = jSTypeRegistry59.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList63);
        com.google.javascript.rhino.jstype.JSType jSType70 = jSTypeRegistry59.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType71 = jSType70.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] { jSType41, jSType56, jSType71 };
        com.google.javascript.rhino.jstype.FunctionType functionType73 = jSTypeRegistry13.createFunctionType(jSType27, jSTypeArray72);
        boolean boolean74 = functionType73.matchesNumberContext();
        boolean boolean76 = functionType73.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable77 = functionType73.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node79 = functionType73.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType80 = functionType73.getImplicitPrototype();
        boolean boolean81 = objectType80.isUnknownType();
        java.lang.String str82 = objectType80.toString();
        java.lang.String str83 = objectType80.getReferenceName();
        com.google.javascript.rhino.jstype.FunctionType functionType84 = objectType80.getConstructor();
        boolean boolean85 = objectType80.isNumberObjectType();
        boolean boolean86 = objectType80.isDateType();
        boolean boolean88 = objectType80.hasProperty("(InputId: OR )");
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection89 = jSTypeRegistry2.getDirectImplementors(objectType80);
        jSTypeRegistry2.clearTemplateTypeNames();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSTypeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(jSType27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(jSType41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSTypeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(jSType55);
        org.junit.Assert.assertNull(jSType56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jSTypeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(jSType70);
        org.junit.Assert.assertNull(jSType71);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable77);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertNotNull(objectType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Function" + "'", str82, "Function");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Function" + "'", str83, "Function");
        org.junit.Assert.assertNotNull(functionType84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(functionTypeCollection89);
    }

    @Test
    public void test12364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12364");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = null;
        parameterizedType78.setPropertyJSDocInfo("hi!", jSDocInfo83);
        boolean boolean85 = parameterizedType78.isCheckedUnknownType();
        com.google.javascript.rhino.jstype.JSType jSType86 = parameterizedType78.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType87 = parameterizedType78.getParameterType();
        com.google.javascript.rhino.jstype.JSType jSType88 = parameterizedType78.getParameterType();
        boolean boolean89 = parameterizedType78.hasReferenceName();
        boolean boolean90 = parameterizedType78.isEnumType();
        com.google.javascript.rhino.jstype.JSType jSType91 = parameterizedType78.getIndexType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(jSType86);
        org.junit.Assert.assertNull(jSType87);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(jSType91);
    }

    @Test
    public void test12365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12365");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        int int69 = functionType62.getExtendedInterfacesCount();
        boolean boolean70 = functionType62.isFunctionType();
        com.google.javascript.rhino.Node node71 = functionType62.getRootNode();
        com.google.javascript.rhino.jstype.JSType jSType72 = functionType62.getIndexType();
        boolean boolean73 = functionType62.hasInstanceType();
        boolean boolean74 = functionType62.hasAnyTemplate();
        com.google.javascript.rhino.jstype.FunctionType functionType75 = functionType62.toMaybeFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType75.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean79 = functionType75.removeProperty("(java.io.IOException: java.io.IOException)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNull(jSType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test12366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12366");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        int int19 = node16.getLength();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        int int23 = node22.getCharno();
        java.lang.String str24 = node22.getSourceFileName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.jscomp.NodeUtil.newExpr(node22);
        com.google.javascript.rhino.Node node26 = node16.useSourceInfoIfMissingFromForTree(node22);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) 10, node30, node33, node36, 0, (int) (byte) 1);
        java.lang.String str40 = node30.getString();
        node30.setOptionalArg(false);
        boolean boolean43 = node30.isHook();
        boolean boolean44 = node30.isVarArgs();
        boolean boolean45 = node26.isEquivalentTo(node30);
        int int46 = node30.getType();
        boolean boolean47 = node30.isInc();
        boolean boolean48 = node30.isNumber();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test12367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12367");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        java.lang.String str67 = functionType62.getReferenceName();
        boolean boolean68 = functionType62.hasInstanceType();
        com.google.common.collect.ImmutableList<java.lang.String> strList69 = functionType62.getTemplateTypeNames();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strList69);
    }

    @Test
    public void test12368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12368");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(24, nodeArray4);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(49, nodeArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeArray4);
    }

    @Test
    public void test12369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12369");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.util.Set<java.lang.String> strSet69 = functionType62.getOwnPropertyNames();
        boolean boolean70 = functionType62.isNullType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable71 = functionType62.getImplementedInterfaces();
        boolean boolean72 = functionType62.hasAnyTemplateInternal();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType73 = functionType62.toMaybeParameterizedType();
        com.google.javascript.rhino.jstype.FunctionType functionType75 = functionType62.getBindReturnType(44);
        com.google.javascript.rhino.jstype.JSType jSType76 = null;
        boolean boolean77 = com.google.javascript.rhino.jstype.JSType.isEquivalent((com.google.javascript.rhino.jstype.JSType) functionType75, jSType76);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(parameterizedType73);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test12370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12370");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        java.lang.String str4 = node2.getSourceFileName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        int int8 = node7.getCharno();
        boolean boolean9 = node7.isExprResult();
        node2.addChildToFront(node7);
        java.lang.String str11 = node2.getSourceFileName();
        boolean boolean13 = node2.getBooleanProp(4095);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        boolean boolean15 = node14.hasMoreThanOneChild();
        boolean boolean16 = node14.isObjectLit();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test12371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12371");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        java.lang.Iterable iterable82 = parameterizedType78.getCtorImplementedInterfaces();
        boolean boolean83 = parameterizedType78.isTemplateType();
        boolean boolean84 = parameterizedType78.matchesStringContext();
        boolean boolean85 = parameterizedType78.isNominalType();
        boolean boolean86 = parameterizedType78.isNumber();
        com.google.javascript.rhino.jstype.EnumType enumType87 = parameterizedType78.toMaybeEnumType();
        boolean boolean88 = parameterizedType78.isAllType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNotNull(iterable82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(enumType87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test12372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12372");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType58 = null;
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) 10, node62, node65, node68, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        int int75 = node74.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship76 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType58, node68, node74);
        int int77 = node74.getLength();
        int int78 = subclassRelationshipList38.lastIndexOf((java.lang.Object) int77);
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor79 = subclassRelationshipList38.iterator();
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList80 = subclassRelationshipList38.reverse();
        boolean boolean81 = subclassRelationshipList38.isEmpty();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipItor79);
        org.junit.Assert.assertNotNull(subclassRelationshipList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test12373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12373");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.jstype.FunctionType functionType79 = parameterizedType78.getConstructor();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope80 = parameterizedType78.getParentScope();
        boolean boolean81 = parameterizedType78.matchesStringContext();
        boolean boolean82 = parameterizedType78.matchesStringContext();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(functionType79);
        org.junit.Assert.assertNotNull(jSTypeStaticScope80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test12374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12374");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        java.lang.String str10 = node8.getSourceFileName();
        com.google.javascript.rhino.Node node11 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean12 = node11.isNE();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        boolean boolean20 = jSTypeRegistry18.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry18.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        com.google.javascript.rhino.jstype.JSType jSType29 = jSTypeRegistry18.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        boolean boolean34 = jSTypeRegistry32.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry32.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry32.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44, false);
        boolean boolean48 = jSTypeRegistry46.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList50, jSTypeArray49);
        com.google.javascript.rhino.Node node52 = jSTypeRegistry46.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList50);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry46.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSType57.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        boolean boolean63 = jSTypeRegistry61.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList65, jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry61.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList65);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSTypeRegistry61.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSType72.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] { jSType43, jSType58, jSType73 };
        com.google.javascript.rhino.jstype.FunctionType functionType75 = jSTypeRegistry15.createFunctionType(jSType29, jSTypeArray74);
        boolean boolean76 = functionType75.matchesNumberContext();
        boolean boolean78 = functionType75.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable79 = functionType75.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node81 = functionType75.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType82 = functionType75.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType83 = functionType75.getImplicitPrototype();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable84 = functionType75.getAllImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry2.createObjectType("false", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType75);
        com.google.javascript.rhino.jstype.TemplateType templateType86 = functionType75.toMaybeTemplateType();
        boolean boolean88 = functionType75.hasOwnProperty("(Named type with empty name component)");
        com.google.javascript.rhino.jstype.JSType jSType89 = functionType75.unboxesTo();
        com.google.javascript.rhino.jstype.FunctionType functionType90 = functionType75.toMaybeFunctionType();
        boolean boolean91 = functionType75.matchesStringContext();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertNull(jSType58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable79);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertNotNull(objectType83);
        org.junit.Assert.assertNotNull(objectTypeIterable84);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNull(templateType86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(jSType89);
        org.junit.Assert.assertNotNull(functionType90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test12375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12375");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] { node14 };
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) ' ', nodeArray15, (int) (short) 100, 48);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(37, node18, 35, (int) ' ');
        com.google.javascript.rhino.InputId inputId22 = com.google.javascript.jscomp.NodeUtil.getInputId(node21);
        boolean boolean23 = node21.isSetterDef();
        boolean boolean24 = node21.isGetElem();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable25 = node21.children();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator26 = nodeIterable25.spliterator();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNull(inputId22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeIterable25);
        org.junit.Assert.assertNotNull(nodeSpliterator26);
    }

    @Test
    public void test12376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12376");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isGetterDef();
        boolean boolean15 = node13.isSyntheticBlock();
        boolean boolean16 = node13.isNE();
        int int17 = node13.getSideEffectFlags();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = new com.google.javascript.rhino.JSTypeExpression(node13, "((Not declared as a constructor))");
        com.google.javascript.rhino.Node node20 = jSTypeExpression19.getRoot();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21, false);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24, false);
        boolean boolean28 = jSTypeRegistry26.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray29 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList30 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList30, jSTypeArray29);
        com.google.javascript.rhino.Node node32 = jSTypeRegistry26.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList30);
        com.google.javascript.rhino.jstype.JSType jSType37 = jSTypeRegistry26.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38, false);
        boolean boolean42 = jSTypeRegistry40.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList44 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList44, jSTypeArray43);
        com.google.javascript.rhino.Node node46 = jSTypeRegistry40.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList44);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSTypeRegistry40.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter67 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter67, false);
        boolean boolean71 = jSTypeRegistry69.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList73 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList73, jSTypeArray72);
        com.google.javascript.rhino.Node node75 = jSTypeRegistry69.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList73);
        com.google.javascript.rhino.jstype.JSType jSType80 = jSTypeRegistry69.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType81 = jSType80.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray82 = new com.google.javascript.rhino.jstype.JSType[] { jSType51, jSType66, jSType81 };
        com.google.javascript.rhino.jstype.FunctionType functionType83 = jSTypeRegistry23.createFunctionType(jSType37, jSTypeArray82);
        boolean boolean84 = functionType83.matchesNumberContext();
        boolean boolean86 = functionType83.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = functionType83.getOwnPropertyJSDocInfo("OR  0");
        com.google.javascript.rhino.jstype.FunctionType functionType90 = functionType83.getBindReturnType(38);
        boolean boolean91 = functionType83.canBeCalled();
        com.google.javascript.rhino.jstype.ObjectType objectType92 = functionType83.getTypeOfThis();
        boolean boolean93 = jSTypeExpression19.equals((java.lang.Object) objectType92);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(jSType37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(jSType80);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNotNull(jSTypeArray82);
        org.junit.Assert.assertNotNull(functionType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(jSDocInfo88);
        org.junit.Assert.assertNotNull(functionType90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(objectType92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test12377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12377");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        boolean boolean4 = node2.isAssignAdd();
        boolean boolean5 = node2.isNot();
        java.lang.String str6 = node2.toString();
        boolean boolean7 = node2.isVarArgs();
        boolean boolean8 = node2.isWhile();
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec10 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("false");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) 10, node14, node17, node20, 0, (int) (byte) 1);
        java.lang.String str24 = node14.getString();
        boolean boolean25 = node14.isReturn();
        com.google.javascript.rhino.Node node26 = assertionFunctionSpec10.getAssertedParam(node14);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        int int30 = node29.getCharno();
        java.lang.String str31 = node29.getSourceFileName();
        com.google.javascript.rhino.Node node32 = com.google.javascript.jscomp.NodeUtil.newExpr(node29);
        boolean boolean33 = node32.isNE();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = null;
        com.google.javascript.rhino.jstype.JSType jSType35 = assertionFunctionSpec10.getAssertedType(node32, jSTypeRegistry34);
        node2.addChildToFront(node32);
        boolean boolean37 = node32.isCase();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OR " + "'", str6, "OR ");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSType35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test12378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12378");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isEnumElementType();
        boolean boolean81 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType82 = parameterizedType78.toMaybeEnumElementType();
        boolean boolean84 = parameterizedType78.isPropertyTypeDeclared("Node tree inequality:\nTree1:\nEXPR_RESULT\n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: EXPR_RESULT\n    OR \n\n\nSubtree2: OR \n");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable85 = parameterizedType78.getCtorImplementedInterfaces();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = parameterizedType78.getOwnPropertyJSDocInfo("Not declared as a type name");
        com.google.javascript.rhino.jstype.FunctionType functionType88 = parameterizedType78.toMaybeFunctionType();
        boolean boolean89 = parameterizedType78.isResolved();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(enumElementType82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable85);
        org.junit.Assert.assertNull(jSDocInfo87);
        org.junit.Assert.assertNotNull(functionType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test12379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12379");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 10, node22, node25, node28, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = node10.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean33 = node32.isCall();
        boolean boolean34 = node32.isDelProp();
        java.lang.String[] strArray37 = new java.lang.String[] { "", "Not declared as a constructor" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) 10, node43, node46, node49, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node53 = node49.getLastSibling();
        boolean boolean54 = node53.isGetterDef();
        boolean boolean55 = node53.isSyntheticBlock();
        boolean boolean56 = strSet38.remove((java.lang.Object) boolean55);
        java.util.Iterator<java.lang.String> strItor57 = strSet38.iterator();
        node32.setDirectives((java.util.Set<java.lang.String>) strSet38);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) 10, node62, node65, node68, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node72 = node68.getLastSibling();
        boolean boolean73 = node72.isDec();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node((int) (byte) 10, node77, node80, node83, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node87 = node83.getLastSibling();
        boolean boolean88 = node87.isDec();
        boolean boolean89 = node87.isOr();
        node87.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node93 = node87.getAncestor(2);
        java.lang.String str94 = node72.checkTreeEquals(node87);
        boolean boolean95 = node87.isInstanceOf();
        boolean boolean96 = node87.isInstanceOf();
        boolean boolean97 = node87.isTypeOf();
        boolean boolean98 = node32.isEquivalentToTyped(node87);
        boolean boolean99 = node32.isName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNull(node93);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test12380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12380");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        java.lang.Iterable iterable93 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = enumType88.getElementsType();
        boolean boolean95 = enumElementType94.isNullable();
        com.google.javascript.rhino.jstype.JSType jSType96 = enumElementType94.getPrimitiveType();
        boolean boolean97 = enumElementType94.isNumber();
        boolean boolean98 = enumElementType94.matchesNumberContext();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(iterable93);
        org.junit.Assert.assertNotNull(enumElementType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(jSType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test12381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12381");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType70 = functionType62.getImplicitPrototype();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable71 = functionType62.getAllImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType72 = functionType62.autobox();
        com.google.javascript.rhino.jstype.JSType jSType73 = functionType62.getIndexType();
        boolean boolean74 = functionType62.canBeCalled();
        java.lang.Iterable iterable75 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType76 = functionType62.toMaybeParameterizedType();
        boolean boolean77 = functionType62.hasInstanceType();
        com.google.javascript.rhino.jstype.FunctionType functionType78 = functionType62.getOwnerFunction();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean79 = functionType78.isOrdinaryFunction();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertNotNull(objectType70);
        org.junit.Assert.assertNotNull(objectTypeIterable71);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(iterable75);
        org.junit.Assert.assertNull(parameterizedType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(functionType78);
    }

    @Test
    public void test12382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12382");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoCompile();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node15 = node11.getLastSibling();
        boolean boolean16 = node15.isGetterDef();
        boolean boolean17 = node15.isSyntheticBlock();
        jSDocInfo0.setAssociatedNode(node15);
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = jSDocInfo0.getTemplateTypeNames();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo0.getSuppressions();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType21 = null;
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) 10, node25, node28, node31, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        int int38 = node37.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship39 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType21, node31, node37);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType40 = null;
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) 10, node44, node47, node50, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        int int57 = node56.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship58 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType40, node50, node56);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList59 = com.google.common.collect.ImmutableList.of(subclassRelationship39, subclassRelationship58);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (byte) 10, node63, node66, node69, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node73 = node69.getLastSibling();
        boolean boolean74 = node73.isDec();
        node73.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node77 = node73.cloneTree();
        int int78 = subclassRelationshipList59.indexOf((java.lang.Object) node77);
        java.lang.String str79 = subclassRelationshipList59.toString();
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor80 = subclassRelationshipList59.iterator();
        java.util.stream.Stream<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipStream81 = subclassRelationshipList59.parallelStream();
        com.google.common.collect.ImmutableList<java.lang.AutoCloseable> autoCloseableList82 = com.google.common.collect.ImmutableList.of((java.lang.AutoCloseable) subclassRelationshipStream81);
        boolean boolean83 = strSet20.remove((java.lang.Object) subclassRelationshipStream81);
        java.lang.Object[] objArray84 = strSet20.toArray();
        java.lang.Object[] objArray85 = strSet20.toArray();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipItor80);
        org.junit.Assert.assertNotNull(subclassRelationshipStream81);
        org.junit.Assert.assertNotNull(autoCloseableList82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[]");
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[]");
    }

    @Test
    public void test12383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12383");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.hasReferenceName();
        boolean boolean95 = enumElementType93.matchesNumberContext();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType96 = enumElementType93.toMaybeParameterizedType();
        boolean boolean97 = enumElementType93.isObject();
        java.lang.String str98 = enumElementType93.getReferenceName();
        com.google.javascript.rhino.jstype.FunctionType functionType99 = enumElementType93.getConstructor();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(parameterizedType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)" + "'", str98, "(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        org.junit.Assert.assertNull(functionType99);
    }

    @Test
    public void test12384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12384");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = parameterizedType78.getOwnPropertyJSDocInfo("(Named type with empty name component)");
        com.google.javascript.rhino.jstype.EnumElementType enumElementType82 = parameterizedType78.toMaybeEnumElementType();
        boolean boolean83 = parameterizedType78.isTemplateType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNull(jSDocInfo81);
        org.junit.Assert.assertNull(enumElementType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test12385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12385");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        boolean boolean5 = node4.isFromExterns();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node4);
        boolean boolean7 = node4.isSetterDef();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isHook();
        java.lang.String str10 = node4.toStringTree();
        com.google.javascript.rhino.Node node11 = com.google.javascript.jscomp.NodeUtil.newExpr(node4);
        com.google.javascript.rhino.Node node12 = node11.getNext();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) '#', node11, 15, 45);
        node15.detachChildren();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "STRING hi! 100\n" + "'", str10, "STRING hi! 100\n");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
    }

    @Test
    public void test12386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12386");
        boolean boolean1 = com.google.javascript.jscomp.NodeUtil.isValidQualifiedName("java.io.IOException: (OR  0)");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test12387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12387");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean2 = node1.isVarArgs();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = node12.getLastSibling();
        boolean boolean17 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        int int19 = node1.getLineno();
        java.lang.String str23 = node1.toString(true, false, true);
        java.lang.Object obj25 = node1.getProp(30);
        boolean boolean26 = node1.hasOneChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "STRING OR " + "'", str23, "STRING OR ");
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test12388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12388");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        int int19 = node16.getLength();
        java.lang.String str20 = node16.getString();
        boolean boolean21 = node16.isFalse();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) 10, node25, node28, node31, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        int int38 = node37.getCharno();
        com.google.javascript.rhino.InputId inputId40 = new com.google.javascript.rhino.InputId("hi!");
        java.lang.String str41 = inputId40.getIdName();
        node37.setInputId(inputId40);
        com.google.javascript.rhino.Node node43 = node34.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.Node node44 = null;
        node16.addChildrenAfter(node43, node44);
        boolean boolean46 = node43.isInstanceOf();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test12389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12389");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node14 = node10.getLastSibling();
        boolean boolean15 = node14.isDec();
        node14.setIsSyntheticBlock(true);
        com.google.javascript.rhino.InputId inputId18 = node14.getInputId();
        com.google.javascript.rhino.InputId inputId19 = node14.getInputId();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder20 = node14.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        java.lang.String str34 = node14.checkTreeEquals(node33);
        boolean boolean35 = node33.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node36 = node33.cloneNode();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 1L, 36, 16);
        com.google.javascript.rhino.Node node41 = node36.srcrefTree(node40);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        boolean boolean46 = node45.isFromExterns();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition47 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node48 = namePosition47.getItem();
        namePosition47.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList54 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition47);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        int int58 = node57.getCharno();
        boolean boolean59 = node57.isAssignAdd();
        boolean boolean60 = node57.isNot();
        java.lang.String str61 = node57.toString();
        namePosition47.setItem(node57);
        node57.setSourceFileForTesting("Not declared as a constructor");
        com.google.javascript.rhino.Node node65 = node45.copyInformationFrom(node57);
        boolean boolean66 = node65.isThrow();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (byte) 10, node72, node75, node78, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node[] nodeArray82 = new com.google.javascript.rhino.Node[] { node81 };
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) ' ', nodeArray82, (int) (short) 100, 48);
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node(37, node85, 35, (int) ' ');
        com.google.javascript.rhino.Node node89 = node65.srcref(node85);
        boolean boolean90 = node89.isGetProp();
        int int91 = node89.getChildCount();
        com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node(1, node41, node89);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(inputId18);
        org.junit.Assert.assertNull(inputId19);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n" + "'", str34, "Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(nodeSourcePositionList54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "OR " + "'", str61, "OR ");
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(nodeArray82);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test12390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12390");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        boolean boolean6 = jSDocInfo0.hasDescriptionForParameter("hi!");
        boolean boolean7 = jSDocInfo0.hasReturnType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getThrownTypes();
        boolean boolean9 = jSDocInfo0.hasType();
        boolean boolean10 = jSDocInfo0.isNoTypeCheck();
        java.util.Collection<java.lang.String> strCollection11 = jSDocInfo0.getAuthors();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 10, node16, node19, node22, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node26 = node22.getLastSibling();
        com.google.javascript.rhino.Node node27 = node26.removeFirstChild();
        boolean boolean28 = node26.isNE();
        node26.setWasEmptyNode(false);
        boolean boolean31 = strSet12.equals((java.lang.Object) node26);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strCollection11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test12391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12391");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable69 = functionType62.getCtorExtendedInterfaces();
        boolean boolean70 = functionType62.isInterface();
        boolean boolean71 = functionType62.isNoResolvedType();
        boolean boolean72 = functionType62.isFunctionPrototypeType();
        boolean boolean73 = functionType62.isNominalType();
        boolean boolean74 = functionType62.isNullType();
        boolean boolean75 = functionType62.hasInstanceType();
        int int76 = functionType62.getPropertiesCount();
        java.util.Set<java.lang.String> strSet77 = functionType62.getOwnPropertyNames();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertNotNull(objectTypeIterable69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(strSet77);
    }

    @Test
    public void test12392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12392");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        boolean boolean80 = parameterizedType78.isInterface();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.getParameterType();
        boolean boolean82 = parameterizedType78.isOrdinaryFunction();
        boolean boolean84 = parameterizedType78.isPropertyTypeInferred("Function");
        boolean boolean85 = parameterizedType78.isInstanceType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test12393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12393");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        java.lang.String str4 = node2.getSourceFileName();
        com.google.javascript.rhino.Node node5 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType6 = null;
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        int int23 = node22.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship24 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType6, node16, node22);
        boolean boolean25 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node16);
        int int26 = node16.getLineno();
        boolean boolean27 = node2.isEquivalentToTyped(node16);
        boolean boolean28 = node16.isQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test12394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12394");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getReturnType();
        boolean boolean70 = functionType62.matchesUint32Context();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable71 = functionType62.getParameters();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType72 = functionType62.toMaybeEnumElementType();
        boolean boolean74 = functionType62.removeProperty("Not declared as a constructor");
        boolean boolean76 = functionType62.hasProperty("(java.io.IOException: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n))");
        int int77 = functionType62.getMinArguments();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(nodeIterable71);
        org.junit.Assert.assertNull(enumElementType72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
    }

    @Test
    public void test12395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12395");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node1 = namePosition0.getItem();
        int int2 = namePosition0.getPositionOnEndLine();
        int int3 = namePosition0.getPositionOnEndLine();
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test12396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12396");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 1, (int) (short) 100, 31);
        com.google.javascript.rhino.jstype.JSType jSType5 = node4.getJSType();
        node4.setVarArgs(true);
        boolean boolean8 = node4.isQuotedString();
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec10 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("(Not declared as a constructor)");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType11 = null;
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) 10, node15, node18, node21, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        int int28 = node27.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship29 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType11, node21, node27);
        int int31 = node21.getIntProp((int) (byte) 0);
        boolean boolean32 = node21.isWhile();
        boolean boolean33 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = null;
        com.google.javascript.rhino.jstype.JSType jSType35 = assertionFunctionSpec10.getAssertedType(node21, jSTypeRegistry34);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) 10, node39, node42, node45, 0, (int) (byte) 1);
        boolean boolean49 = node42.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node42);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("false");
        com.google.javascript.rhino.Node node53 = node42.copyInformationFromForTree(node52);
        com.google.javascript.rhino.Node node54 = assertionFunctionSpec10.getAssertedParam(node52);
        boolean boolean55 = node52.hasMoreThanOneChild();
        int int56 = node52.getSideEffectFlags();
        boolean boolean57 = node52.isBlock();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship58 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node4, node52);
        org.junit.Assert.assertTrue("'" + subclassType0 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType0.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSType35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test12397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12397");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        boolean boolean12 = jSTypeRegistry10.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray13 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList14 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList14, jSTypeArray13);
        com.google.javascript.rhino.Node node16 = jSTypeRegistry10.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList14);
        com.google.javascript.rhino.jstype.JSType jSType21 = jSTypeRegistry10.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22, false);
        boolean boolean26 = jSTypeRegistry24.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray27 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList28 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList28, jSTypeArray27);
        com.google.javascript.rhino.Node node30 = jSTypeRegistry24.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList28);
        com.google.javascript.rhino.jstype.JSType jSType35 = jSTypeRegistry24.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36, false);
        boolean boolean40 = jSTypeRegistry38.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray41 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList42 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList42, jSTypeArray41);
        com.google.javascript.rhino.Node node44 = jSTypeRegistry38.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList42);
        com.google.javascript.rhino.jstype.JSType jSType49 = jSTypeRegistry38.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSType49.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        boolean boolean55 = jSTypeRegistry53.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray56 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList57 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList57, jSTypeArray56);
        com.google.javascript.rhino.Node node59 = jSTypeRegistry53.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList57);
        com.google.javascript.rhino.jstype.JSType jSType64 = jSTypeRegistry53.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSType64.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray66 = new com.google.javascript.rhino.jstype.JSType[] { jSType35, jSType50, jSType65 };
        com.google.javascript.rhino.jstype.FunctionType functionType67 = jSTypeRegistry7.createFunctionType(jSType21, jSTypeArray66);
        boolean boolean68 = functionType67.matchesNumberContext();
        boolean boolean70 = functionType67.hasProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType71 = jSTypeRegistry2.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType67);
        com.google.javascript.rhino.jstype.JSType jSType73 = functionType67.getPropertyType("((Not declared as a constructor))");
        boolean boolean75 = functionType67.isPropertyTypeInferred("(java.io.IOException: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n))");
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = null;
        functionType67.setPropertyJSDocInfo("OR  [is_optional_param: 100]", jSDocInfo77);
        int int79 = functionType67.getMaxArguments();
        boolean boolean80 = functionType67.hasCachedValues();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(jSType35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSTypeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(jSType49);
        org.junit.Assert.assertNull(jSType50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(jSType64);
        org.junit.Assert.assertNull(jSType65);
        org.junit.Assert.assertNotNull(jSTypeArray66);
        org.junit.Assert.assertNotNull(functionType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertNotNull(jSType73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test12398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12398");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        java.util.Set set92 = enumType88.getOwnPropertyNames();
        java.util.Set<java.lang.String> strSet93 = enumType88.getElements();
        com.google.javascript.rhino.Node node95 = enumType88.getPropertyNode("");
        boolean boolean96 = enumType88.isResolved();
        int int97 = enumType88.getPropertiesCount();
        java.lang.Iterable iterable98 = enumType88.getCtorExtendedInterfaces();
        java.lang.String str99 = enumType88.getReferenceName();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(set92);
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNotNull(iterable98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}" + "'", str99, "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
    }

    @Test
    public void test12399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12399");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean4 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("false");
        java.lang.String str7 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getThrownTypes();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
    }

    @Test
    public void test12400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12400");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        com.google.common.collect.ImmutableList<java.lang.String> strList89 = com.google.common.collect.ImmutableList.of();
        jSTypeRegistry2.setTemplateTypeNames((java.util.List<java.lang.String>) strList89);
        com.google.javascript.rhino.jstype.ObjectType objectType91 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.jstype.ObjectType objectType92 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.jstype.ObjectType objectType93 = jSTypeRegistry2.createAnonymousObjectType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable95 = jSTypeRegistry2.getTypesWithProperty("(java.io.IOException)");
        com.google.javascript.rhino.jstype.JSType jSType97 = jSTypeRegistry2.getType("(java.io.IOException: java.io.IOException)");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertNotNull(objectType91);
        org.junit.Assert.assertNotNull(objectType92);
        org.junit.Assert.assertNotNull(objectType93);
        org.junit.Assert.assertNotNull(jSTypeIterable95);
        org.junit.Assert.assertNull(jSType97);
    }

    @Test
    public void test12401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12401");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        boolean boolean12 = jSTypeRegistry10.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray13 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList14 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList14, jSTypeArray13);
        com.google.javascript.rhino.Node node16 = jSTypeRegistry10.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList14);
        com.google.javascript.rhino.jstype.JSType jSType21 = jSTypeRegistry10.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22, false);
        boolean boolean26 = jSTypeRegistry24.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray27 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList28 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList28, jSTypeArray27);
        com.google.javascript.rhino.Node node30 = jSTypeRegistry24.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList28);
        com.google.javascript.rhino.jstype.JSType jSType35 = jSTypeRegistry24.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36, false);
        boolean boolean40 = jSTypeRegistry38.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray41 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList42 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList42, jSTypeArray41);
        com.google.javascript.rhino.Node node44 = jSTypeRegistry38.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList42);
        com.google.javascript.rhino.jstype.JSType jSType49 = jSTypeRegistry38.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSType49.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        boolean boolean55 = jSTypeRegistry53.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray56 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList57 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList57, jSTypeArray56);
        com.google.javascript.rhino.Node node59 = jSTypeRegistry53.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList57);
        com.google.javascript.rhino.jstype.JSType jSType64 = jSTypeRegistry53.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSType64.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray66 = new com.google.javascript.rhino.jstype.JSType[] { jSType35, jSType50, jSType65 };
        com.google.javascript.rhino.jstype.FunctionType functionType67 = jSTypeRegistry7.createFunctionType(jSType21, jSTypeArray66);
        boolean boolean68 = functionType67.matchesNumberContext();
        boolean boolean70 = functionType67.hasProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType71 = jSTypeRegistry2.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType67);
        java.lang.String str72 = functionType67.getNormalizedReferenceName();
        com.google.javascript.rhino.jstype.FunctionType functionType73 = functionType67.toMaybeFunctionType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType74 = functionType67.toMaybeEnumElementType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(jSType35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSTypeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(jSType49);
        org.junit.Assert.assertNull(jSType50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(jSType64);
        org.junit.Assert.assertNull(jSType65);
        org.junit.Assert.assertNotNull(jSTypeArray66);
        org.junit.Assert.assertNotNull(functionType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertNull(enumElementType74);
    }

    @Test
    public void test12402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12402");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException("OR \n", throwable1);
        java.io.IOException iOException3 = new java.io.IOException(throwable1);
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException3);
        java.lang.Throwable throwable8 = null;
        java.io.IOException iOException9 = new java.io.IOException("OR \n", throwable8);
        java.lang.Throwable throwable11 = null;
        java.io.IOException iOException12 = new java.io.IOException("OR \n", throwable11);
        java.lang.Throwable throwable14 = null;
        java.io.IOException iOException15 = new java.io.IOException("OR \n", throwable14);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList16 = com.google.common.collect.ImmutableList.of(iOException9, iOException12, iOException15);
        java.lang.Throwable[] throwableArray17 = iOException15.getSuppressed();
        java.io.IOException iOException18 = new java.io.IOException("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", (java.lang.Throwable) iOException15);
        java.lang.Throwable[] throwableArray19 = iOException15.getSuppressed();
        iOException3.addSuppressed((java.lang.Throwable) iOException15);
        java.lang.Throwable throwable22 = null;
        java.io.IOException iOException23 = new java.io.IOException("OR \n", throwable22);
        java.lang.Throwable throwable25 = null;
        java.io.IOException iOException26 = new java.io.IOException("OR \n", throwable25);
        java.lang.Throwable throwable28 = null;
        java.io.IOException iOException29 = new java.io.IOException("OR \n", throwable28);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList30 = com.google.common.collect.ImmutableList.of(iOException23, iOException26, iOException29);
        java.lang.Throwable throwable32 = null;
        java.io.IOException iOException33 = new java.io.IOException("OR \n", throwable32);
        java.io.IOException iOException34 = new java.io.IOException(throwable32);
        java.io.IOException iOException35 = new java.io.IOException((java.lang.Throwable) iOException34);
        java.io.IOException iOException36 = new java.io.IOException((java.lang.Throwable) iOException34);
        java.lang.Throwable throwable38 = null;
        java.io.IOException iOException39 = new java.io.IOException("OR \n", throwable38);
        java.lang.Throwable throwable41 = null;
        java.io.IOException iOException42 = new java.io.IOException("OR \n", throwable41);
        java.lang.Throwable throwable44 = null;
        java.io.IOException iOException45 = new java.io.IOException("OR \n", throwable44);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList46 = com.google.common.collect.ImmutableList.of(iOException39, iOException42, iOException45);
        java.io.IOException iOException47 = new java.io.IOException((java.lang.Throwable) iOException45);
        java.io.IOException iOException49 = new java.io.IOException("(Not declared as a constructor)");
        java.lang.Throwable throwable51 = null;
        java.io.IOException iOException52 = new java.io.IOException("OR \n", throwable51);
        java.io.IOException iOException53 = new java.io.IOException(throwable51);
        java.io.IOException iOException54 = new java.io.IOException((java.lang.Throwable) iOException53);
        java.io.IOException iOException55 = new java.io.IOException((java.lang.Throwable) iOException54);
        java.lang.Throwable throwable57 = null;
        java.io.IOException iOException58 = new java.io.IOException("OR \n", throwable57);
        java.io.IOException iOException59 = new java.io.IOException(throwable57);
        java.lang.Throwable[] throwableArray60 = iOException59.getSuppressed();
        java.io.IOException iOException62 = new java.io.IOException();
        com.google.common.collect.ImmutableList<java.lang.Exception> exceptionList63 = com.google.common.collect.ImmutableList.of((java.lang.Exception) iOException62);
        java.lang.Throwable[] throwableArray64 = iOException62.getSuppressed();
        java.io.IOException iOException65 = new java.io.IOException("", (java.lang.Throwable) iOException62);
        java.lang.Throwable throwable67 = null;
        java.io.IOException iOException68 = new java.io.IOException("OR \n", throwable67);
        java.lang.Throwable throwable70 = null;
        java.io.IOException iOException71 = new java.io.IOException("OR \n", throwable70);
        java.lang.Throwable throwable73 = null;
        java.io.IOException iOException74 = new java.io.IOException("OR \n", throwable73);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList75 = com.google.common.collect.ImmutableList.of(iOException68, iOException71, iOException74);
        java.io.IOException iOException76 = new java.io.IOException((java.lang.Throwable) iOException74);
        java.lang.Throwable throwable78 = null;
        java.io.IOException iOException79 = new java.io.IOException("OR \n", throwable78);
        java.io.IOException iOException80 = new java.io.IOException(throwable78);
        java.io.IOException iOException81 = new java.io.IOException((java.lang.Throwable) iOException80);
        java.io.IOException iOException82 = new java.io.IOException((java.lang.Throwable) iOException80);
        java.lang.Throwable throwable84 = null;
        java.io.IOException iOException85 = new java.io.IOException("OR \n", throwable84);
        java.lang.Throwable throwable87 = null;
        java.io.IOException iOException88 = new java.io.IOException("OR \n", throwable87);
        java.lang.Throwable throwable90 = null;
        java.io.IOException iOException91 = new java.io.IOException("OR \n", throwable90);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList92 = com.google.common.collect.ImmutableList.of(iOException85, iOException88, iOException91);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList93 = com.google.common.collect.ImmutableList.of(iOException36, iOException45, iOException49, iOException54, iOException59, iOException65, iOException76, iOException80, iOException85);
        java.io.IOException iOException94 = new java.io.IOException((java.lang.Throwable) iOException49);
        java.lang.Throwable[] throwableArray95 = iOException49.getSuppressed();
        iOException29.addSuppressed((java.lang.Throwable) iOException49);
        iOException15.addSuppressed((java.lang.Throwable) iOException49);
        org.junit.Assert.assertNotNull(iOExceptionList16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(iOExceptionList30);
        org.junit.Assert.assertNotNull(iOExceptionList46);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(exceptionList63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(iOExceptionList75);
        org.junit.Assert.assertNotNull(iOExceptionList92);
        org.junit.Assert.assertNotNull(iOExceptionList93);
        org.junit.Assert.assertNotNull(throwableArray95);
    }

    @Test
    public void test12403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12403");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        boolean boolean69 = functionType62.isDateType();
        boolean boolean70 = functionType62.isFunctionPrototypeType();
        com.google.javascript.rhino.jstype.JSType jSType71 = functionType62.getReturnType();
        com.google.javascript.rhino.jstype.FunctionType functionType72 = jSType71.toMaybeFunctionType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(jSType71);
        org.junit.Assert.assertNull(functionType72);
    }

    @Test
    public void test12404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12404");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str1 = ternaryValue0.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str3 = ternaryValue2.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = ternaryValue0.or(ternaryValue2);
        boolean boolean6 = ternaryValue4.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = ternaryValue4.not();
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "false" + "'", str1, "false");
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "false" + "'", str3, "false");
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(ternaryValue7);
    }

    @Test
    public void test12405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12405");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.jstype.JSType jSType13 = jSTypeRegistry2.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry2.resetForTypeCheck();
        boolean boolean15 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.jstype.JSType jSType20 = jSTypeRegistry2.createNamedType("(Function)", "java.io.IOException: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", 12, (int) (byte) 100);
        com.google.javascript.rhino.ErrorReporter errorReporter21 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter22 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter23 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24, false);
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27, false);
        boolean boolean31 = jSTypeRegistry29.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList33 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList33, jSTypeArray32);
        com.google.javascript.rhino.Node node35 = jSTypeRegistry29.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList33);
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry29.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41, false);
        boolean boolean45 = jSTypeRegistry43.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray46 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList47 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList47, jSTypeArray46);
        com.google.javascript.rhino.Node node49 = jSTypeRegistry43.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList47);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSTypeRegistry43.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55, false);
        boolean boolean59 = jSTypeRegistry57.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList61, jSTypeArray60);
        com.google.javascript.rhino.Node node63 = jSTypeRegistry57.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList61);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSTypeRegistry57.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType69 = jSType68.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter70 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry72 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter70, false);
        boolean boolean74 = jSTypeRegistry72.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray75 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList76 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList76, jSTypeArray75);
        com.google.javascript.rhino.Node node78 = jSTypeRegistry72.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList76);
        com.google.javascript.rhino.jstype.JSType jSType83 = jSTypeRegistry72.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType84 = jSType83.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray85 = new com.google.javascript.rhino.jstype.JSType[] { jSType54, jSType69, jSType84 };
        com.google.javascript.rhino.jstype.FunctionType functionType86 = jSTypeRegistry26.createFunctionType(jSType40, jSTypeArray85);
        boolean boolean87 = functionType86.matchesNumberContext();
        boolean boolean89 = functionType86.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo91 = functionType86.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable92 = functionType86.getAllImplementedInterfaces();
        int int93 = functionType86.getExtendedInterfacesCount();
        boolean boolean94 = functionType86.isFunctionType();
        com.google.javascript.rhino.jstype.FunctionType functionType95 = functionType86.getConstructor();
        jSTypeRegistry2.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) functionType86);
        com.google.javascript.rhino.jstype.StaticSlot staticSlot98 = functionType86.getSlot("OR  0");
        boolean boolean99 = functionType86.isObject();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSType20);
        org.junit.Assert.assertNull(errorReporter21);
        org.junit.Assert.assertNull(errorReporter22);
        org.junit.Assert.assertNull(errorReporter23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSType54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertNull(jSType84);
        org.junit.Assert.assertNotNull(jSTypeArray85);
        org.junit.Assert.assertNotNull(functionType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(jSDocInfo91);
        org.junit.Assert.assertNotNull(objectTypeIterable92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNull(functionType95);
        org.junit.Assert.assertNull(staticSlot98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test12406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12406");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.hasReferenceName();
        boolean boolean95 = enumElementType93.matchesStringContext();
        boolean boolean96 = enumElementType93.hasReferenceName();
        java.lang.String str97 = enumElementType93.getReferenceName();
        boolean boolean98 = enumElementType93.isBooleanObjectType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)" + "'", str97, "(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test12407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12407");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(4095);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile2 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node1);
        org.junit.Assert.assertNull(staticSourceFile2);
    }

    @Test
    public void test12408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12408");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoCompile();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node15 = node11.getLastSibling();
        boolean boolean16 = node15.isGetterDef();
        boolean boolean17 = node15.isSyntheticBlock();
        jSDocInfo0.setAssociatedNode(node15);
        java.util.Set<java.lang.String> strSet19 = jSDocInfo0.getModifies();
        boolean boolean21 = jSDocInfo0.hasDescriptionForParameter("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList22 = jSDocInfo0.getImplementedInterfaces();
        java.util.Collection<java.lang.String> strCollection23 = jSDocInfo0.getReferences();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList22);
        org.junit.Assert.assertNull(strCollection23);
    }

    @Test
    public void test12409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12409");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = null;
        parameterizedType78.setPropertyJSDocInfo("hi!", jSDocInfo83);
        boolean boolean85 = parameterizedType78.isCheckedUnknownType();
        com.google.javascript.rhino.jstype.JSType jSType86 = parameterizedType78.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType87 = parameterizedType78.getParameterType();
        java.lang.Iterable iterable88 = parameterizedType78.getCtorImplementedInterfaces();
        boolean boolean89 = parameterizedType78.isCheckedUnknownType();
        com.google.javascript.rhino.jstype.UnionType unionType90 = parameterizedType78.toMaybeUnionType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(jSType86);
        org.junit.Assert.assertNull(jSType87);
        org.junit.Assert.assertNotNull(iterable88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(unionType90);
    }

    @Test
    public void test12410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12410");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExpose();
        boolean boolean2 = jSDocInfo0.isExpose();
        boolean boolean3 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.hasDescriptionForParameter("JSDocInfo");
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
    }

    @Test
    public void test12411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12411");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        boolean boolean15 = node3.isCall();
        node3.setIsSyntheticBlock(true);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType18 = null;
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 10, node22, node25, node28, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        int int35 = node34.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship36 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType18, node28, node34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) 10, node40, node43, node46, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node50 = node28.useSourceInfoIfMissingFromForTree(node49);
        com.google.javascript.rhino.Node node52 = node28.getAncestor(53);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder53 = node28.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean55 = jSDocInfo54.isExpose();
        boolean boolean56 = jSDocInfo54.isExpose();
        java.lang.String str57 = jSDocInfo54.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = jSDocInfo54.getType();
        boolean boolean59 = jSDocInfo54.isOverride();
        boolean boolean60 = jSDocInfo54.isNoSideEffects();
        java.lang.String str61 = jSDocInfo54.getMeaning();
        java.lang.String str62 = jSDocInfo54.getReturnDescription();
        node28.setJSDocInfo(jSDocInfo54);
        java.lang.String str64 = node3.checkTreeEquals(node28);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(jSTypeExpression58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test12412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12412");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("(enum{)", jSTypeNative1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean4 = jSDocInfo3.isNoShadow();
        boolean boolean5 = jSDocInfo3.isNoAlias();
        boolean boolean6 = jSDocInfo3.isHidden();
        boolean boolean7 = jSDocInfo3.isConsistentIdGenerator();
        boolean boolean8 = jSDocInfo3.isDefine();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) 10, node12, node15, node18, 0, (int) (byte) 1);
        java.lang.String str22 = node12.getString();
        boolean boolean23 = node12.isContinue();
        boolean boolean24 = node12.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = null;
        node12.setStaticSourceFile(staticSourceFile25);
        java.lang.Object obj28 = node12.getProp(37);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean32 = node31.isFunction();
        node12.addChildToFront(node31);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) 10, node37, node40, node43, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node47 = node43.getLastSibling();
        boolean boolean48 = node47.isDec();
        boolean boolean49 = node47.isOr();
        node47.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node52 = node31.srcref(node47);
        boolean boolean53 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node31);
        jSDocInfo3.setAssociatedNode(node31);
        node31.setType((int) '#');
        com.google.javascript.rhino.Node node57 = assertionFunctionSpec2.getAssertedParam(node31);
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean59 = jSDocInfo58.isExpose();
        boolean boolean60 = jSDocInfo58.isExpose();
        java.lang.String str61 = jSDocInfo58.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression62 = jSDocInfo58.getType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression63 = jSDocInfo58.getBaseType();
        boolean boolean65 = jSDocInfo58.hasParameter("");
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection66 = jSDocInfo58.getMarkers();
        boolean boolean67 = jSDocInfo58.isOverride();
        node31.setJSDocInfo(jSDocInfo58);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(jSTypeExpression62);
        org.junit.Assert.assertNull(jSTypeExpression63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(markerCollection66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test12413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12413");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node14 = node10.getLastSibling();
        boolean boolean15 = node14.isDec();
        boolean boolean16 = node14.isOr();
        node14.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node19 = node14.cloneTree();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node33 = node29.getLastSibling();
        boolean boolean34 = node33.isDec();
        boolean boolean35 = node33.isOr();
        node33.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node38 = node33.cloneTree();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(50, node19, node38);
        node39.setWasEmptyNode(false);
        // The following exception was thrown during execution in test generation
        try {
            node39.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node38);
    }

    @Test
    public void test12414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12414");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getRestrictedTypeGivenToBooleanOutcome(false);
        java.lang.String str70 = functionType62.getNormalizedReferenceName();
        boolean boolean71 = functionType62.hasReferenceName();
        com.google.javascript.rhino.Node node72 = functionType62.getRootNode();
        boolean boolean73 = functionType62.hasReferenceName();
        java.lang.String str74 = functionType62.getNormalizedReferenceName();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str74);
    }

    @Test
    public void test12415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12415");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.ObjectType objectType93 = enumType88.dereference();
        com.google.javascript.rhino.jstype.ObjectType objectType94 = enumType88.getImplicitPrototype();
        boolean boolean95 = enumType88.isBooleanObjectType();
        java.util.Set set96 = enumType88.getOwnPropertyNames();
        boolean boolean97 = enumType88.isNoResolvedType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(objectType93);
        org.junit.Assert.assertNotNull(objectType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(set96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test12416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12416");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType1 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        int int5 = node4.getCharno();
        java.lang.String str6 = node4.getSourceFileName();
        boolean boolean7 = node4.isLabel();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 10, node11, node14, node17, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node21 = node17.getLastSibling();
        boolean boolean22 = node21.isDec();
        boolean boolean23 = node21.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship24 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType1, node4, node21);
        boolean boolean25 = node4.isParamList();
        boolean boolean26 = node4.isGetterDef();
        boolean boolean27 = node4.isTry();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, 52, 0);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType31 = null;
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 10, node35, node38, node41, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        int int48 = node47.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship49 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType31, node41, node47);
        com.google.javascript.rhino.Node node51 = node47.getAncestor((int) (short) 10);
        boolean boolean52 = node47.isQualifiedName();
        java.lang.String str53 = node47.toString();
        com.google.javascript.rhino.Node node54 = node30.srcrefTree(node47);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType56 = null;
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        int int60 = node59.getCharno();
        java.lang.String str61 = node59.getSourceFileName();
        boolean boolean62 = node59.isLabel();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (byte) 10, node66, node69, node72, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node76 = node72.getLastSibling();
        boolean boolean77 = node76.isDec();
        boolean boolean78 = node76.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship79 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType56, node59, node76);
        boolean boolean80 = node59.isParamList();
        boolean boolean81 = node59.isGetterDef();
        boolean boolean82 = node59.isTry();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (byte) -1, node59, 52, 0);
        node59.putIntProp((int) (short) 100, 16);
        boolean boolean89 = node59.isLabel();
        boolean boolean90 = node30.hasChild(node59);
        boolean boolean91 = node30.hasOneChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "OR " + "'", str53, "OR ");
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test12417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12417");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.isNullable();
        com.google.javascript.rhino.jstype.ObjectType.Property property96 = enumElementType93.getSlot("enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        com.google.javascript.rhino.jstype.EnumElementType enumElementType97 = enumElementType93.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.ObjectType objectType98 = enumElementType93.getImplicitPrototype();
        boolean boolean99 = enumElementType93.canBeCalled();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(property96);
        org.junit.Assert.assertNotNull(enumElementType97);
        org.junit.Assert.assertNull(objectType98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test12418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12418");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList1 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        boolean boolean4 = jSDocInfo0.hasParameter("OR  0");
        boolean boolean5 = jSDocInfo0.isConstructor();
        java.lang.String str6 = jSDocInfo0.getMeaning();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getAuthors();
        boolean boolean8 = jSDocInfo0.isNoCompile();
        int int9 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test12419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12419");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable63 = functionType62.getImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType65 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType) functionType62, "Not declared as a type name");
        com.google.javascript.rhino.jstype.FunctionType functionType66 = functionType62.toMaybeFunctionType();
        boolean boolean67 = functionType66.isNumberObjectType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = functionType66.getOwnPropertyJSDocInfo("");
        boolean boolean70 = functionType66.matchesNumberContext();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertNotNull(objectTypeIterable63);
        org.junit.Assert.assertNull(objectType65);
        org.junit.Assert.assertNotNull(functionType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSDocInfo69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test12420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12420");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        boolean boolean10 = jSTypeRegistry8.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14, false);
        boolean boolean18 = jSTypeRegistry16.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray19 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList20 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList20, jSTypeArray19);
        com.google.javascript.rhino.Node node22 = jSTypeRegistry16.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList20);
        com.google.javascript.rhino.jstype.JSType jSType27 = jSTypeRegistry16.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        boolean boolean32 = jSTypeRegistry30.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray33 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList34 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList34, jSTypeArray33);
        com.google.javascript.rhino.Node node36 = jSTypeRegistry30.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList34);
        com.google.javascript.rhino.jstype.JSType jSType41 = jSTypeRegistry30.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter42 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter42, false);
        boolean boolean46 = jSTypeRegistry44.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray47 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList48 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList48, jSTypeArray47);
        com.google.javascript.rhino.Node node50 = jSTypeRegistry44.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList48);
        com.google.javascript.rhino.jstype.JSType jSType55 = jSTypeRegistry44.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType56 = jSType55.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57, false);
        boolean boolean61 = jSTypeRegistry59.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray62 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList63 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList63, jSTypeArray62);
        com.google.javascript.rhino.Node node65 = jSTypeRegistry59.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList63);
        com.google.javascript.rhino.jstype.JSType jSType70 = jSTypeRegistry59.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType71 = jSType70.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] { jSType41, jSType56, jSType71 };
        com.google.javascript.rhino.jstype.FunctionType functionType73 = jSTypeRegistry13.createFunctionType(jSType27, jSTypeArray72);
        boolean boolean74 = functionType73.matchesNumberContext();
        boolean boolean76 = functionType73.hasProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType77 = jSTypeRegistry8.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType73);
        boolean boolean78 = functionType73.isVoidType();
        com.google.javascript.rhino.jstype.JSType jSType79 = jSTypeRegistry2.createNullableType((com.google.javascript.rhino.jstype.JSType) functionType73);
        com.google.javascript.rhino.jstype.JSType jSType84 = jSTypeRegistry2.createNamedType("()", "(java.io.IOException: java.io.IOException: java.io.IOException: (Not declared as a constructor))", (int) '#', 14);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSTypeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(jSType27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(jSType41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSTypeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(jSType55);
        org.junit.Assert.assertNull(jSType56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jSTypeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(jSType70);
        org.junit.Assert.assertNull(jSType71);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objectType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSType79);
        org.junit.Assert.assertNotNull(jSType84);
    }

    @Test
    public void test12421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12421");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        java.lang.Iterable iterable93 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = enumType88.getElementsType();
        boolean boolean95 = enumElementType94.hasReferenceName();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(iterable93);
        org.junit.Assert.assertNotNull(enumElementType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test12422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12422");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        int int4 = node3.getCharno();
        java.lang.String str5 = node3.getSourceFileName();
        boolean boolean6 = node3.isLabel();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node20 = node16.getLastSibling();
        boolean boolean21 = node20.isDec();
        boolean boolean22 = node20.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship23 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node3, node20);
        boolean boolean24 = node3.isParamList();
        int int25 = node3.getSourcePosition();
        boolean boolean26 = node3.isFalse();
        int int27 = node3.getSourceOffset();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = new com.google.javascript.rhino.JSTypeExpression(node3, "Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType30 = null;
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) 10, node34, node37, node40, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        int int47 = node46.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship48 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType30, node40, node46);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) 10, node52, node55, node58, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node62 = node40.useSourceInfoIfMissingFromForTree(node61);
        int int63 = node62.getChildCount();
        boolean boolean64 = node62.isInstanceOf();
        java.lang.String str65 = node62.toString();
        boolean boolean66 = jSTypeExpression29.equals((java.lang.Object) str65);
        boolean boolean67 = jSTypeExpression29.isVarArgs();
        boolean boolean68 = jSTypeExpression29.isVarArgs();
        boolean boolean69 = jSTypeExpression29.isOptionalArg();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression70 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression29);
        boolean boolean71 = jSTypeExpression29.isVarArgs();
        boolean boolean72 = jSTypeExpression29.isVarArgs();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "OR  0" + "'", str65, "OR  0");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test12423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12423");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesThis();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.clearSideEffectFlags();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test12424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12424");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        java.lang.String str69 = null; // flaky: functionType62.toAnnotationString();
        boolean boolean70 = functionType62.isFunctionType();
        java.util.List<com.google.javascript.rhino.jstype.FunctionType> functionTypeList71 = functionType62.getSubTypes();
        boolean boolean72 = functionType62.matchesObjectContext();
        com.google.javascript.rhino.jstype.ObjectType.Property property74 = functionType62.getSlot("{-733738656}");
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75, false);
        boolean boolean79 = jSTypeRegistry77.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray80 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList81 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList81, jSTypeArray80);
        com.google.javascript.rhino.Node node83 = jSTypeRegistry77.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList81);
        com.google.javascript.rhino.jstype.JSType jSType88 = jSTypeRegistry77.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.ObjectType objectType89 = com.google.javascript.rhino.jstype.ObjectType.cast(jSType88);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue90 = functionType62.testForEquality(jSType88);
        boolean boolean91 = functionType62.isInterface();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Function" + "'", str69, "Function");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(functionTypeList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNull(property74);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(jSTypeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(jSType88);
        org.junit.Assert.assertNotNull(objectType89);
        org.junit.Assert.assertNotNull(ternaryValue90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test12425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12425");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) -1, "unknown", 30, 41);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test12426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12426");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        boolean boolean69 = functionType62.isEnumElementType();
        boolean boolean70 = functionType62.isNullable();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable71 = functionType62.getAllExtendedInterfaces();
        int int72 = functionType62.getMinArguments();
        boolean boolean74 = functionType62.isPropertyInExterns("GETELEM false");
        java.lang.String str75 = functionType62.getNormalizedReferenceName();
        com.google.javascript.rhino.Node node77 = functionType62.getPropertyNode("({913046089})");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(node77);
    }

    @Test
    public void test12427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12427");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.isReturnTypeInferred();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList66 = jSDocInfo65.getTemplateTypeNames();
        boolean boolean67 = jSDocInfo65.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression68 = jSDocInfo65.getThisType();
        functionType62.setPropertyJSDocInfo("STRING hi!", jSDocInfo65);
        boolean boolean70 = functionType62.isFunctionPrototypeType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSTypeExpression68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test12428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12428");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        int int4 = node3.getCharno();
        java.lang.String str5 = node3.getSourceFileName();
        int int6 = node3.getSourcePosition();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        boolean boolean11 = node10.isFromExterns();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition12 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node13 = namePosition12.getItem();
        namePosition12.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList19 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition12);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        int int23 = node22.getCharno();
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.isNot();
        java.lang.String str26 = node22.toString();
        namePosition12.setItem(node22);
        node22.setSourceFileForTesting("Not declared as a constructor");
        com.google.javascript.rhino.Node node30 = node10.copyInformationFrom(node22);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        int int34 = node33.getCharno();
        boolean boolean35 = node33.isExprResult();
        int int36 = node33.getChildCount();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(16, node3, node10, node33, 4095, (int) ' ');
        boolean boolean40 = node39.wasEmptyNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = node39.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNotNull(nodeSourcePositionList19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "OR " + "'", str26, "OR ");
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(staticSourceFile41);
    }

    @Test
    public void test12429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12429");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoCompile();
        boolean boolean2 = jSDocInfo0.containsDeclaration();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) 10, node7, node10, node13, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node17 = node13.getLastSibling();
        com.google.javascript.rhino.Node node18 = node17.removeFirstChild();
        boolean boolean19 = node17.isNE();
        node17.setWasEmptyNode(false);
        boolean boolean22 = strSet3.equals((java.lang.Object) node17);
        boolean boolean23 = node17.isTrue();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder24 = node17.new FileLevelJsDocBuilder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test12430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12430");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType40 = null;
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) 10, node44, node47, node50, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        int int57 = node56.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship58 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType40, node50, node56);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType59 = null;
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (byte) 10, node63, node66, node69, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString(100, "");
        int int76 = node75.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship77 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType59, node69, node75);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList78 = com.google.common.collect.ImmutableList.of(subclassRelationship58, subclassRelationship77);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString(100, "");
        int int82 = node81.getCharno();
        boolean boolean83 = node81.isExprResult();
        boolean boolean84 = subclassRelationshipList78.equals((java.lang.Object) node81);
        boolean boolean85 = subclassRelationshipList38.containsAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList78);
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor86 = subclassRelationshipList38.iterator();
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator87 = subclassRelationshipList38.spliterator();
        java.util.function.UnaryOperator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipUnaryOperator88 = null;
        // The following exception was thrown during execution in test generation
        try {
            subclassRelationshipList38.replaceAll(subclassRelationshipUnaryOperator88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList78);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipItor86);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator87);
    }

    @Test
    public void test12431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12431");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        boolean boolean40 = subclassRelationshipList39.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor41 = subclassRelationshipList39.listIterator();
        java.lang.Object[] objArray42 = subclassRelationshipList39.toArray();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition43 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition43.setItem("Not declared as a constructor");
        int int46 = stringPosition43.getPositionOnEndLine();
        int int47 = stringPosition43.getPositionOnStartLine();
        int int48 = stringPosition43.getPositionOnStartLine();
        stringPosition43.setItem("Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        int int51 = subclassRelationshipList39.lastIndexOf((java.lang.Object) "Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList52 = subclassRelationshipList39.reverse();
        java.util.function.UnaryOperator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipUnaryOperator53 = null;
        // The following exception was thrown during execution in test generation
        try {
            subclassRelationshipList39.replaceAll(subclassRelationshipUnaryOperator53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipItor41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList52);
    }

    @Test
    public void test12432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12432");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        int int69 = functionType62.getExtendedInterfacesCount();
        functionType62.clearResolved();
        boolean boolean72 = functionType62.removeProperty("Not declared as a type name");
        com.google.javascript.rhino.jstype.JSType jSType73 = functionType62.getReturnType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean76 = jSDocInfo75.isNoShadow();
        boolean boolean77 = jSDocInfo75.isExpose();
        functionType62.setPropertyJSDocInfo("InputId: OR ", jSDocInfo75);
        boolean boolean79 = functionType62.isReturnTypeInferred();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(jSType73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test12433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12433");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        node3.setLineno(4);
        boolean boolean16 = node3.isNull();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 10, node21, node24, node27, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] { node30 };
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) ' ', nodeArray31, (int) (short) 100, 48);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) 10, node38, node41, node44, 0, (int) (byte) 1);
        boolean boolean48 = node47.isIn();
        com.google.javascript.rhino.Node node49 = node34.useSourceInfoIfMissingFromForTree(node47);
        boolean boolean50 = node47.isDelProp();
        com.google.javascript.rhino.Node node51 = node3.copyInformationFrom(node47);
        boolean boolean52 = node47.isAssign();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test12434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12434");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        boolean boolean93 = enumType88.isPropertyInExterns("Function");
        int int94 = enumType88.getPropertiesCount();
        boolean boolean95 = enumType88.hasCachedValues();
        boolean boolean96 = enumType88.isVoidType();
        boolean boolean97 = enumType88.isArrayType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo98 = enumType88.getJSDocInfo();
        com.google.javascript.rhino.jstype.ObjectType objectType99 = enumType88.dereference();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNull(jSDocInfo98);
        org.junit.Assert.assertNotNull(objectType99);
    }

    @Test
    public void test12435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12435");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.util.stream.Stream<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipStream58 = subclassRelationshipList38.stream();
        java.util.ListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor59 = subclassRelationshipList38.listIterator();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType60 = null;
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 10, node64, node67, node70, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString(100, "");
        int int77 = node76.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship78 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType60, node70, node76);
        boolean boolean79 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node70);
        boolean boolean80 = node70.isObjectLit();
        boolean boolean81 = node70.isBreak();
        com.google.javascript.rhino.Node node82 = node70.cloneNode();
        boolean boolean83 = subclassRelationshipList38.contains((java.lang.Object) node82);
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec[] assertionFunctionSpecArray84 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec[] {};
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec[] assertionFunctionSpecArray85 = subclassRelationshipList38.toArray(assertionFunctionSpecArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipStream58);
        org.junit.Assert.assertNotNull(subclassRelationshipItor59);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecArray84);
    }

    @Test
    public void test12436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12436");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = null;
        parameterizedType78.setPropertyJSDocInfo("hi!", jSDocInfo83);
        boolean boolean85 = parameterizedType78.isCheckedUnknownType();
        com.google.javascript.rhino.jstype.JSType jSType86 = parameterizedType78.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType87 = parameterizedType78.getParameterType();
        boolean boolean88 = parameterizedType78.isAllType();
        boolean boolean89 = parameterizedType78.matchesNumberContext();
        boolean boolean91 = parameterizedType78.removeProperty("(InputId: OR )");
        boolean boolean92 = parameterizedType78.isUnknownType();
        boolean boolean94 = parameterizedType78.isPropertyTypeDeclared("OR  [synthetic: 1]\n");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(jSType86);
        org.junit.Assert.assertNull(jSType87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test12437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12437");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        boolean boolean13 = node6.isThrow();
        boolean boolean14 = node6.isExprResult();
        boolean boolean15 = node6.isComma();
        boolean boolean16 = node6.isTrue();
        boolean boolean17 = node6.isFunction();
        boolean boolean18 = node6.isParamList();
        com.google.javascript.rhino.Node node19 = node6.getNext();
        boolean boolean20 = node19.isFunction();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test12438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12438");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.lang.String str69 = functionType62.getDisplayName();
        boolean boolean70 = functionType62.matchesNumberContext();
        boolean boolean71 = functionType62.isStringValueType();
        java.lang.String str72 = functionType62.getDisplayName();
        com.google.javascript.rhino.jstype.FunctionType functionType74 = functionType62.getBindReturnType((int) (short) 1);
        boolean boolean76 = functionType74.isPropertyTypeInferred("Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable77 = functionType74.getAllExtendedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType78 = functionType74.getImplicitPrototype();
        java.lang.String str79 = objectType78.getDisplayName();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(functionType74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable77);
        org.junit.Assert.assertNotNull(objectType78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Function" + "'", str79, "Function");
    }

    @Test
    public void test12439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12439");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean4 = jSDocInfo0.isInterface();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType5 = null;
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) 10, node9, node12, node15, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        int int22 = node21.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship23 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType5, node15, node21);
        jSDocInfo0.setAssociatedNode(node21);
        boolean boolean25 = jSDocInfo0.isNoCompile();
        boolean boolean26 = jSDocInfo0.hasReturnType();
        boolean boolean28 = jSDocInfo0.hasParameter("java.io.IOException: Not declared as a type name");
        boolean boolean29 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test12440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12440");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 'a', 50, 100);
        int int4 = node3.getLineno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
    }

    @Test
    public void test12441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12441");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        int int69 = functionType62.getExtendedInterfacesCount();
        boolean boolean70 = functionType62.isFunctionType();
        com.google.javascript.rhino.Node node71 = functionType62.getRootNode();
        com.google.javascript.rhino.jstype.JSType jSType73 = functionType62.getPropertyType("Unknown class name");
        com.google.javascript.rhino.Node node74 = functionType62.getRootNode();
        boolean boolean76 = functionType62.hasProperty("Not declared as a constructor");
        com.google.javascript.rhino.jstype.ObjectType.Property property78 = functionType62.getSlot("Node tree inequality:\nTree1:\nOR \n\n\nTree2:\nSTRING OR \n\n\nSubtree1: OR \n\n\nSubtree2: STRING OR \n");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNotNull(jSType73);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(property78);
    }

    @Test
    public void test12442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12442");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExpose();
        boolean boolean2 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getThisType();
        java.lang.String str4 = jSDocInfo0.getOriginalCommentString();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        java.util.Iterator<java.lang.String> strItor6 = strSet5.iterator();
        java.lang.Object[] objArray7 = strSet5.toArray();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
    }

    @Test
    public void test12443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12443");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        java.lang.String str4 = node2.getSourceFileName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        int int8 = node7.getCharno();
        boolean boolean9 = node7.isExprResult();
        node2.addChildToFront(node7);
        java.lang.String str14 = node7.toString(false, false, false);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = node7.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR  is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OR " + "'", str14, "OR ");
    }

    @Test
    public void test12444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12444");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(7, "Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        boolean boolean3 = node2.isDec();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test12445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12445");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        boolean boolean93 = enumType88.isPropertyInExterns("Function");
        boolean boolean94 = enumType88.isEmptyType();
        boolean boolean96 = enumType88.isPropertyTypeDeclared("");
        boolean boolean97 = enumType88.matchesNumberContext();
        boolean boolean98 = enumType88.isCheckedUnknownType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test12446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12446");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        int int20 = node10.getIntProp((int) (byte) 0);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = null;
        node10.setStaticSourceFile(staticSourceFile21);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node10);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType24 = null;
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 10, node28, node31, node34, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        int int41 = node40.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship42 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType24, node34, node40);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType43 = null;
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) 10, node47, node50, node53, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        int int60 = node59.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship61 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType43, node53, node59);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList62 = com.google.common.collect.ImmutableList.of(subclassRelationship42, subclassRelationship61);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (byte) 10, node66, node69, node72, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node76 = node72.getLastSibling();
        boolean boolean77 = node76.isDec();
        node76.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node80 = node76.cloneTree();
        int int81 = subclassRelationshipList62.indexOf((java.lang.Object) node80);
        com.google.javascript.rhino.Node node82 = node80.cloneTree();
        boolean boolean83 = node80.isCase();
        com.google.javascript.rhino.Node node84 = node80.getLastSibling();
        com.google.javascript.rhino.Node node85 = node10.useSourceInfoFrom(node84);
        node85.setCharno(48);
        boolean boolean88 = node85.isArrayLit();
        boolean boolean89 = node85.isStringKey();
        java.util.Set<java.lang.String> strSet90 = node85.getDirectives();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(strSet90);
    }

    @Test
    public void test12447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12447");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.jstype.JSType jSType80 = parameterizedType78.findPropertyType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = parameterizedType78.getJSDocInfo();
        boolean boolean82 = parameterizedType78.isInterface();
        boolean boolean83 = parameterizedType78.isNominalType();
        boolean boolean84 = parameterizedType78.isCheckedUnknownType();
        boolean boolean85 = parameterizedType78.isAllType();
        java.lang.String str86 = parameterizedType78.getDisplayName();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = parameterizedType78.getCtorExtendedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(jSType80);
        org.junit.Assert.assertNull(jSDocInfo81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
    }

    @Test
    public void test12448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12448");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("OR  [slash_v: 1]");
        java.lang.String str2 = assertionFunctionSpec1.getFunctionName();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean5 = node4.isVarArgs();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) 10, node9, node12, node15, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node19 = node15.getLastSibling();
        boolean boolean20 = node19.isLocalResultCall();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoIfMissingFrom(node19);
        int int22 = node4.getLineno();
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node4);
        boolean boolean24 = node23.isWith();
        boolean boolean26 = node23.getBooleanProp(16384);
        com.google.javascript.rhino.Node node27 = assertionFunctionSpec1.getAssertedParam(node23);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "OR  [slash_v: 1]" + "'", str2, "OR  [slash_v: 1]");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
    }

    @Test
    public void test12449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12449");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        node13.setIsSyntheticBlock(true);
        com.google.javascript.rhino.InputId inputId17 = node13.getInputId();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 10, node21, node24, node27, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node31 = node27.getLastSibling();
        boolean boolean32 = node31.isDec();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) 10, node36, node39, node42, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node46 = node42.getLastSibling();
        boolean boolean47 = node46.isDec();
        boolean boolean48 = node46.isOr();
        node46.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node52 = node46.getAncestor(2);
        java.lang.String str53 = node31.checkTreeEquals(node46);
        boolean boolean54 = node46.isInstanceOf();
        boolean boolean55 = node46.isInstanceOf();
        boolean boolean56 = node13.isEquivalentToTyped(node46);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder57 = node46.getJsDocBuilderForNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node46);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(inputId17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder57);
        org.junit.Assert.assertNull(staticSourceFile58);
    }

    @Test
    public void test12450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12450");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isFunction();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node2.children();
        boolean boolean5 = node2.isFor();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test12451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12451");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        jSTypeRegistry2.setLastGeneration(false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable6 = jSTypeRegistry2.getTypesWithProperty("Not declared as a type name");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable13 = jSTypeRegistry11.getTypesWithProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable15 = jSTypeRegistry11.getTypesWithProperty("OR \n");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        boolean boolean23 = jSTypeRegistry21.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList25, jSTypeArray24);
        com.google.javascript.rhino.Node node27 = jSTypeRegistry21.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList25);
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry21.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33, false);
        boolean boolean37 = jSTypeRegistry35.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray38 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList39 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList39, jSTypeArray38);
        com.google.javascript.rhino.Node node41 = jSTypeRegistry35.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList39);
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry35.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        boolean boolean51 = jSTypeRegistry49.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray52 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList53 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList53, jSTypeArray52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry49.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList53);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSTypeRegistry49.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType61 = jSType60.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62, false);
        boolean boolean66 = jSTypeRegistry64.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList68 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList68, jSTypeArray67);
        com.google.javascript.rhino.Node node70 = jSTypeRegistry64.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        com.google.javascript.rhino.jstype.JSType jSType75 = jSTypeRegistry64.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType76 = jSType75.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray77 = new com.google.javascript.rhino.jstype.JSType[] { jSType46, jSType61, jSType76 };
        com.google.javascript.rhino.jstype.FunctionType functionType78 = jSTypeRegistry18.createFunctionType(jSType32, jSTypeArray77);
        boolean boolean79 = functionType78.matchesNumberContext();
        boolean boolean81 = functionType78.hasProperty("");
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope82 = functionType78.getParentScope();
        com.google.javascript.rhino.jstype.JSType jSType87 = jSTypeRegistry11.getType(jSTypeStaticScope82, "Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n", "(Named type with empty name component)", 44, 36);
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(OR  0)", node8, jSType87);
        boolean boolean89 = enumType88.isTemplateType();
        java.lang.Iterable iterable90 = enumType88.getCtorImplementedInterfaces();
        int int91 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.ObjectType objectType92 = enumType88.getImplicitPrototype();
        boolean boolean94 = enumType88.isPropertyTypeInferred("{1912950188}");
        org.junit.Assert.assertNotNull(jSTypeIterable6);
        org.junit.Assert.assertNotNull(jSTypeIterable13);
        org.junit.Assert.assertNotNull(jSTypeIterable15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSType60);
        org.junit.Assert.assertNull(jSType61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(jSType75);
        org.junit.Assert.assertNull(jSType76);
        org.junit.Assert.assertNotNull(jSTypeArray77);
        org.junit.Assert.assertNotNull(functionType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope82);
        org.junit.Assert.assertNotNull(jSType87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(iterable90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(objectType92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test12452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12452");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("hi!");
        java.lang.String str6 = inputId5.getIdName();
        node2.setInputId(inputId5);
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node2.getJSDocInfo();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(44, 8, 39);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 10, node16, node19, node22, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node26 = node22.getLastSibling();
        boolean boolean27 = node26.isDec();
        node26.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node30 = node26.cloneTree();
        com.google.javascript.rhino.Node node31 = node26.getLastSibling();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType32 = null;
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) 10, node36, node39, node42, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        int int49 = node48.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship50 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType32, node42, node48);
        com.google.javascript.rhino.Node node51 = node31.useSourceInfoFrom(node42);
        com.google.javascript.rhino.Node node52 = node12.copyInformationFrom(node51);
        com.google.javascript.rhino.Node node53 = node2.srcrefTree(node12);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) 10, node57, node60, node63, 0, (int) (byte) 1);
        boolean boolean67 = node60.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node60);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("false");
        com.google.javascript.rhino.Node node71 = node60.copyInformationFromForTree(node70);
        java.lang.String str75 = node60.toString(true, true, false);
        com.google.javascript.rhino.Node node76 = node12.srcrefTree(node60);
        boolean boolean77 = node60.isScript();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable78 = node60.siblings();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "OR " + "'", str75, "OR ");
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(nodeIterable78);
    }

    @Test
    public void test12453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12453");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.isPropertyTypeDeclared("((STRING OR \n))");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test12454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12454");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(37, "", (int) (byte) 10, (int) (byte) 10);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node4.getStaticSourceFile();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        int int10 = node9.getCharno();
        java.lang.String str11 = node9.getSourceFileName();
        int int12 = node9.getSourcePosition();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        boolean boolean17 = node16.isFromExterns();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition18 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node19 = namePosition18.getItem();
        namePosition18.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList25 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition18);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        int int29 = node28.getCharno();
        boolean boolean30 = node28.isAssignAdd();
        boolean boolean31 = node28.isNot();
        java.lang.String str32 = node28.toString();
        namePosition18.setItem(node28);
        node28.setSourceFileForTesting("Not declared as a constructor");
        com.google.javascript.rhino.Node node36 = node16.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        int int40 = node39.getCharno();
        boolean boolean41 = node39.isExprResult();
        int int42 = node39.getChildCount();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(16, node9, node16, node39, 4095, (int) ' ');
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = node16.getJSDocInfo();
        java.lang.String str47 = com.google.javascript.jscomp.NodeUtil.getSourceName(node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType49 = null;
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        int int53 = node52.getCharno();
        java.lang.String str54 = node52.getSourceFileName();
        boolean boolean55 = node52.isLabel();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) 10, node59, node62, node65, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node69 = node65.getLastSibling();
        boolean boolean70 = node69.isDec();
        boolean boolean71 = node69.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship72 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType49, node52, node69);
        boolean boolean73 = node52.isParamList();
        boolean boolean74 = node52.isGetterDef();
        boolean boolean75 = node52.isTry();
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (byte) -1, node52, 52, 0);
        node52.putIntProp((int) (short) 100, 16);
        boolean boolean82 = node16.isEquivalentTo(node52);
        boolean boolean83 = node16.isRegExp();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile84 = node16.getStaticSourceFile();
        int int86 = staticSourceFile84.getColumnOfOffset(43);
        boolean boolean87 = staticSourceFile84.isExtern();
        int int89 = staticSourceFile84.getLineOfOffset(37);
        node4.setStaticSourceFile(staticSourceFile84);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(nodeSourcePositionList25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR " + "'", str32, "OR ");
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(jSDocInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Not declared as a constructor" + "'", str47, "Not declared as a constructor");
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(staticSourceFile84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test12455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12455");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.jstype.JSType jSType13 = jSTypeRegistry2.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry2.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray15 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry2.createUnionType(jSTypeArray15);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18, false);
        boolean boolean22 = jSTypeRegistry20.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        boolean boolean30 = jSTypeRegistry28.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList32 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList32, jSTypeArray31);
        com.google.javascript.rhino.Node node34 = jSTypeRegistry28.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList32);
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry28.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        boolean boolean44 = jSTypeRegistry42.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList46 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList46, jSTypeArray45);
        com.google.javascript.rhino.Node node48 = jSTypeRegistry42.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList46);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry42.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter69 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter69, false);
        boolean boolean73 = jSTypeRegistry71.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList75 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList75, jSTypeArray74);
        com.google.javascript.rhino.Node node77 = jSTypeRegistry71.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList75);
        com.google.javascript.rhino.jstype.JSType jSType82 = jSTypeRegistry71.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType83 = jSType82.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray84 = new com.google.javascript.rhino.jstype.JSType[] { jSType53, jSType68, jSType83 };
        com.google.javascript.rhino.jstype.FunctionType functionType85 = jSTypeRegistry25.createFunctionType(jSType39, jSTypeArray84);
        boolean boolean86 = functionType85.matchesNumberContext();
        boolean boolean88 = functionType85.hasProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType89 = jSTypeRegistry20.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType85);
        com.google.javascript.rhino.jstype.FunctionType functionType90 = functionType85.getConstructor();
        com.google.javascript.rhino.jstype.JSType jSType91 = jSType16.resolve(errorReporter17, (com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) functionType85);
        com.google.javascript.rhino.JSDocInfo jSDocInfo93 = functionType85.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType94 = functionType85.autoboxesTo();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable95 = functionType85.getOwnImplementedInterfaces();
        java.lang.Iterable iterable96 = functionType85.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.FunctionType functionType98 = functionType85.getBindReturnType(52);
        java.lang.Iterable iterable99 = functionType98.getCtorExtendedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertNotNull(jSTypeArray15);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(jSTypeArray84);
        org.junit.Assert.assertNotNull(functionType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objectType89);
        org.junit.Assert.assertNull(functionType90);
        org.junit.Assert.assertNotNull(jSType91);
        org.junit.Assert.assertNull(jSDocInfo93);
        org.junit.Assert.assertNull(jSType94);
        org.junit.Assert.assertNotNull(objectTypeIterable95);
        org.junit.Assert.assertNotNull(iterable96);
        org.junit.Assert.assertNotNull(functionType98);
        org.junit.Assert.assertNotNull(iterable99);
    }

    @Test
    public void test12456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12456");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        boolean boolean17 = jSTypeRegistry15.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray18 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList19 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList19, jSTypeArray18);
        com.google.javascript.rhino.Node node21 = jSTypeRegistry15.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList19);
        com.google.javascript.rhino.jstype.JSType jSType26 = jSTypeRegistry15.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27, false);
        boolean boolean31 = jSTypeRegistry29.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList33 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList33, jSTypeArray32);
        com.google.javascript.rhino.Node node35 = jSTypeRegistry29.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList33);
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry29.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41, false);
        boolean boolean45 = jSTypeRegistry43.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray46 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList47 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList47, jSTypeArray46);
        com.google.javascript.rhino.Node node49 = jSTypeRegistry43.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList47);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSTypeRegistry43.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType55 = jSType54.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56, false);
        boolean boolean60 = jSTypeRegistry58.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList62 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList62, jSTypeArray61);
        com.google.javascript.rhino.Node node64 = jSTypeRegistry58.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList62);
        com.google.javascript.rhino.jstype.JSType jSType69 = jSTypeRegistry58.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType70 = jSType69.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray71 = new com.google.javascript.rhino.jstype.JSType[] { jSType40, jSType55, jSType70 };
        com.google.javascript.rhino.jstype.FunctionType functionType72 = jSTypeRegistry12.createFunctionType(jSType26, jSTypeArray71);
        boolean boolean73 = functionType72.matchesNumberContext();
        java.lang.String str74 = functionType72.getNormalizedReferenceName();
        jSTypeRegistry2.unregisterPropertyOnType("Not declared as a type name", (com.google.javascript.rhino.jstype.JSType) functionType72);
        com.google.javascript.rhino.ErrorReporter errorReporter76 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter77 = jSTypeRegistry2.getErrorReporter();
        jSTypeRegistry2.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType jSType79 = null;
        com.google.javascript.rhino.jstype.JSType jSType81 = jSTypeRegistry2.getGreatestSubtypeWithProperty(jSType79, "Not declared as a type name");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative82 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType83 = jSTypeRegistry2.getNativeObjectType(jSTypeNative82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(jSType26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSType54);
        org.junit.Assert.assertNull(jSType55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertNull(jSType70);
        org.junit.Assert.assertNotNull(jSTypeArray71);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(errorReporter76);
        org.junit.Assert.assertNull(errorReporter77);
        org.junit.Assert.assertNotNull(jSType81);
    }

    @Test
    public void test12457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12457");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(17, "((Not declared as a constructor))", 16, (int) (short) 0);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test12458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12458");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isNoObjectType();
        boolean boolean81 = parameterizedType78.isInstanceType();
        int int82 = parameterizedType78.getPropertiesCount();
        com.google.javascript.rhino.jstype.FunctionType functionType83 = parameterizedType78.getConstructor();
        java.util.Set set84 = parameterizedType78.getOwnPropertyNames();
        java.lang.Object obj85 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = set84.remove(obj85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNull(functionType83);
        org.junit.Assert.assertNotNull(set84);
    }

    @Test
    public void test12459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12459");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        node13.setIsSyntheticBlock(true);
        com.google.javascript.rhino.InputId inputId17 = node13.getInputId();
        com.google.javascript.rhino.InputId inputId18 = node13.getInputId();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node13.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        java.lang.String str33 = node13.checkTreeEquals(node32);
        com.google.javascript.rhino.Node node34 = node32.removeFirstChild();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        int int39 = node38.getType();
        node38.setWasEmptyNode(true);
        java.lang.String str45 = node38.toString(true, false, true);
        java.lang.String str46 = node32.checkTreeEquals(node38);
        int int47 = node32.getLength();
        boolean boolean48 = node32.isNull();
        java.util.Set<java.lang.String> strSet49 = node32.getDirectives();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(inputId17);
        org.junit.Assert.assertNull(inputId18);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n" + "'", str33, "Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 40 + "'", int39 == 40);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "STRING hi! 100" + "'", str45, "STRING hi! 100");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Node tree inequality:\nTree1:\nBITXOR 0\n    OR \n    OR \n\n\nTree2:\nSTRING hi! 100 [empty_block: 1]\n\n\nSubtree1: BITXOR 0\n    OR \n    OR \n\n\nSubtree2: STRING hi! 100 [empty_block: 1]\n" + "'", str46, "Node tree inequality:\nTree1:\nBITXOR 0\n    OR \n    OR \n\n\nTree2:\nSTRING hi! 100 [empty_block: 1]\n\n\nSubtree1: BITXOR 0\n    OR \n    OR \n\n\nSubtree2: STRING hi! 100 [empty_block: 1]\n");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(strSet49);
    }

    @Test
    public void test12460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12460");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 10, node16, node19, node22, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node26 = node22.getLastSibling();
        boolean boolean27 = node26.isDec();
        com.google.javascript.rhino.Node node28 = node3.copyInformationFrom(node26);
        com.google.javascript.rhino.Node node29 = node28.cloneTree();
        boolean boolean30 = node29.isGetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test12461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12461");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        java.lang.String str94 = jSDocInfo80.getBlockDescription();
        java.lang.String str95 = jSDocInfo80.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "JSDocInfo" + "'", str95, "JSDocInfo");
    }

    @Test
    public void test12462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12462");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType jSType6 = jSTypeRegistry2.getType("OR  0");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative7 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType8 = jSTypeRegistry2.getNativeType(jSTypeNative7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSType6);
    }

    @Test
    public void test12463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12463");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean64 = jSDocInfo63.isNoCompile();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) 10, node68, node71, node74, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node78 = node74.getLastSibling();
        boolean boolean79 = node78.isGetterDef();
        boolean boolean80 = node78.isSyntheticBlock();
        jSDocInfo63.setAssociatedNode(node78);
        java.util.Collection<java.lang.String> strCollection82 = jSDocInfo63.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList83 = jSDocInfo63.getExtendedInterfaces();
        functionType62.setJSDocInfo(jSDocInfo63);
        boolean boolean85 = functionType62.hasAnyTemplate();
        boolean boolean86 = functionType62.isEmptyType();
        com.google.javascript.rhino.jstype.ObjectType objectType88 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType) functionType62, "Not declared as a constructor");
        boolean boolean90 = functionType62.isPropertyInExterns("Named type with empty name component");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable91 = functionType62.getAllImplementedInterfaces();
        com.google.javascript.rhino.jstype.UnionType unionType92 = functionType62.toMaybeUnionType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(strCollection82);
        org.junit.Assert.assertNotNull(jSTypeExpressionList83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(objectType88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable91);
        org.junit.Assert.assertNull(unionType92);
    }

    @Test
    public void test12464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12464");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) 10, node43, node46, node49, 0, (int) (byte) 1);
        boolean boolean53 = subclassRelationshipList39.equals((java.lang.Object) (byte) 1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str55 = jSDocInfo54.getVersion();
        java.lang.String str56 = jSDocInfo54.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = jSDocInfo54.getParameterType("Not declared as a constructor");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection59 = jSDocInfo54.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility60 = jSDocInfo54.getVisibility();
        boolean boolean61 = jSDocInfo54.isDeprecated();
        boolean boolean63 = jSDocInfo54.hasParameterType("");
        boolean boolean64 = jSDocInfo54.isNoTypeCheck();
        int int65 = subclassRelationshipList39.indexOf((java.lang.Object) jSDocInfo54);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(jSTypeExpression58);
        org.junit.Assert.assertNotNull(nodeCollection59);
        org.junit.Assert.assertNull(visibility60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
    }

    @Test
    public void test12465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12465");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getReturnType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable70 = functionType62.getOwnImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.jstype.FunctionType> functionTypeList71 = functionType62.getSubTypes();
        com.google.javascript.rhino.jstype.FunctionType functionType72 = functionType62.toMaybeFunctionType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType72.getJSDocInfo();
        boolean boolean75 = functionType72.hasOwnProperty("Node tree inequality:\nTree1:\nSTRING OR \n\n\nTree2:\nOR  0\n    OR  [synthetic: 1]\n\n\nSubtree1: STRING OR \n\n\nSubtree2: OR  0\n    OR  [synthetic: 1]\n");
        com.google.javascript.rhino.Node node76 = functionType72.getParametersNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile77 = node76.getStaticSourceFile();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable78 = node76.getAncestors();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertNotNull(objectTypeIterable70);
        org.junit.Assert.assertNull(functionTypeList71);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(staticSourceFile77);
        org.junit.Assert.assertNotNull(ancestorIterable78);
    }

    @Test
    public void test12466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12466");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.jstype.JSType jSType13 = jSTypeRegistry2.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry2.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray15 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry2.createUnionType(jSTypeArray15);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        boolean boolean24 = jSTypeRegistry22.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList26 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList26, jSTypeArray25);
        com.google.javascript.rhino.Node node28 = jSTypeRegistry22.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList26);
        com.google.javascript.rhino.jstype.JSType jSType33 = jSTypeRegistry22.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34, false);
        boolean boolean38 = jSTypeRegistry36.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray39 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList40 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList40, jSTypeArray39);
        com.google.javascript.rhino.Node node42 = jSTypeRegistry36.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList40);
        com.google.javascript.rhino.jstype.JSType jSType47 = jSTypeRegistry36.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48, false);
        boolean boolean52 = jSTypeRegistry50.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray53 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList54 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList54, jSTypeArray53);
        com.google.javascript.rhino.Node node56 = jSTypeRegistry50.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList54);
        com.google.javascript.rhino.jstype.JSType jSType61 = jSTypeRegistry50.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType62 = jSType61.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63, false);
        boolean boolean67 = jSTypeRegistry65.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray68 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList69 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList69, jSTypeArray68);
        com.google.javascript.rhino.Node node71 = jSTypeRegistry65.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList69);
        com.google.javascript.rhino.jstype.JSType jSType76 = jSTypeRegistry65.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType77 = jSType76.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray78 = new com.google.javascript.rhino.jstype.JSType[] { jSType47, jSType62, jSType77 };
        com.google.javascript.rhino.jstype.FunctionType functionType79 = jSTypeRegistry19.createFunctionType(jSType33, jSTypeArray78);
        boolean boolean80 = functionType79.matchesNumberContext();
        boolean boolean82 = functionType79.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable83 = functionType79.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node85 = functionType79.getPropertyNode("");
        boolean boolean86 = functionType79.isDateType();
        boolean boolean87 = functionType79.isNumberValueType();
        boolean boolean89 = functionType79.isPropertyTypeInferred("Unknown class name");
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection90 = jSTypeRegistry2.getDirectImplementors((com.google.javascript.rhino.jstype.ObjectType) functionType79);
        int int91 = functionType79.getMinArguments();
        boolean boolean92 = functionType79.isStringValueType();
        boolean boolean93 = functionType79.isConstructor();
        com.google.common.collect.ImmutableList<java.lang.String> strList94 = functionType79.getTemplateTypeNames();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertNotNull(jSTypeArray15);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSTypeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(jSType47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(jSType61);
        org.junit.Assert.assertNull(jSType62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(jSTypeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(jSType76);
        org.junit.Assert.assertNull(jSType77);
        org.junit.Assert.assertNotNull(jSTypeArray78);
        org.junit.Assert.assertNotNull(functionType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable83);
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(functionTypeCollection90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 3 + "'", int91 == 3);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(strList94);
    }

    @Test
    public void test12467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12467");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = booleanLiteralSet0.union(booleanLiteralSet1);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = booleanLiteralSet3.union(booleanLiteralSet4);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = booleanLiteralSet0.intersection(booleanLiteralSet3);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet8 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = booleanLiteralSet7.union(booleanLiteralSet8);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet11 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = booleanLiteralSet10.union(booleanLiteralSet11);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = booleanLiteralSet7.intersection(booleanLiteralSet10);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = booleanLiteralSet6.union(booleanLiteralSet10);
        boolean boolean16 = booleanLiteralSet10.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet17 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = booleanLiteralSet17.union(booleanLiteralSet18);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet21 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = booleanLiteralSet20.union(booleanLiteralSet21);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet23 = booleanLiteralSet19.intersection(booleanLiteralSet20);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = booleanLiteralSet24.union(booleanLiteralSet25);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet27 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = booleanLiteralSet27.union(booleanLiteralSet28);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = booleanLiteralSet26.intersection(booleanLiteralSet27);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = booleanLiteralSet20.intersection(booleanLiteralSet30);
        boolean boolean33 = booleanLiteralSet20.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet34 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet35 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet36 = booleanLiteralSet34.union(booleanLiteralSet35);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet37 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet38 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet39 = booleanLiteralSet37.union(booleanLiteralSet38);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet40 = booleanLiteralSet36.intersection(booleanLiteralSet37);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet41 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet42 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet43 = booleanLiteralSet41.union(booleanLiteralSet42);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet44 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet45 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet46 = booleanLiteralSet44.union(booleanLiteralSet45);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet47 = booleanLiteralSet43.intersection(booleanLiteralSet44);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet48 = booleanLiteralSet37.intersection(booleanLiteralSet47);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet49 = booleanLiteralSet20.intersection(booleanLiteralSet48);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet50 = booleanLiteralSet10.intersection(booleanLiteralSet20);
        boolean boolean52 = booleanLiteralSet10.contains(false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet8 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet8.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet11 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet11.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet17 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet17.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet21 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet21.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet23 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet23.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet27 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet27.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet34 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet34.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet35 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet35.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet36 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet36.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet37 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet37.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet38 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet38.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet39 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet39.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet40 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet40.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet41 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet41.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet42 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet42.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet43 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet43.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet44 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet44.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet45 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet45.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet46 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet46.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet47 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet47.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet48 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet48.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet49 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet49.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet50 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet50.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test12468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12468");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getParentScope();
        boolean boolean70 = functionType62.isInstanceType();
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec72 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("(Not declared as a constructor)");
        java.lang.String str73 = assertionFunctionSpec72.getFunctionName();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString(100, "");
        int int77 = node76.getCharno();
        boolean boolean78 = node76.isExprResult();
        int int79 = node76.getChildCount();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        int int83 = node82.getCharno();
        boolean boolean84 = node82.isAssignAdd();
        boolean boolean85 = node82.isNot();
        java.lang.String str86 = node82.toString();
        boolean boolean87 = node82.isVarArgs();
        boolean boolean88 = node76.isEquivalentToTyped(node82);
        boolean boolean89 = node76.isReturn();
        com.google.javascript.rhino.Node node90 = assertionFunctionSpec72.getAssertedParam(node76);
        boolean boolean91 = node76.isExprResult();
        functionType62.setSource(node76);
        com.google.javascript.rhino.Node node94 = node76.getAncestor((int) (short) 0);
        java.lang.String str95 = node94.getSourceFileName();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(Not declared as a constructor)" + "'", str73, "(Not declared as a constructor)");
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "OR " + "'", str86, "OR ");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNull(str95);
    }

    @Test
    public void test12469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12469");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable69 = functionType62.getCtorExtendedInterfaces();
        boolean boolean70 = functionType62.isInterface();
        java.lang.Iterable iterable71 = functionType62.getCtorExtendedInterfaces();
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean74 = jSDocInfo73.isNoCompile();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (byte) 10, node78, node81, node84, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node88 = node84.getLastSibling();
        boolean boolean89 = node88.isGetterDef();
        boolean boolean90 = node88.isSyntheticBlock();
        jSDocInfo73.setAssociatedNode(node88);
        java.util.Set<java.lang.String> strSet92 = jSDocInfo73.getModifies();
        functionType62.setPropertyJSDocInfo("", jSDocInfo73);
        boolean boolean94 = functionType62.isStringObjectType();
        boolean boolean95 = functionType62.isRegexpType();
        boolean boolean96 = functionType62.isInterface();
        boolean boolean97 = functionType62.isConstructor();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertNotNull(objectTypeIterable69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(iterable71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test12470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12470");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        java.lang.Iterable iterable93 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = enumType88.getElementsType();
        boolean boolean95 = enumElementType94.isNullable();
        com.google.javascript.rhino.Node node96 = enumElementType94.getRootNode();
        boolean boolean97 = enumElementType94.isCheckedUnknownType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(iterable93);
        org.junit.Assert.assertNotNull(enumElementType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test12471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12471");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        boolean boolean13 = node6.isThrow();
        boolean boolean14 = node6.isExprResult();
        boolean boolean15 = node6.isComma();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder16 = node6.getJsDocBuilderForNode();
        boolean boolean17 = node6.isString();
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18, false);
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21, false);
        boolean boolean25 = jSTypeRegistry23.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray26 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList27 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList27, jSTypeArray26);
        com.google.javascript.rhino.Node node29 = jSTypeRegistry23.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList27);
        com.google.javascript.rhino.jstype.JSType jSType34 = jSTypeRegistry23.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35, false);
        boolean boolean39 = jSTypeRegistry37.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray40 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList41 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList41, jSTypeArray40);
        com.google.javascript.rhino.Node node43 = jSTypeRegistry37.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList41);
        com.google.javascript.rhino.jstype.JSType jSType48 = jSTypeRegistry37.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter49 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter49, false);
        boolean boolean53 = jSTypeRegistry51.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray54 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList55 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList55, jSTypeArray54);
        com.google.javascript.rhino.Node node57 = jSTypeRegistry51.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList55);
        com.google.javascript.rhino.jstype.JSType jSType62 = jSTypeRegistry51.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType63 = jSType62.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter64 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter64, false);
        boolean boolean68 = jSTypeRegistry66.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList70 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList70, jSTypeArray69);
        com.google.javascript.rhino.Node node72 = jSTypeRegistry66.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList70);
        com.google.javascript.rhino.jstype.JSType jSType77 = jSTypeRegistry66.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType78 = jSType77.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] { jSType48, jSType63, jSType78 };
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry20.createFunctionType(jSType34, jSTypeArray79);
        boolean boolean81 = functionType80.matchesNumberContext();
        boolean boolean83 = functionType80.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable84 = functionType80.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType85 = functionType80.dereference();
        boolean boolean86 = functionType80.isBooleanValueType();
        java.util.Set<java.lang.String> strSet87 = functionType80.getOwnPropertyNames();
        boolean boolean88 = functionType80.isNullType();
        boolean boolean89 = functionType80.isObject();
        int int90 = functionType80.getPropertiesCount();
        boolean boolean91 = functionType80.matchesObjectContext();
        node6.setJSType((com.google.javascript.rhino.jstype.JSType) functionType80);
        int int93 = node6.getCharno();
        boolean boolean94 = node6.isGetProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(jSType34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(jSType48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(jSTypeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(jSType62);
        org.junit.Assert.assertNull(jSType63);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertNull(jSType78);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable84);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test12472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12472");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.isNativeObjectType();
        com.google.javascript.rhino.jstype.FunctionType functionType90 = enumType88.getOwnerFunction();
        java.lang.Iterable iterable91 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.JSDocInfo jSDocInfo93 = enumType88.getOwnPropertyJSDocInfo("InputId: hi!");
        boolean boolean95 = enumType88.hasOwnProperty("STRING (Function)");
        com.google.javascript.rhino.jstype.JSType jSType96 = enumType88.getIndexType();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean97 = jSType96.isEnumType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(functionType90);
        org.junit.Assert.assertNotNull(iterable91);
        org.junit.Assert.assertNull(jSDocInfo93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(jSType96);
    }

    @Test
    public void test12473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12473");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        node13.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node17 = node13.cloneTree();
        com.google.javascript.rhino.Node node18 = node13.getLastSibling();
        boolean boolean19 = node18.isContinue();
        boolean boolean20 = node18.isAssign();
        boolean boolean21 = node18.isScript();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        int int25 = node24.getCharno();
        java.lang.String str26 = node24.getSourceFileName();
        boolean boolean27 = node24.isLabel();
        boolean boolean28 = node24.isEmpty();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType29 = null;
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) 10, node33, node36, node39, 0, (int) (byte) 1);
        java.lang.String str43 = node33.getString();
        boolean boolean44 = node33.isContinue();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        int int48 = node47.getCharno();
        boolean boolean49 = node47.isAssignAdd();
        node47.putBooleanProp(10, false);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship53 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType29, node33, node47);
        java.lang.String str54 = node33.toString();
        java.util.Set<java.lang.String> strSet55 = node33.getDirectives();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(44, 8, 39);
        com.google.javascript.jscomp.CodingConvention.Bind bind60 = new com.google.javascript.jscomp.CodingConvention.Bind(node24, node33, node59);
        com.google.javascript.rhino.Node node61 = node18.useSourceInfoIfMissingFrom(node33);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node62 = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(node61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "OR " + "'", str54, "OR ");
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertNotNull(node61);
    }

    @Test
    public void test12474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12474");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        boolean boolean93 = enumType88.isPropertyInExterns("Function");
        java.lang.String str94 = enumType88.getReferenceName();
        com.google.javascript.rhino.jstype.FunctionType functionType95 = enumType88.getConstructor();
        enumType88.clearCachedValues();
        java.util.Set<java.lang.String> strSet97 = enumType88.getElements();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType98 = enumType88.getElementsType();
        boolean boolean99 = enumElementType98.isBooleanValueType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}" + "'", str94, "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        org.junit.Assert.assertNull(functionType95);
        org.junit.Assert.assertNotNull(strSet97);
        org.junit.Assert.assertNotNull(enumElementType98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test12475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12475");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        int int16 = node15.getCharno();
        com.google.javascript.rhino.InputId inputId18 = new com.google.javascript.rhino.InputId("hi!");
        java.lang.String str19 = inputId18.getIdName();
        node15.setInputId(inputId18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = node15.getJSDocInfo();
        int int22 = node12.getIndexOfChild(node15);
        boolean boolean23 = node12.isNull();
        java.lang.String str24 = node12.getSourceFileName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(jSDocInfo21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test12476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12476");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable63 = functionType62.getImplementedInterfaces();
        boolean boolean64 = functionType62.isFunctionPrototypeType();
        com.google.javascript.rhino.jstype.StaticSlot staticSlot66 = functionType62.getSlot("OR \n");
        com.google.javascript.rhino.jstype.JSType jSType67 = functionType62.getReturnType();
        boolean boolean68 = jSType67.isObject();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertNotNull(objectTypeIterable63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(staticSlot66);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test12477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12477");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.ObjectType objectType93 = enumType88.getImplicitPrototype();
        java.util.Set<java.lang.String> strSet94 = enumType88.getElements();
        boolean boolean95 = enumType88.matchesObjectContext();
        boolean boolean96 = enumType88.isEnumElementType();
        com.google.javascript.rhino.Node node97 = enumType88.getSource();
        boolean boolean98 = enumType88.isAllType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(objectType93);
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(node97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test12478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12478");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        boolean boolean94 = parameterizedType78.isInterface();
        java.lang.Iterable iterable95 = parameterizedType78.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType97 = parameterizedType78.getPropertyType("InputId: hi!");
        boolean boolean98 = parameterizedType78.isNativeObjectType();
        boolean boolean99 = parameterizedType78.isOrdinaryFunction();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(iterable95);
        org.junit.Assert.assertNotNull(jSType97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test12479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12479");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesThis();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test12480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12480");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = null;
        parameterizedType78.setPropertyJSDocInfo("hi!", jSDocInfo83);
        com.google.javascript.rhino.jstype.ObjectType.Property property86 = parameterizedType78.getSlot("(((Not declared as a constructor)))");
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType87 = parameterizedType78.toMaybeParameterizedType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNull(property86);
        org.junit.Assert.assertNotNull(parameterizedType87);
    }

    @Test
    public void test12481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12481");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        java.lang.String str14 = node4.getString();
        boolean boolean15 = node4.isContinue();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        int int19 = node18.getCharno();
        boolean boolean20 = node18.isAssignAdd();
        node18.putBooleanProp(10, false);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship24 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node4, node18);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType25 = null;
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 10, node29, node32, node35, 0, (int) (byte) 1);
        java.lang.String str39 = node29.getString();
        boolean boolean40 = node29.isContinue();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        int int44 = node43.getCharno();
        boolean boolean45 = node43.isAssignAdd();
        node43.putBooleanProp(10, false);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship49 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType25, node29, node43);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType50 = null;
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        int int54 = node53.getCharno();
        java.lang.String str55 = node53.getSourceFileName();
        boolean boolean56 = node53.isLabel();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (byte) 10, node60, node63, node66, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node70 = node66.getLastSibling();
        boolean boolean71 = node70.isDec();
        boolean boolean72 = node70.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship73 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType50, node53, node70);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship[] subclassRelationshipArray74 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship[] { subclassRelationship24, subclassRelationship49, subclassRelationship73 };
        java.util.ArrayList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList75 = new java.util.ArrayList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList75, subclassRelationshipArray74);
        java.util.ListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor78 = subclassRelationshipList75.listIterator(2);
        int int79 = subclassRelationshipList75.size();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipCollection80 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean81 = subclassRelationshipList75.containsAll(subclassRelationshipCollection80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(subclassRelationshipItor78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
    }

    @Test
    public void test12482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12482");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.jstype.JSType jSType13 = jSTypeRegistry2.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15, false);
        boolean boolean19 = jSTypeRegistry17.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        boolean boolean55 = jSTypeRegistry53.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray56 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList57 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList57, jSTypeArray56);
        com.google.javascript.rhino.Node node59 = jSTypeRegistry53.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList57);
        com.google.javascript.rhino.jstype.JSType jSType64 = jSTypeRegistry53.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSType64.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter66 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter66, false);
        boolean boolean70 = jSTypeRegistry68.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray71 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList72 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList72, jSTypeArray71);
        com.google.javascript.rhino.Node node74 = jSTypeRegistry68.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList72);
        com.google.javascript.rhino.jstype.JSType jSType79 = jSTypeRegistry68.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType80 = jSType79.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray81 = new com.google.javascript.rhino.jstype.JSType[] { jSType50, jSType65, jSType80 };
        com.google.javascript.rhino.jstype.FunctionType functionType82 = jSTypeRegistry22.createFunctionType(jSType36, jSTypeArray81);
        boolean boolean83 = functionType82.matchesNumberContext();
        boolean boolean85 = functionType82.hasProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType86 = jSTypeRegistry17.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType82);
        jSTypeRegistry2.registerPropertyOnType("JSDocInfo", (com.google.javascript.rhino.jstype.JSType) objectType86);
        com.google.javascript.rhino.jstype.JSType jSType89 = jSTypeRegistry2.getType("(Named type with empty name component)");
        boolean boolean91 = jSTypeRegistry2.isForwardDeclaredType("(((Not declared as a constructor)))");
        jSTypeRegistry2.clearNamedTypes();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(jSType64);
        org.junit.Assert.assertNull(jSType65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(jSTypeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(jSType79);
        org.junit.Assert.assertNull(jSType80);
        org.junit.Assert.assertNotNull(jSTypeArray81);
        org.junit.Assert.assertNotNull(functionType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objectType86);
        org.junit.Assert.assertNull(jSType89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test12483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12483");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.UnionType unionType80 = parameterizedType78.toMaybeUnionType();
        java.lang.String str81 = parameterizedType78.getReferenceName();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType82 = parameterizedType78.toMaybeEnumElementType();
        boolean boolean84 = parameterizedType78.hasProperty("STRING hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType85 = parameterizedType78.getImplicitPrototype();
        boolean boolean86 = objectType85.isUnknownType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(unionType80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(enumElementType82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test12484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12484");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType94 = parameterizedType78.toMaybeParameterizedType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType95 = parameterizedType94.toMaybeParameterizedType();
        boolean boolean96 = parameterizedType95.isFunctionPrototypeType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(parameterizedType94);
        org.junit.Assert.assertNotNull(parameterizedType95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test12485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12485");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getReturnType();
        boolean boolean70 = functionType62.matchesStringContext();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable71 = functionType62.getExtendedInterfaces();
        boolean boolean72 = functionType62.isNativeObjectType();
        java.lang.Iterable iterable73 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node75 = functionType62.getPropertyNode("");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(iterable73);
        org.junit.Assert.assertNull(node75);
    }

    @Test
    public void test12486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12486");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.jstype.JSType jSType13 = jSTypeRegistry2.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry2.resetForTypeCheck();
        boolean boolean15 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry2.createAnonymousObjectType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objectType16);
    }

    @Test
    public void test12487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12487");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.lang.String str58 = subclassRelationshipList38.toString();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean61 = node60.isFunction();
        boolean boolean62 = subclassRelationshipList38.equals((java.lang.Object) boolean61);
        com.google.common.collect.UnmodifiableListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor63 = subclassRelationshipList38.listIterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo64 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean65 = jSDocInfo64.isNoCompile();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (byte) 10, node69, node72, node75, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node79 = node75.getLastSibling();
        boolean boolean80 = node79.isGetterDef();
        boolean boolean81 = node79.isSyntheticBlock();
        jSDocInfo64.setAssociatedNode(node79);
        java.util.Collection<java.lang.String> strCollection83 = jSDocInfo64.getReferences();
        java.lang.String str84 = jSDocInfo64.getVersion();
        java.lang.String str85 = jSDocInfo64.getBlockDescription();
        java.util.Set<java.lang.String> strSet86 = jSDocInfo64.getModifies();
        boolean boolean87 = jSDocInfo64.hasEnumParameterType();
        int int88 = subclassRelationshipList38.indexOf((java.lang.Object) boolean87);
        com.google.common.collect.UnmodifiableIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor89 = subclassRelationshipList38.iterator();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipItor63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(strCollection83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipItor89);
    }

    @Test
    public void test12488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12488");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator40 = subclassRelationshipList39.spliterator();
        java.lang.Object[] objArray41 = subclassRelationshipList39.toArray();
        com.google.common.collect.UnmodifiableListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor42 = subclassRelationshipList39.listIterator();
        java.lang.Object[] objArray43 = subclassRelationshipList39.toArray();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator40);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertNotNull(subclassRelationshipItor42);
        org.junit.Assert.assertNotNull(objArray43);
    }

    @Test
    public void test12489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12489");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        node13.setIsSyntheticBlock(true);
        com.google.javascript.rhino.InputId inputId17 = node13.getInputId();
        com.google.javascript.rhino.InputId inputId18 = node13.getInputId();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node13.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        java.lang.String str33 = node13.checkTreeEquals(node32);
        com.google.javascript.rhino.Node node34 = node32.removeFirstChild();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        int int38 = node37.getCharno();
        boolean boolean39 = node37.isAssignAdd();
        boolean boolean40 = node37.isNot();
        java.lang.String str41 = node37.toString();
        boolean boolean42 = node37.isVarArgs();
        com.google.javascript.rhino.Node node43 = node32.copyInformationFrom(node37);
        java.lang.String str44 = node43.toString();
        com.google.javascript.rhino.Node node45 = node43.removeFirstChild();
        java.lang.String str46 = node43.toString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(inputId17);
        org.junit.Assert.assertNull(inputId18);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n" + "'", str33, "Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "OR " + "'", str41, "OR ");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "BITXOR" + "'", str44, "BITXOR");
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "BITXOR" + "'", str46, "BITXOR");
    }

    @Test
    public void test12490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12490");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isEnumElementType();
        com.google.javascript.rhino.jstype.FunctionType functionType81 = parameterizedType78.toMaybeFunctionType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType82 = parameterizedType78.toMaybeParameterizedType();
        com.google.javascript.rhino.jstype.EnumType enumType83 = parameterizedType78.toMaybeEnumType();
        boolean boolean85 = parameterizedType78.hasOwnProperty("java.io.IOException: java.io.IOException");
        boolean boolean86 = parameterizedType78.isOrdinaryFunction();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(functionType81);
        org.junit.Assert.assertNotNull(parameterizedType82);
        org.junit.Assert.assertNull(enumType83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test12491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12491");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.UnionType unionType80 = parameterizedType78.toMaybeUnionType();
        java.lang.String str81 = parameterizedType78.getReferenceName();
        boolean boolean82 = parameterizedType78.matchesObjectContext();
        com.google.javascript.rhino.jstype.UnionType unionType83 = parameterizedType78.toMaybeUnionType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(unionType80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNull(unionType83);
    }

    @Test
    public void test12492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12492");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 10, node22, node25, node28, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = node10.useSourceInfoIfMissingFromForTree(node31);
        int int33 = node32.getChildCount();
        java.lang.String str34 = node32.toString();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) 10, node38, node41, node44, 0, (int) (byte) 1);
        java.lang.String str48 = node38.getString();
        boolean boolean49 = node38.isContinue();
        boolean boolean50 = node38.isCall();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType51 = null;
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) 10, node55, node58, node61, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        int int68 = node67.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship69 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType51, node61, node67);
        com.google.javascript.rhino.Node node70 = node38.copyInformationFromForTree(node67);
        boolean boolean71 = node38.hasChildren();
        com.google.javascript.rhino.Node node72 = node38.getParent();
        boolean boolean73 = node72.isWhile();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString((int) ' ', "Not declared as a constructor", 32, 16);
        com.google.javascript.rhino.Node node79 = node78.getLastSibling();
        com.google.javascript.rhino.Node node80 = node72.srcrefTree(node78);
        com.google.javascript.rhino.Node node81 = node32.clonePropsFrom(node72);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "OR  0" + "'", str34, "OR  0");
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
    }

    @Test
    public void test12493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12493");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoCompile();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node15 = node11.getLastSibling();
        boolean boolean16 = node15.isGetterDef();
        boolean boolean17 = node15.isSyntheticBlock();
        jSDocInfo0.setAssociatedNode(node15);
        java.util.Collection<java.lang.String> strCollection19 = jSDocInfo0.getReferences();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo0.getModifies();
        boolean boolean21 = jSDocInfo0.isDeprecated();
        com.google.javascript.rhino.Node node22 = jSDocInfo0.getAssociatedNode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
    }

    @Test
    public void test12494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12494");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        boolean boolean4 = node2.isAssignAdd();
        boolean boolean5 = node2.isNot();
        java.lang.String str6 = node2.toString();
        boolean boolean7 = node2.isDefaultCase();
        boolean boolean8 = node2.isFromExterns();
        boolean boolean9 = node2.isNull();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OR " + "'", str6, "OR ");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test12495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12495");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 10, node18, node21, node24, 0, (int) (byte) 1);
        java.lang.String str28 = node18.getString();
        boolean boolean29 = node18.isContinue();
        boolean boolean30 = node18.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node18.setStaticSourceFile(staticSourceFile31);
        java.lang.Object obj34 = node18.getProp(37);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.isFunction();
        node18.addChildToFront(node37);
        boolean boolean40 = node3.hasChild(node18);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        int int44 = node43.getCharno();
        java.lang.String str45 = node43.getSourceFileName();
        com.google.javascript.rhino.Node node46 = com.google.javascript.jscomp.NodeUtil.newExpr(node43);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType47 = null;
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 10, node51, node54, node57, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        int int64 = node63.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship65 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType47, node57, node63);
        boolean boolean66 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node57);
        int int67 = node57.getLineno();
        boolean boolean68 = node43.isEquivalentToTyped(node57);
        node43.setQuotedString();
        boolean boolean70 = node43.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node71 = node18.useSourceInfoIfMissingFrom(node43);
        com.google.javascript.rhino.Node node72 = node71.removeFirstChild();
        com.google.javascript.rhino.Node node73 = node72.getNext();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = node73.isOnlyModifiesThisCall();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node73);
    }

    @Test
    public void test12496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12496");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable6 = jSTypeRegistry2.getEachReferenceTypeWithProperty("Not declared as a type name");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable8 = jSTypeRegistry2.getEachReferenceTypeWithProperty("STRING hi! 100\n");
        jSTypeRegistry2.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative10 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.FunctionType functionType11 = jSTypeRegistry2.getNativeFunctionType(jSTypeNative10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNotNull(objectTypeIterable6);
        org.junit.Assert.assertNotNull(objectTypeIterable8);
    }

    @Test
    public void test12497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12497");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        jSTypeRegistry2.setLastGeneration(false);
        jSTypeRegistry2.setLastGeneration(false);
        com.google.javascript.rhino.ErrorReporter errorReporter7 = jSTypeRegistry2.getErrorReporter();
        boolean boolean8 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        boolean boolean16 = jSTypeRegistry14.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray17 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList18 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList18, jSTypeArray17);
        com.google.javascript.rhino.Node node20 = jSTypeRegistry14.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList18);
        com.google.javascript.rhino.jstype.JSType jSType25 = jSTypeRegistry14.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        boolean boolean30 = jSTypeRegistry28.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList32 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList32, jSTypeArray31);
        com.google.javascript.rhino.Node node34 = jSTypeRegistry28.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList32);
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry28.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        boolean boolean44 = jSTypeRegistry42.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList46 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList46, jSTypeArray45);
        com.google.javascript.rhino.Node node48 = jSTypeRegistry42.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList46);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry42.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSType53.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55, false);
        boolean boolean59 = jSTypeRegistry57.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList61, jSTypeArray60);
        com.google.javascript.rhino.Node node63 = jSTypeRegistry57.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList61);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSTypeRegistry57.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType69 = jSType68.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray70 = new com.google.javascript.rhino.jstype.JSType[] { jSType39, jSType54, jSType69 };
        com.google.javascript.rhino.jstype.FunctionType functionType71 = jSTypeRegistry11.createFunctionType(jSType25, jSTypeArray70);
        boolean boolean72 = functionType71.matchesNumberContext();
        boolean boolean74 = functionType71.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = functionType71.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable77 = functionType71.getAllImplementedInterfaces();
        int int78 = functionType71.getExtendedInterfacesCount();
        boolean boolean79 = functionType71.isFunctionType();
        com.google.javascript.rhino.Node node80 = functionType71.getParametersNode();
        java.util.Set<java.lang.String> strSet81 = functionType71.getOwnPropertyNames();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable82 = functionType71.getAllImplementedInterfaces();
        boolean boolean84 = functionType71.isPropertyInExterns("GETELEM false");
        boolean boolean86 = functionType71.isPropertyTypeInferred("Node tree inequality:\nTree1:\nSTRING OR \n\n\nTree2:\nOR  0\n    OR  [synthetic: 1]\n\n\nSubtree1: STRING OR \n\n\nSubtree2: OR  0\n    OR  [synthetic: 1]\n");
        boolean boolean88 = jSTypeRegistry2.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) functionType71, "InputId: STRING hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode89 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry2.setResolveMode(resolveMode89);
        org.junit.Assert.assertNull(errorReporter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(jSType25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNull(jSType54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertNull(jSType69);
        org.junit.Assert.assertNotNull(jSTypeArray70);
        org.junit.Assert.assertNotNull(functionType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(jSDocInfo76);
        org.junit.Assert.assertNotNull(objectTypeIterable77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertNotNull(objectTypeIterable82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + resolveMode89 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode89.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
    }

    @Test
    public void test12498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12498");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setReturnsTainted();
        int int4 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
    }

    @Test
    public void test12499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12499");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        boolean boolean94 = parameterizedType78.isInterface();
        com.google.javascript.rhino.jstype.ObjectType objectType95 = parameterizedType78.getParentScope();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType96 = parameterizedType78.toMaybeParameterizedType();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet97 = parameterizedType78.getPossibleToBooleanOutcomes();
        java.lang.String str98 = parameterizedType78.getDisplayName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(objectType95);
        org.junit.Assert.assertNotNull(parameterizedType96);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet97 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet97.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNull(str98);
    }

    @Test
    public void test12500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12500");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        boolean boolean19 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node10);
        boolean boolean20 = node10.isDo();
        boolean boolean21 = node10.isThis();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = new com.google.javascript.rhino.JSTypeExpression(node10, "false");
        boolean boolean24 = jSTypeExpression23.isOptionalArg();
        boolean boolean25 = jSTypeExpression23.isOptionalArg();
        com.google.javascript.rhino.Node node26 = jSTypeExpression23.getRoot();
        boolean boolean27 = node26.isCase();
        boolean boolean28 = node26.isWith();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }
}

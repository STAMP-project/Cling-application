import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest21 {

    public static boolean debug = false;

    @Test
    public void test10501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10501");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.dayOfWeek();
        org.joda.time.DurationField durationField16 = iSOChronology8.seconds();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        java.lang.String str21 = dateTimeZone18.getShortName(1L);
        int int23 = dateTimeZone18.getOffsetFromLocal((long) (byte) 0);
        int int25 = dateTimeZone18.getStandardOffset((long) (short) 0);
        java.lang.String str26 = dateTimeZone18.getID();
        long long29 = dateTimeZone18.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone18);
        org.joda.time.DurationField durationField31 = iSOChronology30.months();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology30.secondOfDay();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology30.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology30.secondOfMinute();
        org.joda.time.DurationField durationField35 = iSOChronology30.weeks();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology30.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = iSOChronology30.getZone();
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        java.lang.String str40 = dateTimeZone39.toString();
        java.lang.String str42 = dateTimeZone39.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone39);
        int int45 = dateTimeZone39.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone47 = iSOChronology46.getZone();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology46.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology46.year();
        org.joda.time.DurationField durationField50 = iSOChronology46.minutes();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology46.dayOfWeek();
        org.joda.time.DurationField durationField52 = iSOChronology46.years();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology46.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology46.clockhourOfHalfday();
        org.joda.time.DurationField durationField55 = iSOChronology46.millis();
        org.joda.time.DurationFieldType durationFieldType56 = durationField55.getType();
        boolean boolean57 = dateTimeZone37.equals((java.lang.Object) durationField55);
        java.lang.String str58 = dateTimeZone37.toString();
        org.joda.time.chrono.ISOChronology iSOChronology59 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone37);
        org.joda.time.Chronology chronology60 = iSOChronology8.withZone(dateTimeZone37);
        long long62 = dateTimeZone37.nextTransition((long) 187200000);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+23:34" + "'", str2, "+23:34");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+23:34" + "'", str4, "+23:34");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 84840000 + "'", int7 == 84840000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+23:34" + "'", str19, "+23:34");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+23:34" + "'", str21, "+23:34");
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 84840000 + "'", int23 == 84840000);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 84840000 + "'", int25 == 84840000);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+23:34" + "'", str26, "+23:34");
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-84840000L) + "'", long29 == (-84840000L));
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+23:34" + "'", str40, "+23:34");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+23:34" + "'", str42, "+23:34");
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 84840000 + "'", int45 == 84840000);
        org.junit.Assert.assertNotNull(iSOChronology46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+23:34" + "'", str58, "+23:34");
        org.junit.Assert.assertNotNull(iSOChronology59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 187200000L + "'", long62 == 187200000L);
    }

    @Test
    public void test10502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10502");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField20 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.yearOfEra();
        org.joda.time.ReadablePartial readablePartial26 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long28 = iSOChronology13.set(readablePartial26, (-211197718799900L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+23:34" + "'", str2, "+23:34");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+23:34" + "'", str4, "+23:34");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 84840000 + "'", int6 == 84840000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 84840000 + "'", int8 == 84840000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+23:34" + "'", str9, "+23:34");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-84840000L) + "'", long12 == (-84840000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test10503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10503");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.Chronology chronology16 = iSOChronology13.withUTC();
        java.lang.String str17 = iSOChronology13.toString();
        org.joda.time.DurationField durationField18 = iSOChronology13.millis();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = iSOChronology13.add(readablePeriod19, (long) 52, 187200000);
        org.joda.time.DurationField durationField23 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.hourOfDay();
        org.joda.time.DurationField durationField25 = iSOChronology13.centuries();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+23:34" + "'", str2, "+23:34");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+23:34" + "'", str4, "+23:34");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 84840000 + "'", int6 == 84840000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 84840000 + "'", int8 == 84840000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+23:34" + "'", str9, "+23:34");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-84840000L) + "'", long12 == (-84840000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[+23:34]" + "'", str17, "ISOChronology[+23:34]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test10504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10504");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.Chronology chronology18 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = iSOChronology13.add(readablePeriod21, 1000L, 31);
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.hourOfHalfday();
        org.joda.time.DurationField durationField26 = iSOChronology13.millis();
        org.joda.time.DurationField durationField27 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+23:34" + "'", str2, "+23:34");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+23:34" + "'", str4, "+23:34");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 84840000 + "'", int6 == 84840000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 84840000 + "'", int8 == 84840000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+23:34" + "'", str9, "+23:34");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-84840000L) + "'", long12 == (-84840000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1000L + "'", long24 == 1000L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test10505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10505");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField18 = iSOChronology13.halfdays();
        java.lang.String str19 = iSOChronology13.toString();
        org.joda.time.DurationField durationField20 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.era();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.era();
        // The following exception was thrown during execution in test generation
        try {
            long long27 = iSOChronology13.getDateTimeMillis(86400100, 102737, 4839, (-22));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -22 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+23:34" + "'", str2, "+23:34");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+23:34" + "'", str4, "+23:34");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 84840000 + "'", int6 == 84840000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 84840000 + "'", int8 == 84840000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+23:34" + "'", str9, "+23:34");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-84840000L) + "'", long12 == (-84840000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+23:34]" + "'", str19, "ISOChronology[+23:34]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test10506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10506");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.era();
        java.lang.String str11 = dateTimeField10.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+23:34" + "'", str2, "+23:34");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+23:34" + "'", str4, "+23:34");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 84840000 + "'", int7 == 84840000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "era" + "'", str11, "era");
    }

    @Test
    public void test10507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10507");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.ReadablePartial readablePartial16 = null;
        int int17 = dateTimeField15.getMaximumValue(readablePartial16);
        org.joda.time.DurationField durationField18 = dateTimeField15.getRangeDurationField();
        long long20 = durationField18.getMillis((int) ' ');
        java.lang.String str21 = durationField18.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+23:34" + "'", str2, "+23:34");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+23:34" + "'", str4, "+23:34");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 84840000 + "'", int6 == 84840000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 84840000 + "'", int8 == 84840000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+23:34" + "'", str9, "+23:34");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-84840000L) + "'", long12 == (-84840000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 23 + "'", int17 == 23);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2764800000L + "'", long20 == 2764800000L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "days" + "'", str21, "days");
    }

    @Test
    public void test10508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10508");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.dayOfWeek();
        org.joda.time.ReadablePartial readablePartial21 = null;
        int[] intArray23 = null;
        java.util.Locale locale25 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray26 = dateTimeField20.set(readablePartial21, 43200000, intArray23, "+23:34", locale25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"+23:34\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+23:34" + "'", str2, "+23:34");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+23:34" + "'", str4, "+23:34");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 84840000 + "'", int6 == 84840000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 84840000 + "'", int8 == 84840000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+23:34" + "'", str9, "+23:34");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-84840000L) + "'", long12 == (-84840000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test10509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10509");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.year();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+23:34" + "'", str2, "+23:34");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+23:34" + "'", str4, "+23:34");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 84840000 + "'", int7 == 84840000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test10510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10510");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = iSOChronology13.add(readablePeriod20, 3155760000053L, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.halfdayOfDay();
        org.joda.time.DurationField durationField25 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.weekOfWeekyear();
        long long29 = dateTimeField26.getDifferenceAsLong((-1623600000L), (long) 12);
        long long31 = dateTimeField26.roundHalfEven((-517877670614400000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+23:34" + "'", str2, "+23:34");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+23:34" + "'", str4, "+23:34");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 84840000 + "'", int6 == 84840000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 84840000 + "'", int8 == 84840000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+23:34" + "'", str9, "+23:34");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-84840000L) + "'", long12 == (-84840000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3155760000053L + "'", long23 == 3155760000053L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-2L) + "'", long29 == (-2L));
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-517877670785640000L) + "'", long31 == (-517877670785640000L));
    }

    @Test
    public void test10511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10511");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        org.joda.time.Chronology chronology20 = iSOChronology13.withUTC();
        org.joda.time.DurationField durationField21 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.yearOfEra();
        java.lang.String str23 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            long long32 = iSOChronology13.getDateTimeMillis(0, (int) (short) 10, 405544, 36000000, 86400100, (-9678), 89324946);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36000000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+23:34" + "'", str2, "+23:34");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+23:34" + "'", str4, "+23:34");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 84840000 + "'", int6 == 84840000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 84840000 + "'", int8 == 84840000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+23:34" + "'", str9, "+23:34");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-84840000L) + "'", long12 == (-84840000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[+23:34]" + "'", str23, "ISOChronology[+23:34]");
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test10512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10512");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfYear();
        org.joda.time.DurationField durationField14 = iSOChronology8.millis();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = iSOChronology8.add(readablePeriod15, 72000000L, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = iSOChronology8.add(readablePeriod19, (-349200002L), 4);
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology8.weekyear();
        boolean boolean25 = dateTimeField23.isLeap((-2726520619173108000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+23:34" + "'", str2, "+23:34");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+23:34" + "'", str4, "+23:34");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 84840000 + "'", int7 == 84840000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 72000000L + "'", long18 == 72000000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-349200002L) + "'", long22 == (-349200002L));
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test10513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10513");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) 'a');
        org.joda.time.Chronology chronology22 = iSOChronology13.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField23 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+23:34" + "'", str2, "+23:34");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+23:34" + "'", str4, "+23:34");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 84840000 + "'", int6 == 84840000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 84840000 + "'", int8 == 84840000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+23:34" + "'", str9, "+23:34");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-84840000L) + "'", long12 == (-84840000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test10514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10514");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.weekyear();
        org.joda.time.DurationField durationField22 = iSOChronology13.hours();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(69);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.Chronology chronology26 = iSOChronology13.withZone(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+23:34" + "'", str2, "+23:34");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+23:34" + "'", str4, "+23:34");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 84840000 + "'", int6 == 84840000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 84840000 + "'", int8 == 84840000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+23:34" + "'", str9, "+23:34");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-84840000L) + "'", long12 == (-84840000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology26);
    }

    @Test
    public void test10515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10515");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DurationField durationField16 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test10516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10516");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.dayOfMonth();
        org.joda.time.ReadablePartial readablePartial17 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long19 = iSOChronology13.set(readablePartial17, (-7043509577418576948L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test10517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10517");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.hourOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.weekyearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test10518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10518");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str3 = dateTimeZone1.getID();
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName(2924946L, locale5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone1.getOffset(readableInstant7);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.069" + "'", str3, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.069" + "'", str6, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
    }

    @Test
    public void test10519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10519");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        long long14 = dateTimeField11.add(555096986981179L, 0L);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeField11.getAsText(36000000, locale16);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 555096986981179L + "'", long14 == 555096986981179L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "36000000" + "'", str17, "36000000");
    }

    @Test
    public void test10520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10520");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField21 = iSOChronology13.years();
        org.joda.time.DurationField durationField22 = iSOChronology13.centuries();
        long long25 = durationField22.getDifferenceAsLong((long) (-297682553), (-2678400000L));
        long long28 = durationField22.getValueAsLong((-2491193000L), (-3660001L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test10521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10521");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long7 = dateTimeZone1.convertUTCToLocal((long) (byte) 10);
        long long10 = dateTimeZone1.convertLocalToUTC((long) 292278993, false);
        long long12 = dateTimeZone1.nextTransition((-60652454403120L));
        int int14 = dateTimeZone1.getOffsetFromLocal(45410453928000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 79L + "'", long7 == 79L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 292278924L + "'", long10 == 292278924L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60652454403120L) + "'", long12 == (-60652454403120L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 69 + "'", int14 == 69);
    }

    @Test
    public void test10522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10522");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField16 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.year();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.millisOfSecond();
        org.joda.time.DurationField durationField23 = iSOChronology13.months();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test10523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10523");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long22 = iSOChronology13.getDateTimeMillis(12, (int) (byte) 1, (int) (short) 10, 11);
        long long27 = iSOChronology13.getDateTimeMillis((int) (byte) 0, (int) (short) 1, 1, (int) ' ');
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField29 = iSOChronology13.centuries();
        org.joda.time.DurationField durationField30 = iSOChronology13.weekyears();
        int int33 = durationField30.getDifference((long) (-19), 16L);
        org.joda.time.DurationFieldType durationFieldType34 = durationField30.getType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-61787750400058L) + "'", long22 == (-61787750400058L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-62167219200037L) + "'", long27 == (-62167219200037L));
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(durationFieldType34);
    }

    @Test
    public void test10524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10524");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.millisOfDay();
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.lang.String str28 = dateTimeZone27.toString();
        org.joda.time.Chronology chronology29 = iSOChronology13.withZone(dateTimeZone27);
        org.joda.time.DurationField durationField30 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField31 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField32 = iSOChronology13.weekyears();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.069" + "'", str28, "+00:00:00.069");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test10525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10525");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology13.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology17.yearOfCentury();
        org.joda.time.DurationField durationField20 = iSOChronology17.years();
        org.joda.time.DurationField durationField21 = iSOChronology17.millis();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology17.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test10526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10526");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DurationField durationField16 = iSOChronology13.seconds();
        org.joda.time.Chronology chronology17 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone19 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfYear();
        org.joda.time.Chronology chronology22 = iSOChronology13.withUTC();
        java.lang.Class<?> wildcardClass23 = chronology22.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test10527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10527");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        org.joda.time.DurationField durationField20 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DurationField durationField22 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.year();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        java.lang.String str28 = dateTimeZone25.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        int int31 = dateTimeZone25.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone25);
        org.joda.time.DurationField durationField33 = iSOChronology32.minutes();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology32.minuteOfHour();
        org.joda.time.DurationField durationField35 = iSOChronology32.days();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology32.year();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology32.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology32.yearOfCentury();
        org.joda.time.DurationField durationField39 = iSOChronology32.weekyears();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology32.monthOfYear();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology32.dayOfYear();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology32.dayOfMonth();
        java.util.Locale locale44 = null;
        java.lang.String str45 = dateTimeField42.getAsShortText((-62167402799968L), locale44);
        boolean boolean46 = iSOChronology13.equals((java.lang.Object) dateTimeField42);
        org.joda.time.ReadablePartial readablePartial47 = null;
        java.util.Locale locale49 = null;
        java.lang.String str50 = dateTimeField42.getAsText(readablePartial47, (-1030), locale49);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.069" + "'", str26, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.069" + "'", str28, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 69 + "'", int31 == 69);
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "29" + "'", str45, "29");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1030" + "'", str50, "-1030");
    }

    @Test
    public void test10528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10528");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology20 = iSOChronology13.withZone(dateTimeZone19);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone19.getName((-59079023999997L), locale22);
        int int25 = dateTimeZone19.getOffset(299410032L);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.millisOfDay();
        boolean boolean28 = dateTimeField27.isLenient();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test10529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10529");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DurationField durationField21 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.hourOfHalfday();
        org.joda.time.DurationField durationField23 = iSOChronology13.hours();
        org.joda.time.DurationField durationField24 = iSOChronology13.days();
        long long26 = durationField24.getMillis(1439L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 124329600000L + "'", long26 == 124329600000L);
    }

    @Test
    public void test10530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10530");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        java.lang.String str3 = dateTimeZone1.getShortName(193200000L);
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone1.getOffset(readableInstant4);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.005" + "'", str3, "+00:00:00.005");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
    }

    @Test
    public void test10531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10531");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.monthOfYear();
        org.joda.time.DurationField durationField17 = iSOChronology13.months();
        org.joda.time.DurationField durationField18 = iSOChronology13.hours();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey(10L);
        long long24 = dateTimeZone20.previousTransition(0L);
        java.lang.String str26 = dateTimeZone20.getNameKey((-12859899912000000L));
        org.joda.time.Chronology chronology27 = iSOChronology13.withZone(dateTimeZone20);
        long long29 = dateTimeZone20.nextTransition((-59658836999997L));
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone20.getName(8445360100L, locale31);
        int int34 = dateTimeZone20.getStandardOffset(124329600000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-59658836999997L) + "'", long29 == (-59658836999997L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.069" + "'", str32, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 69 + "'", int34 == 69);
    }

    @Test
    public void test10532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10532");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.days();
        org.joda.time.DurationField durationField19 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.era();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.millisOfSecond();
        long long24 = dateTimeField21.getDifferenceAsLong((-62135596800000L), (-59106067200000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-3029529600000L) + "'", long24 == (-3029529600000L));
    }

    @Test
    public void test10533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10533");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.months();
        org.joda.time.DurationField durationField20 = iSOChronology13.hours();
        org.joda.time.DurationField durationField21 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField22 = iSOChronology13.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test10534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10534");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.secondOfDay();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        long long15 = durationField12.getDifferenceAsLong((-198714022597122L), 117618338L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-3311902336L) + "'", long15 == (-3311902336L));
    }

    @Test
    public void test10535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10535");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.era();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.clockhourOfDay();
        org.joda.time.DurationField durationField16 = iSOChronology8.minutes();
        org.joda.time.Chronology chronology17 = iSOChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.clockhourOfDay();
        org.joda.time.Chronology chronology19 = iSOChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology8.secondOfDay();
        org.joda.time.DurationField durationField22 = iSOChronology8.hours();
        org.joda.time.ReadablePartial readablePartial23 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray25 = iSOChronology8.get(readablePartial23, 257181000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test10536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10536");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        java.lang.String str17 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[+00:00:00.069]" + "'", str17, "ISOChronology[+00:00:00.069]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test10537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10537");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology13.getZone();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        java.lang.String str21 = dateTimeZone18.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        int int24 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone18);
        org.joda.time.DurationField durationField26 = iSOChronology25.minutes();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology25.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology25.secondOfDay();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        java.lang.String str32 = dateTimeZone31.toString();
        java.lang.String str34 = dateTimeZone31.getShortName(1L);
        int int36 = dateTimeZone31.getOffsetFromLocal((long) (byte) 0);
        int int38 = dateTimeZone31.getStandardOffset((long) (short) 0);
        java.lang.String str39 = dateTimeZone31.getID();
        long long42 = dateTimeZone31.adjustOffset(0L, true);
        org.joda.time.Chronology chronology43 = iSOChronology25.withZone(dateTimeZone31);
        boolean boolean44 = dateTimeZone31.isFixed();
        int int46 = dateTimeZone31.getOffset((long) 0);
        java.lang.String str47 = dateTimeZone31.getID();
        long long49 = dateTimeZone16.getMillisKeepLocal(dateTimeZone31, (-61787937599989L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        java.lang.String str51 = dateTimeZone16.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.069" + "'", str19, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.069" + "'", str21, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 69 + "'", int24 == 69);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.069" + "'", str32, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.069" + "'", str34, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 69 + "'", int36 == 69);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 69 + "'", int38 == 69);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.069" + "'", str39, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 69 + "'", int46 == 69);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.069" + "'", str47, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-61787937599989L) + "'", long49 == (-61787937599989L));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.069" + "'", str51, "+00:00:00.069");
    }

    @Test
    public void test10538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10538");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.monthOfYear();
        org.joda.time.DurationField durationField17 = iSOChronology13.millis();
        org.joda.time.Chronology chronology18 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.millisOfDay();
        long long21 = dateTimeField19.roundHalfEven((-5907458258704800000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-5907458258704800000L) + "'", long21 == (-5907458258704800000L));
    }

    @Test
    public void test10539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10539");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.era();
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology8.getZone();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str17 = dateTimeZone16.toString();
        boolean boolean18 = dateTimeZone16.isFixed();
        org.joda.time.Chronology chronology19 = iSOChronology8.withZone(dateTimeZone16);
        boolean boolean21 = dateTimeZone16.isStandardOffset(0L);
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField23 = iSOChronology22.seconds();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology22.year();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.069" + "'", str17, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test10540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10540");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.days();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = iSOChronology13.add(readablePeriod19, (long) 100, (int) (short) 10);
        org.joda.time.DurationField durationField23 = iSOChronology13.days();
        java.lang.String str24 = durationField23.toString();
        int int26 = durationField23.getValue((long) (-7979));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L + "'", long22 == 100L);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DurationField[days]" + "'", str24, "DurationField[days]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test10541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10541");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DurationField durationField21 = iSOChronology13.minutes();
        org.joda.time.DateTimeZone dateTimeZone22 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField23 = iSOChronology13.millis();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test10542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10542");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.halfdayOfDay();
        boolean boolean4 = dateTimeField2.isLeap(8553600100L);
        long long7 = dateTimeField2.add(547200010L, (-17340001));
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-749087495999990L) + "'", long7 == (-749087495999990L));
    }

    @Test
    public void test10543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10543");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField20 = iSOChronology13.months();
        org.joda.time.DurationField durationField21 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.millisOfDay();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.lang.String str25 = dateTimeZone24.toString();
        java.lang.String str27 = dateTimeZone24.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        int int30 = dateTimeZone24.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone32 = iSOChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology31.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology31.year();
        org.joda.time.DurationField durationField35 = iSOChronology31.minutes();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology31.era();
        org.joda.time.DateTimeZone dateTimeZone37 = iSOChronology31.getZone();
        long long40 = dateTimeZone37.adjustOffset((-186659968L), true);
        java.lang.String str41 = dateTimeZone37.toString();
        int int43 = dateTimeZone37.getOffset(0L);
        org.joda.time.Chronology chronology44 = iSOChronology13.withZone(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.069" + "'", str25, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.069" + "'", str27, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 69 + "'", int30 == 69);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-186659968L) + "'", long40 == (-186659968L));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.069" + "'", str41, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 69 + "'", int43 == 69);
        org.junit.Assert.assertNotNull(chronology44);
    }

    @Test
    public void test10544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10544");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str22 = dateTimeZone21.toString();
        java.lang.String str24 = dateTimeZone21.getShortName(1L);
        int int26 = dateTimeZone21.getOffsetFromLocal((long) (byte) 0);
        int int28 = dateTimeZone21.getStandardOffset((long) (short) 0);
        java.lang.String str29 = dateTimeZone21.getID();
        long long32 = dateTimeZone21.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone21);
        org.joda.time.DurationField durationField34 = iSOChronology33.months();
        org.joda.time.DateTimeZone dateTimeZone35 = iSOChronology33.getZone();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        java.lang.String str38 = dateTimeZone37.toString();
        java.lang.String str40 = dateTimeZone37.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        int int43 = dateTimeZone37.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology44 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone37);
        org.joda.time.DurationField durationField45 = iSOChronology44.minutes();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology44.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology44.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology44.minuteOfDay();
        org.joda.time.DurationField durationField49 = iSOChronology44.seconds();
        org.joda.time.DurationField durationField50 = iSOChronology44.millis();
        boolean boolean51 = dateTimeZone35.equals((java.lang.Object) iSOChronology44);
        org.joda.time.Chronology chronology52 = iSOChronology13.withZone(dateTimeZone35);
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        java.lang.String str55 = dateTimeZone54.toString();
        java.lang.String str57 = dateTimeZone54.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone54);
        int int60 = dateTimeZone54.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology61 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone62 = iSOChronology61.getZone();
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology61.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField64 = iSOChronology61.year();
        org.joda.time.DurationField durationField65 = iSOChronology61.minutes();
        org.joda.time.DateTimeField dateTimeField66 = iSOChronology61.era();
        boolean boolean67 = iSOChronology13.equals((java.lang.Object) iSOChronology61);
        long long71 = iSOChronology61.add((-84865878L), (-2208531600000L), (-58));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.069" + "'", str22, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.069" + "'", str24, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 69 + "'", int26 == 69);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 69 + "'", int28 == 69);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.069" + "'", str29, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-69L) + "'", long32 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.069" + "'", str38, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.069" + "'", str40, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 69 + "'", int43 == 69);
        org.junit.Assert.assertNotNull(iSOChronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.069" + "'", str55, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.069" + "'", str57, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 69 + "'", int60 == 69);
        org.junit.Assert.assertNotNull(iSOChronology61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 128094747934122L + "'", long71 == 128094747934122L);
    }

    @Test
    public void test10545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10545");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfDay();
        org.joda.time.DurationField durationField3 = iSOChronology0.years();
        org.joda.time.DurationField durationField4 = iSOChronology0.days();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray8 = iSOChronology0.get(readablePeriod6, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test10546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10546");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology13.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField18 = iSOChronology17.halfdays();
        org.joda.time.DurationField durationField19 = iSOChronology17.hours();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology17.monthOfYear();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology17.yearOfCentury();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.lang.String str25 = dateTimeZone24.toString();
        java.lang.String str27 = dateTimeZone24.getShortName(1L);
        int int29 = dateTimeZone24.getOffsetFromLocal((long) (byte) 0);
        int int31 = dateTimeZone24.getStandardOffset((long) (short) 0);
        java.lang.String str32 = dateTimeZone24.getID();
        long long35 = dateTimeZone24.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone37 = iSOChronology36.getZone();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology36.weekyear();
        java.lang.String str39 = iSOChronology36.toString();
        org.joda.time.DateTimeZone dateTimeZone40 = iSOChronology36.getZone();
        java.util.Locale locale42 = null;
        java.lang.String str43 = dateTimeZone40.getName(172374067353660000L, locale42);
        int int45 = dateTimeZone40.getOffset((-345599900L));
        org.joda.time.Chronology chronology46 = iSOChronology17.withZone(dateTimeZone40);
        java.util.TimeZone timeZone47 = dateTimeZone40.toTimeZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.069" + "'", str25, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.069" + "'", str27, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 69 + "'", int29 == 69);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 69 + "'", int31 == 69);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.069" + "'", str32, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-69L) + "'", long35 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[+00:00:00.069]" + "'", str39, "ISOChronology[+00:00:00.069]");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.069" + "'", str43, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 69 + "'", int45 == 69);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test10547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10547");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField22 = iSOChronology13.years();
        org.joda.time.DurationField durationField23 = iSOChronology13.seconds();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test10548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10548");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField17 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        int int20 = dateTimeField18.get((-98352643798189968L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 7 + "'", int20 == 7);
    }

    @Test
    public void test10549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10549");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DurationField durationField17 = iSOChronology13.minutes();
        org.joda.time.DurationField durationField18 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.year();
        org.joda.time.DurationField durationField20 = iSOChronology13.days();
        java.lang.String str21 = durationField20.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "days" + "'", str21, "days");
    }

    @Test
    public void test10550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10550");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(31, 12);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test10551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10551");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        java.lang.String str17 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.halfdayOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.months();
        org.joda.time.DurationField durationField20 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[+00:00:00.069]" + "'", str17, "ISOChronology[+00:00:00.069]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test10552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10552");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.era();
        org.joda.time.DurationField durationField24 = iSOChronology13.minutes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test10553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10553");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test10554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10554");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.weekyear();
        org.joda.time.DurationField durationField16 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.lang.String str23 = dateTimeZone22.toString();
        java.lang.String str25 = dateTimeZone22.getShortName(1L);
        int int27 = dateTimeZone22.getOffsetFromLocal((long) (byte) 0);
        int int29 = dateTimeZone22.getStandardOffset((long) (short) 0);
        java.lang.String str30 = dateTimeZone22.getID();
        long long33 = dateTimeZone22.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField35 = iSOChronology34.months();
        org.joda.time.DurationField durationField36 = iSOChronology34.weeks();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology34.year();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology34.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology34.hourOfDay();
        java.lang.String str40 = iSOChronology34.toString();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology34.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone42 = iSOChronology34.getZone();
        long long44 = dateTimeZone20.getMillisKeepLocal(dateTimeZone42, (-3540020305885899L));
        long long47 = dateTimeZone20.adjustOffset((long) 255211, false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.069" + "'", str23, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.069" + "'", str25, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 69 + "'", int27 == 69);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 69 + "'", int29 == 69);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.069" + "'", str30, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-69L) + "'", long33 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ISOChronology[+00:00:00.069]" + "'", str40, "ISOChronology[+00:00:00.069]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-3540020305885899L) + "'", long44 == (-3540020305885899L));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 255211L + "'", long47 == 255211L);
    }

    @Test
    public void test10555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10555");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.millisOfDay();
        org.joda.time.DurationField durationField22 = iSOChronology13.halfdays();
        long long25 = durationField22.add((long) 349200000, 11);
        java.lang.String str26 = durationField22.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 824400000L + "'", long25 == 824400000L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DurationField[halfdays]" + "'", str26, "DurationField[halfdays]");
    }

    @Test
    public void test10556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10556");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField18 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.secondOfDay();
        long long22 = dateTimeField19.add(113605027117200000L, 41754);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.lang.String str27 = dateTimeZone26.toString();
        java.lang.String str29 = dateTimeZone26.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        int int32 = dateTimeZone26.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone26);
        org.joda.time.DurationField durationField34 = iSOChronology33.minutes();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology33.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology33.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology33.year();
        org.joda.time.DurationField durationField38 = iSOChronology33.halfdays();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology33.hourOfDay();
        org.joda.time.ReadablePartial readablePartial40 = null;
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.lang.String str43 = dateTimeZone42.toString();
        java.lang.String str45 = dateTimeZone42.getShortName(1L);
        int int47 = dateTimeZone42.getOffsetFromLocal((long) (byte) 0);
        int int49 = dateTimeZone42.getStandardOffset((long) (short) 0);
        java.lang.String str50 = dateTimeZone42.getID();
        long long53 = dateTimeZone42.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology54 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone42);
        org.joda.time.DurationField durationField55 = iSOChronology54.months();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology54.secondOfDay();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology54.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology54.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField59 = iSOChronology54.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology54.minuteOfDay();
        org.joda.time.DurationField durationField61 = iSOChronology54.months();
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology54.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology54.hourOfHalfday();
        java.util.Locale locale65 = null;
        java.lang.String str66 = dateTimeField63.getAsShortText((int) (short) -1, locale65);
        org.joda.time.ReadablePartial readablePartial67 = null;
        int[] intArray71 = new int[] { '#', 12, 9 };
        int int72 = dateTimeField63.getMinimumValue(readablePartial67, intArray71);
        int int73 = dateTimeField39.getMinimumValue(readablePartial40, intArray71);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray75 = dateTimeField19.set(readablePartial23, 8, intArray71, (-407513));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -407513 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 113605027158954000L + "'", long22 == 113605027158954000L);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.069" + "'", str27, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.069" + "'", str29, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 69 + "'", int32 == 69);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.069" + "'", str43, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.069" + "'", str45, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 69 + "'", int47 == 69);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 69 + "'", int49 == 69);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.069" + "'", str50, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-69L) + "'", long53 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "-1" + "'", str66, "-1");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[35, 12, 9]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test10557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10557");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField18 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) 'a');
        java.lang.String str22 = dateTimeZone21.getID();
        org.joda.time.Chronology chronology23 = iSOChronology13.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DurationField durationField25 = iSOChronology13.seconds();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+97:00" + "'", str22, "+97:00");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test10558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10558");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField20 = iSOChronology13.hours();
        org.joda.time.DurationField durationField21 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.year();
        int int24 = dateTimeField22.getMinimumValue(187457181L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-292275054) + "'", int24 == (-292275054));
    }

    @Test
    public void test10559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10559");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.weekyear();
        org.joda.time.DurationField durationField16 = iSOChronology13.minutes();
        org.joda.time.DurationField durationField17 = iSOChronology13.months();
        boolean boolean18 = durationField17.isPrecise();
        long long21 = durationField17.getValueAsLong((-3540020305885899L), 77986800000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1346145L) + "'", long21 == (-1346145L));
    }

    @Test
    public void test10560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10560");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DurationField durationField10 = iSOChronology8.months();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.dayOfMonth();
        org.joda.time.DurationField durationField12 = iSOChronology8.weekyears();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.weekyear();
        java.lang.String str15 = dateTimeField13.getAsText(113605027200000029L);
        org.joda.time.DurationField durationField16 = dateTimeField13.getLeapDurationField();
        long long18 = dateTimeField13.remainder(2726523808646400000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "3601970" + "'", str15, "3601970");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 259200069L + "'", long18 == 259200069L);
    }

    @Test
    public void test10561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10561");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.weekyearOfCentury();
        long long22 = iSOChronology13.add((long) (short) 100, 0L, 3);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField24 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L + "'", long22 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test10562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10562");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str3 = dateTimeZone1.getID();
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getStandardOffset(0L);
        int int9 = dateTimeZone1.getStandardOffset((long) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str12 = dateTimeZone1.getName(2L);
        boolean boolean14 = dateTimeZone1.isStandardOffset((-2629746000L));
        long long17 = dateTimeZone1.convertLocalToUTC((-14280001L), false);
        int int19 = dateTimeZone1.getOffsetFromLocal((-349200000L));
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str22 = dateTimeZone21.toString();
        java.lang.String str24 = dateTimeZone21.getShortName(1L);
        int int26 = dateTimeZone21.getOffsetFromLocal((long) (byte) 0);
        int int28 = dateTimeZone21.getStandardOffset((long) (short) 0);
        java.lang.String str29 = dateTimeZone21.getID();
        long long32 = dateTimeZone21.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone21);
        org.joda.time.DurationField durationField34 = iSOChronology33.months();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology33.secondOfDay();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology33.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology33.secondOfMinute();
        org.joda.time.DurationField durationField38 = iSOChronology33.weeks();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology33.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = iSOChronology33.getZone();
        long long44 = iSOChronology33.add(86400000L, (-30844800000L), (int) ' ');
        org.joda.time.DurationField durationField45 = iSOChronology33.weeks();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology33.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology33.halfdayOfDay();
        org.joda.time.ReadablePartial readablePartial48 = null;
        int int49 = dateTimeField47.getMaximumValue(readablePartial48);
        boolean boolean50 = dateTimeZone1.equals((java.lang.Object) int49);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.069" + "'", str3, "+00:00:00.069");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 69 + "'", int9 == 69);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.069" + "'", str12, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-14280070L) + "'", long17 == (-14280070L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 69 + "'", int19 == 69);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.069" + "'", str22, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.069" + "'", str24, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 69 + "'", int26 == 69);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 69 + "'", int28 == 69);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.069" + "'", str29, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-69L) + "'", long32 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-986947200000L) + "'", long44 == (-986947200000L));
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test10563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10563");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        int int10 = dateTimeZone1.getOffsetFromLocal(5520000L);
        long long12 = dateTimeZone1.previousTransition((-2722733849997600000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 69 + "'", int10 == 69);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-2722733849997600000L) + "'", long12 == (-2722733849997600000L));
    }

    @Test
    public void test10564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10564");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.Chronology chronology18 = iSOChronology13.withUTC();
        org.joda.time.DateTimeZone dateTimeZone19 = iSOChronology13.getZone();
        long long22 = dateTimeZone19.convertLocalToUTC((-291600000L), false);
        java.lang.String str23 = dateTimeZone19.getID();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone19.getOffset(readableInstant24);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-291600069L) + "'", long22 == (-291600069L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.069" + "'", str23, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 69 + "'", int25 == 69);
    }

    @Test
    public void test10565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10565");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = iSOChronology8.add(readablePeriod14, (long) 'a', (-1));
        org.joda.time.DurationField durationField18 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology8.monthOfYear();
        boolean boolean26 = dateTimeField25.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 97L + "'", long17 == 97L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test10566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10566");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long22 = iSOChronology13.getDateTimeMillis(12, (int) (byte) 1, (int) (short) 10, 11);
        org.joda.time.DurationField durationField23 = iSOChronology13.seconds();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.millisOfSecond();
        org.joda.time.DurationField durationField25 = iSOChronology13.weekyears();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-61787750400058L) + "'", long22 == (-61787750400058L));
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test10567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10567");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) '4');
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.year();
        org.joda.time.DateTimeZone dateTimeZone6 = iSOChronology4.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
    }

    @Test
    public void test10568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10568");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        long long24 = iSOChronology13.add(86400000L, (-30844800000L), (int) ' ');
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.centuryOfEra();
        org.joda.time.DurationField durationField26 = iSOChronology13.minutes();
        org.joda.time.DurationField durationField27 = iSOChronology13.millis();
        org.joda.time.DurationField durationField28 = iSOChronology13.millis();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology13.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-986947200000L) + "'", long24 == (-986947200000L));
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test10569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10569");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) (byte) 1);
        long long5 = dateTimeZone1.convertUTCToLocal(97L);
        java.lang.String str6 = dateTimeZone1.getID();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str9 = dateTimeZone8.toString();
        java.lang.String str11 = dateTimeZone8.getShortName(1L);
        int int13 = dateTimeZone8.getOffsetFromLocal((long) (byte) 0);
        int int15 = dateTimeZone8.getStandardOffset((long) (short) 0);
        java.lang.String str16 = dateTimeZone8.getID();
        long long19 = dateTimeZone8.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField21 = iSOChronology20.months();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology20.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology20.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology20.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology20.minuteOfDay();
        org.joda.time.DurationField durationField26 = iSOChronology20.weekyears();
        org.joda.time.DurationField durationField27 = iSOChronology20.hours();
        org.joda.time.DurationField durationField28 = iSOChronology20.hours();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology20.year();
        boolean boolean30 = dateTimeZone1.equals((java.lang.Object) iSOChronology20);
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology20.clockhourOfDay();
        org.joda.time.DurationField durationField32 = iSOChronology20.days();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology20.year();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology20.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone35 = iSOChronology20.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 69 + "'", int3 == 69);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 166L + "'", long5 == 166L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.069" + "'", str6, "+00:00:00.069");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.069" + "'", str11, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 69 + "'", int13 == 69);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 69 + "'", int15 == 69);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.069" + "'", str16, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-69L) + "'", long19 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
    }

    @Test
    public void test10570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10570");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long22 = iSOChronology13.getDateTimeMillis(12, (int) (byte) 1, (int) (short) 10, 11);
        long long27 = iSOChronology13.getDateTimeMillis((int) (byte) 0, (int) (short) 1, 1, (int) ' ');
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology13.millisOfSecond();
        org.joda.time.DurationField durationField31 = iSOChronology13.seconds();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology13.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-61787750400058L) + "'", long22 == (-61787750400058L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-62167219200037L) + "'", long27 == (-62167219200037L));
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test10571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10571");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.weekyear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = iSOChronology8.add(readablePeriod14, 946497599999L, 2);
        org.joda.time.DurationField durationField18 = iSOChronology8.seconds();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology8.dayOfWeek();
        org.joda.time.DurationField durationField20 = iSOChronology8.millis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 946497599999L + "'", long17 == 946497599999L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test10572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10572");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        org.joda.time.Chronology chronology3 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test10573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10573");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.Chronology chronology16 = iSOChronology13.withUTC();
        java.lang.String str17 = iSOChronology13.toString();
        org.joda.time.DurationField durationField18 = iSOChronology13.millis();
        org.joda.time.DurationField durationField19 = iSOChronology13.seconds();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int23 = dateTimeField20.getDifference((long) (-1), 25298693798400000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -25298693798400");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[+00:00:00.069]" + "'", str17, "ISOChronology[+00:00:00.069]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test10574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10574");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology8.getZone();
        org.joda.time.DurationField durationField16 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.monthOfYear();
        long long21 = dateTimeField18.addWrapField(37000L, 105189);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 23587237000L + "'", long21 == 23587237000L);
    }

    @Test
    public void test10575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10575");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.millisOfSecond();
        org.joda.time.DurationField durationField12 = iSOChronology8.days();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.lang.String str15 = dateTimeZone14.toString();
        java.lang.String str17 = dateTimeZone14.getShortName(1L);
        int int19 = dateTimeZone14.getOffsetFromLocal((long) (byte) 0);
        int int21 = dateTimeZone14.getStandardOffset((long) (short) 0);
        java.lang.String str22 = dateTimeZone14.getID();
        long long25 = dateTimeZone14.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField27 = iSOChronology26.months();
        org.joda.time.DurationField durationField28 = iSOChronology26.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology26.weeks();
        boolean boolean30 = iSOChronology8.equals((java.lang.Object) durationField29);
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology8.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.069" + "'", str15, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.069" + "'", str17, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 69 + "'", int19 == 69);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 69 + "'", int21 == 69);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.069" + "'", str22, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-69L) + "'", long25 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test10576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10576");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfDay();
        org.joda.time.DurationField durationField18 = iSOChronology13.millis();
        int int20 = durationField18.getValue(0L);
        boolean boolean21 = durationField18.isPrecise();
        long long22 = durationField18.getUnitMillis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
    }

    @Test
    public void test10577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10577");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfDay();
        org.joda.time.DurationField durationField13 = iSOChronology8.seconds();
        org.joda.time.DurationField durationField14 = iSOChronology8.hours();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.secondOfDay();
        org.joda.time.DurationField durationField16 = iSOChronology8.millis();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = iSOChronology8.add(readablePeriod17, (-349199988L), 725);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray24 = iSOChronology8.get(readablePeriod21, (-190800069L), (-62167219199967L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-349199988L) + "'", long20 == (-349199988L));
    }

    @Test
    public void test10578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10578");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.clockhourOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.era();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test10579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10579");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology13.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.centuryOfEra();
        org.joda.time.DurationField durationField19 = iSOChronology17.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = iSOChronology17.getDateTimeMillis((long) 11, (-23), (-7979), (-28), (-2878));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -23 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test10580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10580");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DurationField durationField16 = iSOChronology13.seconds();
        org.joda.time.Chronology chronology17 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.clockhourOfDay();
        java.lang.String str22 = dateTimeField20.getAsText(63113904000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = dateTimeField20.getType();
        org.joda.time.ReadablePartial readablePartial24 = null;
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.lang.String str28 = dateTimeZone27.toString();
        java.lang.String str29 = dateTimeZone27.getID();
        long long33 = dateTimeZone27.convertLocalToUTC(10L, false, (long) '4');
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.lang.String str36 = dateTimeZone35.toString();
        java.lang.String str38 = dateTimeZone35.getShortName(1L);
        int int40 = dateTimeZone35.getOffsetFromLocal((long) (byte) 0);
        int int42 = dateTimeZone35.getStandardOffset((long) (short) 0);
        java.lang.String str43 = dateTimeZone35.getID();
        long long46 = dateTimeZone35.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology47 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone35);
        org.joda.time.DurationField durationField48 = iSOChronology47.months();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology47.secondOfDay();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology47.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology47.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology47.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology47.centuryOfEra();
        boolean boolean54 = dateTimeZone27.equals((java.lang.Object) iSOChronology47);
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology47.yearOfEra();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology47.hourOfDay();
        org.joda.time.ReadablePartial readablePartial57 = null;
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        java.lang.String str61 = dateTimeZone60.toString();
        java.lang.String str63 = dateTimeZone60.getShortName(1L);
        int int65 = dateTimeZone60.getOffsetFromLocal((long) (byte) 0);
        int int67 = dateTimeZone60.getStandardOffset((long) (short) 0);
        java.lang.String str68 = dateTimeZone60.getID();
        long long71 = dateTimeZone60.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology72 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone60);
        org.joda.time.DateTimeField dateTimeField73 = iSOChronology72.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField74 = iSOChronology72.dayOfYear();
        org.joda.time.DurationField durationField75 = iSOChronology72.weeks();
        org.joda.time.DateTimeField dateTimeField76 = iSOChronology72.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial77 = null;
        int[] intArray84 = new int[] { (short) 100, '4', (short) 1, (-292275054), 292278993 };
        int[] intArray86 = dateTimeField76.addWrapPartial(readablePartial77, 59, intArray84, (int) (short) 0);
        int[] intArray88 = dateTimeField56.add(readablePartial57, (-16416556), intArray84, 0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray90 = dateTimeField20.addWrapPartial(readablePartial24, 86401870, intArray84, 45582275);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "11" + "'", str22, "11");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.069" + "'", str28, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.069" + "'", str29, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-59L) + "'", long33 == (-59L));
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.069" + "'", str36, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.069" + "'", str38, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 69 + "'", int40 == 69);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 69 + "'", int42 == 69);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.069" + "'", str43, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-69L) + "'", long46 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00:00.069" + "'", str61, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00:00.069" + "'", str63, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 69 + "'", int65 == 69);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 69 + "'", int67 == 69);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00:00.069" + "'", str68, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-69L) + "'", long71 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[100, 52, 1, -292275054, 292278993]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[100, 52, 1, -292275054, 292278993]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[100, 52, 1, -292275054, 292278993]");
    }

    @Test
    public void test10581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10581");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone17 = iSOChronology13.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone17);
        java.lang.String str20 = dateTimeZone17.getShortName((-14398030L));
        long long23 = dateTimeZone17.convertLocalToUTC(7L, true);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone17);
        long long26 = dateTimeZone17.previousTransition((-349199993L));
        java.lang.String str27 = dateTimeZone17.toString();
        long long29 = dateTimeZone17.convertUTCToLocal((-345301200000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.069" + "'", str20, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-62L) + "'", long23 == (-62L));
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-349199993L) + "'", long26 == (-349199993L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.069" + "'", str27, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-345301199931L) + "'", long29 == (-345301199931L));
    }

    @Test
    public void test10582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10582");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DurationField durationField16 = iSOChronology13.days();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.monthOfYear();
        org.joda.time.DurationField durationField21 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.yearOfCentury();
        java.util.Locale locale23 = null;
        int int24 = dateTimeField22.getMaximumShortTextLength(locale23);
        java.util.Locale locale25 = null;
        int int26 = dateTimeField22.getMaximumShortTextLength(locale25);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
    }

    @Test
    public void test10583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10583");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.hourOfDay();
        org.joda.time.ReadablePartial readablePartial21 = null;
        java.util.Locale locale22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = dateTimeField20.getAsText(readablePartial21, locale22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test10584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10584");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField20 = iSOChronology13.hours();
        java.lang.String str21 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField23 = iSOChronology13.months();
        org.joda.time.DurationField durationField24 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.clockhourOfDay();
        int int26 = dateTimeField25.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[+00:00:00.069]" + "'", str21, "ISOChronology[+00:00:00.069]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 24 + "'", int26 == 24);
    }

    @Test
    public void test10585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10585");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.weekyear();
        org.joda.time.DurationField durationField16 = iSOChronology8.centuries();
        org.joda.time.DurationField durationField17 = iSOChronology8.years();
        org.joda.time.DurationField durationField18 = iSOChronology8.weeks();
        org.joda.time.Chronology chronology19 = iSOChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology8.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test10586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10586");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfYear();
        org.joda.time.DurationField durationField14 = iSOChronology8.millis();
        org.joda.time.DurationField durationField15 = iSOChronology8.months();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = durationField15.getMillis(978307200000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 978307200000 * 2629746000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test10587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10587");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.minuteOfHour();
        org.joda.time.DurationField durationField25 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.secondOfDay();
        long long30 = iSOChronology13.add(1438437664339200000L, (-6307L), (-800));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1438437664344245600L + "'", long30 == 1438437664344245600L);
    }

    @Test
    public void test10588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10588");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology7.dayOfYear();
        org.joda.time.DurationField durationField10 = iSOChronology7.months();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology7.weekyearOfCentury();
        org.joda.time.DurationField durationField12 = iSOChronology7.weekyears();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology7.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test10589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10589");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DurationField durationField10 = iSOChronology8.months();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.dayOfMonth();
        org.joda.time.DurationField durationField12 = iSOChronology8.centuries();
        org.joda.time.DurationField durationField13 = iSOChronology8.months();
        org.joda.time.DurationField durationField14 = iSOChronology8.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test10590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10590");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField21 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.hourOfDay();
        org.joda.time.DurationField durationField23 = iSOChronology13.minutes();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = iSOChronology13.add(readablePeriod24, 31536000000L, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology13.yearOfCentury();
        org.joda.time.DurationField durationField30 = iSOChronology13.days();
        org.joda.time.DurationField durationField31 = iSOChronology13.minutes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 31536000000L + "'", long27 == 31536000000L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test10591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10591");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.centuryOfEra();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField24 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test10592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10592");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.monthOfYear();
        org.joda.time.ReadablePartial readablePartial14 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray16 = iSOChronology8.get(readablePartial14, (-1640822400000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test10593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10593");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DurationField durationField21 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField22 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField23 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.monthOfYear();
        org.joda.time.ReadablePartial readablePartial26 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray28 = iSOChronology13.get(readablePartial26, (-1830034800000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test10594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10594");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfDay();
        org.joda.time.DurationField durationField18 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str22 = dateTimeZone21.toString();
        java.lang.String str24 = dateTimeZone21.getShortName(1L);
        int int26 = dateTimeZone21.getOffsetFromLocal((long) (byte) 0);
        int int28 = dateTimeZone21.getStandardOffset((long) (short) 0);
        java.lang.String str29 = dateTimeZone21.getID();
        long long32 = dateTimeZone21.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone21);
        org.joda.time.DurationField durationField34 = iSOChronology33.months();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology33.secondOfDay();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology33.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology33.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology33.minuteOfDay();
        org.joda.time.DurationField durationField39 = iSOChronology33.weekyears();
        org.joda.time.DurationField durationField40 = iSOChronology33.hours();
        org.joda.time.DurationField durationField41 = iSOChronology33.hours();
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        java.lang.String str44 = dateTimeZone43.toString();
        java.lang.String str46 = dateTimeZone43.getShortName(1L);
        int int48 = dateTimeZone43.getOffsetFromLocal((long) (byte) 0);
        int int50 = dateTimeZone43.getStandardOffset((long) (short) 0);
        java.lang.String str51 = dateTimeZone43.getID();
        long long54 = dateTimeZone43.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology55 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone43);
        org.joda.time.DurationField durationField56 = iSOChronology55.months();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology55.secondOfDay();
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology55.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField59 = iSOChronology55.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology55.minuteOfDay();
        org.joda.time.DurationField durationField61 = iSOChronology55.weekyears();
        org.joda.time.DurationField durationField62 = iSOChronology55.hours();
        java.lang.String str63 = iSOChronology55.toString();
        org.joda.time.DateTimeZone dateTimeZone64 = iSOChronology55.getZone();
        org.joda.time.Chronology chronology65 = iSOChronology33.withZone(dateTimeZone64);
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        long long69 = dateTimeZone67.previousTransition((long) 'a');
        long long71 = dateTimeZone64.getMillisKeepLocal(dateTimeZone67, (long) (byte) 1);
        java.util.TimeZone timeZone72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        java.lang.String str74 = dateTimeZone73.toString();
        java.lang.String str76 = dateTimeZone73.getShortName(1L);
        int int78 = dateTimeZone73.getOffsetFromLocal((long) (byte) 0);
        int int80 = dateTimeZone73.getStandardOffset((long) (short) 0);
        java.lang.String str81 = dateTimeZone73.getID();
        long long84 = dateTimeZone73.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology85 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone73);
        org.joda.time.DurationField durationField86 = iSOChronology85.months();
        org.joda.time.DateTimeField dateTimeField87 = iSOChronology85.secondOfDay();
        org.joda.time.DateTimeField dateTimeField88 = iSOChronology85.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField89 = iSOChronology85.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField90 = iSOChronology85.minuteOfDay();
        org.joda.time.DurationField durationField91 = iSOChronology85.weekyears();
        org.joda.time.DateTimeField dateTimeField92 = iSOChronology85.clockhourOfDay();
        boolean boolean93 = dateTimeZone67.equals((java.lang.Object) iSOChronology85);
        org.joda.time.Chronology chronology94 = iSOChronology13.withZone(dateTimeZone67);
        java.lang.String str95 = dateTimeZone67.toString();
        java.util.TimeZone timeZone96 = dateTimeZone67.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone97 = org.joda.time.DateTimeZone.forTimeZone(timeZone96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '+00:00:00.069' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.069" + "'", str22, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.069" + "'", str24, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 69 + "'", int26 == 69);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 69 + "'", int28 == 69);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.069" + "'", str29, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-69L) + "'", long32 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.069" + "'", str44, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.069" + "'", str46, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 69 + "'", int48 == 69);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 69 + "'", int50 == 69);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.069" + "'", str51, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-69L) + "'", long54 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ISOChronology[+00:00:00.069]" + "'", str63, "ISOChronology[+00:00:00.069]");
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 97L + "'", long69 == 97L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00:00.069" + "'", str74, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00:00.069" + "'", str76, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 69 + "'", int78 == 69);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 69 + "'", int80 == 69);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00:00.069" + "'", str81, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-69L) + "'", long84 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "+00:00:00.069" + "'", str95, "+00:00:00.069");
        org.junit.Assert.assertNotNull(timeZone96);
        org.junit.Assert.assertEquals(timeZone96.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test10595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10595");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField18 = iSOChronology13.halfdays();
        java.lang.String str19 = iSOChronology13.toString();
        org.joda.time.DurationField durationField20 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.era();
        org.joda.time.DateTimeZone dateTimeZone22 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.secondOfDay();
        org.joda.time.DurationField durationField25 = iSOChronology13.millis();
        long long28 = durationField25.add((long) 3781089, 0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+00:00:00.069]" + "'", str19, "ISOChronology[+00:00:00.069]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3781089L + "'", long28 == 3781089L);
    }

    @Test
    public void test10596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10596");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getName(181083187353600000L);
        long long5 = dateTimeZone0.convertLocalToUTC((-4413398400000L), true);
        long long8 = dateTimeZone0.convertLocalToUTC(113605030796400029L, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-4413398400069L) + "'", long5 == (-4413398400069L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 113605030796399960L + "'", long8 == 113605030796399960L);
    }

    @Test
    public void test10597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10597");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.secondOfDay();
        org.joda.time.DurationField durationField13 = iSOChronology8.months();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test10598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10598");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.weekyear();
        org.joda.time.DurationField durationField16 = iSOChronology13.minutes();
        org.joda.time.DurationField durationField17 = iSOChronology13.weeks();
        java.lang.String str18 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.halfdayOfDay();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str25 = dateTimeZone23.getNameKey(10L);
        org.joda.time.Chronology chronology26 = iSOChronology13.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.year();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+00:00:00.069]" + "'", str18, "ISOChronology[+00:00:00.069]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test10599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10599");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.clockhourOfHalfday();
        org.joda.time.DurationField durationField13 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField14 = iSOChronology8.millis();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.yearOfCentury();
        org.joda.time.DurationField durationField17 = iSOChronology8.minutes();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray21 = iSOChronology8.get(readablePeriod18, (-19287158014321007L), 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test10600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10600");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.hourOfDay();
        org.joda.time.DurationField durationField14 = iSOChronology8.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = iSOChronology8.add(readablePeriod16, (-11000L), 1209601400);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-11000L) + "'", long19 == (-11000L));
    }

    @Test
    public void test10601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10601");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.monthOfYear();
        org.joda.time.DurationField durationField11 = iSOChronology8.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test10602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10602");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.yearOfEra();
        org.joda.time.DurationField durationField16 = iSOChronology8.days();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test10603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10603");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.Chronology chronology16 = iSOChronology13.withUTC();
        java.lang.String str17 = iSOChronology13.toString();
        org.joda.time.DurationField durationField18 = iSOChronology13.millis();
        long long22 = iSOChronology13.add((long) 5, 187200000L, 100);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.lang.String str25 = dateTimeZone24.toString();
        java.lang.String str27 = dateTimeZone24.getShortName(1L);
        int int29 = dateTimeZone24.getOffsetFromLocal((long) (byte) 0);
        int int31 = dateTimeZone24.getStandardOffset((long) (short) 0);
        java.lang.String str32 = dateTimeZone24.getID();
        long long35 = dateTimeZone24.adjustOffset(0L, true);
        org.joda.time.Chronology chronology36 = iSOChronology13.withZone(dateTimeZone24);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[+00:00:00.069]" + "'", str17, "ISOChronology[+00:00:00.069]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 18720000005L + "'", long22 == 18720000005L);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.069" + "'", str25, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.069" + "'", str27, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 69 + "'", int29 == 69);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 69 + "'", int31 == 69);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.069" + "'", str32, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(chronology36);
    }

    @Test
    public void test10604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10604");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField21 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone26 = iSOChronology13.getZone();
        boolean boolean27 = dateTimeZone26.isFixed();
        int int29 = dateTimeZone26.getStandardOffset((-28567L));
        long long31 = dateTimeZone26.previousTransition(116141L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 69 + "'", int29 == 69);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 116141L + "'", long31 == 116141L);
    }

    @Test
    public void test10605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10605");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long23 = iSOChronology13.getDateTimeMillis(259200100L, 11, (int) (byte) 10, (int) (short) 10, (int) ' ');
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.era();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField29 = iSOChronology13.years();
        org.joda.time.DurationField durationField30 = iSOChronology13.days();
        org.joda.time.Chronology chronology31 = iSOChronology13.withUTC();
        org.joda.time.DurationField durationField32 = iSOChronology13.weekyears();
        long long35 = durationField32.add(681630426028800000L, 86401870);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 299409963L + "'", long23 == 299409963L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 3408210090374400000L + "'", long35 == 3408210090374400000L);
    }

    @Test
    public void test10606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10606");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField18 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.monthOfYear();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.lang.String str23 = dateTimeZone22.toString();
        java.lang.String str25 = dateTimeZone22.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        int int28 = dateTimeZone22.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField30 = iSOChronology29.minutes();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology29.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology29.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology29.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology29.dayOfYear();
        org.joda.time.DurationField durationField35 = iSOChronology29.millis();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology29.minuteOfDay();
        boolean boolean37 = iSOChronology13.equals((java.lang.Object) dateTimeField36);
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology13.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray43 = iSOChronology13.get(readablePeriod40, 98L, 69162710079174L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.069" + "'", str23, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.069" + "'", str25, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 69 + "'", int28 == 69);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test10607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10607");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.yearOfCentury();
        int int18 = dateTimeField16.get(7164514101L);
        java.lang.String str19 = dateTimeField16.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 70 + "'", int18 == 70);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "yearOfCentury" + "'", str19, "yearOfCentury");
    }

    @Test
    public void test10608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10608");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.Chronology chronology18 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = iSOChronology13.add(readablePeriod21, 1000L, 31);
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField26 = iSOChronology13.weekyears();
        org.joda.time.DateTimeZone dateTimeZone27 = iSOChronology13.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1000L + "'", long24 == 1000L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
    }

    @Test
    public void test10609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10609");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.era();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            long long29 = iSOChronology13.getDateTimeMillis((long) 71996759, (int) (byte) -1, 13888, 81, 1922);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test10610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10610");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test10611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10611");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DurationField durationField16 = iSOChronology13.weekyears();
        long long19 = durationField16.add(25252904995200000L, 12);
        long long22 = durationField16.getValueAsLong(8553600100L, (-3600000L));
        long long25 = durationField16.add(782829504633600000L, 32L);
        org.joda.time.DurationFieldType durationFieldType26 = durationField16.getType();
        boolean boolean27 = durationField16.isPrecise();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 25253283600000000L + "'", long19 == 25253283600000000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 782830514044800000L + "'", long25 == 782830514044800000L);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test10612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10612");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.hourOfDay();
        org.joda.time.Chronology chronology14 = iSOChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.clockhourOfDay();
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeField16.getAsText((-23), locale18);
        long long21 = dateTimeField16.roundFloor((long) 86400000);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-23" + "'", str19, "-23");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 86399931L + "'", long21 == 86399931L);
    }

    @Test
    public void test10613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10613");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfDay();
        org.joda.time.DurationField durationField13 = iSOChronology8.seconds();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str16 = dateTimeZone15.toString();
        java.lang.String str18 = dateTimeZone15.getShortName(1L);
        int int20 = dateTimeZone15.getOffsetFromLocal((long) (byte) 0);
        int int22 = dateTimeZone15.getStandardOffset((long) (short) 0);
        java.lang.String str23 = dateTimeZone15.getID();
        long long26 = dateTimeZone15.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField28 = iSOChronology27.months();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology27.secondOfDay();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology27.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology27.clockhourOfHalfday();
        org.joda.time.DurationField durationField33 = iSOChronology27.centuries();
        org.joda.time.DateTimeZone dateTimeZone34 = iSOChronology27.getZone();
        org.joda.time.Chronology chronology35 = iSOChronology8.withZone(dateTimeZone34);
        org.joda.time.DurationField durationField36 = iSOChronology8.halfdays();
        org.joda.time.DurationField durationField37 = iSOChronology8.days();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.069" + "'", str16, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.069" + "'", str18, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 69 + "'", int20 == 69);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 69 + "'", int22 == 69);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.069" + "'", str23, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-69L) + "'", long26 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test10614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10614");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField13 = iSOChronology8.seconds();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.clockhourOfHalfday();
        org.joda.time.DurationField durationField18 = iSOChronology8.years();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology8.yearOfCentury();
        org.joda.time.DurationField durationField20 = dateTimeField19.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNull(durationField20);
    }

    @Test
    public void test10615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10615");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.centuryOfEra();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str22 = dateTimeZone21.toString();
        java.lang.String str24 = dateTimeZone21.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        long long27 = dateTimeZone21.convertUTCToLocal((long) (byte) 10);
        long long30 = dateTimeZone21.convertLocalToUTC((long) 292278993, false);
        long long32 = dateTimeZone21.nextTransition((-62167406399968L));
        int int34 = dateTimeZone21.getStandardOffset(0L);
        java.lang.String str36 = dateTimeZone21.getNameKey((-7042359961273776583L));
        org.joda.time.Chronology chronology37 = iSOChronology13.withZone(dateTimeZone21);
        org.joda.time.ReadableInstant readableInstant38 = null;
        int int39 = dateTimeZone21.getOffset(readableInstant38);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.069" + "'", str22, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.069" + "'", str24, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 79L + "'", long27 == 79L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 292278924L + "'", long30 == 292278924L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-62167406399968L) + "'", long32 == (-62167406399968L));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 69 + "'", int34 == 69);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 69 + "'", int39 == 69);
    }

    @Test
    public void test10616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10616");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology13.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField18 = iSOChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology17.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology17.weekyearOfCentury();
        org.joda.time.DurationField durationField21 = iSOChronology17.minutes();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology17.hourOfHalfday();
        org.joda.time.DurationField durationField23 = iSOChronology17.days();
        java.lang.String str24 = durationField23.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DurationField[days]" + "'", str24, "DurationField[days]");
    }

    @Test
    public void test10617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10617");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test10618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10618");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.Chronology chronology16 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test10619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10619");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.LocalDateTime localDateTime5 = null;
        boolean boolean6 = dateTimeZone1.isLocalDateTimeGap(localDateTime5);
        java.lang.String str7 = dateTimeZone1.getID();
        boolean boolean8 = dateTimeZone1.isFixed();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str11 = dateTimeZone10.toString();
        java.lang.String str13 = dateTimeZone10.getShortName(1L);
        int int15 = dateTimeZone10.getOffsetFromLocal((long) (byte) 0);
        int int17 = dateTimeZone10.getStandardOffset((long) (short) 0);
        java.lang.String str18 = dateTimeZone10.getID();
        long long21 = dateTimeZone10.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField23 = iSOChronology22.months();
        org.joda.time.DurationField durationField24 = iSOChronology22.centuries();
        java.lang.String str25 = iSOChronology22.toString();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology22.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology22.weekyear();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology22.millisOfDay();
        boolean boolean29 = dateTimeZone1.equals((java.lang.Object) iSOChronology22);
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology22.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology22.dayOfYear();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology22.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology22.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.069" + "'", str7, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.069" + "'", str11, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.069" + "'", str13, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 69 + "'", int15 == 69);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 69 + "'", int17 == 69);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.069" + "'", str18, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-69L) + "'", long21 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[+00:00:00.069]" + "'", str25, "ISOChronology[+00:00:00.069]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test10620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10620");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.era();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = dateTimeField15.set((long) 292278994, 102737);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 102737 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test10621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10621");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.centuryOfEra();
        org.joda.time.DurationField durationField23 = iSOChronology13.centuries();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test10622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10622");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField16 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test10623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10623");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.weeks();
        org.joda.time.DurationField durationField20 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.dayOfMonth();
        int int23 = dateTimeField22.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 31 + "'", int23 == 31);
    }

    @Test
    public void test10624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10624");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.millisOfSecond();
        org.joda.time.DurationField durationField12 = iSOChronology8.days();
        java.lang.String str13 = iSOChronology8.toString();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forID("+00:00");
        int int17 = dateTimeZone15.getOffsetFromLocal((long) 10);
        java.lang.String str18 = dateTimeZone15.getID();
        org.joda.time.Chronology chronology19 = iSOChronology8.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology8.clockhourOfHalfday();
        org.joda.time.ReadablePartial readablePartial21 = null;
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.lang.String str25 = dateTimeZone24.toString();
        java.lang.String str27 = dateTimeZone24.getShortName(1L);
        int int29 = dateTimeZone24.getOffsetFromLocal((long) (byte) 0);
        int int31 = dateTimeZone24.getStandardOffset((long) (short) 0);
        java.lang.String str32 = dateTimeZone24.getID();
        long long35 = dateTimeZone24.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField37 = iSOChronology36.months();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology36.secondOfDay();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology36.year();
        org.joda.time.DurationField durationField40 = iSOChronology36.millis();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology36.centuryOfEra();
        org.joda.time.ReadablePartial readablePartial43 = null;
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.lang.String str47 = dateTimeZone46.toString();
        java.lang.String str49 = dateTimeZone46.getShortName(1L);
        int int51 = dateTimeZone46.getOffsetFromLocal((long) (byte) 0);
        int int53 = dateTimeZone46.getStandardOffset((long) (short) 0);
        java.lang.String str54 = dateTimeZone46.getID();
        long long57 = dateTimeZone46.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology58 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone46);
        org.joda.time.DurationField durationField59 = iSOChronology58.months();
        org.joda.time.DateTimeZone dateTimeZone60 = iSOChronology58.getZone();
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology58.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone62 = iSOChronology58.getZone();
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology58.yearOfEra();
        org.joda.time.DateTimeField dateTimeField64 = iSOChronology58.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField65 = iSOChronology58.dayOfWeek();
        org.joda.time.ReadablePartial readablePartial66 = null;
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        java.lang.String str69 = dateTimeZone68.toString();
        java.lang.String str71 = dateTimeZone68.getShortName(1L);
        int int73 = dateTimeZone68.getOffsetFromLocal((long) (byte) 0);
        int int75 = dateTimeZone68.getStandardOffset((long) (short) 0);
        java.lang.String str76 = dateTimeZone68.getID();
        long long79 = dateTimeZone68.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology80 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone68);
        org.joda.time.DateTimeField dateTimeField81 = iSOChronology80.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField82 = iSOChronology80.dayOfYear();
        org.joda.time.DurationField durationField83 = iSOChronology80.weeks();
        org.joda.time.DateTimeField dateTimeField84 = iSOChronology80.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial85 = null;
        int[] intArray92 = new int[] { (short) 100, '4', (short) 1, (-292275054), 292278993 };
        int[] intArray94 = dateTimeField84.addWrapPartial(readablePartial85, 59, intArray92, (int) (short) 0);
        int int95 = dateTimeField65.getMinimumValue(readablePartial66, intArray94);
        int[] intArray97 = dateTimeField42.add(readablePartial43, (-12), intArray94, 0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray99 = dateTimeField20.add(readablePartial21, (-3120), intArray94, 1872);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -3120");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+00:00:00.069]" + "'", str13, "ISOChronology[+00:00:00.069]");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.069" + "'", str25, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.069" + "'", str27, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 69 + "'", int29 == 69);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 69 + "'", int31 == 69);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.069" + "'", str32, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-69L) + "'", long35 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.069" + "'", str47, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.069" + "'", str49, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 69 + "'", int51 == 69);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 69 + "'", int53 == 69);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.069" + "'", str54, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-69L) + "'", long57 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00:00.069" + "'", str69, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00:00.069" + "'", str71, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 69 + "'", int73 == 69);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 69 + "'", int75 == 69);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00:00.069" + "'", str76, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-69L) + "'", long79 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[100, 52, 1, -292275054, 292278993]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[100, 52, 1, -292275054, 292278993]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[100, 52, 1, -292275054, 292278993]");
    }

    @Test
    public void test10625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10625");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.clockhourOfDay();
        int int22 = dateTimeField20.get((-536495746L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 18 + "'", int22 == 18);
    }

    @Test
    public void test10626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10626");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.minutes();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
    }

    @Test
    public void test10627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10627");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((-22871));
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test10628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10628");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.weekOfWeekyear();
        org.joda.time.Chronology chronology19 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.yearOfCentury();
        org.joda.time.DurationField durationField21 = iSOChronology13.weeks();
        long long24 = durationField21.getMillis(473339, (-7043511686176800000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 286275427200000L + "'", long24 == 286275427200000L);
    }

    @Test
    public void test10629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10629");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.halfdayOfDay();
        org.joda.time.DurationField durationField18 = iSOChronology13.days();
        // The following exception was thrown during execution in test generation
        try {
            long long26 = iSOChronology13.getDateTimeMillis((-22650), 0, 73388093, (-15860668), 102737, (-1037), (-235354047));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -15860668 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test10630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10630");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.yearOfEra();
        org.joda.time.DurationField durationField17 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
    }

    @Test
    public void test10631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10631");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.yearOfCentury();
        long long15 = dateTimeField13.roundCeiling((long) 34537691);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 31535999931L + "'", long15 == 31535999931L);
    }

    @Test
    public void test10632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10632");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField16 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.weekyear();
        org.joda.time.DurationField durationField20 = iSOChronology13.millis();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.weekyear();
        org.joda.time.Chronology chronology22 = iSOChronology13.withUTC();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test10633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10633");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.minuteOfHour();
        java.lang.String str18 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+00:00:00.069]" + "'", str18, "ISOChronology[+00:00:00.069]");
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test10634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10634");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone17 = iSOChronology13.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology18.minuteOfHour();
        java.lang.String str20 = iSOChronology18.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+00:00:00.069]" + "'", str20, "ISOChronology[+00:00:00.069]");
    }

    @Test
    public void test10635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10635");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.hourOfHalfday();
        org.joda.time.DurationField durationField14 = iSOChronology8.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = durationField14.getMillis(599961600000L, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 599961600000 * 43200000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test10636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10636");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.monthOfYear();
        org.joda.time.DurationField durationField12 = iSOChronology8.centuries();
        org.joda.time.DurationField durationField13 = iSOChronology8.months();
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology8.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
    }

    @Test
    public void test10637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10637");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField16 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DurationField durationField18 = iSOChronology13.months();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str21 = dateTimeZone20.toString();
        java.lang.String str23 = dateTimeZone20.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        int int26 = dateTimeZone20.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone28 = iSOChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology27.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology27.year();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology27.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology27.era();
        org.joda.time.DurationField durationField34 = iSOChronology27.seconds();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.lang.String str37 = dateTimeZone36.toString();
        java.lang.String str39 = dateTimeZone36.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        int int42 = dateTimeZone36.getOffsetFromLocal((long) (short) -1);
        java.util.Locale locale44 = null;
        java.lang.String str45 = dateTimeZone36.getShortName(86400000L, locale44);
        org.joda.time.Chronology chronology46 = iSOChronology27.withZone(dateTimeZone36);
        org.joda.time.Chronology chronology47 = iSOChronology13.withZone(dateTimeZone36);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        java.lang.String str50 = dateTimeZone49.toString();
        java.lang.String str52 = dateTimeZone49.getShortName(1L);
        int int54 = dateTimeZone49.getOffsetFromLocal((long) (byte) 0);
        int int56 = dateTimeZone49.getStandardOffset((long) (short) 0);
        java.lang.String str57 = dateTimeZone49.getID();
        java.util.TimeZone timeZone58 = dateTimeZone49.toTimeZone();
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        int int62 = dateTimeZone60.getOffsetFromLocal((long) (byte) 1);
        long long64 = dateTimeZone60.convertUTCToLocal(97L);
        java.lang.String str65 = dateTimeZone60.getID();
        long long69 = dateTimeZone60.convertLocalToUTC((long) 2, false, (long) 11);
        long long71 = dateTimeZone49.getMillisKeepLocal(dateTimeZone60, 25253283600000000L);
        org.joda.time.LocalDateTime localDateTime72 = null;
        boolean boolean73 = dateTimeZone60.isLocalDateTimeGap(localDateTime72);
        long long76 = dateTimeZone60.adjustOffset((-3599999L), true);
        org.joda.time.Chronology chronology77 = iSOChronology13.withZone(dateTimeZone60);
        org.joda.time.DateTimeField dateTimeField78 = iSOChronology13.year();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.069" + "'", str21, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.069" + "'", str23, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 69 + "'", int26 == 69);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.069" + "'", str37, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.069" + "'", str39, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 69 + "'", int42 == 69);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.069" + "'", str45, "+00:00:00.069");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.069" + "'", str50, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.069" + "'", str52, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 69 + "'", int54 == 69);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 69 + "'", int56 == 69);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.069" + "'", str57, "+00:00:00.069");
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 69 + "'", int62 == 69);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 166L + "'", long64 == 166L);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00:00.069" + "'", str65, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-67L) + "'", long69 == (-67L));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 25253283600000000L + "'", long71 == 25253283600000000L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-3599999L) + "'", long76 == (-3599999L));
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
    }

    @Test
    public void test10638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10638");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.millisOfDay();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        java.lang.String str16 = dateTimeZone13.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        int int19 = dateTimeZone13.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField21 = iSOChronology20.minutes();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology20.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology20.minuteOfHour();
        boolean boolean24 = iSOChronology8.equals((java.lang.Object) iSOChronology20);
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology20.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology20.secondOfDay();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology20.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.069" + "'", str14, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.069" + "'", str16, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 69 + "'", int19 == 69);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test10639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10639");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.months();
        org.joda.time.DurationFieldType durationFieldType12 = durationField11.getType();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = durationField11.add(28674L, (-75574475218043L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Magnitude of add amount is too large: -75574475218043");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationFieldType12);
    }

    @Test
    public void test10640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10640");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.hourOfDay();
        org.joda.time.DurationField durationField21 = iSOChronology13.millis();
        org.joda.time.DurationField durationField22 = iSOChronology13.hours();
        long long28 = iSOChronology13.getDateTimeMillis(5530035L, (int) (short) 0, 7, (int) ' ', 3);
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((-52));
        long long35 = dateTimeZone32.adjustOffset((long) (-800), false);
        long long38 = dateTimeZone32.convertLocalToUTC(49L, false);
        org.joda.time.Chronology chronology39 = iSOChronology13.withZone(dateTimeZone32);
        org.joda.time.DurationField durationField40 = iSOChronology13.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 451934L + "'", long28 == 451934L);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-800L) + "'", long35 == (-800L));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 101L + "'", long38 == 101L);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test10641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10641");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DurationField durationField16 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField17 = iSOChronology13.millis();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test10642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10642");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField16 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone18 = iSOChronology13.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
    }

    @Test
    public void test10643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10643");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfDay();
        org.joda.time.Chronology chronology18 = iSOChronology13.withUTC();
        org.joda.time.DurationField durationField19 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.monthOfYear();
        org.joda.time.DurationField durationField23 = iSOChronology13.centuries();
        long long26 = durationField23.getMillis((int) (byte) 10, 349200029L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 31556995200000L + "'", long26 == 31556995200000L);
    }

    @Test
    public void test10644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10644");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfDay();
        org.joda.time.DurationField durationField18 = iSOChronology13.days();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.hourOfHalfday();
        org.joda.time.ReadablePartial readablePartial20 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray22 = iSOChronology13.get(readablePartial20, 25252904995200000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test10645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10645");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test10646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10646");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfYear();
        org.joda.time.DurationField durationField14 = iSOChronology8.millis();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str17 = dateTimeZone16.toString();
        java.lang.String str19 = dateTimeZone16.getShortName(1L);
        int int21 = dateTimeZone16.getOffsetFromLocal((long) (byte) 0);
        int int23 = dateTimeZone16.getStandardOffset((long) (short) 0);
        java.lang.String str24 = dateTimeZone16.getID();
        long long27 = dateTimeZone16.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField29 = iSOChronology28.months();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology28.secondOfDay();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology28.secondOfMinute();
        org.joda.time.DurationField durationField33 = iSOChronology28.months();
        boolean boolean34 = iSOChronology8.equals((java.lang.Object) durationField33);
        org.joda.time.DurationField durationField35 = iSOChronology8.weeks();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology8.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.069" + "'", str17, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.069" + "'", str19, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 69 + "'", int21 == 69);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 69 + "'", int23 == 69);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.069" + "'", str24, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-69L) + "'", long27 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test10647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10647");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        long long3 = dateTimeZone1.previousTransition((long) 'a');
        java.lang.String str4 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        boolean boolean7 = dateTimeZone1.equals((java.lang.Object) 187200097L);
        java.util.TimeZone timeZone8 = dateTimeZone1.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '+00:00:00.069' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 97L + "'", long3 == 97L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test10648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10648");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test10649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10649");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DurationField durationField10 = iSOChronology8.months();
        java.lang.String str11 = iSOChronology8.toString();
        org.joda.time.DurationField durationField12 = iSOChronology8.years();
        org.joda.time.DurationField durationField13 = iSOChronology8.seconds();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long23 = iSOChronology8.getDateTimeMillis(1182, 24804921, 2342, (-1), (-182074498), (-18253), 999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+00:00:00.069]" + "'", str11, "ISOChronology[+00:00:00.069]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test10650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10650");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test10651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10651");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DurationField durationField20 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.clockhourOfDay();
        org.joda.time.DurationField durationField25 = iSOChronology13.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test10652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10652");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField12 = iSOChronology8.years();
        org.joda.time.DurationField durationField13 = iSOChronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.year();
        org.joda.time.DurationField durationField15 = iSOChronology8.millis();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.millisOfDay();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        java.lang.String str21 = dateTimeZone18.getShortName(1L);
        int int23 = dateTimeZone18.getOffsetFromLocal((long) (byte) 0);
        int int25 = dateTimeZone18.getStandardOffset((long) (short) 0);
        java.lang.String str26 = dateTimeZone18.getID();
        long long29 = dateTimeZone18.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone18);
        org.joda.time.DurationField durationField31 = iSOChronology30.months();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology30.hourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology30.yearOfEra();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology30.clockhourOfDay();
        org.joda.time.DurationField durationField35 = iSOChronology30.millis();
        boolean boolean36 = iSOChronology8.equals((java.lang.Object) iSOChronology30);
        org.joda.time.DurationField durationField37 = iSOChronology8.years();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology8.clockhourOfHalfday();
        java.util.Locale locale42 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long43 = dateTimeField39.set(187200011L, "weekOfWeekyear", locale42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"weekOfWeekyear\" for clockhourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.069" + "'", str19, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.069" + "'", str21, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 69 + "'", int23 == 69);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 69 + "'", int25 == 69);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.069" + "'", str26, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-69L) + "'", long29 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test10653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10653");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfDay();
        java.lang.String str18 = iSOChronology13.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+00:00:00.069]" + "'", str18, "ISOChronology[+00:00:00.069]");
    }

    @Test
    public void test10654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10654");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DurationField durationField20 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.yearOfCentury();
        org.joda.time.DurationField durationField24 = iSOChronology13.seconds();
        org.joda.time.DurationField durationField25 = iSOChronology13.centuries();
        org.joda.time.DurationField durationField26 = iSOChronology13.weekyears();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test10655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10655");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.Chronology chronology19 = iSOChronology13.withUTC();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = chronology19.add(readablePeriod20, (-62072438400004L), (-36059035));
        org.joda.time.DateTimeField dateTimeField24 = chronology19.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.secondOfMinute();
        org.joda.time.DurationField durationField26 = dateTimeField25.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-62072438400004L) + "'", long23 == (-62072438400004L));
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test10656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10656");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DurationField durationField13 = iSOChronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test10657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10657");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.weekyearOfCentury();
        long long22 = iSOChronology13.add((long) (short) 100, 0L, 3);
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.secondOfDay();
        long long26 = dateTimeField24.roundFloor((-157748400000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L + "'", long22 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-157748400069L) + "'", long26 == (-157748400069L));
    }

    @Test
    public void test10658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10658");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField20 = iSOChronology13.hours();
        org.joda.time.DurationField durationField21 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.clockhourOfDay();
        org.joda.time.DurationField durationField27 = iSOChronology13.months();
        org.joda.time.DurationField durationField28 = iSOChronology13.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test10659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10659");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.minuteOfDay();
        long long22 = iSOChronology13.getDateTimeMillis(23, (int) (byte) 1, 3, 3);
        org.joda.time.DurationField durationField23 = iSOChronology13.weeks();
        long long24 = durationField23.getUnitMillis();
        long long27 = durationField23.getValueAsLong(12177999L, 98L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-61441200000066L) + "'", long22 == (-61441200000066L));
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 604800000L + "'", long24 == 604800000L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test10660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10660");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.yearOfCentury();
        long long23 = iSOChronology13.getDateTimeMillis(187200000, (int) (short) 1, (int) (byte) 10, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.hourOfDay();
        org.joda.time.DurationField durationField25 = iSOChronology13.months();
        java.lang.String str26 = iSOChronology13.toString();
        org.joda.time.DateTimeZone dateTimeZone27 = iSOChronology13.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long32 = iSOChronology13.getDateTimeMillis((-5), (-28), 8904, (-3660000));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -3660000 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 5907399247958400031L + "'", long23 == 5907399247958400031L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[+00:00:00.069]" + "'", str26, "ISOChronology[+00:00:00.069]");
        org.junit.Assert.assertNotNull(dateTimeZone27);
    }

    @Test
    public void test10661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10661");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DurationField durationField22 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.yearOfEra();
        org.joda.time.DurationField durationField25 = iSOChronology13.centuries();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test10662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10662");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        boolean boolean4 = dateTimeZone1.isStandardOffset(259200100L);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getName((-7337397769370670892L), locale6);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.069" + "'", str7, "+00:00:00.069");
    }

    @Test
    public void test10663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10663");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.yearOfEra();
        org.joda.time.DurationField durationField9 = iSOChronology7.seconds();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology7.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology7.era();
        org.joda.time.Chronology chronology12 = iSOChronology7.withUTC();
        org.joda.time.DurationField durationField13 = iSOChronology7.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test10664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10664");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        long long24 = iSOChronology13.add(86400000L, (-30844800000L), (int) ' ');
        org.joda.time.DurationField durationField25 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.weekyearOfCentury();
        long long30 = dateTimeField28.roundCeiling(0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-986947200000L) + "'", long24 == (-986947200000L));
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 31535999931L + "'", long30 == 31535999931L);
    }

    @Test
    public void test10665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10665");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = iSOChronology8.add(readablePeriod14, (long) 'a', (-1));
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.dayOfMonth();
        org.joda.time.DurationField durationField19 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField20 = iSOChronology8.seconds();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.lang.String str23 = dateTimeZone22.toString();
        java.lang.String str25 = dateTimeZone22.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        long long28 = dateTimeZone22.convertUTCToLocal((long) (byte) 10);
        long long31 = dateTimeZone22.convertLocalToUTC((long) 292278993, false);
        long long34 = dateTimeZone22.convertLocalToUTC((long) 12, true);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone22.getShortName(4052003L, locale36);
        org.joda.time.Chronology chronology38 = iSOChronology8.withZone(dateTimeZone22);
        long long42 = iSOChronology8.add((-172800000L), (-324393089L), 240);
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology8.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 97L + "'", long17 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.069" + "'", str23, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.069" + "'", str25, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 79L + "'", long28 == 79L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 292278924L + "'", long31 == 292278924L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-57L) + "'", long34 == (-57L));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.069" + "'", str37, "+00:00:00.069");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-78027141360L) + "'", long42 == (-78027141360L));
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test10666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10666");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.minutes();
        org.joda.time.DurationField durationField16 = iSOChronology13.weeks();
        org.joda.time.DurationField durationField17 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.secondOfDay();
        org.joda.time.DurationField durationField21 = iSOChronology13.millis();
        long long24 = durationField21.add(810232000L, (int) '4');
        long long26 = durationField21.getValueAsLong(1800024L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 810232052L + "'", long24 == 810232052L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1800024L + "'", long26 == 1800024L);
    }

    @Test
    public void test10667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10667");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfWeek();
        long long21 = dateTimeField19.roundHalfEven(727878993L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 691199931L + "'", long21 == 691199931L);
    }

    @Test
    public void test10668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10668");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DurationField durationField17 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.era();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField23 = iSOChronology13.days();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.era();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test10669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10669");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.dayOfMonth();
        org.joda.time.DurationField durationField17 = iSOChronology8.days();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test10670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10670");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.weekyear();
        org.joda.time.DurationField durationField16 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.secondOfMinute();
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeField20.getAsText(6156898243200000L, locale22);
        org.joda.time.DurationField durationField24 = dateTimeField20.getRangeDurationField();
        long long27 = dateTimeField20.add(3900000L, 17268595);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0" + "'", str23, "0");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 17272495000L + "'", long27 == 17272495000L);
    }

    @Test
    public void test10671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10671");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.centuryOfEra();
        boolean boolean5 = dateTimeField4.isSupported();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test10672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10672");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        java.util.TimeZone timeZone8 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str11 = dateTimeZone10.toString();
        java.lang.String str13 = dateTimeZone10.getShortName(1L);
        int int15 = dateTimeZone10.getOffsetFromLocal((long) (byte) 0);
        int int17 = dateTimeZone10.getStandardOffset((long) (short) 0);
        java.lang.String str18 = dateTimeZone10.getID();
        long long21 = dateTimeZone10.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology22.dayOfYear();
        org.joda.time.DurationField durationField25 = iSOChronology22.weeks();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology22.yearOfCentury();
        org.joda.time.DurationField durationField27 = iSOChronology22.years();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology22.minuteOfHour();
        org.joda.time.DurationField durationField29 = iSOChronology22.years();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology22.weekyearOfCentury();
        boolean boolean31 = dateTimeZone1.equals((java.lang.Object) iSOChronology22);
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology22.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.069" + "'", str11, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.069" + "'", str13, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 69 + "'", int15 == 69);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 69 + "'", int17 == 69);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.069" + "'", str18, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-69L) + "'", long21 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test10673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10673");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfYear();
        long long21 = dateTimeField19.roundHalfCeiling((-176400000L));
        long long24 = dateTimeField19.addWrapField((-22463994420000L), 11);
        java.util.Locale locale27 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long28 = dateTimeField19.set(349200097L, "minuteOfDay", locale27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"minuteOfDay\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-172800069L) + "'", long21 == (-172800069L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-22463044020000L) + "'", long24 == (-22463044020000L));
    }

    @Test
    public void test10674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10674");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str3 = dateTimeZone1.getID();
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        java.lang.String str5 = dateTimeZone1.toString();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone8 = iSOChronology6.getZone();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology6.clockhourOfHalfday();
        org.joda.time.ReadablePartial readablePartial10 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray12 = iSOChronology6.get(readablePartial10, (-757366839389L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.069" + "'", str3, "+00:00:00.069");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.069" + "'", str5, "+00:00:00.069");
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test10675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10675");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField21 = iSOChronology13.months();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test10676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10676");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        java.lang.String str17 = iSOChronology13.toString();
        org.joda.time.DurationField durationField18 = iSOChronology13.centuries();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = iSOChronology13.add(readablePeriod20, 5520000L, (int) '4');
        org.joda.time.DurationField durationField24 = iSOChronology13.millis();
        org.joda.time.ReadablePartial readablePartial25 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long27 = iSOChronology13.set(readablePartial25, 5462385L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[+00:00:00.069]" + "'", str17, "ISOChronology[+00:00:00.069]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 5520000L + "'", long23 == 5520000L);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test10677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10677");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        boolean boolean3 = dateTimeZone1.isStandardOffset(0L);
        java.lang.String str5 = dateTimeZone1.getShortName(946966395055L);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone1.getShortName(187200074L, locale7);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone1.isLocalDateTimeGap(localDateTime9);
        long long12 = dateTimeZone1.previousTransition(1899258L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+100:00" + "'", str5, "+100:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+100:00" + "'", str8, "+100:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1899258L + "'", long12 == 1899258L);
    }

    @Test
    public void test10678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10678");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.hourOfHalfday();
        org.joda.time.DurationField durationField17 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.era();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.monthOfYear();
        org.joda.time.DurationField durationField20 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test10679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10679");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfDay();
        java.lang.String str19 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone21 = iSOChronology13.getZone();
        java.lang.String str23 = dateTimeZone21.getNameKey((-62009553600000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+00:00:00.069]" + "'", str19, "ISOChronology[+00:00:00.069]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test10680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10680");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.adjustOffset(0L, true);
        long long16 = dateTimeZone1.convertLocalToUTC(540032L, true, (long) (-292275054));
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = dateTimeZone1.getOffset(readableInstant17);
        long long20 = dateTimeZone1.convertUTCToLocal((long) '#');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str24 = dateTimeZone1.getNameKey((long) 48);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 539963L + "'", long16 == 539963L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 69 + "'", int18 == 69);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 104L + "'", long20 == 104L);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test10681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10681");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.Chronology chronology16 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = dateTimeField19.set((-48780965L), 86401870);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86401870 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test10682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10682");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField18 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.secondOfDay();
        org.joda.time.DurationField durationField23 = iSOChronology13.days();
        int int26 = durationField23.getValue((-59943280199997L), (long) 863999);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-693787) + "'", int26 == (-693787));
    }

    @Test
    public void test10683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10683");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            long long30 = iSOChronology13.getDateTimeMillis((int) (byte) 0, 29, (-28664), 1439);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 29 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test10684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10684");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology20 = iSOChronology13.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.millisOfSecond();
        org.joda.time.DurationField durationField22 = iSOChronology13.minutes();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.lang.String str25 = dateTimeZone24.toString();
        java.lang.String str27 = dateTimeZone24.getShortName(1L);
        int int29 = dateTimeZone24.getOffsetFromLocal((long) (byte) 0);
        int int31 = dateTimeZone24.getStandardOffset((long) (short) 0);
        java.lang.String str32 = dateTimeZone24.getID();
        long long35 = dateTimeZone24.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology36.minuteOfHour();
        org.joda.time.DurationField durationField39 = iSOChronology36.days();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology36.hourOfHalfday();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.lang.String str44 = dateTimeZone42.getNameKey(10L);
        long long46 = dateTimeZone42.previousTransition(0L);
        org.joda.time.Chronology chronology47 = iSOChronology36.withZone(dateTimeZone42);
        boolean boolean49 = dateTimeZone42.isStandardOffset((long) 11);
        java.lang.String str51 = dateTimeZone42.getName(3155695200000L);
        org.joda.time.Chronology chronology52 = iSOChronology13.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology13.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.069" + "'", str25, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.069" + "'", str27, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 69 + "'", int29 == 69);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 69 + "'", int31 == 69);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.069" + "'", str32, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-69L) + "'", long35 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.069" + "'", str51, "+00:00:00.069");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
    }

    @Test
    public void test10685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10685");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long23 = iSOChronology13.getDateTimeMillis(259200100L, 11, (int) (byte) 10, (int) (short) 10, (int) ' ');
        org.joda.time.DurationField durationField24 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.dayOfMonth();
        org.joda.time.DurationField durationField28 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField29 = iSOChronology13.hours();
        long long32 = durationField29.getMillis(23, 757366848000L);
        long long35 = durationField29.add(0L, (-1956531023948L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 299409963L + "'", long23 == 299409963L);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 82800000L + "'", long32 == 82800000L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-7043511686212800000L) + "'", long35 == (-7043511686212800000L));
    }

    @Test
    public void test10686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10686");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField18 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) 'a');
        java.lang.String str22 = dateTimeZone21.getID();
        org.joda.time.Chronology chronology23 = iSOChronology13.withZone(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = iSOChronology13.getZone();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.lang.String str27 = dateTimeZone26.toString();
        java.lang.String str28 = dateTimeZone26.getID();
        long long32 = dateTimeZone26.convertLocalToUTC(10L, false, (long) '4');
        java.lang.String str34 = dateTimeZone26.getShortName((long) 'a');
        long long36 = dateTimeZone26.previousTransition(315532800000L);
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone26);
        boolean boolean38 = iSOChronology13.equals((java.lang.Object) dateTimeZone26);
        long long42 = dateTimeZone26.convertLocalToUTC((-1727999988L), true, (-3147997L));
        long long46 = dateTimeZone26.convertLocalToUTC(0L, false, 0L);
        org.joda.time.ReadableInstant readableInstant47 = null;
        int int48 = dateTimeZone26.getOffset(readableInstant47);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+97:00" + "'", str22, "+97:00");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.069" + "'", str27, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.069" + "'", str28, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-59L) + "'", long32 == (-59L));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.069" + "'", str34, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 315532800000L + "'", long36 == 315532800000L);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1728000057L) + "'", long42 == (-1728000057L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-69L) + "'", long46 == (-69L));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 69 + "'", int48 == 69);
    }

    @Test
    public void test10687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10687");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfWeek();
        org.joda.time.DurationField durationField14 = iSOChronology8.years();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test10688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10688");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        java.util.TimeZone timeZone10 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.lang.String str13 = dateTimeZone12.toString();
        java.lang.String str15 = dateTimeZone12.getShortName(1L);
        int int17 = dateTimeZone12.getOffsetFromLocal((long) (byte) 0);
        int int19 = dateTimeZone12.getStandardOffset((long) (short) 0);
        java.lang.String str20 = dateTimeZone12.getID();
        long long23 = dateTimeZone12.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField25 = iSOChronology24.months();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology24.secondOfDay();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology24.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology24.clockhourOfHalfday();
        org.joda.time.DurationField durationField30 = iSOChronology24.months();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology24.year();
        org.joda.time.DurationField durationField32 = iSOChronology24.hours();
        boolean boolean33 = dateTimeZone1.equals((java.lang.Object) iSOChronology24);
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology24.dayOfMonth();
        org.joda.time.Chronology chronology35 = iSOChronology24.withUTC();
        org.joda.time.DurationField durationField36 = iSOChronology24.centuries();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.069" + "'", str13, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.069" + "'", str15, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 69 + "'", int17 == 69);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 69 + "'", int19 == 69);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.069" + "'", str20, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-69L) + "'", long23 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test10689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10689");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DurationField durationField20 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.yearOfCentury();
        org.joda.time.DurationField durationField24 = iSOChronology13.seconds();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField26 = iSOChronology13.minutes();
        org.joda.time.DurationField durationField27 = iSOChronology13.millis();
        org.joda.time.DurationField durationField28 = iSOChronology13.weekyears();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test10690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10690");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeField10.getAsText((long) (short) -1, locale12);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeField10.getAsShortText((int) (short) 1, locale15);
        java.lang.String str18 = dateTimeField10.getAsShortText((-65905668L));
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeField10.getAsText(1031446, locale20);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0" + "'", str13, "0");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "41" + "'", str18, "41");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1031446" + "'", str21, "1031446");
    }

    @Test
    public void test10691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10691");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str3 = dateTimeZone1.getID();
        long long7 = dateTimeZone1.convertLocalToUTC(10L, false, (long) '4');
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str10 = dateTimeZone9.toString();
        java.lang.String str12 = dateTimeZone9.getShortName(1L);
        int int14 = dateTimeZone9.getOffsetFromLocal((long) (byte) 0);
        int int16 = dateTimeZone9.getStandardOffset((long) (short) 0);
        java.lang.String str17 = dateTimeZone9.getID();
        long long20 = dateTimeZone9.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField22 = iSOChronology21.months();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology21.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology21.centuryOfEra();
        boolean boolean28 = dateTimeZone1.equals((java.lang.Object) iSOChronology21);
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology21.hourOfDay();
        org.joda.time.ReadablePartial readablePartial31 = null;
        int int32 = dateTimeField30.getMinimumValue(readablePartial31);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.069" + "'", str3, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-59L) + "'", long7 == (-59L));
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.069" + "'", str10, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.069" + "'", str12, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 69 + "'", int14 == 69);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 69 + "'", int16 == 69);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.069" + "'", str17, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-69L) + "'", long20 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test10692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10692");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField10 = iSOChronology8.millis();
        org.joda.time.DurationField durationField11 = iSOChronology8.hours();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test10693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10693");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        java.lang.String str18 = iSOChronology13.toString();
        org.joda.time.DurationField durationField19 = iSOChronology13.millis();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+00:00:00.069]" + "'", str18, "ISOChronology[+00:00:00.069]");
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
    }

    @Test
    public void test10694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10694");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.minutes();
        java.lang.String str20 = durationField19.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DurationField[minutes]" + "'", str20, "DurationField[minutes]");
    }

    @Test
    public void test10695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10695");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        org.joda.time.Chronology chronology20 = iSOChronology13.withUTC();
        org.joda.time.DurationField durationField21 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField24 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test10696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10696");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test10697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10697");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = iSOChronology13.add(readablePeriod20, 3155760000053L, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField26 = iSOChronology13.weeks();
        org.joda.time.Chronology chronology27 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology13.hourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray33 = iSOChronology13.get(readablePeriod30, (-82859989L), (-59012154000000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3155760000053L + "'", long23 == 3155760000053L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test10698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10698");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.era();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.era();
        org.joda.time.DurationField durationField15 = iSOChronology8.months();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str18 = dateTimeZone17.toString();
        java.lang.String str20 = dateTimeZone17.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        int int23 = dateTimeZone17.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField25 = iSOChronology24.minutes();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology24.weekyear();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology24.year();
        boolean boolean30 = iSOChronology8.equals((java.lang.Object) dateTimeField29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = dateTimeField29.getType();
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeField29.getAsShortText(5819, locale33);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.069" + "'", str18, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.069" + "'", str20, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 69 + "'", int23 == 69);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "5819" + "'", str34, "5819");
    }

    @Test
    public void test10699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10699");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.monthOfYear();
        org.joda.time.ReadablePartial readablePartial26 = null;
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.lang.String str29 = dateTimeZone28.toString();
        java.lang.String str31 = dateTimeZone28.getShortName(1L);
        int int33 = dateTimeZone28.getOffsetFromLocal((long) (byte) 0);
        int int35 = dateTimeZone28.getStandardOffset((long) (short) 0);
        java.lang.String str36 = dateTimeZone28.getID();
        long long39 = dateTimeZone28.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology40 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone28);
        org.joda.time.DurationField durationField41 = iSOChronology40.months();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology40.secondOfDay();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology40.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology40.clockhourOfHalfday();
        org.joda.time.DurationField durationField46 = iSOChronology40.centuries();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology40.weekOfWeekyear();
        org.joda.time.DurationField durationField48 = iSOChronology40.seconds();
        org.joda.time.DurationField durationField49 = iSOChronology40.weeks();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology40.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology40.monthOfYear();
        org.joda.time.ReadablePartial readablePartial52 = null;
        int[] intArray53 = new int[] {};
        int int54 = dateTimeField51.getMaximumValue(readablePartial52, intArray53);
        // The following exception was thrown during execution in test generation
        try {
            iSOChronology13.validate(readablePartial26, intArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.069" + "'", str29, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.069" + "'", str31, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 69 + "'", int33 == 69);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 69 + "'", int35 == 69);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.069" + "'", str36, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-69L) + "'", long39 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 12 + "'", int54 == 12);
    }

    @Test
    public void test10700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10700");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.halfdayOfDay();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str16 = dateTimeZone15.toString();
        java.lang.String str18 = dateTimeZone15.getShortName(1L);
        int int20 = dateTimeZone15.getOffsetFromLocal((long) (byte) 0);
        int int22 = dateTimeZone15.getStandardOffset((long) (short) 0);
        java.lang.String str23 = dateTimeZone15.getID();
        long long26 = dateTimeZone15.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField28 = iSOChronology27.months();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology27.secondOfDay();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology27.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology27.clockhourOfHalfday();
        org.joda.time.DurationField durationField33 = iSOChronology27.centuries();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology27.weekOfWeekyear();
        org.joda.time.DurationField durationField35 = iSOChronology27.seconds();
        org.joda.time.DurationField durationField36 = iSOChronology27.weeks();
        org.joda.time.DateTimeZone dateTimeZone37 = iSOChronology27.getZone();
        org.joda.time.Chronology chronology38 = iSOChronology8.withZone(dateTimeZone37);
        org.joda.time.DurationField durationField39 = iSOChronology8.minutes();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray42 = iSOChronology8.get(readablePeriod40, (-86280070L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.069" + "'", str16, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.069" + "'", str18, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 69 + "'", int20 == 69);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 69 + "'", int22 == 69);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.069" + "'", str23, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-69L) + "'", long26 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
    }

    @Test
    public void test10701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10701");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.era();
        long long22 = dateTimeField20.roundFloor((-143L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-62135596800069L) + "'", long22 == (-62135596800069L));
    }

    @Test
    public void test10702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10702");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField21 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField24 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test10703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10703");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone1.getOffset(readableInstant10);
        int int13 = dateTimeZone1.getOffsetFromLocal(32054400100L);
        org.joda.time.LocalDateTime localDateTime14 = null;
        boolean boolean15 = dateTimeZone1.isLocalDateTimeGap(localDateTime14);
        java.lang.String str17 = dateTimeZone1.getName((-69899L));
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.lang.String str20 = dateTimeZone19.toString();
        java.lang.String str22 = dateTimeZone19.getShortName(1L);
        int int24 = dateTimeZone19.getOffsetFromLocal((long) (byte) 0);
        int int26 = dateTimeZone19.getStandardOffset((long) (short) 0);
        java.lang.String str27 = dateTimeZone19.getID();
        long long30 = dateTimeZone19.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone32 = iSOChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology31.weekyear();
        org.joda.time.ReadablePartial readablePartial34 = null;
        int[] intArray40 = new int[] { (short) 0, 10, 100, (-1), (byte) 100 };
        int int41 = dateTimeField33.getMaximumValue(readablePartial34, intArray40);
        java.util.Locale locale42 = null;
        int int43 = dateTimeField33.getMaximumTextLength(locale42);
        boolean boolean44 = dateTimeZone1.equals((java.lang.Object) dateTimeField33);
        int int46 = dateTimeField33.getMinimumValue((long) 65);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 69 + "'", int11 == 69);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 69 + "'", int13 == 69);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.069" + "'", str17, "+00:00:00.069");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.069" + "'", str20, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.069" + "'", str22, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 69 + "'", int24 == 69);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 69 + "'", int26 == 69);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.069" + "'", str27, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-69L) + "'", long30 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 10, 100, -1, 100]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 292278993 + "'", int41 == 292278993);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-292275054) + "'", int46 == (-292275054));
    }

    @Test
    public void test10704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10704");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.centuryOfEra();
        org.joda.time.DurationField durationField23 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test10705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10705");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfSecond();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str5 = dateTimeZone4.toString();
        java.lang.String str6 = dateTimeZone4.getID();
        long long9 = dateTimeZone4.convertLocalToUTC((long) 10, true);
        int int11 = dateTimeZone4.getStandardOffset(37440L);
        org.joda.time.Chronology chronology12 = iSOChronology0.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.millisOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.069" + "'", str5, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.069" + "'", str6, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-59L) + "'", long9 == (-59L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 69 + "'", int11 == 69);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test10706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10706");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.centuryOfEra();
        org.joda.time.DurationField durationField15 = iSOChronology8.months();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.era();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test10707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10707");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        int int13 = dateTimeField12.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test10708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10708");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfDay();
        org.joda.time.Chronology chronology18 = iSOChronology13.withUTC();
        org.joda.time.DurationField durationField19 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.monthOfYear();
        org.joda.time.DurationField durationField23 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.dayOfMonth();
        org.joda.time.DurationField durationField25 = iSOChronology13.months();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test10709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10709");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.monthOfYear();
        org.joda.time.DurationField durationField17 = iSOChronology13.months();
        org.joda.time.DurationField durationField18 = iSOChronology13.hours();
        org.joda.time.DurationField durationField19 = iSOChronology13.halfdays();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone21);
        java.lang.String str23 = dateTimeZone21.toString();
        org.joda.time.Chronology chronology24 = iSOChronology13.withZone(dateTimeZone21);
        // The following exception was thrown during execution in test generation
        try {
            long long30 = iSOChronology13.getDateTimeMillis(6340678912975L, 7011166, 1974887, 34, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 7011166 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-00:00:00.001" + "'", str23, "-00:00:00.001");
        org.junit.Assert.assertNotNull(chronology24);
    }

    @Test
    public void test10710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10710");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField12 = iSOChronology8.years();
        org.joda.time.DurationField durationField13 = iSOChronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.era();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.yearOfCentury();
        long long18 = dateTimeField15.addWrapField((-63158400001L), (-10360800));
        org.joda.time.ReadablePartial readablePartial19 = null;
        int[] intArray20 = null;
        int int21 = dateTimeField15.getMaximumValue(readablePartial19, intArray20);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-63158400001L) + "'", long18 == (-63158400001L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 99 + "'", int21 == 99);
    }

    @Test
    public void test10711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10711");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DurationField durationField21 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField22 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField23 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeField26.getAsShortText(readablePartial27, (-432300000), locale29);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-432300000" + "'", str30, "-432300000");
    }

    @Test
    public void test10712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10712");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology20 = iSOChronology13.withZone(dateTimeZone19);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone19.getName((-59079023999997L), locale22);
        long long27 = dateTimeZone19.convertLocalToUTC((long) 36000000, true, (-916944232190400000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 36000000L + "'", long27 == 36000000L);
    }

    @Test
    public void test10713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10713");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone18 = iSOChronology13.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((-61787750399988L));
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone18.getShortName(1482960L, locale22);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone18.getShortName(4733605913904000L, locale25);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.069" + "'", str2, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.069" + "'", str4, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.069" + "'", str9, "+00:00:00.069");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-69L) + "'", long12 == (-69L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.069" + "'", str23, "+00:00:00.069");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.069" + "'", str26, "+00:00:00.069");
    }

    @Test
    public void test10714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10714");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) 'a');
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        org.joda.time.Chronology chronology8 = iSOChronology3.withZone(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology3.hourOfHalfday();
        java.lang.String str10 = dateTimeField9.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+97:00" + "'", str6, "+97:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hourOfHalfday" + "'", str10, "hourOfHalfday");
    }

    @Test
    public void test10715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10715");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DurationField durationField16 = iSOChronology13.days();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.monthOfYear();
        org.joda.time.DurationField durationField21 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        java.util.TimeZone timeZone26 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = dateTimeZone28.getOffset(readableInstant29);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        long long34 = dateTimeZone28.getMillisKeepLocal(dateTimeZone32, (-6271200000L));
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone32);
        org.joda.time.Chronology chronology36 = iSOChronology13.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-6271200000L) + "'", long34 == (-6271200000L));
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test10716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10716");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.millisOfSecond();
        org.joda.time.DurationField durationField21 = iSOChronology13.seconds();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        long long25 = iSOChronology13.add(readablePeriod22, (long) 8904, 24);
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.weekyearOfCentury();
        java.util.Locale locale28 = null;
        int int29 = dateTimeField27.getMaximumShortTextLength(locale28);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 8904L + "'", long25 == 8904L);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
    }

    @Test
    public void test10717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10717");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test10718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10718");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfDay();
        java.lang.String str19 = iSOChronology13.toString();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str22 = dateTimeZone21.toString();
        java.lang.String str23 = dateTimeZone21.getID();
        int int25 = dateTimeZone21.getOffsetFromLocal(36059035L);
        org.joda.time.Chronology chronology26 = iSOChronology13.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.weekyear();
        org.joda.time.DurationField durationField28 = iSOChronology13.hours();
        org.joda.time.DurationField durationField29 = iSOChronology13.millis();
        long long32 = durationField29.getMillis(536399999L, (-19286400631921007L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+52:00]" + "'", str19, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+52:00" + "'", str22, "+52:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+52:00" + "'", str23, "+52:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 187200000 + "'", int25 == 187200000);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 536399999L + "'", long32 == 536399999L);
    }

    @Test
    public void test10719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10719");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.clockhourOfDay();
        org.joda.time.DurationField durationField14 = iSOChronology8.hours();
        org.joda.time.Chronology chronology15 = iSOChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = iSOChronology8.getZone();
        long long20 = dateTimeZone18.convertUTCToLocal((long) (short) 0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 187200000L + "'", long20 == 187200000L);
    }

    @Test
    public void test10720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10720");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology13.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField18 = iSOChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology17.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology17.weekyearOfCentury();
        org.joda.time.DurationField durationField21 = iSOChronology17.minutes();
        java.lang.String str22 = durationField21.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "minutes" + "'", str22, "minutes");
    }

    @Test
    public void test10721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10721");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField18 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.secondOfDay();
        org.joda.time.DurationField durationField23 = iSOChronology13.days();
        long long27 = iSOChronology13.add(777600000L, 0L, (-223199999));
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.centuryOfEra();
        org.joda.time.DurationField durationField29 = iSOChronology13.weeks();
        int int31 = durationField29.getValue(3800005959L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 777600000L + "'", long27 == 777600000L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
    }

    @Test
    public void test10722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10722");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField20 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.yearOfCentury();
        org.joda.time.DurationField durationField24 = iSOChronology13.months();
        org.joda.time.DurationField durationField25 = iSOChronology13.weeks();
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.lang.String str28 = dateTimeZone27.toString();
        java.lang.String str30 = dateTimeZone27.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        int int33 = dateTimeZone27.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone35 = iSOChronology34.getZone();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology34.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology34.year();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology34.millisOfDay();
        java.lang.Object obj39 = null;
        boolean boolean40 = iSOChronology34.equals(obj39);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        boolean boolean44 = dateTimeZone42.equals((java.lang.Object) true);
        long long46 = dateTimeZone42.previousTransition((long) 10);
        int int48 = dateTimeZone42.getStandardOffset((long) ' ');
        org.joda.time.Chronology chronology49 = iSOChronology34.withZone(dateTimeZone42);
        org.joda.time.Chronology chronology50 = iSOChronology13.withZone(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+52:00" + "'", str28, "+52:00");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+52:00" + "'", str30, "+52:00");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 187200000 + "'", int33 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology50);
    }

    @Test
    public void test10723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10723");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.hourOfHalfday();
        org.joda.time.DurationField durationField14 = iSOChronology8.centuries();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.secondOfDay();
        org.joda.time.DurationField durationField16 = iSOChronology8.weekyears();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = iSOChronology8.getDateTimeMillis(187200053, (-824937624), 65, 48, 34537691, (int) (byte) 1, 2067242);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 48 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test10724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10724");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.centuryOfEra();
        org.joda.time.DurationField durationField14 = iSOChronology8.years();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test10725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10725");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField20 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.millisOfSecond();
        org.joda.time.DurationField durationField22 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial25 = null;
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeField24.getAsShortText(readablePartial25, 1710211567, locale27);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1710211567" + "'", str28, "1710211567");
    }

    @Test
    public void test10726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10726");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str3 = dateTimeZone1.getID();
        long long6 = dateTimeZone1.convertLocalToUTC((long) 10, true);
        int int8 = dateTimeZone1.getStandardOffset(37440L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str11 = dateTimeZone10.toString();
        java.lang.String str13 = dateTimeZone10.getShortName(1L);
        int int15 = dateTimeZone10.getOffsetFromLocal((long) (byte) 0);
        int int17 = dateTimeZone10.getStandardOffset((long) (short) 0);
        java.lang.String str18 = dateTimeZone10.getID();
        long long21 = dateTimeZone10.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology22.minuteOfHour();
        org.joda.time.DurationField durationField25 = iSOChronology22.days();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology22.dayOfWeek();
        org.joda.time.DurationField durationField28 = iSOChronology22.centuries();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology22.year();
        org.joda.time.DurationField durationField30 = iSOChronology22.months();
        boolean boolean31 = dateTimeZone1.equals((java.lang.Object) iSOChronology22);
        org.joda.time.Chronology chronology32 = iSOChronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = dateTimeField33.getType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+52:00" + "'", str3, "+52:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-187199990L) + "'", long6 == (-187199990L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+52:00" + "'", str11, "+52:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+52:00" + "'", str13, "+52:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 187200000 + "'", int15 == 187200000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 187200000 + "'", int17 == 187200000);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+52:00" + "'", str18, "+52:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-187200000L) + "'", long21 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
    }

    @Test
    public void test10727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10727");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField18 = iSOChronology13.halfdays();
        long long21 = durationField18.getDifferenceAsLong((long) 100, (-701340001L));
        long long23 = durationField18.getMillis(187200002L);
        int int26 = durationField18.getDifference(36004L, 0L);
        long long29 = durationField18.getValueAsLong(223107651979200000L, 0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 16L + "'", long21 == 16L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 8087040086400000L + "'", long23 == 8087040086400000L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 5164528981L + "'", long29 == 5164528981L);
    }

    @Test
    public void test10728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10728");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test10729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10729");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone2);
        org.joda.time.DurationField durationField4 = iSOChronology3.weeks();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology3.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = iSOChronology3.getDateTimeMillis(3, 35, 213039817, 86399999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test10730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10730");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone18 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.weekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long26 = iSOChronology13.getDateTimeMillis(115501468320360000L, (-722551), 4839, (-635521862), 1071900095);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -722551 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
    }

    @Test
    public void test10731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10731");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DurationField durationField16 = iSOChronology13.weeks();
        org.joda.time.Chronology chronology17 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.secondOfMinute();
        java.lang.String str20 = dateTimeField19.toString();
        java.util.Locale locale21 = null;
        int int22 = dateTimeField19.getMaximumTextLength(locale21);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = dateTimeField19.set((long) (byte) 10, "+05:00");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"+05:00\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DateTimeField[secondOfMinute]" + "'", str20, "DateTimeField[secondOfMinute]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
    }

    @Test
    public void test10732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10732");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DurationField durationField10 = iSOChronology8.halfdays();
        org.joda.time.DurationField durationField11 = iSOChronology8.weeks();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.millisOfDay();
        org.joda.time.DurationField durationField14 = iSOChronology8.hours();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.dayOfWeek();
        int int17 = dateTimeField15.getLeapAmount(9025200000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test10733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10733");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfDay();
        org.joda.time.DurationField durationField18 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.dayOfWeek();
        org.joda.time.ReadablePartial readablePartial21 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long23 = iSOChronology13.set(readablePartial21, 7L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test10734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10734");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.hourOfDay();
        int int19 = dateTimeField16.getDifference(97L, 86400000L);
        org.joda.time.ReadablePartial readablePartial20 = null;
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeField16.getAsText(readablePartial20, 148830006, locale22);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-23) + "'", int19 == (-23));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "148830006" + "'", str23, "148830006");
    }

    @Test
    public void test10735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10735");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime14 = null;
        boolean boolean15 = dateTimeZone1.isLocalDateTimeGap(localDateTime14);
        int int17 = dateTimeZone1.getOffset((long) 24);
        java.lang.String str19 = dateTimeZone1.getShortName((long) (-11760));
        java.lang.String str21 = dateTimeZone1.getName((long) 2342);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 187200000 + "'", int17 == 187200000);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+52:00" + "'", str19, "+52:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+52:00" + "'", str21, "+52:00");
    }

    @Test
    public void test10736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10736");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DurationField durationField16 = iSOChronology13.days();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str22 = dateTimeZone21.toString();
        java.lang.String str24 = dateTimeZone21.getShortName(1L);
        int int26 = dateTimeZone21.getOffsetFromLocal((long) (byte) 0);
        int int28 = dateTimeZone21.getStandardOffset((long) (short) 0);
        java.lang.String str29 = dateTimeZone21.getID();
        long long32 = dateTimeZone21.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone21);
        org.joda.time.DurationField durationField34 = iSOChronology33.months();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology33.secondOfDay();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology33.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology33.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology33.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology33.yearOfEra();
        org.joda.time.Chronology chronology40 = iSOChronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology33.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone42 = iSOChronology33.getZone();
        java.lang.String str44 = dateTimeZone42.getName((long) (short) 10);
        long long46 = dateTimeZone42.convertUTCToLocal(10L);
        org.joda.time.Chronology chronology47 = iSOChronology13.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology13.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+52:00" + "'", str22, "+52:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+52:00" + "'", str24, "+52:00");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 187200000 + "'", int26 == 187200000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 187200000 + "'", int28 == 187200000);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+52:00" + "'", str29, "+52:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-187200000L) + "'", long32 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+52:00" + "'", str44, "+52:00");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 187200010L + "'", long46 == 187200010L);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test10737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10737");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.monthOfYear();
        org.joda.time.DurationField durationField17 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.centuryOfEra();
        org.joda.time.ReadablePartial readablePartial20 = null;
        int int21 = dateTimeField19.getMinimumValue(readablePartial20);
        org.joda.time.ReadablePartial readablePartial22 = null;
        java.util.Locale locale23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = dateTimeField19.getAsText(readablePartial22, locale23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test10738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10738");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfDay();
        java.lang.String str19 = iSOChronology13.toString();
        org.joda.time.DurationField durationField20 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.minuteOfHour();
        org.joda.time.DurationField durationField22 = iSOChronology13.months();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+52:00]" + "'", str19, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test10739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10739");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DurationField durationField16 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long19 = dateTimeField17.roundHalfEven(53L);
        boolean boolean20 = dateTimeField17.isLenient();
        java.lang.String str21 = dateTimeField17.toString();
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeField17.getAsShortText(1, locale23);
        org.joda.time.ReadablePartial readablePartial25 = null;
        int int26 = dateTimeField17.getMaximumValue(readablePartial25);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-187200000L) + "'", long19 == (-187200000L));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DateTimeField[yearOfCentury]" + "'", str21, "DateTimeField[yearOfCentury]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 99 + "'", int26 == 99);
    }

    @Test
    public void test10740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10740");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.centuryOfEra();
        java.lang.String str19 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.dayOfWeek();
        org.joda.time.ReadablePartial readablePartial21 = null;
        int int22 = dateTimeField20.getMinimumValue(readablePartial21);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+52:00]" + "'", str19, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test10741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10741");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField10 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField11 = iSOChronology8.months();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfDay();
        org.joda.time.DurationField durationField13 = iSOChronology8.seconds();
        org.joda.time.DurationField durationField14 = iSOChronology8.days();
        org.joda.time.DurationField durationField15 = iSOChronology8.weekyears();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.secondOfMinute();
        org.joda.time.DurationField durationField17 = iSOChronology8.minutes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test10742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10742");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DurationField durationField16 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.dayOfMonth();
        int int21 = dateTimeField20.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 31 + "'", int21 == 31);
    }

    @Test
    public void test10743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10743");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DurationField durationField16 = iSOChronology13.days();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.monthOfYear();
        org.joda.time.DurationField durationField19 = iSOChronology13.weeks();
        org.joda.time.DurationField durationField20 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test10744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10744");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.centuryOfEra();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str17 = dateTimeZone16.toString();
        java.lang.String str19 = dateTimeZone16.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        long long22 = dateTimeZone16.convertUTCToLocal((long) (byte) 10);
        long long25 = dateTimeZone16.convertLocalToUTC((long) 292278993, false);
        org.joda.time.Chronology chronology26 = iSOChronology8.withZone(dateTimeZone16);
        org.joda.time.DurationField durationField27 = iSOChronology8.centuries();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology8.dayOfWeek();
        boolean boolean30 = dateTimeField29.isLenient();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+52:00" + "'", str17, "+52:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+52:00" + "'", str19, "+52:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 187200010L + "'", long22 == 187200010L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 105078993L + "'", long25 == 105078993L);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test10745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10745");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.secondOfMinute();
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeField13.getAsText((long) ' ', locale15);
        org.joda.time.DurationField durationField17 = dateTimeField13.getLeapDurationField();
        int int19 = dateTimeField13.getMinimumValue(25252904940000L);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = dateTimeField13.getDifference(1050846574447756L, (long) 35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1050846574447");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
        org.junit.Assert.assertNull(durationField17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test10746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10746");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.minuteOfDay();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str17 = dateTimeZone16.toString();
        java.lang.String str19 = dateTimeZone16.getShortName(1L);
        int int21 = dateTimeZone16.getOffsetFromLocal((long) (byte) 0);
        int int23 = dateTimeZone16.getStandardOffset((long) (short) 0);
        java.lang.String str24 = dateTimeZone16.getID();
        long long27 = dateTimeZone16.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField29 = iSOChronology28.months();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology28.secondOfDay();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology28.clockhourOfHalfday();
        org.joda.time.DurationField durationField34 = iSOChronology28.centuries();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology28.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology28.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology28.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = iSOChronology28.getZone();
        org.joda.time.LocalDateTime localDateTime42 = null;
        boolean boolean43 = dateTimeZone41.isLocalDateTimeGap(localDateTime42);
        org.joda.time.Chronology chronology44 = iSOChronology8.withZone(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+52:00" + "'", str17, "+52:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+52:00" + "'", str19, "+52:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 187200000 + "'", int21 == 187200000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 187200000 + "'", int23 == 187200000);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+52:00" + "'", str24, "+52:00");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-187200000L) + "'", long27 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
    }

    @Test
    public void test10747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10747");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology2.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
    }

    @Test
    public void test10748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10748");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.monthOfYear();
        org.joda.time.DurationField durationField21 = iSOChronology13.seconds();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str24 = dateTimeZone23.toString();
        java.lang.String str25 = dateTimeZone23.getID();
        java.util.TimeZone timeZone26 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        int int29 = dateTimeZone23.getStandardOffset(0L);
        int int31 = dateTimeZone23.getStandardOffset((long) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        java.lang.String str34 = dateTimeZone23.getName(2L);
        org.joda.time.Chronology chronology35 = iSOChronology13.withZone(dateTimeZone23);
        long long37 = dateTimeZone23.nextTransition((-59079020399997L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+52:00" + "'", str24, "+52:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+52:00" + "'", str25, "+52:00");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 187200000 + "'", int29 == 187200000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 187200000 + "'", int31 == 187200000);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+52:00" + "'", str34, "+52:00");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-59079020399997L) + "'", long37 == (-59079020399997L));
    }

    @Test
    public void test10749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10749");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) (byte) 1);
        long long5 = dateTimeZone1.convertUTCToLocal(97L);
        java.lang.String str6 = dateTimeZone1.getID();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str9 = dateTimeZone8.toString();
        java.lang.String str11 = dateTimeZone8.getShortName(1L);
        int int13 = dateTimeZone8.getOffsetFromLocal((long) (byte) 0);
        int int15 = dateTimeZone8.getStandardOffset((long) (short) 0);
        java.lang.String str16 = dateTimeZone8.getID();
        long long19 = dateTimeZone8.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField21 = iSOChronology20.months();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology20.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology20.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology20.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology20.minuteOfDay();
        org.joda.time.DurationField durationField26 = iSOChronology20.weekyears();
        org.joda.time.DurationField durationField27 = iSOChronology20.hours();
        org.joda.time.DurationField durationField28 = iSOChronology20.hours();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology20.year();
        boolean boolean30 = dateTimeZone1.equals((java.lang.Object) iSOChronology20);
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology20.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology20.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology20.millisOfDay();
        org.joda.time.DurationField durationField34 = iSOChronology20.hours();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology20.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 187200000 + "'", int3 == 187200000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 187200097L + "'", long5 == 187200097L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+52:00" + "'", str6, "+52:00");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+52:00" + "'", str11, "+52:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 187200000 + "'", int13 == 187200000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 187200000 + "'", int15 == 187200000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+52:00" + "'", str16, "+52:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-187200000L) + "'", long19 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test10750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10750");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DurationField durationField16 = iSOChronology13.eras();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray20 = iSOChronology13.get(readablePeriod18, (-5907458258704800000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test10751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10751");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.secondOfMinute();
        java.lang.String str20 = dateTimeField18.getAsText((-61787750399989L));
        org.joda.time.DurationField durationField21 = dateTimeField18.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test10752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10752");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DurationField durationField12 = iSOChronology8.millis();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.weekyear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology16 = iSOChronology8.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test10753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10753");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.hourOfHalfday();
        org.joda.time.Chronology chronology13 = iSOChronology8.withUTC();
        org.joda.time.DurationField durationField14 = iSOChronology8.weeks();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test10754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10754");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) 'a');
        org.joda.time.Chronology chronology22 = iSOChronology13.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField23 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.hourOfDay();
        org.joda.time.DurationField durationField26 = iSOChronology13.eras();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test10755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10755");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.centuryOfEra();
        org.joda.time.DurationField durationField20 = iSOChronology13.weekyears();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.lang.String str23 = dateTimeZone22.toString();
        java.lang.String str25 = dateTimeZone22.getShortName(1L);
        int int27 = dateTimeZone22.getOffsetFromLocal((long) (byte) 0);
        int int29 = dateTimeZone22.getStandardOffset((long) (short) 0);
        java.lang.String str30 = dateTimeZone22.getID();
        long long33 = dateTimeZone22.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField35 = iSOChronology34.months();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology34.secondOfDay();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology34.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology34.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology34.halfdayOfDay();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.lang.String str43 = dateTimeZone42.toString();
        java.lang.String str45 = dateTimeZone42.getShortName(1L);
        int int47 = dateTimeZone42.getOffsetFromLocal((long) (byte) 0);
        int int49 = dateTimeZone42.getStandardOffset((long) (short) 0);
        java.lang.String str50 = dateTimeZone42.getID();
        long long53 = dateTimeZone42.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology54 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone42);
        org.joda.time.DurationField durationField55 = iSOChronology54.months();
        org.joda.time.DateTimeZone dateTimeZone56 = iSOChronology54.getZone();
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        java.lang.String str59 = dateTimeZone58.toString();
        java.lang.String str61 = dateTimeZone58.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone58);
        int int64 = dateTimeZone58.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology65 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone58);
        org.joda.time.DurationField durationField66 = iSOChronology65.minutes();
        org.joda.time.DateTimeField dateTimeField67 = iSOChronology65.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField68 = iSOChronology65.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField69 = iSOChronology65.minuteOfDay();
        org.joda.time.DurationField durationField70 = iSOChronology65.seconds();
        org.joda.time.DurationField durationField71 = iSOChronology65.millis();
        boolean boolean72 = dateTimeZone56.equals((java.lang.Object) iSOChronology65);
        org.joda.time.Chronology chronology73 = iSOChronology34.withZone(dateTimeZone56);
        org.joda.time.Chronology chronology74 = iSOChronology13.withZone(dateTimeZone56);
        org.joda.time.DurationField durationField75 = iSOChronology13.years();
        // The following exception was thrown during execution in test generation
        try {
            long long80 = iSOChronology13.getDateTimeMillis(81, (-5819), (-693787), 365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -5819 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+52:00" + "'", str23, "+52:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+52:00" + "'", str25, "+52:00");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 187200000 + "'", int27 == 187200000);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 187200000 + "'", int29 == 187200000);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+52:00" + "'", str30, "+52:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-187200000L) + "'", long33 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+52:00" + "'", str43, "+52:00");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+52:00" + "'", str45, "+52:00");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 187200000 + "'", int47 == 187200000);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 187200000 + "'", int49 == 187200000);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+52:00" + "'", str50, "+52:00");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-187200000L) + "'", long53 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+52:00" + "'", str59, "+52:00");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+52:00" + "'", str61, "+52:00");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 187200000 + "'", int64 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
    }

    @Test
    public void test10756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10756");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.era();
        java.lang.String str19 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.year();
        org.joda.time.DurationField durationField23 = dateTimeField22.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+52:00]" + "'", str19, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test10757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10757");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfMonth();
        org.joda.time.DurationField durationField22 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.yearOfCentury();
        org.joda.time.DurationField durationField24 = iSOChronology13.weekyears();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test10758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10758");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DurationField durationField16 = iSOChronology13.centuries();
        org.joda.time.DurationField durationField17 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = iSOChronology13.getDateTimeMillis((-3L), 999, 2507, 2067242, 3798523);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 999 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test10759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10759");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField13 = iSOChronology8.eras();
        org.joda.time.DurationField durationField14 = iSOChronology8.eras();
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology8.getZone();
        long long17 = dateTimeZone15.nextTransition((-2678100721007L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-2678100721007L) + "'", long17 == (-2678100721007L));
    }

    @Test
    public void test10760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10760");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.halfdayOfDay();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.lang.String str15 = dateTimeZone14.toString();
        java.lang.String str17 = dateTimeZone14.getShortName(1L);
        int int19 = dateTimeZone14.getOffsetFromLocal((long) (byte) 0);
        int int21 = dateTimeZone14.getStandardOffset((long) (short) 0);
        java.lang.String str22 = dateTimeZone14.getID();
        long long25 = dateTimeZone14.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField27 = iSOChronology26.months();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology26.secondOfDay();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology26.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology26.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology26.halfdayOfDay();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        java.lang.String str35 = dateTimeZone34.toString();
        java.lang.String str37 = dateTimeZone34.getShortName(1L);
        int int39 = dateTimeZone34.getOffsetFromLocal((long) (byte) 0);
        int int41 = dateTimeZone34.getStandardOffset((long) (short) 0);
        java.lang.String str42 = dateTimeZone34.getID();
        long long45 = dateTimeZone34.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone34);
        org.joda.time.DurationField durationField47 = iSOChronology46.months();
        org.joda.time.DateTimeZone dateTimeZone48 = iSOChronology46.getZone();
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        java.lang.String str51 = dateTimeZone50.toString();
        java.lang.String str53 = dateTimeZone50.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        int int56 = dateTimeZone50.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology57 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone50);
        org.joda.time.DurationField durationField58 = iSOChronology57.minutes();
        org.joda.time.DateTimeField dateTimeField59 = iSOChronology57.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology57.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology57.minuteOfDay();
        org.joda.time.DurationField durationField62 = iSOChronology57.seconds();
        org.joda.time.DurationField durationField63 = iSOChronology57.millis();
        boolean boolean64 = dateTimeZone48.equals((java.lang.Object) iSOChronology57);
        org.joda.time.Chronology chronology65 = iSOChronology26.withZone(dateTimeZone48);
        boolean boolean67 = dateTimeZone48.equals((java.lang.Object) 292278993);
        int int69 = dateTimeZone48.getOffsetFromLocal((-61788099599989L));
        java.lang.String str70 = dateTimeZone48.getID();
        long long74 = dateTimeZone48.convertLocalToUTC((-1893417120000000L), false, 3155695200000L);
        org.joda.time.Chronology chronology75 = iSOChronology8.withZone(dateTimeZone48);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        long long79 = chronology75.add(readablePeriod76, (-9467085891600001L), 3925000);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+52:00" + "'", str15, "+52:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+52:00" + "'", str17, "+52:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 187200000 + "'", int19 == 187200000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 187200000 + "'", int21 == 187200000);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+52:00" + "'", str22, "+52:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-187200000L) + "'", long25 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+52:00" + "'", str35, "+52:00");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+52:00" + "'", str37, "+52:00");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 187200000 + "'", int39 == 187200000);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 187200000 + "'", int41 == 187200000);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+52:00" + "'", str42, "+52:00");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-187200000L) + "'", long45 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+52:00" + "'", str51, "+52:00");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+52:00" + "'", str53, "+52:00");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 187200000 + "'", int56 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 187200000 + "'", int69 == 187200000);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+52:00" + "'", str70, "+52:00");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-1893417307200000L) + "'", long74 == (-1893417307200000L));
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-9467085891600001L) + "'", long79 == (-9467085891600001L));
    }

    @Test
    public void test10761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10761");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) 'a');
        java.lang.String str2 = dateTimeZone1.getID();
        long long4 = dateTimeZone1.nextTransition((long) ' ');
        int int6 = dateTimeZone1.getOffset((-259200000L));
        java.lang.String str8 = dateTimeZone1.getNameKey((-158101200000L));
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone1.getName((-2476918799998L), locale10);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+97:00" + "'", str11, "+97:00");
    }

    @Test
    public void test10762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10762");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long23 = iSOChronology13.getDateTimeMillis(259200100L, 11, (int) (byte) 10, (int) (short) 10, (int) ' ');
        org.joda.time.DurationField durationField24 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField27 = iSOChronology13.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 285010032L + "'", long23 == 285010032L);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test10763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10763");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.dayOfMonth();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.lang.String str15 = dateTimeZone14.toString();
        java.lang.String str17 = dateTimeZone14.getShortName(1L);
        int int19 = dateTimeZone14.getOffsetFromLocal((long) (byte) 0);
        int int21 = dateTimeZone14.getStandardOffset((long) (short) 0);
        java.lang.String str22 = dateTimeZone14.getID();
        long long25 = dateTimeZone14.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField27 = iSOChronology26.months();
        org.joda.time.DurationField durationField28 = iSOChronology26.weeks();
        org.joda.time.DateTimeZone dateTimeZone29 = iSOChronology26.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField31 = iSOChronology30.halfdays();
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        java.lang.String str34 = dateTimeZone33.toString();
        java.lang.String str36 = dateTimeZone33.getShortName(1L);
        int int38 = dateTimeZone33.getOffsetFromLocal((long) (byte) 0);
        int int40 = dateTimeZone33.getStandardOffset((long) (short) 0);
        java.lang.String str41 = dateTimeZone33.getID();
        long long44 = dateTimeZone33.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology45 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone33);
        org.joda.time.DurationField durationField46 = iSOChronology45.months();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology45.secondOfDay();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology45.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology45.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology45.clockhourOfHalfday();
        org.joda.time.DurationField durationField51 = iSOChronology45.centuries();
        int int52 = durationField31.compareTo(durationField51);
        boolean boolean53 = iSOChronology8.equals((java.lang.Object) durationField31);
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology8.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+52:00" + "'", str15, "+52:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+52:00" + "'", str17, "+52:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 187200000 + "'", int19 == 187200000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 187200000 + "'", int21 == 187200000);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+52:00" + "'", str22, "+52:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-187200000L) + "'", long25 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+52:00" + "'", str34, "+52:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+52:00" + "'", str36, "+52:00");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 187200000 + "'", int38 == 187200000);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 187200000 + "'", int40 == 187200000);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+52:00" + "'", str41, "+52:00");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-187200000L) + "'", long44 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test10764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10764");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.weekyear();
        java.lang.String str16 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long23 = iSOChronology13.getDateTimeMillis(255211, 7, (-9678), (-90052428));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -90052428 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[+52:00]" + "'", str16, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test10765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10765");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfDay();
        org.joda.time.DurationField durationField13 = iSOChronology8.seconds();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str16 = dateTimeZone15.toString();
        java.lang.String str18 = dateTimeZone15.getShortName(1L);
        int int20 = dateTimeZone15.getOffsetFromLocal((long) (byte) 0);
        int int22 = dateTimeZone15.getStandardOffset((long) (short) 0);
        java.lang.String str23 = dateTimeZone15.getID();
        long long26 = dateTimeZone15.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField28 = iSOChronology27.months();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology27.secondOfDay();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology27.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology27.clockhourOfHalfday();
        org.joda.time.DurationField durationField33 = iSOChronology27.centuries();
        org.joda.time.DateTimeZone dateTimeZone34 = iSOChronology27.getZone();
        org.joda.time.Chronology chronology35 = iSOChronology8.withZone(dateTimeZone34);
        java.util.TimeZone timeZone36 = dateTimeZone34.toTimeZone();
        long long40 = dateTimeZone34.convertLocalToUTC((-757366839390L), false, 15802878L);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.lang.String str43 = dateTimeZone42.toString();
        java.lang.String str45 = dateTimeZone42.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone42);
        int int48 = dateTimeZone42.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology49 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone42);
        org.joda.time.DurationField durationField50 = iSOChronology49.minutes();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology49.monthOfYear();
        org.joda.time.DurationField durationField52 = iSOChronology49.weekyears();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology49.millisOfSecond();
        boolean boolean54 = dateTimeZone34.equals((java.lang.Object) iSOChronology49);
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology49.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+52:00" + "'", str16, "+52:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+52:00" + "'", str18, "+52:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 187200000 + "'", int20 == 187200000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 187200000 + "'", int22 == 187200000);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+52:00" + "'", str23, "+52:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-187200000L) + "'", long26 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-757554039390L) + "'", long40 == (-757554039390L));
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+52:00" + "'", str43, "+52:00");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+52:00" + "'", str45, "+52:00");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 187200000 + "'", int48 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test10766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10766");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) (byte) 1);
        long long5 = dateTimeZone1.convertUTCToLocal(97L);
        java.lang.String str6 = dateTimeZone1.getID();
        long long10 = dateTimeZone1.convertLocalToUTC((long) 2, false, (long) 11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str13 = dateTimeZone1.getNameKey(10012058L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 187200000 + "'", int3 == 187200000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 187200097L + "'", long5 == 187200097L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+52:00" + "'", str6, "+52:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-187199998L) + "'", long10 == (-187199998L));
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test10767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10767");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long27 = iSOChronology13.getDateTimeMillis(213039817, 37076, 984650340, 2067242, 2, 292278994, (-1370879));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2067242 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test10768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10768");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField13 = iSOChronology8.weeks();
        org.joda.time.DurationField durationField14 = iSOChronology8.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = iSOChronology8.getDateTimeMillis((-292278993), 6270681, 12177930, (-800));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -800 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test10769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10769");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test10770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10770");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        java.util.TimeZone timeZone10 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        long long15 = dateTimeZone13.nextTransition((long) (-26065080));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-26065080L) + "'", long15 == (-26065080L));
    }

    @Test
    public void test10771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10771");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.hourOfHalfday();
        org.joda.time.ReadablePartial readablePartial20 = null;
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str24 = dateTimeZone23.toString();
        java.lang.String str26 = dateTimeZone23.getShortName(1L);
        int int28 = dateTimeZone23.getOffsetFromLocal((long) (byte) 0);
        int int30 = dateTimeZone23.getStandardOffset((long) (short) 0);
        java.lang.String str31 = dateTimeZone23.getID();
        long long34 = dateTimeZone23.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField36 = iSOChronology35.months();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology35.secondOfDay();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology35.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology35.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology35.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology35.dayOfMonth();
        long long43 = dateTimeField41.roundCeiling((long) 100);
        java.util.Locale locale45 = null;
        java.lang.String str46 = dateTimeField41.getAsShortText(292278993L, locale45);
        org.joda.time.ReadablePartial readablePartial47 = null;
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        java.lang.String str50 = dateTimeZone49.toString();
        java.lang.String str52 = dateTimeZone49.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone49);
        int int55 = dateTimeZone49.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology56 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone57 = iSOChronology56.getZone();
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology56.clockhourOfHalfday();
        org.joda.time.ReadablePartial readablePartial59 = null;
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        java.lang.String str62 = dateTimeZone61.toString();
        java.lang.String str64 = dateTimeZone61.getShortName(1L);
        int int66 = dateTimeZone61.getOffsetFromLocal((long) (byte) 0);
        int int68 = dateTimeZone61.getStandardOffset((long) (short) 0);
        java.lang.String str69 = dateTimeZone61.getID();
        long long72 = dateTimeZone61.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology73 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone74 = iSOChronology73.getZone();
        org.joda.time.DateTimeField dateTimeField75 = iSOChronology73.weekyear();
        org.joda.time.ReadablePartial readablePartial76 = null;
        int[] intArray82 = new int[] { (short) 0, 10, 100, (-1), (byte) 100 };
        int int83 = dateTimeField75.getMaximumValue(readablePartial76, intArray82);
        int int84 = dateTimeField58.getMaximumValue(readablePartial59, intArray82);
        int int85 = dateTimeField41.getMinimumValue(readablePartial47, intArray82);
        java.util.Locale locale87 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray88 = dateTimeField19.set(readablePartial20, 6, intArray82, "-187197930", locale87);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -187197930 for hourOfHalfday must be in the range [0,11]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+52:00" + "'", str24, "+52:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+52:00" + "'", str26, "+52:00");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 187200000 + "'", int28 == 187200000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 187200000 + "'", int30 == 187200000);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+52:00" + "'", str31, "+52:00");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-187200000L) + "'", long34 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 72000000L + "'", long43 == 72000000L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "6" + "'", str46, "6");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+52:00" + "'", str50, "+52:00");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+52:00" + "'", str52, "+52:00");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 187200000 + "'", int55 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+52:00" + "'", str62, "+52:00");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+52:00" + "'", str64, "+52:00");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 187200000 + "'", int66 == 187200000);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 187200000 + "'", int68 == 187200000);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+52:00" + "'", str69, "+52:00");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-187200000L) + "'", long72 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 10, 100, -1, 100]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 292278993 + "'", int83 == 292278993);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 12 + "'", int84 == 12);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test10772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10772");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.hourOfHalfday();
        java.lang.String str22 = dateTimeField20.getAsText((long) 5);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeField20.getAsText(0, locale24);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "4" + "'", str22, "4");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
    }

    @Test
    public void test10773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10773");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        long long16 = iSOChronology8.getDateTimeMillis((int) 'a', 11, (int) (byte) 10, 3);
        org.joda.time.DurationField durationField17 = iSOChronology8.weekyears();
        int int19 = durationField17.getValue((-86280001L));
        long long22 = durationField17.add((-7568553599904L), (-2353221L));
        org.joda.time.DurationFieldType durationFieldType23 = durationField17.getType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-59079211199997L) + "'", long16 == (-59079211199997L));
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-74268050860799904L) + "'", long22 == (-74268050860799904L));
        org.junit.Assert.assertNotNull(durationFieldType23);
    }

    @Test
    public void test10774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10774");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.secondOfDay();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.hourOfHalfday();
        org.joda.time.DurationField durationField14 = iSOChronology8.days();
        long long18 = iSOChronology8.add(536401439L, 8445360100L, 1439);
        org.joda.time.DurationField durationField19 = iSOChronology8.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = iSOChronology8.getDateTimeMillis(0, (-16410892), 41, (-6297));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -6297 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 12153409585339L + "'", long18 == 12153409585339L);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test10775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10775");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology13.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.centuryOfEra();
        org.joda.time.DurationField durationField19 = iSOChronology17.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology17.era();
        org.joda.time.DurationField durationField21 = iSOChronology17.days();
        long long24 = durationField21.getMillis((-292275054), (long) 476);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-25252564665600000L) + "'", long24 == (-25252564665600000L));
    }

    @Test
    public void test10776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10776");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfMonth();
        java.lang.String str14 = dateTimeField13.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str14, "DateTimeField[dayOfMonth]");
    }

    @Test
    public void test10777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10777");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long22 = iSOChronology13.getDateTimeMillis(12, (int) (byte) 1, (int) (short) 10, 11);
        long long27 = iSOChronology13.getDateTimeMillis((int) (byte) 0, (int) (short) 1, 1, (int) ' ');
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField29 = iSOChronology13.centuries();
        org.joda.time.DurationField durationField30 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology13.year();
        // The following exception was thrown during execution in test generation
        try {
            long long37 = iSOChronology13.getDateTimeMillis((-36969), (-432300000), 1031446, 3781089);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -432300000 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-61787937599989L) + "'", long22 == (-61787937599989L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-62167406399968L) + "'", long27 == (-62167406399968L));
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test10778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10778");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.millisOfSecond();
        org.joda.time.DurationField durationField24 = iSOChronology13.hours();
        org.joda.time.DurationField durationField25 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.dayOfYear();
        org.joda.time.Chronology chronology27 = iSOChronology13.withUTC();
        org.joda.time.DurationField durationField28 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone30 = iSOChronology13.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
    }

    @Test
    public void test10779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10779");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test10780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10780");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        java.lang.String str11 = dateTimeZone1.getNameKey((long) (byte) -1);
        java.lang.String str12 = dateTimeZone1.getID();
        int int14 = dateTimeZone1.getOffset((-61787750399989L));
        long long16 = dateTimeZone1.previousTransition((-52566007200000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+52:00" + "'", str12, "+52:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 187200000 + "'", int14 == 187200000);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-52566007200000L) + "'", long16 == (-52566007200000L));
    }

    @Test
    public void test10781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10781");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology13.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField18 = iSOChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology17.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology17.weekyear();
        org.joda.time.DurationField durationField23 = iSOChronology17.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test10782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10782");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = iSOChronology8.add(readablePeriod15, (-2209337999965L), 34);
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology8.halfdayOfDay();
        org.joda.time.DurationField durationField21 = iSOChronology8.months();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology8.year();
        java.util.Locale locale23 = null;
        int int24 = dateTimeField22.getMaximumTextLength(locale23);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-2209337999965L) + "'", long18 == (-2209337999965L));
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
    }

    @Test
    public void test10783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10783");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.minuteOfHour();
        org.joda.time.DurationField durationField21 = iSOChronology13.months();
        org.joda.time.DurationField durationField22 = iSOChronology13.months();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray26 = iSOChronology13.get(readablePeriod23, (long) (-297682553), 11L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test10784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10784");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        boolean boolean3 = dateTimeZone2.isFixed();
        java.lang.String str4 = dateTimeZone2.getID();
        java.lang.String str6 = dateTimeZone2.getShortName(1L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
    }

    @Test
    public void test10785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10785");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        org.joda.time.DurationField durationField20 = iSOChronology13.millis();
        org.joda.time.DurationField durationField21 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.yearOfEra();
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeField22.getAsShortText(92612168208000000L, locale24);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2936732" + "'", str25, "2936732");
    }

    @Test
    public void test10786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10786");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.secondOfDay();
        org.joda.time.DurationField durationField23 = iSOChronology13.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test10787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10787");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.era();
        org.joda.time.DurationField durationField14 = iSOChronology8.weeks();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.weekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = iSOChronology8.getZone();
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone17.getName((long) 725, locale19);
        boolean boolean22 = dateTimeZone17.isStandardOffset((long) 8765);
        long long24 = dateTimeZone17.previousTransition(197821440000000000L);
        int int26 = dateTimeZone17.getOffsetFromLocal((-187199971L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+52:00" + "'", str20, "+52:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 197821440000000000L + "'", long24 == 197821440000000000L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 187200000 + "'", int26 == 187200000);
    }

    @Test
    public void test10788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10788");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.weekOfWeekyear();
        org.joda.time.Chronology chronology19 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.secondOfDay();
        org.joda.time.DurationField durationField23 = iSOChronology13.millis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test10789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10789");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DurationField durationField10 = iSOChronology8.months();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.dayOfMonth();
        org.joda.time.DurationField durationField12 = iSOChronology8.weekyears();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.weekyear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = iSOChronology8.add(readablePeriod14, (-31513123264L), 177);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.lang.String str20 = dateTimeZone19.toString();
        java.lang.String str22 = dateTimeZone19.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        int int25 = dateTimeZone19.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField27 = iSOChronology26.days();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology26.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology26.yearOfCentury();
        org.joda.time.DurationField durationField30 = iSOChronology26.days();
        long long33 = durationField30.subtract((-59011808400000L), 4);
        boolean boolean34 = iSOChronology8.equals((java.lang.Object) (-59011808400000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-31513123264L) + "'", long17 == (-31513123264L));
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+52:00" + "'", str20, "+52:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+52:00" + "'", str22, "+52:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 187200000 + "'", int25 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-59012154000000L) + "'", long33 == (-59012154000000L));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test10790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10790");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.dayOfYear();
        long long17 = iSOChronology8.getDateTimeMillis(0L, (int) (short) 10, (int) (short) 0, 59, (int) '#');
        org.joda.time.DurationField durationField18 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology8.yearOfEra();
        org.joda.time.ReadablePartial readablePartial24 = null;
        int int25 = dateTimeField23.getMaximumValue(readablePartial24);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 21659035L + "'", long17 == 21659035L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
    }

    @Test
    public void test10791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10791");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DurationField durationField13 = iSOChronology8.seconds();
        org.joda.time.Chronology chronology14 = iSOChronology8.withUTC();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = iSOChronology8.add(readablePeriod15, 11L, 89324946);
        org.joda.time.DurationField durationField19 = iSOChronology8.years();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = iSOChronology8.getDateTimeMillis(64019, (-12), (-22), (-2878));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2878 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 11L + "'", long18 == 11L);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test10792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10792");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        org.joda.time.DurationField durationField20 = iSOChronology13.weeks();
        org.joda.time.DurationField durationField21 = iSOChronology13.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test10793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10793");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        org.joda.time.Chronology chronology20 = iSOChronology13.withUTC();
        org.joda.time.DurationField durationField21 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField24 = iSOChronology13.minutes();
        org.joda.time.DateTimeZone dateTimeZone25 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.weekOfWeekyear();
        long long31 = iSOChronology13.add(544882061808000000L, (-156190003970861L), (int) (short) 0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 544882061808000000L + "'", long31 == 544882061808000000L);
    }

    @Test
    public void test10794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10794");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) 'a');
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        org.joda.time.Chronology chronology8 = iSOChronology3.withZone(dateTimeZone5);
        int int10 = dateTimeZone5.getStandardOffset(3155695200000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+97:00" + "'", str6, "+97:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 349200000 + "'", int10 == 349200000);
    }

    @Test
    public void test10795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10795");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.hourOfDay();
        org.joda.time.DurationField durationField24 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test10796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10796");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.millisOfSecond();
        org.joda.time.DurationField durationField19 = iSOChronology13.seconds();
        java.lang.String str20 = iSOChronology13.toString();
        org.joda.time.DurationField durationField21 = iSOChronology13.hours();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+97:00]" + "'", str20, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test10797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10797");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DurationField durationField16 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DurationField durationField18 = iSOChronology13.months();
        org.joda.time.DurationField durationField19 = iSOChronology13.hours();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test10798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10798");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DurationField durationField16 = iSOChronology13.days();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.era();
        org.joda.time.DurationField durationField24 = iSOChronology13.days();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = iSOChronology13.add(readablePeriod25, 4338678993L, (-26065080));
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology13.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 4338678993L + "'", long28 == 4338678993L);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test10799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10799");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long23 = iSOChronology13.getDateTimeMillis(259200100L, 11, (int) (byte) 10, (int) (short) 10, (int) ' ');
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.era();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = iSOChronology13.weeks();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str31 = dateTimeZone30.toString();
        java.lang.String str33 = dateTimeZone30.getShortName(1L);
        int int35 = dateTimeZone30.getOffsetFromLocal((long) (byte) 0);
        int int37 = dateTimeZone30.getStandardOffset((long) (short) 0);
        java.lang.String str38 = dateTimeZone30.getID();
        long long41 = dateTimeZone30.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone30);
        org.joda.time.DurationField durationField43 = iSOChronology42.months();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology42.secondOfDay();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology42.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology42.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology42.centuryOfEra();
        org.joda.time.DurationField durationField48 = iSOChronology42.centuries();
        int int51 = durationField48.getValue((long) (byte) 10, 82860000L);
        int int52 = durationField28.compareTo(durationField48);
        long long54 = durationField28.getValueAsLong((-352140001L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 295810032L + "'", long23 == 295810032L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+97:00" + "'", str31, "+97:00");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+97:00" + "'", str33, "+97:00");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 349200000 + "'", int35 == 349200000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 349200000 + "'", int37 == 349200000);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+97:00" + "'", str38, "+97:00");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-349200000L) + "'", long41 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
    }

    @Test
    public void test10800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10800");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        java.util.TimeZone timeZone10 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (byte) 1);
        long long16 = dateTimeZone12.convertUTCToLocal(97L);
        java.lang.String str17 = dateTimeZone12.getID();
        long long21 = dateTimeZone12.convertLocalToUTC((long) 2, false, (long) 11);
        long long23 = dateTimeZone1.getMillisKeepLocal(dateTimeZone12, 25253283600000000L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone12.getOffset(readableInstant24);
        long long28 = dateTimeZone12.adjustOffset((-986947200000L), false);
        boolean boolean29 = dateTimeZone12.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 349200000 + "'", int14 == 349200000);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 349200097L + "'", long16 == 349200097L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+97:00" + "'", str17, "+97:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-349199998L) + "'", long21 == (-349199998L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 25253283600000000L + "'", long23 == 25253283600000000L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 349200000 + "'", int25 == 349200000);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-986947200000L) + "'", long28 == (-986947200000L));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test10801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10801");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DurationField durationField16 = iSOChronology13.seconds();
        org.joda.time.Chronology chronology17 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.clockhourOfDay();
        org.joda.time.DurationField durationField21 = iSOChronology13.weeks();
        org.joda.time.DurationField durationField22 = iSOChronology13.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long27 = iSOChronology13.getDateTimeMillis(1710211567, 8765, 8765, 29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1710211567 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test10802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10802");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfMonth();
        org.joda.time.DurationField durationField16 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.weekyear();
        org.joda.time.ReadablePartial readablePartial18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str21 = dateTimeZone20.toString();
        java.lang.String str23 = dateTimeZone20.getShortName(1L);
        int int25 = dateTimeZone20.getOffsetFromLocal((long) (byte) 0);
        int int27 = dateTimeZone20.getStandardOffset((long) (short) 0);
        java.lang.String str28 = dateTimeZone20.getID();
        long long31 = dateTimeZone20.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField33 = iSOChronology32.months();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology32.secondOfDay();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology32.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology32.clockhourOfHalfday();
        org.joda.time.DurationField durationField38 = iSOChronology32.weeks();
        org.joda.time.DurationField durationField39 = iSOChronology32.millis();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology32.dayOfYear();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology32.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology32.secondOfDay();
        org.joda.time.ReadablePartial readablePartial43 = null;
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str46 = dateTimeZone45.toString();
        java.lang.String str48 = dateTimeZone45.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone45);
        int int51 = dateTimeZone45.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology52 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone45);
        org.joda.time.DurationField durationField53 = iSOChronology52.days();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology52.secondOfMinute();
        org.joda.time.ReadablePartial readablePartial55 = null;
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        java.lang.String str58 = dateTimeZone57.toString();
        java.lang.String str60 = dateTimeZone57.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone57);
        int int63 = dateTimeZone57.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology64 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone57);
        org.joda.time.DurationField durationField65 = iSOChronology64.minutes();
        org.joda.time.DateTimeField dateTimeField66 = iSOChronology64.weekyear();
        java.lang.String str67 = dateTimeField66.toString();
        org.joda.time.ReadablePartial readablePartial68 = null;
        java.util.TimeZone timeZone69 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        java.lang.String str71 = dateTimeZone70.toString();
        java.lang.String str73 = dateTimeZone70.getShortName(1L);
        int int75 = dateTimeZone70.getOffsetFromLocal((long) (byte) 0);
        int int77 = dateTimeZone70.getStandardOffset((long) (short) 0);
        java.lang.String str78 = dateTimeZone70.getID();
        long long81 = dateTimeZone70.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology82 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone70);
        org.joda.time.DateTimeField dateTimeField83 = iSOChronology82.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField84 = iSOChronology82.minuteOfHour();
        org.joda.time.ReadablePartial readablePartial85 = null;
        int[] intArray88 = new int[] { (short) -1, 0 };
        int int89 = dateTimeField84.getMinimumValue(readablePartial85, intArray88);
        int int90 = dateTimeField66.getMinimumValue(readablePartial68, intArray88);
        int int91 = dateTimeField54.getMaximumValue(readablePartial55, intArray88);
        int int92 = dateTimeField42.getMaximumValue(readablePartial43, intArray88);
        int int93 = dateTimeField17.getMinimumValue(readablePartial18, intArray88);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+97:00" + "'", str21, "+97:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+97:00" + "'", str23, "+97:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 349200000 + "'", int25 == 349200000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 349200000 + "'", int27 == 349200000);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+97:00" + "'", str28, "+97:00");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-349200000L) + "'", long31 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+97:00" + "'", str46, "+97:00");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+97:00" + "'", str48, "+97:00");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 349200000 + "'", int51 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+97:00" + "'", str58, "+97:00");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+97:00" + "'", str60, "+97:00");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 349200000 + "'", int63 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "DateTimeField[weekyear]" + "'", str67, "DateTimeField[weekyear]");
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+97:00" + "'", str71, "+97:00");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+97:00" + "'", str73, "+97:00");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 349200000 + "'", int75 == 349200000);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 349200000 + "'", int77 == 349200000);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+97:00" + "'", str78, "+97:00");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-349200000L) + "'", long81 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-292275054) + "'", int90 == (-292275054));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 59 + "'", int91 == 59);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 86399 + "'", int92 == 86399);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-292275054) + "'", int93 == (-292275054));
    }

    @Test
    public void test10803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10803");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DurationField durationField12 = iSOChronology8.millis();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfMonth();
        org.joda.time.ReadablePartial readablePartial14 = null;
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeField13.getAsShortText(readablePartial14, (-292275054), locale16);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-292275054" + "'", str17, "-292275054");
    }

    @Test
    public void test10804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10804");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.dayOfYear();
        long long17 = iSOChronology8.getDateTimeMillis(0L, (int) (short) 10, (int) (short) 0, 59, (int) '#');
        org.joda.time.DurationField durationField18 = iSOChronology8.years();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology8.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 32459035L + "'", long17 == 32459035L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test10805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10805");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.centuryOfEra();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.lang.String str26 = dateTimeZone24.getNameKey(10L);
        org.joda.time.Chronology chronology27 = iSOChronology13.withZone(dateTimeZone24);
        org.joda.time.DurationField durationField28 = iSOChronology13.seconds();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology13.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test10806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10806");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.yearOfEra();
        org.joda.time.DurationField durationField9 = iSOChronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology7.year();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology7.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology7.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = iSOChronology7.getDateTimeMillis(0, 14400, (-81945016), 14400, 86399999, (-28), 16516);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 14400 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test10807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10807");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.halfdayOfDay();
        java.util.Locale locale14 = null;
        int int15 = dateTimeField13.getMaximumTextLength(locale14);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
    }

    @Test
    public void test10808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10808");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField16 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.year();
        java.lang.String str19 = dateTimeField18.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = dateTimeField18.getType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DateTimeField[year]" + "'", str19, "DateTimeField[year]");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
    }

    @Test
    public void test10809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10809");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField16 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfEra();
        java.lang.String str18 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField20 = iSOChronology13.hours();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+97:00]" + "'", str18, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test10810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10810");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology13.getZone();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str18 = dateTimeZone17.toString();
        java.lang.String str20 = dateTimeZone17.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        int int23 = dateTimeZone17.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField25 = iSOChronology24.minutes();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology24.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology24.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology24.minuteOfDay();
        org.joda.time.DurationField durationField29 = iSOChronology24.seconds();
        org.joda.time.DurationField durationField30 = iSOChronology24.millis();
        boolean boolean31 = dateTimeZone15.equals((java.lang.Object) iSOChronology24);
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology24.centuryOfEra();
        org.joda.time.DurationField durationField33 = iSOChronology24.hours();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology24.year();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+97:00" + "'", str18, "+97:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+97:00" + "'", str20, "+97:00");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 349200000 + "'", int23 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test10811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10811");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology13.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField18 = iSOChronology17.halfdays();
        org.joda.time.DurationField durationField19 = iSOChronology17.hours();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology17.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = iSOChronology17.getZone();
        org.joda.time.DurationField durationField22 = iSOChronology17.years();
        long long25 = durationField22.getMillis(0, 3120000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test10812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10812");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.clockhourOfHalfday();
        org.joda.time.DurationField durationField17 = iSOChronology8.seconds();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test10813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10813");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        org.joda.time.DurationField durationField20 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.yearOfCentury();
        org.joda.time.Chronology chronology23 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test10814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10814");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str3 = dateTimeZone1.getID();
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        java.lang.String str8 = dateTimeZone7.toString();
        java.lang.String str10 = dateTimeZone7.getShortName(1L);
        int int12 = dateTimeZone7.getOffsetFromLocal((long) (byte) 0);
        int int14 = dateTimeZone7.getStandardOffset((long) (short) 0);
        java.lang.String str15 = dateTimeZone7.getID();
        long long18 = dateTimeZone7.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
        org.joda.time.DurationField durationField20 = iSOChronology19.months();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology19.hourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology19.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) 'a');
        java.lang.String str26 = dateTimeZone25.getID();
        long long28 = dateTimeZone25.nextTransition((long) ' ');
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = dateTimeZone25.getOffset(readableInstant29);
        org.joda.time.Chronology chronology31 = iSOChronology19.withZone(dateTimeZone25);
        int int33 = dateTimeZone25.getStandardOffset(378691200000L);
        org.joda.time.Chronology chronology34 = iSOChronology5.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology5.monthOfYear();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology5.dayOfWeek();
        long long38 = dateTimeField36.remainder((-9223371966194280000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+97:00" + "'", str3, "+97:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+97:00" + "'", str8, "+97:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+97:00" + "'", str10, "+97:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 349200000 + "'", int12 == 349200000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 349200000 + "'", int14 == 349200000);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+97:00" + "'", str15, "+97:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-349200000L) + "'", long18 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+97:00" + "'", str26, "+97:00");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 32L + "'", long28 == 32L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 349200000 + "'", int30 == 349200000);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 349200000 + "'", int33 == 349200000);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 49320000L + "'", long38 == 49320000L);
    }

    @Test
    public void test10815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10815");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField20 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.centuryOfEra();
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeField22.getAsText(999054669, locale24);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "999054669" + "'", str25, "999054669");
    }

    @Test
    public void test10816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10816");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeField21.getAsText((long) 257181, locale23);
        org.joda.time.ReadablePartial readablePartial25 = null;
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.lang.String str29 = dateTimeZone28.toString();
        java.lang.String str31 = dateTimeZone28.getShortName(1L);
        int int33 = dateTimeZone28.getOffsetFromLocal((long) (byte) 0);
        int int35 = dateTimeZone28.getStandardOffset((long) (short) 0);
        java.lang.String str36 = dateTimeZone28.getID();
        long long39 = dateTimeZone28.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology40 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone28);
        org.joda.time.DurationField durationField41 = iSOChronology40.months();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology40.secondOfDay();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology40.year();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology40.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology40.secondOfDay();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology40.weekyear();
        java.util.Locale locale49 = null;
        long long50 = dateTimeField46.set((long) (-4), "3", locale49);
        org.joda.time.ReadablePartial readablePartial51 = null;
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        java.lang.String str54 = dateTimeZone53.toString();
        java.lang.String str56 = dateTimeZone53.getShortName(1L);
        int int58 = dateTimeZone53.getOffsetFromLocal((long) (byte) 0);
        int int60 = dateTimeZone53.getStandardOffset((long) (short) 0);
        java.lang.String str61 = dateTimeZone53.getID();
        long long64 = dateTimeZone53.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology65 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone53);
        org.joda.time.DurationField durationField66 = iSOChronology65.months();
        org.joda.time.DateTimeField dateTimeField67 = iSOChronology65.secondOfDay();
        org.joda.time.DateTimeField dateTimeField68 = iSOChronology65.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField69 = iSOChronology65.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField70 = iSOChronology65.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone71 = iSOChronology65.getZone();
        org.joda.time.DateTimeField dateTimeField72 = iSOChronology65.millisOfDay();
        org.joda.time.DateTimeField dateTimeField73 = iSOChronology65.yearOfEra();
        org.joda.time.ReadablePartial readablePartial74 = null;
        int[] intArray77 = new int[] { 432000, (-2878) };
        int int78 = dateTimeField73.getMaximumValue(readablePartial74, intArray77);
        int int79 = dateTimeField46.getMinimumValue(readablePartial51, intArray77);
        java.util.Locale locale81 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray82 = dateTimeField21.set(readablePartial25, 253685, intArray77, "248049", locale81);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 248049 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Monday" + "'", str24, "Monday");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+97:00" + "'", str29, "+97:00");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+97:00" + "'", str31, "+97:00");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 349200000 + "'", int33 == 349200000);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 349200000 + "'", int35 == 349200000);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+97:00" + "'", str36, "+97:00");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-349200000L) + "'", long39 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-62072438400004L) + "'", long50 == (-62072438400004L));
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+97:00" + "'", str54, "+97:00");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+97:00" + "'", str56, "+97:00");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 349200000 + "'", int58 == 349200000);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 349200000 + "'", int60 == 349200000);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+97:00" + "'", str61, "+97:00");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-349200000L) + "'", long64 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[432000, -2878]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 292278993 + "'", int78 == 292278993);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-292275054) + "'", int79 == (-292275054));
    }

    @Test
    public void test10817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10817");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DurationField durationField10 = iSOChronology8.weekyears();
        org.joda.time.Chronology chronology11 = iSOChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = iSOChronology8.getDateTimeMillis(4497, 73388093, (-11), (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 73388093 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test10818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10818");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.yearOfCentury();
        long long20 = iSOChronology13.add(97L, 36059035L, (int) '#');
        org.joda.time.DurationField durationField21 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.era();
        org.joda.time.DurationField durationField23 = iSOChronology13.days();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        boolean boolean28 = dateTimeZone26.isStandardOffset(37000L);
        java.lang.String str30 = dateTimeZone26.getNameKey(1314873041L);
        org.joda.time.Chronology chronology31 = iSOChronology13.withZone(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1262066322L + "'", long20 == 1262066322L);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(chronology31);
    }

    @Test
    public void test10819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10819");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.year();
        org.joda.time.DurationField durationField14 = iSOChronology8.weeks();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.secondOfMinute();
        org.joda.time.DurationField durationField16 = iSOChronology8.months();
        org.joda.time.DurationFieldType durationFieldType17 = durationField16.getType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationFieldType17);
    }

    @Test
    public void test10820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10820");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.monthOfYear();
        org.joda.time.DurationField durationField17 = iSOChronology13.millis();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfMonth();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str22 = dateTimeZone21.toString();
        java.lang.String str24 = dateTimeZone21.getShortName(1L);
        int int26 = dateTimeZone21.getOffsetFromLocal((long) (byte) 0);
        int int28 = dateTimeZone21.getStandardOffset((long) (short) 0);
        java.lang.String str29 = dateTimeZone21.getID();
        long long32 = dateTimeZone21.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone21);
        org.joda.time.DurationField durationField34 = iSOChronology33.months();
        org.joda.time.DurationField durationField35 = iSOChronology33.weeks();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology33.year();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology33.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone38 = iSOChronology33.getZone();
        org.joda.time.ReadableInstant readableInstant39 = null;
        int int40 = dateTimeZone38.getOffset(readableInstant39);
        java.util.TimeZone timeZone41 = dateTimeZone38.toTimeZone();
        org.joda.time.Chronology chronology42 = iSOChronology13.withZone(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+97:00" + "'", str22, "+97:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+97:00" + "'", str24, "+97:00");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 349200000 + "'", int26 == 349200000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 349200000 + "'", int28 == 349200000);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+97:00" + "'", str29, "+97:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-349200000L) + "'", long32 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 349200000 + "'", int40 == 349200000);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(chronology42);
    }

    @Test
    public void test10821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10821");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField16 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DurationField durationField18 = iSOChronology13.years();
        org.joda.time.DurationField durationField19 = iSOChronology13.days();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
    }

    @Test
    public void test10822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10822");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        org.joda.time.Chronology chronology20 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField23 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.minuteOfDay();
        int int28 = dateTimeField26.getMinimumValue((-60652454403000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test10823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10823");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DurationField durationField17 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.monthOfYear();
        boolean boolean20 = dateTimeField19.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test10824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10824");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        java.lang.String str18 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.yearOfEra();
        boolean boolean21 = dateTimeField20.isLenient();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+97:00]" + "'", str18, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test10825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10825");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.centuryOfEra();
        java.lang.String str19 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.secondOfDay();
        long long25 = iSOChronology13.add(0L, 4L, 10);
        org.joda.time.DurationField durationField26 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+97:00]" + "'", str19, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 40L + "'", long25 == 40L);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test10826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10826");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField10 = iSOChronology8.minutes();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.lang.String str13 = dateTimeZone12.toString();
        java.lang.String str15 = dateTimeZone12.getShortName(1L);
        int int17 = dateTimeZone12.getOffsetFromLocal((long) (byte) 0);
        int int19 = dateTimeZone12.getStandardOffset((long) (short) 0);
        java.lang.String str20 = dateTimeZone12.getID();
        long long23 = dateTimeZone12.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField25 = iSOChronology24.months();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology24.hourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology24.yearOfEra();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology24.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology24.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forID("+00:00");
        int int33 = dateTimeZone31.getOffsetFromLocal((long) 10);
        int int35 = dateTimeZone31.getOffset((long) 349200000);
        java.util.TimeZone timeZone36 = dateTimeZone31.toTimeZone();
        int int38 = dateTimeZone31.getOffset((long) (byte) 100);
        java.lang.String str39 = dateTimeZone31.toString();
        org.joda.time.Chronology chronology40 = iSOChronology24.withZone(dateTimeZone31);
        org.joda.time.Chronology chronology41 = iSOChronology8.withZone(dateTimeZone31);
        java.util.Locale locale43 = null;
        java.lang.String str44 = dateTimeZone31.getShortName(479478993L, locale43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        int int46 = dateTimeZone31.getOffset(readableInstant45);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+97:00" + "'", str13, "+97:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+97:00" + "'", str15, "+97:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 349200000 + "'", int17 == 349200000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 349200000 + "'", int19 == 349200000);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+97:00" + "'", str20, "+97:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-349200000L) + "'", long23 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test10827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10827");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        org.joda.time.Chronology chronology20 = iSOChronology13.withUTC();
        org.joda.time.DurationField durationField21 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.yearOfEra();
        java.lang.String str23 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.era();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.monthOfYear();
        org.joda.time.DurationField durationField28 = iSOChronology13.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[+97:00]" + "'", str23, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test10828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10828");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfYear();
        org.joda.time.DurationField durationField14 = iSOChronology8.millis();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = iSOChronology8.add(readablePeriod16, (-532800000L), (int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = iSOChronology8.add(readablePeriod20, (-7200000L), 5);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        java.lang.String str28 = dateTimeZone25.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        int int31 = dateTimeZone25.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone33 = iSOChronology32.getZone();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology32.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology32.monthOfYear();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology32.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology32.yearOfEra();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology32.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forID("+00:00");
        int int42 = dateTimeZone40.getOffsetFromLocal((long) 10);
        int int44 = dateTimeZone40.getOffset((long) 349200000);
        java.util.TimeZone timeZone45 = dateTimeZone40.toTimeZone();
        org.joda.time.Chronology chronology46 = iSOChronology32.withZone(dateTimeZone40);
        java.lang.String str48 = dateTimeZone40.getNameKey((-59099590800000L));
        long long51 = dateTimeZone40.adjustOffset((long) 86399, false);
        long long53 = dateTimeZone40.previousTransition(978307200023L);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        java.lang.String str56 = dateTimeZone55.toString();
        java.lang.String str58 = dateTimeZone55.getShortName(1L);
        int int60 = dateTimeZone55.getOffsetFromLocal((long) (byte) 0);
        int int62 = dateTimeZone55.getStandardOffset((long) (short) 0);
        java.lang.String str63 = dateTimeZone55.getID();
        long long66 = dateTimeZone55.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology67 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone55);
        org.joda.time.DurationField durationField68 = iSOChronology67.months();
        org.joda.time.DurationField durationField69 = iSOChronology67.weeks();
        org.joda.time.DateTimeZone dateTimeZone70 = iSOChronology67.getZone();
        long long72 = dateTimeZone40.getMillisKeepLocal(dateTimeZone70, (-98449343999547997L));
        java.lang.String str74 = dateTimeZone40.getShortName((-269982720000000000L));
        org.joda.time.Chronology chronology75 = iSOChronology8.withZone(dateTimeZone40);
        int int77 = dateTimeZone40.getStandardOffset((-61787937599989L));
        org.joda.time.LocalDateTime localDateTime78 = null;
        boolean boolean79 = dateTimeZone40.isLocalDateTimeGap(localDateTime78);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-532800000L) + "'", long19 == (-532800000L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-7200000L) + "'", long23 == (-7200000L));
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+97:00" + "'", str26, "+97:00");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+97:00" + "'", str28, "+97:00");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 349200000 + "'", int31 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 86399L + "'", long51 == 86399L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 978307200023L + "'", long53 == 978307200023L);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+97:00" + "'", str56, "+97:00");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+97:00" + "'", str58, "+97:00");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 349200000 + "'", int60 == 349200000);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 349200000 + "'", int62 == 349200000);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+97:00" + "'", str63, "+97:00");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-349200000L) + "'", long66 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-98449344348747997L) + "'", long72 == (-98449344348747997L));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00" + "'", str74, "+00:00");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test10829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10829");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField18 = iSOChronology13.hours();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DurationField durationField20 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.year();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test10830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10830");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DurationField durationField21 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.secondOfDay();
        org.joda.time.DurationField durationField23 = iSOChronology13.weeks();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        java.lang.String str28 = dateTimeZone25.getShortName(1L);
        int int30 = dateTimeZone25.getOffsetFromLocal((long) (byte) 0);
        int int32 = dateTimeZone25.getStandardOffset((long) (short) 0);
        java.lang.String str33 = dateTimeZone25.getID();
        long long36 = dateTimeZone25.adjustOffset(0L, true);
        org.joda.time.Chronology chronology37 = iSOChronology13.withZone(dateTimeZone25);
        org.joda.time.DurationField durationField38 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology13.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+97:00" + "'", str26, "+97:00");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+97:00" + "'", str28, "+97:00");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 349200000 + "'", int30 == 349200000);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 349200000 + "'", int32 == 349200000);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+97:00" + "'", str33, "+97:00");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test10831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10831");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.hourOfDay();
        org.joda.time.DurationField durationField14 = iSOChronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.centuryOfEra();
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        java.lang.String str21 = dateTimeZone18.getShortName(1L);
        int int23 = dateTimeZone18.getOffsetFromLocal((long) (byte) 0);
        int int25 = dateTimeZone18.getStandardOffset((long) (short) 0);
        java.lang.String str26 = dateTimeZone18.getID();
        long long29 = dateTimeZone18.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone18);
        org.joda.time.DurationField durationField31 = iSOChronology30.months();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology30.secondOfDay();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology30.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology30.dayOfWeek();
        boolean boolean36 = dateTimeField34.isLeap(10L);
        org.joda.time.ReadablePartial readablePartial37 = null;
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        java.lang.String str40 = dateTimeZone39.toString();
        java.lang.String str42 = dateTimeZone39.getShortName(1L);
        int int44 = dateTimeZone39.getOffsetFromLocal((long) (byte) 0);
        int int46 = dateTimeZone39.getStandardOffset((long) (short) 0);
        java.lang.String str47 = dateTimeZone39.getID();
        long long50 = dateTimeZone39.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology51 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone39);
        org.joda.time.DurationField durationField52 = iSOChronology51.months();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology51.secondOfDay();
        org.joda.time.ReadablePartial readablePartial54 = null;
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        java.lang.String str57 = dateTimeZone56.toString();
        java.lang.String str59 = dateTimeZone56.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone56);
        int int62 = dateTimeZone56.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology63 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone56);
        org.joda.time.DateTimeZone dateTimeZone64 = iSOChronology63.getZone();
        org.joda.time.DateTimeField dateTimeField65 = iSOChronology63.clockhourOfHalfday();
        org.joda.time.ReadablePartial readablePartial66 = null;
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        java.lang.String str69 = dateTimeZone68.toString();
        java.lang.String str71 = dateTimeZone68.getShortName(1L);
        int int73 = dateTimeZone68.getOffsetFromLocal((long) (byte) 0);
        int int75 = dateTimeZone68.getStandardOffset((long) (short) 0);
        java.lang.String str76 = dateTimeZone68.getID();
        long long79 = dateTimeZone68.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology80 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone68);
        org.joda.time.DateTimeZone dateTimeZone81 = iSOChronology80.getZone();
        org.joda.time.DateTimeField dateTimeField82 = iSOChronology80.weekyear();
        org.joda.time.ReadablePartial readablePartial83 = null;
        int[] intArray89 = new int[] { (short) 0, 10, 100, (-1), (byte) 100 };
        int int90 = dateTimeField82.getMaximumValue(readablePartial83, intArray89);
        int int91 = dateTimeField65.getMaximumValue(readablePartial66, intArray89);
        int int92 = dateTimeField53.getMaximumValue(readablePartial54, intArray89);
        int int93 = dateTimeField34.getMinimumValue(readablePartial37, intArray89);
        int int94 = dateTimeField15.getMaximumValue(readablePartial16, intArray89);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+97:00" + "'", str19, "+97:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+97:00" + "'", str21, "+97:00");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 349200000 + "'", int23 == 349200000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 349200000 + "'", int25 == 349200000);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+97:00" + "'", str26, "+97:00");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-349200000L) + "'", long29 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+97:00" + "'", str40, "+97:00");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+97:00" + "'", str42, "+97:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 349200000 + "'", int44 == 349200000);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 349200000 + "'", int46 == 349200000);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+97:00" + "'", str47, "+97:00");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-349200000L) + "'", long50 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+97:00" + "'", str57, "+97:00");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+97:00" + "'", str59, "+97:00");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 349200000 + "'", int62 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+97:00" + "'", str69, "+97:00");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+97:00" + "'", str71, "+97:00");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 349200000 + "'", int73 == 349200000);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 349200000 + "'", int75 == 349200000);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+97:00" + "'", str76, "+97:00");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-349200000L) + "'", long79 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 10, 100, -1, 100]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 292278993 + "'", int90 == 292278993);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 12 + "'", int91 == 12);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 86399 + "'", int92 == 86399);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2922789 + "'", int94 == 2922789);
    }

    @Test
    public void test10832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10832");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(407514, 1071900095);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 1071900095");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10833");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology20 = iSOChronology13.withZone(dateTimeZone19);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone19.getName((-59079023999997L), locale22);
        boolean boolean25 = dateTimeZone19.isStandardOffset((long) (short) 10);
        int int27 = dateTimeZone19.getStandardOffset((-262800998L));
        long long29 = dateTimeZone19.nextTransition((-252273599999L));
        long long31 = dateTimeZone19.previousTransition(6270681L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-252273599999L) + "'", long29 == (-252273599999L));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 6270681L + "'", long31 == 6270681L);
    }

    @Test
    public void test10834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10834");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.millisOfSecond();
        java.util.Locale locale19 = null;
        int int20 = dateTimeField18.getMaximumShortTextLength(locale19);
        long long23 = dateTimeField18.add((long) 987033600, 113605027158954000L);
        long long25 = dateTimeField18.roundHalfFloor((long) (-58));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 113605028145987600L + "'", long23 == 113605028145987600L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-58L) + "'", long25 == (-58L));
    }

    @Test
    public void test10835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10835");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfDay();
        java.lang.String str19 = iSOChronology13.toString();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str22 = dateTimeZone21.toString();
        java.lang.String str23 = dateTimeZone21.getID();
        int int25 = dateTimeZone21.getOffsetFromLocal(36059035L);
        org.joda.time.Chronology chronology26 = iSOChronology13.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.weekyear();
        org.joda.time.DurationField durationField28 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology13.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+97:00]" + "'", str19, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+97:00" + "'", str22, "+97:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+97:00" + "'", str23, "+97:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 349200000 + "'", int25 == 349200000);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test10836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10836");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DurationField durationField20 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test10837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10837");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.era();
        org.joda.time.DateTimeZone dateTimeZone11 = iSOChronology8.getZone();
        org.joda.time.DurationField durationField12 = iSOChronology8.weekyears();
        java.lang.String str13 = iSOChronology8.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+97:00]" + "'", str13, "ISOChronology[+97:00]");
    }

    @Test
    public void test10838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10838");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology13.getZone();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str18 = dateTimeZone17.toString();
        java.lang.String str20 = dateTimeZone17.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        int int23 = dateTimeZone17.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField25 = iSOChronology24.minutes();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology24.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology24.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology24.minuteOfDay();
        org.joda.time.DurationField durationField29 = iSOChronology24.seconds();
        org.joda.time.DurationField durationField30 = iSOChronology24.millis();
        boolean boolean31 = dateTimeZone15.equals((java.lang.Object) iSOChronology24);
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology24.centuryOfEra();
        org.joda.time.DurationField durationField33 = iSOChronology24.years();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology24.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology24.yearOfCentury();
        java.lang.String str36 = iSOChronology24.toString();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology24.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+97:00" + "'", str18, "+97:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+97:00" + "'", str20, "+97:00");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 349200000 + "'", int23 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ISOChronology[+97:00]" + "'", str36, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test10839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10839");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField20 = iSOChronology13.minutes();
        org.joda.time.DurationField durationField21 = iSOChronology13.months();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test10840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10840");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        java.lang.String str17 = iSOChronology13.toString();
        org.joda.time.DurationField durationField18 = iSOChronology13.centuries();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[+97:00]" + "'", str17, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test10841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10841");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone24 = iSOChronology13.getZone();
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone24.getShortName((-782829504604935120L), locale26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str30 = dateTimeZone29.toString();
        java.lang.String str32 = dateTimeZone29.getShortName(1L);
        int int34 = dateTimeZone29.getOffsetFromLocal((long) (byte) 0);
        int int36 = dateTimeZone29.getStandardOffset((long) (short) 0);
        java.lang.String str37 = dateTimeZone29.getID();
        long long40 = dateTimeZone29.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField42 = iSOChronology41.months();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology41.secondOfDay();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology41.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology41.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology41.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology41.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology41.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology41.clockhourOfDay();
        boolean boolean50 = dateTimeZone24.equals((java.lang.Object) iSOChronology41);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(11);
        long long54 = dateTimeZone24.getMillisKeepLocal(dateTimeZone52, 202026774844800000L);
        int int56 = dateTimeZone52.getOffset((long) 12);
        java.lang.String str58 = dateTimeZone52.getName(782822697696000000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+97:00" + "'", str27, "+97:00");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+97:00" + "'", str30, "+97:00");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+97:00" + "'", str32, "+97:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 349200000 + "'", int34 == 349200000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 349200000 + "'", int36 == 349200000);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+97:00" + "'", str37, "+97:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-349200000L) + "'", long40 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 202026775193999989L + "'", long54 == 202026775193999989L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 11 + "'", int56 == 11);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00:00.011" + "'", str58, "+00:00:00.011");
    }

    @Test
    public void test10842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10842");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.secondOfDay();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.hourOfHalfday();
        org.joda.time.DurationField durationField14 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology8.getZone();
        boolean boolean17 = dateTimeZone16.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test10843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10843");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField19 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.minuteOfHour();
        long long23 = dateTimeField20.addWrapField(202026774844800000L, (-3600000));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 202026774844800000L + "'", long23 == 202026774844800000L);
    }

    @Test
    public void test10844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10844");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DurationField durationField16 = iSOChronology13.seconds();
        org.joda.time.Chronology chronology17 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test10845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10845");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DurationField durationField17 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.clockhourOfDay();
        org.joda.time.DurationField durationField20 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test10846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10846");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        java.lang.String str10 = dateTimeZone1.toString();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.lang.String str13 = dateTimeZone12.toString();
        java.lang.String str15 = dateTimeZone12.getShortName(1L);
        int int17 = dateTimeZone12.getOffsetFromLocal((long) (byte) 0);
        int int19 = dateTimeZone12.getStandardOffset((long) (short) 0);
        java.lang.String str20 = dateTimeZone12.getID();
        long long23 = dateTimeZone12.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology24.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology24.dayOfYear();
        org.joda.time.DurationField durationField27 = iSOChronology24.weeks();
        boolean boolean28 = dateTimeZone1.equals((java.lang.Object) iSOChronology24);
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology24.secondOfDay();
        int int30 = dateTimeField29.getMinimumValue();
        org.joda.time.ReadablePartial readablePartial31 = null;
        java.util.Locale locale32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = dateTimeField29.getAsShortText(readablePartial31, locale32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+97:00" + "'", str10, "+97:00");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+97:00" + "'", str13, "+97:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+97:00" + "'", str15, "+97:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 349200000 + "'", int17 == 349200000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 349200000 + "'", int19 == 349200000);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+97:00" + "'", str20, "+97:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-349200000L) + "'", long23 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test10847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10847");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long22 = iSOChronology13.getDateTimeMillis(12, (int) (byte) 1, (int) (short) 10, 11);
        org.joda.time.DurationField durationField23 = iSOChronology13.seconds();
        org.joda.time.DurationFieldType durationFieldType24 = durationField23.getType();
        long long27 = durationField23.subtract(1704063600000L, 0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-61788099599989L) + "'", long22 == (-61788099599989L));
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1704063600000L + "'", long27 == 1704063600000L);
    }

    @Test
    public void test10848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10848");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.era();
        org.joda.time.DurationField durationField21 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test10849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10849");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.dayOfYear();
        long long17 = iSOChronology8.getDateTimeMillis(0L, (int) (short) 10, (int) (short) 0, 59, (int) '#');
        org.joda.time.DurationField durationField18 = iSOChronology8.days();
        org.joda.time.Chronology chronology19 = iSOChronology8.withUTC();
        java.lang.String str20 = iSOChronology8.toString();
        org.joda.time.DurationField durationField21 = iSOChronology8.years();
        org.joda.time.DurationField durationField22 = iSOChronology8.centuries();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 32459035L + "'", long17 == 32459035L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+97:00]" + "'", str20, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test10850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10850");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.months();
        long long25 = iSOChronology13.getDateTimeMillis((long) ' ', (int) (byte) 1, (int) ' ', (int) (short) 10, (int) '#');
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = iSOChronology13.add(readablePeriod26, 46658764800000L, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField31 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology13.dayOfMonth();
        long long34 = dateTimeField32.roundCeiling((-80902799991L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1930035L + "'", long25 == 1930035L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 46658764800000L + "'", long29 == 46658764800000L);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-80874000000L) + "'", long34 == (-80874000000L));
    }

    @Test
    public void test10851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10851");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfMonth();
        long long21 = dateTimeField19.roundCeiling((long) 100);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeField19.getAsShortText((int) (byte) -1, locale23);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 82800000L + "'", long21 == 82800000L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1" + "'", str24, "-1");
    }

    @Test
    public void test10852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10852");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(71996759, 73388093);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 73388093");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10853");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField16 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.minutes();
        // The following exception was thrown during execution in test generation
        try {
            long long27 = iSOChronology13.getDateTimeMillis(187200000, 68859573, 360000000, 1156068474, 41, 170, 81);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1156068474 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test10854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10854");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DurationField durationField10 = iSOChronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test10855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10855");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField20 = iSOChronology13.hours();
        org.joda.time.DurationField durationField21 = iSOChronology13.hours();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str24 = dateTimeZone23.toString();
        java.lang.String str26 = dateTimeZone23.getShortName(1L);
        int int28 = dateTimeZone23.getOffsetFromLocal((long) (byte) 0);
        int int30 = dateTimeZone23.getStandardOffset((long) (short) 0);
        java.lang.String str31 = dateTimeZone23.getID();
        long long34 = dateTimeZone23.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField36 = iSOChronology35.months();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology35.secondOfDay();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology35.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology35.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology35.minuteOfDay();
        org.joda.time.DurationField durationField41 = iSOChronology35.weekyears();
        org.joda.time.DurationField durationField42 = iSOChronology35.hours();
        java.lang.String str43 = iSOChronology35.toString();
        org.joda.time.DateTimeZone dateTimeZone44 = iSOChronology35.getZone();
        org.joda.time.Chronology chronology45 = iSOChronology13.withZone(dateTimeZone44);
        java.lang.String str47 = dateTimeZone44.getNameKey(2678399999L);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        long long51 = dateTimeZone44.getMillisKeepLocal(dateTimeZone49, (-2726520619169448000L));
        boolean boolean52 = dateTimeZone44.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+97:00" + "'", str24, "+97:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+97:00" + "'", str26, "+97:00");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 349200000 + "'", int28 == 349200000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 349200000 + "'", int30 == 349200000);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+97:00" + "'", str31, "+97:00");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-349200000L) + "'", long34 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ISOChronology[+97:00]" + "'", str43, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-2726520618820248000L) + "'", long51 == (-2726520618820248000L));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test10856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10856");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.millisOfSecond();
        java.util.Locale locale17 = null;
        int int18 = dateTimeField16.getMaximumShortTextLength(locale17);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
    }

    @Test
    public void test10857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10857");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DurationField durationField16 = iSOChronology13.days();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.monthOfYear();
        org.joda.time.DurationField durationField21 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField22 = iSOChronology13.millis();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.minuteOfHour();
        org.joda.time.DurationField durationField26 = iSOChronology13.centuries();
        long long29 = durationField26.add((-21274847510400000L), 2067242);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 6502310809084800000L + "'", long29 == 6502310809084800000L);
    }

    @Test
    public void test10858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10858");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str21 = dateTimeZone20.toString();
        java.lang.String str23 = dateTimeZone20.getShortName(1L);
        int int25 = dateTimeZone20.getOffsetFromLocal((long) (byte) 0);
        int int27 = dateTimeZone20.getStandardOffset((long) (short) 0);
        java.lang.String str28 = dateTimeZone20.getID();
        long long31 = dateTimeZone20.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology32.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology32.minuteOfHour();
        org.joda.time.DurationField durationField35 = iSOChronology32.days();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology32.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology32.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone38 = iSOChronology32.getZone();
        org.joda.time.Chronology chronology39 = iSOChronology13.withZone(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone40 = iSOChronology13.getZone();
        org.joda.time.DateTimeZone dateTimeZone41 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology13.millisOfDay();
        int int44 = dateTimeField42.getMinimumValue(13888L);
        int int45 = dateTimeField42.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+97:00" + "'", str21, "+97:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+97:00" + "'", str23, "+97:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 349200000 + "'", int25 == 349200000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 349200000 + "'", int27 == 349200000);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+97:00" + "'", str28, "+97:00");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-349200000L) + "'", long31 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test10859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10859");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DurationField durationField13 = iSOChronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test10860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10860");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.Chronology chronology18 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.secondOfDay();
        long long23 = iSOChronology13.add(0L, (-2L), (-102162));
        org.joda.time.DateTimeZone dateTimeZone24 = iSOChronology13.getZone();
        boolean boolean26 = dateTimeZone24.isStandardOffset(3732479956800000L);
        long long29 = dateTimeZone24.adjustOffset((-291600069L), false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 204324L + "'", long23 == 204324L);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-291600069L) + "'", long29 == (-291600069L));
    }

    @Test
    public void test10861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10861");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField20 = iSOChronology13.centuries();
        org.joda.time.Chronology chronology21 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test10862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10862");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DurationField durationField12 = iSOChronology8.months();
        org.joda.time.DurationField durationField13 = iSOChronology8.centuries();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.era();
        java.lang.String str16 = dateTimeField14.getAsText(3303650448000000L);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = dateTimeField14.add((long) 1, (-182074498));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AD" + "'", str16, "AD");
    }

    @Test
    public void test10863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10863");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("Etc/UTC");
        int int3 = dateTimeZone1.getOffset((-62135945999999L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test10864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10864");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.dayOfYear();
        long long22 = dateTimeField20.roundHalfEven(6156761641810032L);
        boolean boolean23 = dateTimeField20.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 6156761612400000L + "'", long22 == 6156761612400000L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test10865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10865");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.millisOfSecond();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.hourOfDay();
        org.joda.time.Chronology chronology21 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test10866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10866");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) 'a');
        java.lang.String str2 = dateTimeZone1.getID();
        long long4 = dateTimeZone1.nextTransition((long) ' ');
        int int6 = dateTimeZone1.getOffset((-259200000L));
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.year();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology7.year();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test10867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10867");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField16 = iSOChronology8.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test10868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10868");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DurationField durationField13 = iSOChronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.clockhourOfHalfday();
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeField15.getAsText(863999, locale17);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "863999" + "'", str18, "863999");
    }

    @Test
    public void test10869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10869");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.era();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.dayOfMonth();
        org.joda.time.DurationField durationField17 = iSOChronology8.minutes();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray20 = iSOChronology8.get(readablePeriod18, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test10870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10870");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfDay();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.lang.String str20 = dateTimeZone19.toString();
        java.lang.String str22 = dateTimeZone19.getShortName(1L);
        int int24 = dateTimeZone19.getOffsetFromLocal((long) (byte) 0);
        int int26 = dateTimeZone19.getStandardOffset((long) (short) 0);
        java.lang.String str27 = dateTimeZone19.getID();
        long long30 = dateTimeZone19.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField32 = iSOChronology31.months();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology31.secondOfDay();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology31.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology31.secondOfMinute();
        org.joda.time.DurationField durationField36 = iSOChronology31.weeks();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology38 = iSOChronology31.withZone(dateTimeZone37);
        org.joda.time.Chronology chronology39 = iSOChronology13.withZone(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology13.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+97:00" + "'", str20, "+97:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+97:00" + "'", str22, "+97:00");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 349200000 + "'", int24 == 349200000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 349200000 + "'", int26 == 349200000);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+97:00" + "'", str27, "+97:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-349200000L) + "'", long30 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test10871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10871");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField25 = iSOChronology13.years();
        org.joda.time.DurationFieldType durationFieldType26 = durationField25.getType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationFieldType26);
    }

    @Test
    public void test10872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10872");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.Chronology chronology1 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField2 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.monthOfYear();
        org.joda.time.DurationField durationField4 = iSOChronology0.millis();
        org.joda.time.DurationField durationField5 = iSOChronology0.minutes();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test10873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10873");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.centuryOfEra();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str17 = dateTimeZone16.toString();
        java.lang.String str19 = dateTimeZone16.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        long long22 = dateTimeZone16.convertUTCToLocal((long) (byte) 10);
        long long25 = dateTimeZone16.convertLocalToUTC((long) 292278993, false);
        org.joda.time.Chronology chronology26 = iSOChronology8.withZone(dateTimeZone16);
        org.joda.time.DurationField durationField27 = iSOChronology8.centuries();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology8.year();
        org.joda.time.DurationField durationField31 = iSOChronology8.days();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+97:00" + "'", str17, "+97:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+97:00" + "'", str19, "+97:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 349200010L + "'", long22 == 349200010L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-56921007L) + "'", long25 == (-56921007L));
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test10874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10874");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00");
        int int3 = dateTimeZone1.getOffsetFromLocal((long) 10);
        int int5 = dateTimeZone1.getOffset((long) 349200000);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone1.getName((long) (-2735), locale7);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
    }

    @Test
    public void test10875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10875");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.secondOfDay();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.lang.String str15 = dateTimeZone14.toString();
        java.lang.String str17 = dateTimeZone14.getShortName(1L);
        int int19 = dateTimeZone14.getOffsetFromLocal((long) (byte) 0);
        int int21 = dateTimeZone14.getStandardOffset((long) (short) 0);
        java.lang.String str22 = dateTimeZone14.getID();
        long long25 = dateTimeZone14.adjustOffset(0L, true);
        org.joda.time.Chronology chronology26 = iSOChronology8.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone27 = chronology26.getZone();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str30 = dateTimeZone29.toString();
        java.lang.String str32 = dateTimeZone29.getShortName(1L);
        int int34 = dateTimeZone29.getOffsetFromLocal((long) (byte) 0);
        int int36 = dateTimeZone29.getStandardOffset((long) (short) 0);
        java.lang.String str37 = dateTimeZone29.getID();
        java.util.TimeZone timeZone38 = dateTimeZone29.toTimeZone();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.lang.String str41 = dateTimeZone40.toString();
        java.lang.String str43 = dateTimeZone40.getShortName(1L);
        int int45 = dateTimeZone40.getOffsetFromLocal((long) (byte) 0);
        int int47 = dateTimeZone40.getStandardOffset((long) (short) 0);
        java.lang.String str48 = dateTimeZone40.getID();
        long long51 = dateTimeZone40.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology52 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone40);
        org.joda.time.DurationField durationField53 = iSOChronology52.months();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology52.secondOfDay();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology52.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology52.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology52.clockhourOfHalfday();
        org.joda.time.DurationField durationField58 = iSOChronology52.months();
        org.joda.time.DateTimeField dateTimeField59 = iSOChronology52.year();
        org.joda.time.DurationField durationField60 = iSOChronology52.hours();
        boolean boolean61 = dateTimeZone29.equals((java.lang.Object) iSOChronology52);
        long long63 = dateTimeZone27.getMillisKeepLocal(dateTimeZone29, (-7043509577418576948L));
        org.joda.time.ReadableInstant readableInstant64 = null;
        int int65 = dateTimeZone29.getOffset(readableInstant64);
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        java.lang.String str68 = dateTimeZone67.toString();
        java.lang.String str70 = dateTimeZone67.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone67);
        int int73 = dateTimeZone67.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology74 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone67);
        org.joda.time.DurationField durationField75 = iSOChronology74.minutes();
        org.joda.time.DateTimeField dateTimeField76 = iSOChronology74.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField77 = iSOChronology74.secondOfDay();
        org.joda.time.DurationField durationField78 = iSOChronology74.months();
        org.joda.time.DateTimeField dateTimeField79 = iSOChronology74.minuteOfHour();
        boolean boolean80 = dateTimeZone29.equals((java.lang.Object) dateTimeField79);
        int int81 = dateTimeField79.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+97:00" + "'", str15, "+97:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+97:00" + "'", str17, "+97:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 349200000 + "'", int19 == 349200000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 349200000 + "'", int21 == 349200000);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+97:00" + "'", str22, "+97:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+97:00" + "'", str30, "+97:00");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+97:00" + "'", str32, "+97:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 349200000 + "'", int34 == 349200000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 349200000 + "'", int36 == 349200000);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+97:00" + "'", str37, "+97:00");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+97:00" + "'", str41, "+97:00");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+97:00" + "'", str43, "+97:00");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 349200000 + "'", int45 == 349200000);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 349200000 + "'", int47 == 349200000);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+97:00" + "'", str48, "+97:00");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-349200000L) + "'", long51 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-7043509577418576948L) + "'", long63 == (-7043509577418576948L));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 349200000 + "'", int65 == 349200000);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+97:00" + "'", str68, "+97:00");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+97:00" + "'", str70, "+97:00");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 349200000 + "'", int73 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test10876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10876");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.millisOfSecond();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.hourOfDay();
        int int22 = dateTimeField20.get(70440000L);
        java.util.Locale locale23 = null;
        int int24 = dateTimeField20.getMaximumTextLength(locale23);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20 + "'", int22 == 20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
    }

    @Test
    public void test10877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10877");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.hourOfHalfday();
        org.joda.time.Chronology chronology13 = iSOChronology8.withUTC();
        org.joda.time.DurationField durationField14 = iSOChronology8.weeks();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial18 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long20 = iSOChronology8.set(readablePartial18, 1363260610209600000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test10878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10878");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.hourOfDay();
        org.joda.time.DurationField durationField21 = iSOChronology13.hours();
        org.joda.time.DateTimeZone dateTimeZone22 = iSOChronology13.getZone();
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone22.getShortName((long) 604800000, locale24);
        long long28 = dateTimeZone22.convertLocalToUTC((-43200000L), false);
        long long30 = dateTimeZone22.previousTransition(2280546000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+97:00" + "'", str25, "+97:00");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-392400000L) + "'", long28 == (-392400000L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 2280546000L + "'", long30 == 2280546000L);
    }

    @Test
    public void test10879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10879");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.era();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.clockhourOfDay();
        org.joda.time.DurationField durationField16 = iSOChronology8.minutes();
        org.joda.time.Chronology chronology17 = iSOChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.hourOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology8.minutes();
        boolean boolean20 = durationField19.isPrecise();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test10880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10880");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.yearOfEra();
        org.joda.time.DurationField durationField13 = iSOChronology8.millis();
        long long16 = durationField13.getValueAsLong((-2726520619356648000L), 358260000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-2726520619356648000L) + "'", long16 == (-2726520619356648000L));
    }

    @Test
    public void test10881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10881");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test10882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10882");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology13.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology17.minuteOfDay();
        java.lang.String str20 = iSOChronology17.toString();
        org.joda.time.DurationField durationField21 = iSOChronology17.centuries();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str24 = dateTimeZone23.toString();
        java.lang.String str26 = dateTimeZone23.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        int int29 = dateTimeZone23.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField31 = iSOChronology30.minutes();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology30.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology30.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology30.halfdayOfDay();
        boolean boolean37 = iSOChronology17.equals((java.lang.Object) iSOChronology30);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray41 = iSOChronology17.get(readablePeriod38, 4052003L, (long) 999054669);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+97:00]" + "'", str20, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+97:00" + "'", str24, "+97:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+97:00" + "'", str26, "+97:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 349200000 + "'", int29 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test10883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10883");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) (byte) 1);
        long long5 = dateTimeZone1.convertUTCToLocal(97L);
        java.lang.String str6 = dateTimeZone1.getID();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str9 = dateTimeZone8.toString();
        java.lang.String str11 = dateTimeZone8.getShortName(1L);
        int int13 = dateTimeZone8.getOffsetFromLocal((long) (byte) 0);
        int int15 = dateTimeZone8.getStandardOffset((long) (short) 0);
        java.lang.String str16 = dateTimeZone8.getID();
        long long19 = dateTimeZone8.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField21 = iSOChronology20.months();
        org.joda.time.DurationField durationField22 = iSOChronology20.weeks();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology20.year();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology20.yearOfCentury();
        long long30 = iSOChronology20.getDateTimeMillis(259200100L, 11, (int) (byte) 10, (int) (short) 10, (int) ' ');
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology20.era();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology20.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone33 = iSOChronology20.getZone();
        java.lang.String str35 = dateTimeZone33.getNameKey((long) 292278993);
        long long37 = dateTimeZone1.getMillisKeepLocal(dateTimeZone33, 757366838646L);
        long long39 = dateTimeZone1.convertUTCToLocal((-63158399635L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 349200000 + "'", int3 == 349200000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 349200097L + "'", long5 == 349200097L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+97:00" + "'", str6, "+97:00");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+97:00" + "'", str11, "+97:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 349200000 + "'", int13 == 349200000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 349200000 + "'", int15 == 349200000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+97:00" + "'", str16, "+97:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-349200000L) + "'", long19 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 295810032L + "'", long30 == 295810032L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 757366838646L + "'", long37 == 757366838646L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-62809199635L) + "'", long39 == (-62809199635L));
    }

    @Test
    public void test10884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10884");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField16 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.days();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test10885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10885");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.era();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.clockhourOfDay();
        org.joda.time.DurationField durationField16 = iSOChronology8.minutes();
        org.joda.time.Chronology chronology17 = iSOChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.clockhourOfDay();
        org.joda.time.Chronology chronology19 = iSOChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology8.yearOfCentury();
        org.joda.time.DurationField durationField21 = iSOChronology8.hours();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology8.weekOfWeekyear();
        java.util.Locale locale24 = null;
        int int25 = dateTimeField23.getMaximumTextLength(locale24);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
    }

    @Test
    public void test10886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10886");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.minuteOfDay();
        long long17 = dateTimeField14.add((long) 999, 0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 999L + "'", long17 == 999L);
    }

    @Test
    public void test10887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10887");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfHalfday();
        java.lang.String str18 = iSOChronology13.toString();
        org.joda.time.DurationField durationField19 = iSOChronology13.millis();
        java.lang.String str20 = iSOChronology13.toString();
        org.joda.time.DurationField durationField21 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+97:00]" + "'", str18, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+97:00]" + "'", str20, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test10888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10888");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("-1030");
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str4 = dateTimeZone3.toString();
        java.lang.String str6 = dateTimeZone3.getShortName(1L);
        int int8 = dateTimeZone3.getOffsetFromLocal((long) (byte) 0);
        int int10 = dateTimeZone3.getStandardOffset((long) (short) 0);
        java.lang.String str11 = dateTimeZone3.getID();
        long long14 = dateTimeZone3.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone3);
        org.joda.time.DurationField durationField16 = iSOChronology15.months();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology15.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology15.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology15.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology15.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = iSOChronology15.millis();
        boolean boolean22 = dateTimeZone1.equals((java.lang.Object) durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+97:00" + "'", str6, "+97:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 349200000 + "'", int10 == 349200000);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+97:00" + "'", str11, "+97:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-349200000L) + "'", long14 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test10889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10889");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField13 = iSOChronology8.seconds();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.centuryOfEra();
        boolean boolean18 = dateTimeField16.isLeap((-102162000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test10890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10890");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology20 = iSOChronology13.withZone(dateTimeZone19);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = iSOChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology21.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology21.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            long long33 = iSOChronology21.getDateTimeMillis((-25878L), 0, 59, 604800000, 6944000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 604800000 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test10891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10891");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DurationField durationField10 = iSOChronology8.halfdays();
        org.joda.time.DurationField durationField11 = iSOChronology8.years();
        int int14 = durationField11.getValue((long) (short) 0, 10L);
        long long17 = durationField11.getDifferenceAsLong(90014400000L, 360000000L);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = durationField11.getMillis(2177280000000070L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 2177280000000070 * 31556952000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
    }

    @Test
    public void test10892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10892");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField12 = iSOChronology8.years();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = iSOChronology8.add(readablePeriod13, 66866322L, 12177930);
        org.joda.time.Chronology chronology17 = iSOChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.dayOfWeek();
        java.util.Locale locale21 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long22 = dateTimeField18.set(186664722L, "DateTimeField[dayOfYear]", locale21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DateTimeField[dayOfYear]\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 66866322L + "'", long16 == 66866322L);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test10893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10893");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField20 = iSOChronology13.hours();
        org.joda.time.DurationField durationField21 = iSOChronology13.hours();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str24 = dateTimeZone23.toString();
        java.lang.String str26 = dateTimeZone23.getShortName(1L);
        int int28 = dateTimeZone23.getOffsetFromLocal((long) (byte) 0);
        int int30 = dateTimeZone23.getStandardOffset((long) (short) 0);
        java.lang.String str31 = dateTimeZone23.getID();
        long long34 = dateTimeZone23.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField36 = iSOChronology35.months();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology35.secondOfDay();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology35.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology35.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology35.minuteOfDay();
        org.joda.time.DurationField durationField41 = iSOChronology35.weekyears();
        org.joda.time.DurationField durationField42 = iSOChronology35.hours();
        java.lang.String str43 = iSOChronology35.toString();
        org.joda.time.DateTimeZone dateTimeZone44 = iSOChronology35.getZone();
        org.joda.time.Chronology chronology45 = iSOChronology13.withZone(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology13.hourOfHalfday();
        java.lang.String str49 = dateTimeField47.getAsShortText(3600035L);
        java.lang.String str51 = dateTimeField47.getAsShortText(31L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+97:00" + "'", str24, "+97:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+97:00" + "'", str26, "+97:00");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 349200000 + "'", int28 == 349200000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 349200000 + "'", int30 == 349200000);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+97:00" + "'", str31, "+97:00");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-349200000L) + "'", long34 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ISOChronology[+97:00]" + "'", str43, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2" + "'", str49, "2");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1" + "'", str51, "1");
    }

    @Test
    public void test10894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10894");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.yearOfCentury();
        long long20 = iSOChronology13.add(97L, 36059035L, (int) '#');
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.clockhourOfHalfday();
        long long24 = dateTimeField21.add((-1209601399L), (-292275054));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1262066322L + "'", long20 == 1262066322L);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1052191404001399L) + "'", long24 == (-1052191404001399L));
    }

    @Test
    public void test10895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10895");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfDay();
        org.joda.time.DurationField durationField18 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test10896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10896");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.weekyear();
        org.joda.time.DurationField durationField14 = iSOChronology8.centuries();
        org.joda.time.DurationField durationField15 = iSOChronology8.halfdays();
        boolean boolean16 = durationField15.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test10897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10897");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        long long4 = dateTimeZone2.previousTransition(262802880030L);
        boolean boolean6 = dateTimeZone2.isStandardOffset(11761134L);
        java.lang.String str7 = dateTimeZone2.toString();
        int int9 = dateTimeZone2.getStandardOffset(36000034L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 262802880030L + "'", long4 == 262802880030L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+97:00" + "'", str7, "+97:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 349200000 + "'", int9 == 349200000);
    }

    @Test
    public void test10898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10898");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test10899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10899");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology20 = iSOChronology13.withZone(dateTimeZone19);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = iSOChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology21.dayOfMonth();
        org.joda.time.DurationField durationField26 = iSOChronology21.minutes();
        org.joda.time.DurationField durationField27 = iSOChronology21.halfdays();
        org.joda.time.DurationField durationField28 = iSOChronology21.millis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test10900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10900");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = iSOChronology13.add(readablePeriod20, 3155760000053L, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField26 = iSOChronology13.weeks();
        org.joda.time.Chronology chronology27 = iSOChronology13.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long35 = chronology27.getDateTimeMillis((-1438328), 71996759, (int) 'a', 0, 89324946, 62317, (-1252));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 89324946 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3155760000053L + "'", long23 == 3155760000053L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test10901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10901");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology13.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField18 = iSOChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology17.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology17.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology17.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test10902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10902");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.weekyear();
        long long19 = iSOChronology13.add(782830514044800000L, (-187200000L), 41754);
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 782822697696000000L + "'", long19 == 782822697696000000L);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test10903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10903");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        java.lang.String str17 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.halfdayOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.months();
        org.joda.time.DurationField durationField20 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField21 = iSOChronology13.minutes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[+97:00]" + "'", str17, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test10904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10904");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.millisOfDay();
        long long26 = dateTimeField23.add(3732479956800000L, 999054669);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 3732480955854669L + "'", long26 == 3732480955854669L);
    }

    @Test
    public void test10905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10905");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology7.yearOfCentury();
        org.joda.time.DurationField durationField11 = iSOChronology7.eras();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology7.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology7.clockhourOfDay();
        java.lang.String str14 = iSOChronology7.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[+97:00]" + "'", str14, "ISOChronology[+97:00]");
    }

    @Test
    public void test10906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10906");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField16 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.millisOfDay();
        java.lang.String str18 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.centuryOfEra();
        org.joda.time.DurationField durationField20 = iSOChronology13.minutes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+97:00]" + "'", str18, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test10907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10907");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(100);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str4 = dateTimeZone3.toString();
        java.lang.String str6 = dateTimeZone3.getShortName(1L);
        int int8 = dateTimeZone3.getOffsetFromLocal((long) (byte) 0);
        int int10 = dateTimeZone3.getStandardOffset((long) (short) 0);
        java.lang.String str11 = dateTimeZone3.getID();
        long long14 = dateTimeZone3.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone3);
        org.joda.time.DurationField durationField16 = iSOChronology15.months();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology15.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology15.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology15.clockhourOfHalfday();
        org.joda.time.DurationField durationField21 = iSOChronology15.centuries();
        org.joda.time.DateTimeZone dateTimeZone22 = iSOChronology15.getZone();
        boolean boolean24 = dateTimeZone22.isStandardOffset(782830514044800000L);
        long long26 = dateTimeZone1.getMillisKeepLocal(dateTimeZone22, (-4L));
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField28 = iSOChronology27.weekyears();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        long long32 = iSOChronology27.add(readablePeriod29, (long) 22, (int) (short) 10);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+97:00" + "'", str6, "+97:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 349200000 + "'", int10 == 349200000);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+97:00" + "'", str11, "+97:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-349200000L) + "'", long14 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10799996L + "'", long26 == 10799996L);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 22L + "'", long32 == 22L);
    }

    @Test
    public void test10908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10908");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.era();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology8.millisOfSecond();
        int int21 = dateTimeField19.getLeapAmount((-2726530190817183000L));
        org.joda.time.ReadablePartial readablePartial22 = null;
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        java.lang.String str28 = dateTimeZone25.getShortName(1L);
        int int30 = dateTimeZone25.getOffsetFromLocal((long) (byte) 0);
        int int32 = dateTimeZone25.getStandardOffset((long) (short) 0);
        java.lang.String str33 = dateTimeZone25.getID();
        long long36 = dateTimeZone25.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology37.secondOfDay();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology37.minuteOfDay();
        org.joda.time.DurationField durationField41 = iSOChronology37.days();
        org.joda.time.DurationField durationField42 = iSOChronology37.months();
        org.joda.time.DurationField durationField43 = iSOChronology37.weekyears();
        org.joda.time.DurationField durationField44 = iSOChronology37.months();
        org.joda.time.Chronology chronology45 = iSOChronology37.withUTC();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        long long49 = iSOChronology37.add(readablePeriod46, (long) 1482960, 12177930);
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology37.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial51 = null;
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        java.lang.String str54 = dateTimeZone53.toString();
        java.lang.String str56 = dateTimeZone53.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone53);
        int int59 = dateTimeZone53.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology60 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone61 = iSOChronology60.getZone();
        org.joda.time.DurationField durationField62 = iSOChronology60.months();
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology60.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField64 = iSOChronology60.clockhourOfDay();
        org.joda.time.DurationField durationField65 = iSOChronology60.hours();
        org.joda.time.DateTimeField dateTimeField66 = iSOChronology60.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial67 = null;
        java.util.TimeZone timeZone68 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone68);
        java.lang.String str70 = dateTimeZone69.toString();
        java.lang.String str72 = dateTimeZone69.getShortName(1L);
        int int74 = dateTimeZone69.getOffsetFromLocal((long) (byte) 0);
        int int76 = dateTimeZone69.getStandardOffset((long) (short) 0);
        java.lang.String str77 = dateTimeZone69.getID();
        long long80 = dateTimeZone69.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology81 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone69);
        org.joda.time.DurationField durationField82 = iSOChronology81.months();
        org.joda.time.DateTimeField dateTimeField83 = iSOChronology81.secondOfDay();
        org.joda.time.DateTimeField dateTimeField84 = iSOChronology81.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField85 = iSOChronology81.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField86 = iSOChronology81.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone87 = iSOChronology81.getZone();
        org.joda.time.DateTimeField dateTimeField88 = iSOChronology81.millisOfDay();
        org.joda.time.DateTimeField dateTimeField89 = iSOChronology81.yearOfEra();
        org.joda.time.ReadablePartial readablePartial90 = null;
        int[] intArray93 = new int[] { 432000, (-2878) };
        int int94 = dateTimeField89.getMaximumValue(readablePartial90, intArray93);
        int int95 = dateTimeField66.getMaximumValue(readablePartial67, intArray93);
        int int96 = dateTimeField50.getMinimumValue(readablePartial51, intArray93);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray98 = dateTimeField19.addWrapPartial(readablePartial22, 613, intArray93, 29);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+97:00" + "'", str26, "+97:00");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+97:00" + "'", str28, "+97:00");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 349200000 + "'", int30 == 349200000);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 349200000 + "'", int32 == 349200000);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+97:00" + "'", str33, "+97:00");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-349200000L) + "'", long36 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1482960L + "'", long49 == 1482960L);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+97:00" + "'", str54, "+97:00");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+97:00" + "'", str56, "+97:00");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 349200000 + "'", int59 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+97:00" + "'", str70, "+97:00");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+97:00" + "'", str72, "+97:00");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 349200000 + "'", int74 == 349200000);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 349200000 + "'", int76 == 349200000);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+97:00" + "'", str77, "+97:00");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-349200000L) + "'", long80 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[432000, -2878]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 292278993 + "'", int94 == 292278993);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 99 + "'", int95 == 99);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test10909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10909");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.millisOfSecond();
        org.joda.time.DurationField durationField13 = iSOChronology8.seconds();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test10910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10910");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.monthOfYear();
        org.joda.time.DurationField durationField22 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.hourOfHalfday();
        org.joda.time.DurationField durationField24 = iSOChronology13.hours();
        long long28 = iSOChronology13.add(0L, (-45410455296000L), 8904);
        org.joda.time.DurationField durationField29 = iSOChronology13.months();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-404334693955584000L) + "'", long28 == (-404334693955584000L));
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test10911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10911");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.monthOfYear();
        org.joda.time.DurationField durationField22 = iSOChronology13.months();
        long long25 = durationField22.add((-7043511686176800000L), (-11));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-7043511715034400000L) + "'", long25 == (-7043511715034400000L));
    }

    @Test
    public void test10912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10912");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test10913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10913");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.weeks();
        org.joda.time.DurationField durationField20 = iSOChronology13.millis();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test10914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10914");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.secondOfDay();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str17 = dateTimeZone16.toString();
        java.lang.String str18 = dateTimeZone16.getID();
        long long22 = dateTimeZone16.convertLocalToUTC(10L, false, (long) '4');
        java.lang.String str24 = dateTimeZone16.getShortName((long) 'a');
        long long26 = dateTimeZone16.previousTransition(315532800000L);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str30 = dateTimeZone29.toString();
        java.lang.String str32 = dateTimeZone29.getShortName(1L);
        int int34 = dateTimeZone29.getOffsetFromLocal((long) (byte) 0);
        int int36 = dateTimeZone29.getStandardOffset((long) (short) 0);
        java.lang.String str37 = dateTimeZone29.getID();
        long long40 = dateTimeZone29.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField42 = iSOChronology41.months();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology41.hourOfDay();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology41.dayOfMonth();
        long long47 = dateTimeField44.addWrapField((-1036799988L), 23);
        long long49 = dateTimeField44.remainder(1262066322L);
        long long52 = dateTimeField44.addWrapField((long) ' ', 31);
        boolean boolean53 = dateTimeField44.isLenient();
        boolean boolean54 = dateTimeZone16.equals((java.lang.Object) dateTimeField44);
        org.joda.time.Chronology chronology55 = iSOChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology13.minuteOfHour();
        long long59 = dateTimeField56.add((-11081949454176947L), 86400000);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+97:00" + "'", str17, "+97:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+97:00" + "'", str18, "+97:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-349199990L) + "'", long22 == (-349199990L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+97:00" + "'", str24, "+97:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 315532800000L + "'", long26 == 315532800000L);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+97:00" + "'", str30, "+97:00");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+97:00" + "'", str32, "+97:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 349200000 + "'", int34 == 349200000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 349200000 + "'", int36 == 349200000);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+97:00" + "'", str37, "+97:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-349200000L) + "'", long40 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1727999988L) + "'", long47 == (-1727999988L));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 56066322L + "'", long49 == 56066322L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 32L + "'", long52 == 32L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-11076765454176947L) + "'", long59 == (-11076765454176947L));
    }

    @Test
    public void test10915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10915");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str22 = dateTimeZone21.toString();
        java.lang.String str24 = dateTimeZone21.getShortName(1L);
        int int26 = dateTimeZone21.getOffsetFromLocal((long) (byte) 0);
        int int28 = dateTimeZone21.getStandardOffset((long) (short) 0);
        java.lang.String str29 = dateTimeZone21.getID();
        long long32 = dateTimeZone21.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone21);
        org.joda.time.DurationField durationField34 = iSOChronology33.months();
        org.joda.time.DateTimeZone dateTimeZone35 = iSOChronology33.getZone();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        java.lang.String str38 = dateTimeZone37.toString();
        java.lang.String str40 = dateTimeZone37.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        int int43 = dateTimeZone37.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology44 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone37);
        org.joda.time.DurationField durationField45 = iSOChronology44.minutes();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology44.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology44.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology44.minuteOfDay();
        org.joda.time.DurationField durationField49 = iSOChronology44.seconds();
        org.joda.time.DurationField durationField50 = iSOChronology44.millis();
        boolean boolean51 = dateTimeZone35.equals((java.lang.Object) iSOChronology44);
        org.joda.time.Chronology chronology52 = iSOChronology13.withZone(dateTimeZone35);
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        java.lang.String str55 = dateTimeZone54.toString();
        java.lang.String str57 = dateTimeZone54.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone54);
        int int60 = dateTimeZone54.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology61 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone62 = iSOChronology61.getZone();
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology61.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField64 = iSOChronology61.year();
        org.joda.time.DurationField durationField65 = iSOChronology61.minutes();
        org.joda.time.DateTimeField dateTimeField66 = iSOChronology61.era();
        boolean boolean67 = iSOChronology13.equals((java.lang.Object) iSOChronology61);
        org.joda.time.DateTimeField dateTimeField68 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField69 = iSOChronology13.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+97:00" + "'", str22, "+97:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+97:00" + "'", str24, "+97:00");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 349200000 + "'", int26 == 349200000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 349200000 + "'", int28 == 349200000);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+97:00" + "'", str29, "+97:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-349200000L) + "'", long32 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+97:00" + "'", str38, "+97:00");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+97:00" + "'", str40, "+97:00");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 349200000 + "'", int43 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+97:00" + "'", str55, "+97:00");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+97:00" + "'", str57, "+97:00");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 349200000 + "'", int60 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
    }

    @Test
    public void test10916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10916");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.hourOfHalfday();
        long long19 = dateTimeField16.addWrapField((-2476918799998L), 100);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-2476904399998L) + "'", long19 == (-2476904399998L));
    }

    @Test
    public void test10917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10917");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.yearOfEra();
        org.joda.time.DurationField durationField22 = dateTimeField21.getDurationField();
        org.joda.time.ReadablePartial readablePartial23 = null;
        int int24 = dateTimeField21.getMinimumValue(readablePartial23);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test10918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10918");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.Chronology chronology1 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField2 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.dayOfWeek();
        long long9 = iSOChronology0.add((long) 2713, (-6271200000L), 45582212);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-285855167894397287L) + "'", long9 == (-285855167894397287L));
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test10919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10919");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology20 = iSOChronology13.withZone(dateTimeZone19);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology21.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test10920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10920");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField23 = iSOChronology13.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test10921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10921");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.hourOfDay();
        org.joda.time.DurationField durationField24 = iSOChronology13.years();
        org.joda.time.DurationField durationField25 = iSOChronology13.years();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test10922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10922");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField21 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField24 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.monthOfYear();
        int int26 = dateTimeField25.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
    }

    @Test
    public void test10923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10923");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DurationField durationField21 = iSOChronology13.minutes();
        org.joda.time.DurationField durationField22 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test10924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10924");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DurationField durationField10 = iSOChronology8.halfdays();
        org.joda.time.DurationField durationField11 = iSOChronology8.years();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.halfdayOfDay();
        org.joda.time.DurationField durationField14 = iSOChronology8.halfdays();
        org.joda.time.DurationField durationField15 = iSOChronology8.centuries();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.clockhourOfHalfday();
        java.util.Locale locale17 = null;
        int int18 = dateTimeField16.getMaximumShortTextLength(locale17);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
    }

    @Test
    public void test10925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10925");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DurationField durationField16 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long19 = dateTimeField17.roundHalfEven(53L);
        boolean boolean20 = dateTimeField17.isLenient();
        java.lang.String str21 = dateTimeField17.toString();
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeField17.getAsShortText(1, locale23);
        int int25 = dateTimeField17.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-349200000L) + "'", long19 == (-349200000L));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DateTimeField[yearOfCentury]" + "'", str21, "DateTimeField[yearOfCentury]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test10926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10926");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.hourOfDay();
        org.joda.time.Chronology chronology18 = iSOChronology8.withUTC();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = iSOChronology8.add(readablePeriod19, (long) 52, (-112178));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
    }

    @Test
    public void test10927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10927");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology20 = iSOChronology13.withZone(dateTimeZone19);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone19.getName((-59079023999997L), locale22);
        boolean boolean25 = dateTimeZone19.isStandardOffset((long) (short) 10);
        long long29 = dateTimeZone19.convertLocalToUTC((-517877670614400000L), false, (long) (-693787));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-517877670614400000L) + "'", long29 == (-517877670614400000L));
    }

    @Test
    public void test10928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10928");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.yearOfCentury();
        org.joda.time.DurationField durationField17 = iSOChronology13.seconds();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.lang.String str21 = dateTimeZone19.getNameKey(10L);
        org.joda.time.Chronology chronology22 = iSOChronology13.withZone(dateTimeZone19);
        org.joda.time.ReadablePartial readablePartial23 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long25 = iSOChronology13.set(readablePartial23, (-6973840002595221018L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test10929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10929");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField20 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.hourOfHalfday();
        org.joda.time.DurationField durationField23 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray28 = iSOChronology13.get(readablePeriod26, (-1209601399L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test10930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10930");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DurationField durationField13 = iSOChronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.millisOfDay();
        org.joda.time.DurationField durationField15 = iSOChronology8.seconds();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField18 = iSOChronology8.years();
        org.joda.time.Chronology chronology19 = iSOChronology8.withUTC();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray23 = chronology19.get(readablePeriod20, (-78016341360L), (-1089904257608400000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test10931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10931");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfDay();
        java.lang.String str19 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.year();
        org.joda.time.DurationField durationField24 = iSOChronology13.days();
        long long27 = durationField24.add(202026775032333301L, (-1727999988L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+97:00]" + "'", str19, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52727576069133301L + "'", long27 == 52727576069133301L);
    }

    @Test
    public void test10932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10932");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.era();
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology8.getZone();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str17 = dateTimeZone16.toString();
        boolean boolean18 = dateTimeZone16.isFixed();
        org.joda.time.Chronology chronology19 = iSOChronology8.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology8.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long28 = iSOChronology8.getDateTimeMillis(3925000, 89324946, (int) (short) 10, 9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 89324946 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+97:00" + "'", str17, "+97:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test10933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10933");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.secondOfDay();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField13 = iSOChronology8.hours();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.minuteOfDay();
        java.util.Locale locale18 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long19 = dateTimeField15.set(2129328093531L, "34536", locale18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34536 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test10934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10934");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.era();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfHalfday();
        org.joda.time.DurationField durationField18 = iSOChronology13.millis();
        org.joda.time.Chronology chronology19 = iSOChronology13.withUTC();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test10935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10935");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField10 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField11 = iSOChronology8.months();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.weekOfWeekyear();
        org.joda.time.Chronology chronology14 = iSOChronology8.withUTC();
        org.joda.time.DurationField durationField15 = iSOChronology8.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            long long23 = iSOChronology8.getDateTimeMillis(18, 0, (-16719), (-22650), 14955, 84840000, (-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -22650 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test10936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10936");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test10937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10937");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00:00.052");
        org.joda.time.ReadableInstant readableInstant2 = null;
        int int3 = dateTimeZone1.getOffset(readableInstant2);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test10938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10938");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.Chronology chronology1 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField2 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.millisOfDay();
        java.lang.String str4 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test10939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10939");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology20 = iSOChronology13.withZone(dateTimeZone19);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = iSOChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology21.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology21.minuteOfHour();
        org.joda.time.DurationField durationField28 = iSOChronology21.seconds();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test10940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10940");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.weekyear();
        org.joda.time.DurationField durationField16 = iSOChronology13.minutes();
        org.joda.time.DurationField durationField17 = iSOChronology13.weeks();
        java.lang.String str18 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        java.util.Locale locale20 = null;
        int int21 = dateTimeField19.getMaximumShortTextLength(locale20);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+97:00]" + "'", str18, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
    }

    @Test
    public void test10941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10941");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DurationField durationField16 = iSOChronology13.days();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.clockhourOfDay();
        int int22 = dateTimeField21.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 24 + "'", int22 == 24);
    }

    @Test
    public void test10942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10942");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField20 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.yearOfEra();
        org.joda.time.DurationField durationField22 = iSOChronology13.millis();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.halfdayOfDay();
        org.joda.time.ReadablePartial readablePartial26 = null;
        java.util.Locale locale28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = dateTimeField25.getAsText(readablePartial26, 97, locale28);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test10943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10943");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2507");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2507' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10944");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DurationField durationField16 = iSOChronology13.millis();
        org.joda.time.DurationField durationField17 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.millisOfSecond();
        org.joda.time.DurationField durationField19 = iSOChronology13.seconds();
        // The following exception was thrown during execution in test generation
        try {
            long long27 = iSOChronology13.getDateTimeMillis((-3120), 17531, (-28664), (int) '4', 5819, 8904, (-483));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test10945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10945");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.days();
        org.joda.time.DurationField durationField19 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.weekyear();
        java.lang.String str21 = iSOChronology13.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[+97:00]" + "'", str21, "ISOChronology[+97:00]");
    }

    @Test
    public void test10946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10946");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology13.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField18 = iSOChronology17.halfdays();
        org.joda.time.DurationField durationField19 = iSOChronology17.hours();
        org.joda.time.DurationField durationField20 = iSOChronology17.years();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology17.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test10947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10947");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str22 = dateTimeZone21.toString();
        java.lang.String str24 = dateTimeZone21.getShortName(1L);
        int int26 = dateTimeZone21.getOffsetFromLocal((long) (byte) 0);
        int int28 = dateTimeZone21.getStandardOffset((long) (short) 0);
        java.lang.String str29 = dateTimeZone21.getID();
        long long32 = dateTimeZone21.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone21);
        org.joda.time.DurationField durationField34 = iSOChronology33.months();
        org.joda.time.DateTimeZone dateTimeZone35 = iSOChronology33.getZone();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        java.lang.String str38 = dateTimeZone37.toString();
        java.lang.String str40 = dateTimeZone37.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        int int43 = dateTimeZone37.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology44 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone37);
        org.joda.time.DurationField durationField45 = iSOChronology44.minutes();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology44.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology44.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology44.minuteOfDay();
        org.joda.time.DurationField durationField49 = iSOChronology44.seconds();
        org.joda.time.DurationField durationField50 = iSOChronology44.millis();
        boolean boolean51 = dateTimeZone35.equals((java.lang.Object) iSOChronology44);
        org.joda.time.Chronology chronology52 = iSOChronology13.withZone(dateTimeZone35);
        boolean boolean54 = dateTimeZone35.equals((java.lang.Object) 292278993);
        int int56 = dateTimeZone35.getOffset((-113218560187200000L));
        long long58 = dateTimeZone35.previousTransition(1930035L);
        int int60 = dateTimeZone35.getStandardOffset((-532800000L));
        long long63 = dateTimeZone35.adjustOffset((-8869965L), false);
        java.lang.String str65 = dateTimeZone35.getName((-187199990L));
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        java.lang.String str68 = dateTimeZone67.toString();
        java.lang.String str70 = dateTimeZone67.getShortName(1L);
        int int72 = dateTimeZone67.getOffsetFromLocal((long) (byte) 0);
        int int74 = dateTimeZone67.getStandardOffset((long) (short) 0);
        java.lang.String str75 = dateTimeZone67.getID();
        long long78 = dateTimeZone67.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology79 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone67);
        org.joda.time.DurationField durationField80 = iSOChronology79.months();
        org.joda.time.DateTimeField dateTimeField81 = iSOChronology79.secondOfDay();
        org.joda.time.DateTimeField dateTimeField82 = iSOChronology79.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField83 = iSOChronology79.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField84 = iSOChronology79.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField85 = iSOChronology79.yearOfEra();
        org.joda.time.DateTimeField dateTimeField86 = iSOChronology79.monthOfYear();
        org.joda.time.DateTimeField dateTimeField87 = iSOChronology79.millisOfDay();
        org.joda.time.DateTimeField dateTimeField88 = iSOChronology79.dayOfWeek();
        boolean boolean89 = dateTimeZone35.equals((java.lang.Object) dateTimeField88);
        org.joda.time.ReadablePartial readablePartial90 = null;
        java.util.Locale locale91 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = dateTimeField88.getAsShortText(readablePartial90, locale91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+97:00" + "'", str22, "+97:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+97:00" + "'", str24, "+97:00");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 349200000 + "'", int26 == 349200000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 349200000 + "'", int28 == 349200000);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+97:00" + "'", str29, "+97:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-349200000L) + "'", long32 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+97:00" + "'", str38, "+97:00");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+97:00" + "'", str40, "+97:00");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 349200000 + "'", int43 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 349200000 + "'", int56 == 349200000);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1930035L + "'", long58 == 1930035L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 349200000 + "'", int60 == 349200000);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-8869965L) + "'", long63 == (-8869965L));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+97:00" + "'", str65, "+97:00");
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+97:00" + "'", str68, "+97:00");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+97:00" + "'", str70, "+97:00");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 349200000 + "'", int72 == 349200000);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 349200000 + "'", int74 == 349200000);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+97:00" + "'", str75, "+97:00");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-349200000L) + "'", long78 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test10948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10948");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DurationField durationField21 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.secondOfDay();
        org.joda.time.DurationField durationField23 = iSOChronology13.millis();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.halfdayOfDay();
        org.joda.time.DurationField durationField25 = iSOChronology13.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long28 = durationField25.subtract(3730016736158400000L, 946687037041L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -94668703704100");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test10949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10949");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.weeks();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.monthOfYear();
        org.joda.time.DurationField durationField14 = dateTimeField13.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test10950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10950");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField16 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.halfdayOfDay();
        java.lang.Object obj18 = new java.lang.Object();
        boolean boolean19 = iSOChronology13.equals(obj18);
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.dayOfMonth();
        org.joda.time.ReadablePartial readablePartial21 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long23 = iSOChronology13.set(readablePartial21, (-151740000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test10951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10951");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        java.lang.String str17 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.halfdayOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.months();
        org.joda.time.DurationField durationField20 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[+97:00]" + "'", str17, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test10952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10952");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.secondOfDay();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.hourOfHalfday();
        org.joda.time.DurationField durationField14 = iSOChronology8.days();
        long long18 = iSOChronology8.add(536401439L, 8445360100L, 1439);
        org.joda.time.DurationField durationField19 = iSOChronology8.years();
        // The following exception was thrown during execution in test generation
        try {
            long long27 = iSOChronology8.getDateTimeMillis(2, 75224542, 8904, 148830006, (int) ' ', (-500400000), 810232);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 148830006 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 12153409585339L + "'", long18 == 12153409585339L);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test10953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10953");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfDay();
        org.joda.time.DurationField durationField13 = iSOChronology8.seconds();
        org.joda.time.DurationField durationField14 = iSOChronology8.millis();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.secondOfDay();
        org.joda.time.DurationField durationField18 = iSOChronology8.hours();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test10954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10954");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField18 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.era();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.millisOfDay();
        org.joda.time.DurationField durationField25 = iSOChronology13.millis();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray28 = iSOChronology13.get(readablePeriod26, (-7953616799668800000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test10955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10955");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.clockhourOfDay();
        org.joda.time.DurationField durationField14 = iSOChronology8.hours();
        org.joda.time.Chronology chronology15 = iSOChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = iSOChronology8.add(readablePeriod17, (-9047L), 3);
        org.joda.time.DurationField durationField21 = iSOChronology8.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-9047L) + "'", long20 == (-9047L));
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test10956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10956");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray17 = iSOChronology8.get(readablePeriod14, 0L, (long) 49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test10957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10957");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = iSOChronology8.add(readablePeriod14, (long) 'a', (-1));
        org.joda.time.DurationField durationField18 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology8.weekyear();
        org.joda.time.DurationField durationField22 = iSOChronology8.seconds();
        org.joda.time.DurationField durationField23 = iSOChronology8.hours();
        org.joda.time.DurationField durationField24 = iSOChronology8.weekyears();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology8.hourOfDay();
        org.joda.time.ReadablePartial readablePartial26 = null;
        int int27 = dateTimeField25.getMaximumValue(readablePartial26);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 97L + "'", long17 == 97L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 23 + "'", int27 == 23);
    }

    @Test
    public void test10958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10958");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        int int23 = dateTimeField21.get(8431200000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 7 + "'", int23 == 7);
    }

    @Test
    public void test10959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10959");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField18 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.millisOfSecond();
        int int21 = dateTimeField19.getMaximumValue(3157286400001L);
        int int23 = dateTimeField19.getMinimumValue(25253283600000000L);
        long long25 = dateTimeField19.roundFloor(89324946L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 999 + "'", int21 == 999);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 89324946L + "'", long25 == 89324946L);
    }

    @Test
    public void test10960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10960");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.weekyearOfCentury();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        java.lang.String str16 = dateTimeZone13.getShortName(1L);
        int int18 = dateTimeZone13.getOffsetFromLocal((long) (byte) 0);
        int int20 = dateTimeZone13.getStandardOffset((long) (short) 0);
        java.lang.String str21 = dateTimeZone13.getID();
        long long24 = dateTimeZone13.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField26 = iSOChronology25.months();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology25.secondOfDay();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology25.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology25.clockhourOfHalfday();
        org.joda.time.Chronology chronology30 = iSOChronology25.withUTC();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.millisOfDay();
        boolean boolean32 = iSOChronology8.equals((java.lang.Object) chronology30);
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology8.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+97:00" + "'", str14, "+97:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+97:00" + "'", str16, "+97:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 349200000 + "'", int18 == 349200000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 349200000 + "'", int20 == 349200000);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+97:00" + "'", str21, "+97:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-349200000L) + "'", long24 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test10961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10961");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.Chronology chronology19 = iSOChronology13.withUTC();
        org.joda.time.DurationField durationField20 = iSOChronology13.millis();
        long long23 = durationField20.subtract((-61251771480965L), 197821440000000000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-197882691771480965L) + "'", long23 == (-197882691771480965L));
    }

    @Test
    public void test10962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10962");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        java.lang.String str17 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.minuteOfHour();
        boolean boolean21 = dateTimeField19.isLeap(3059593200000L);
        org.joda.time.ReadablePartial readablePartial22 = null;
        java.util.Locale locale23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = dateTimeField19.getAsText(readablePartial22, locale23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[+97:00]" + "'", str17, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test10963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10963");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.Chronology chronology16 = iSOChronology13.withUTC();
        java.lang.String str17 = iSOChronology13.toString();
        org.joda.time.DurationField durationField18 = iSOChronology13.millis();
        long long22 = iSOChronology13.add((long) 5, 187200000L, 100);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.lang.String str25 = dateTimeZone24.toString();
        java.lang.String str27 = dateTimeZone24.getShortName(1L);
        int int29 = dateTimeZone24.getOffsetFromLocal((long) (byte) 0);
        int int31 = dateTimeZone24.getStandardOffset((long) (short) 0);
        java.lang.String str32 = dateTimeZone24.getID();
        long long35 = dateTimeZone24.adjustOffset(0L, true);
        org.joda.time.Chronology chronology36 = iSOChronology13.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology13.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[+97:00]" + "'", str17, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 18720000005L + "'", long22 == 18720000005L);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+97:00" + "'", str25, "+97:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+97:00" + "'", str27, "+97:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 349200000 + "'", int29 == 349200000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 349200000 + "'", int31 == 349200000);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+97:00" + "'", str32, "+97:00");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test10964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10964");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.days();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = iSOChronology13.add(readablePeriod19, (long) 100, (int) (short) 10);
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.monthOfYear();
        boolean boolean26 = dateTimeField25.isLenient();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L + "'", long22 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test10965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10965");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.yearOfCentury();
        java.lang.String str17 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.year();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[+97:00]" + "'", str17, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test10966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10966");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.monthOfYear();
        org.joda.time.DurationField durationField17 = iSOChronology13.months();
        org.joda.time.DurationField durationField18 = iSOChronology13.hours();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey(10L);
        long long24 = dateTimeZone20.previousTransition(0L);
        java.lang.String str26 = dateTimeZone20.getNameKey((-12859899912000000L));
        org.joda.time.Chronology chronology27 = iSOChronology13.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone28 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField29 = iSOChronology13.halfdays();
        long long31 = durationField29.getMillis(68859573);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 2974733553600000L + "'", long31 == 2974733553600000L);
    }

    @Test
    public void test10967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10967");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.secondOfDay();
        org.joda.time.DurationField durationField12 = iSOChronology8.months();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test10968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10968");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        java.lang.String str18 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+97:00]" + "'", str18, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test10969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10969");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.era();
        org.joda.time.DurationField durationField15 = iSOChronology8.seconds();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.yearOfEra();
        org.joda.time.DurationField durationField17 = iSOChronology8.years();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.millisOfDay();
        org.joda.time.ReadablePartial readablePartial19 = null;
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeField18.getAsShortText(readablePartial19, 53, locale21);
        org.joda.time.DurationField durationField23 = dateTimeField18.getRangeDurationField();
        int int25 = durationField23.getValue(540060097L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "53" + "'", str22, "53");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
    }

    @Test
    public void test10970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10970");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.millisOfDay();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str18 = dateTimeZone17.toString();
        java.lang.String str20 = dateTimeZone17.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        int int23 = dateTimeZone17.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone25 = iSOChronology24.getZone();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology24.year();
        java.lang.String str28 = dateTimeField26.getAsShortText((long) 349200000);
        int int30 = dateTimeField26.getLeapAmount((-1L));
        boolean boolean31 = iSOChronology8.equals((java.lang.Object) (-1L));
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology8.minuteOfDay();
        org.joda.time.DurationField durationField33 = iSOChronology8.months();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology8.hourOfDay();
        org.joda.time.ReadablePartial readablePartial35 = null;
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        java.lang.String str41 = dateTimeZone38.getShortName(1L);
        int int43 = dateTimeZone38.getOffsetFromLocal((long) (byte) 0);
        int int45 = dateTimeZone38.getStandardOffset((long) (short) 0);
        java.lang.String str46 = dateTimeZone38.getID();
        long long49 = dateTimeZone38.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology50 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone38);
        org.joda.time.DurationField durationField51 = iSOChronology50.months();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology50.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology50.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology50.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology50.clockhourOfHalfday();
        org.joda.time.DurationField durationField56 = iSOChronology50.centuries();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology50.weekOfWeekyear();
        org.joda.time.DurationField durationField58 = iSOChronology50.seconds();
        org.joda.time.DurationField durationField59 = iSOChronology50.weeks();
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology50.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology50.monthOfYear();
        org.joda.time.ReadablePartial readablePartial62 = null;
        int[] intArray63 = new int[] {};
        int int64 = dateTimeField61.getMaximumValue(readablePartial62, intArray63);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray66 = dateTimeField34.set(readablePartial35, (-11760), intArray63, 14400);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 14400 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+97:00" + "'", str18, "+97:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+97:00" + "'", str20, "+97:00");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 349200000 + "'", int23 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970" + "'", str28, "1970");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+97:00" + "'", str39, "+97:00");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+97:00" + "'", str41, "+97:00");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 349200000 + "'", int43 == 349200000);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 349200000 + "'", int45 == 349200000);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+97:00" + "'", str46, "+97:00");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-349200000L) + "'", long49 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 12 + "'", int64 == 12);
    }

    @Test
    public void test10971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10971");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField16 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.millisOfDay();
        java.lang.String str18 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = iSOChronology13.weekyears();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+97:00]" + "'", str18, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test10972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10972");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.Chronology chronology1 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.minuteOfHour();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str5 = dateTimeZone4.toString();
        java.lang.String str7 = dateTimeZone4.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        int int10 = dateTimeZone4.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone4);
        org.joda.time.DurationField durationField12 = iSOChronology11.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology11.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology11.dayOfYear();
        long long20 = iSOChronology11.getDateTimeMillis(0L, (int) (short) 10, (int) (short) 0, 59, (int) '#');
        org.joda.time.DurationField durationField21 = iSOChronology11.days();
        org.joda.time.Chronology chronology22 = iSOChronology11.withUTC();
        java.lang.String str23 = iSOChronology11.toString();
        boolean boolean24 = iSOChronology0.equals((java.lang.Object) str23);
        org.joda.time.DurationField durationField25 = iSOChronology0.years();
        org.joda.time.DurationField durationField26 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone28 = iSOChronology0.getZone();
        long long31 = dateTimeZone28.convertLocalToUTC(164096233260000L, true);
        java.util.TimeZone timeZone32 = dateTimeZone28.toTimeZone();
        long long34 = dateTimeZone28.convertUTCToLocal(1704106800000L);
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone28);
        java.lang.String str37 = dateTimeZone28.getName((-62167406399968L));
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+97:00" + "'", str5, "+97:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+97:00" + "'", str7, "+97:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 349200000 + "'", int10 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 32459035L + "'", long20 == 32459035L);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[+97:00]" + "'", str23, "ISOChronology[+97:00]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 164096233260000L + "'", long31 == 164096233260000L);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1704106800000L + "'", long34 == 1704106800000L);
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
    }

    @Test
    public void test10973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10973");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long22 = iSOChronology13.getDateTimeMillis(12, (int) (byte) 1, (int) (short) 10, 11);
        long long27 = iSOChronology13.getDateTimeMillis((int) (byte) 0, (int) (short) 1, 1, (int) ' ');
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology13.era();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology13.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-61788099599989L) + "'", long22 == (-61788099599989L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-62167568399968L) + "'", long27 == (-62167568399968L));
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test10974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10974");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfYear();
        org.joda.time.DurationField durationField14 = iSOChronology8.millis();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = iSOChronology8.add(readablePeriod15, 72000000L, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology8.dayOfYear();
        org.joda.time.DurationField durationField20 = iSOChronology8.days();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 72000000L + "'", long18 == 72000000L);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test10975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10975");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.monthOfYear();
        org.joda.time.DurationField durationField17 = iSOChronology13.months();
        org.joda.time.DurationField durationField18 = iSOChronology13.hours();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str21 = dateTimeZone20.toString();
        java.lang.String str23 = dateTimeZone20.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        int int26 = dateTimeZone20.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField28 = iSOChronology27.minutes();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology27.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology27.minuteOfHour();
        org.joda.time.DurationField durationField31 = iSOChronology27.minutes();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology27.era();
        org.joda.time.DurationField durationField33 = iSOChronology27.weeks();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology27.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology27.weekyear();
        org.joda.time.DateTimeZone dateTimeZone36 = iSOChronology27.getZone();
        org.joda.time.Chronology chronology37 = iSOChronology13.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology13.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+97:00" + "'", str21, "+97:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+97:00" + "'", str23, "+97:00");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 349200000 + "'", int26 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test10976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10976");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.yearOfCentury();
        long long20 = iSOChronology13.add(97L, 36059035L, (int) '#');
        org.joda.time.DurationField durationField21 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.era();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.lang.String str25 = dateTimeZone24.toString();
        java.lang.String str27 = dateTimeZone24.getShortName(1L);
        int int29 = dateTimeZone24.getOffsetFromLocal((long) (byte) 0);
        int int31 = dateTimeZone24.getStandardOffset((long) (short) 0);
        java.lang.String str32 = dateTimeZone24.getID();
        long long35 = dateTimeZone24.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField37 = iSOChronology36.months();
        org.joda.time.DurationField durationField38 = iSOChronology36.weeks();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology36.year();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology36.yearOfCentury();
        long long46 = iSOChronology36.getDateTimeMillis(259200100L, 11, (int) (byte) 10, (int) (short) 10, (int) ' ');
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology36.era();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology36.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone49 = iSOChronology36.getZone();
        org.joda.time.Chronology chronology50 = iSOChronology13.withZone(dateTimeZone49);
        long long54 = iSOChronology13.add((-2940001L), (-31827600000L), 0);
        org.joda.time.DurationField durationField55 = iSOChronology13.hours();
        long long58 = durationField55.getMillis(2, (-2727194541791822000L));
        long long59 = durationField55.getUnitMillis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1262066322L + "'", long20 == 1262066322L);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+97:00" + "'", str25, "+97:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+97:00" + "'", str27, "+97:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 349200000 + "'", int29 == 349200000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 349200000 + "'", int31 == 349200000);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+97:00" + "'", str32, "+97:00");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-349200000L) + "'", long35 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 295810032L + "'", long46 == 295810032L);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-2940001L) + "'", long54 == (-2940001L));
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 7200000L + "'", long58 == 7200000L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 3600000L + "'", long59 == 3600000L);
    }

    @Test
    public void test10977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10977");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.millisOfSecond();
        org.joda.time.DurationField durationField19 = iSOChronology13.years();
        org.joda.time.DurationField durationField20 = iSOChronology13.weekyears();
        long long21 = durationField20.getUnitMillis();
        long long24 = durationField20.getDifferenceAsLong((long) 6401967, (-59099587199997L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 31556952000L + "'", long21 == 31556952000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1872L + "'", long24 == 1872L);
    }

    @Test
    public void test10978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10978");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DurationField durationField16 = iSOChronology13.days();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.monthOfYear();
        int int21 = dateTimeField20.getMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = dateTimeField20.set(1439L, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test10979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10979");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.clockhourOfHalfday();
        long long17 = iSOChronology8.add(21659035L, (long) 0, (-11760));
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.hourOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology8.centuryOfEra();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.lang.String str25 = dateTimeZone24.toString();
        java.lang.String str27 = dateTimeZone24.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        int int30 = dateTimeZone24.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone32 = iSOChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology31.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology31.year();
        org.joda.time.DurationField durationField35 = iSOChronology31.minutes();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology31.era();
        org.joda.time.DateTimeZone dateTimeZone37 = iSOChronology31.getZone();
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        java.lang.String str40 = dateTimeZone39.toString();
        boolean boolean41 = dateTimeZone39.isFixed();
        org.joda.time.Chronology chronology42 = iSOChronology31.withZone(dateTimeZone39);
        boolean boolean44 = dateTimeZone39.isStandardOffset(0L);
        java.lang.String str46 = dateTimeZone39.getName(374399999L);
        int int48 = dateTimeZone39.getOffset((-7043511686587200000L));
        org.joda.time.Chronology chronology49 = iSOChronology8.withZone(dateTimeZone39);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 21659035L + "'", long17 == 21659035L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+97:00" + "'", str25, "+97:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+97:00" + "'", str27, "+97:00");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 349200000 + "'", int30 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+97:00" + "'", str40, "+97:00");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+97:00" + "'", str46, "+97:00");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 349200000 + "'", int48 == 349200000);
        org.junit.Assert.assertNotNull(chronology49);
    }

    @Test
    public void test10980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10980");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DurationField durationField13 = iSOChronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.millisOfDay();
        org.joda.time.DurationField durationField15 = iSOChronology8.months();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.yearOfCentury();
        org.joda.time.DurationField durationField18 = dateTimeField17.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test10981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10981");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField21 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.yearOfEra();
        org.joda.time.DurationField durationField26 = iSOChronology13.days();
        long long29 = durationField26.getValueAsLong(3155760000053L, (-7043511682608576948L));
        long long32 = durationField26.getMillis(0, (-94348799903L));
        long long34 = durationField26.getMillis((-50L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 36525L + "'", long29 == 36525L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-4320000000L) + "'", long34 == (-4320000000L));
    }

    @Test
    public void test10982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10982");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.secondOfDay();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField13 = iSOChronology8.hours();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.yearOfCentury();
        org.joda.time.DurationField durationField15 = iSOChronology8.months();
        org.joda.time.DurationField durationField16 = iSOChronology8.years();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test10983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10983");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.yearOfEra();
        org.joda.time.DurationField durationField9 = iSOChronology7.halfdays();
        org.joda.time.DurationField durationField10 = iSOChronology7.millis();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology7.centuryOfEra();
        org.joda.time.DurationField durationField13 = iSOChronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology7.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology7.year();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test10984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10984");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.hourOfDay();
        org.joda.time.DurationField durationField21 = iSOChronology13.millis();
        org.joda.time.DurationField durationField22 = iSOChronology13.days();
        int int25 = durationField22.getDifference(35579035L, (long) 5);
        long long27 = durationField22.getValueAsLong((long) (-407513));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test10985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10985");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology13.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField18 = iSOChronology17.hours();
        org.joda.time.DurationField durationField19 = iSOChronology17.years();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test10986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10986");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology7.dayOfYear();
        org.joda.time.DurationField durationField10 = iSOChronology7.months();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology7.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray14 = iSOChronology7.get(readablePeriod12, 727261439L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test10987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10987");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.millisOfDay();
        org.joda.time.DurationField durationField20 = iSOChronology13.millis();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.secondOfMinute();
        boolean boolean22 = dateTimeField21.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test10988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10988");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.Chronology chronology16 = iSOChronology13.withUTC();
        java.lang.String str17 = iSOChronology13.toString();
        org.joda.time.DurationField durationField18 = iSOChronology13.millis();
        org.joda.time.DurationField durationField19 = iSOChronology13.seconds();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField22 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[+97:00]" + "'", str17, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test10989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10989");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str3 = dateTimeZone1.getID();
        long long7 = dateTimeZone1.convertLocalToUTC(10L, false, (long) '4');
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str10 = dateTimeZone9.toString();
        java.lang.String str12 = dateTimeZone9.getShortName(1L);
        int int14 = dateTimeZone9.getOffsetFromLocal((long) (byte) 0);
        int int16 = dateTimeZone9.getStandardOffset((long) (short) 0);
        java.lang.String str17 = dateTimeZone9.getID();
        long long20 = dateTimeZone9.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField22 = iSOChronology21.months();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology21.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology21.centuryOfEra();
        boolean boolean28 = dateTimeZone1.equals((java.lang.Object) iSOChronology21);
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology21.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            long long36 = iSOChronology21.getDateTimeMillis(86399, (-11330985), 36000000, (-3660000));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -3660000 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+97:00" + "'", str3, "+97:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-349199990L) + "'", long7 == (-349199990L));
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+97:00" + "'", str10, "+97:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+97:00" + "'", str12, "+97:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 349200000 + "'", int14 == 349200000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 349200000 + "'", int16 == 349200000);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+97:00" + "'", str17, "+97:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-349200000L) + "'", long20 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test10990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10990");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.dayOfYear();
        org.joda.time.ReadablePartial readablePartial24 = null;
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeField23.getAsText(readablePartial24, 6270681, locale26);
        java.util.Locale locale28 = null;
        int int29 = dateTimeField23.getMaximumTextLength(locale28);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "6270681" + "'", str27, "6270681");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
    }

    @Test
    public void test10991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10991");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField18 = iSOChronology13.halfdays();
        java.lang.String str19 = iSOChronology13.toString();
        org.joda.time.DurationField durationField20 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.era();
        org.joda.time.DurationField durationField22 = iSOChronology13.millis();
        org.joda.time.DurationField durationField23 = iSOChronology13.seconds();
        org.joda.time.ReadablePartial readablePartial24 = null;
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.lang.String str27 = dateTimeZone26.toString();
        java.lang.String str28 = dateTimeZone26.getID();
        long long32 = dateTimeZone26.convertLocalToUTC(10L, false, (long) '4');
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        java.lang.String str35 = dateTimeZone34.toString();
        java.lang.String str37 = dateTimeZone34.getShortName(1L);
        int int39 = dateTimeZone34.getOffsetFromLocal((long) (byte) 0);
        int int41 = dateTimeZone34.getStandardOffset((long) (short) 0);
        java.lang.String str42 = dateTimeZone34.getID();
        long long45 = dateTimeZone34.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone34);
        org.joda.time.DurationField durationField47 = iSOChronology46.months();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology46.secondOfDay();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology46.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology46.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology46.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology46.centuryOfEra();
        boolean boolean53 = dateTimeZone26.equals((java.lang.Object) iSOChronology46);
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology46.yearOfEra();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology46.hourOfDay();
        org.joda.time.ReadablePartial readablePartial56 = null;
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        java.lang.String str60 = dateTimeZone59.toString();
        java.lang.String str62 = dateTimeZone59.getShortName(1L);
        int int64 = dateTimeZone59.getOffsetFromLocal((long) (byte) 0);
        int int66 = dateTimeZone59.getStandardOffset((long) (short) 0);
        java.lang.String str67 = dateTimeZone59.getID();
        long long70 = dateTimeZone59.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology71 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField72 = iSOChronology71.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField73 = iSOChronology71.dayOfYear();
        org.joda.time.DurationField durationField74 = iSOChronology71.weeks();
        org.joda.time.DateTimeField dateTimeField75 = iSOChronology71.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial76 = null;
        int[] intArray83 = new int[] { (short) 100, '4', (short) 1, (-292275054), 292278993 };
        int[] intArray85 = dateTimeField75.addWrapPartial(readablePartial76, 59, intArray83, (int) (short) 0);
        int[] intArray87 = dateTimeField55.add(readablePartial56, (-16416556), intArray83, 0);
        // The following exception was thrown during execution in test generation
        try {
            iSOChronology13.validate(readablePartial24, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+97:00]" + "'", str19, "ISOChronology[+97:00]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+97:00" + "'", str27, "+97:00");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+97:00" + "'", str28, "+97:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-349199990L) + "'", long32 == (-349199990L));
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+97:00" + "'", str35, "+97:00");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+97:00" + "'", str37, "+97:00");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 349200000 + "'", int39 == 349200000);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 349200000 + "'", int41 == 349200000);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+97:00" + "'", str42, "+97:00");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-349200000L) + "'", long45 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+97:00" + "'", str60, "+97:00");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+97:00" + "'", str62, "+97:00");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 349200000 + "'", int64 == 349200000);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 349200000 + "'", int66 == 349200000);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+97:00" + "'", str67, "+97:00");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-349200000L) + "'", long70 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[100, 52, 1, -292275054, 292278993]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[100, 52, 1, -292275054, 292278993]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[100, 52, 1, -292275054, 292278993]");
    }

    @Test
    public void test10992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10992");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test10993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10993");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.secondOfDay();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField13 = iSOChronology8.years();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology8.getZone();
        boolean boolean17 = dateTimeZone16.isFixed();
        long long19 = dateTimeZone16.nextTransition((long) 335);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 335L + "'", long19 == 335L);
    }

    @Test
    public void test10994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10994");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test10995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10995");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField20 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.secondOfDay();
        org.joda.time.DurationField durationField24 = iSOChronology13.centuries();
        java.lang.String str25 = durationField24.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DurationField[centuries]" + "'", str25, "DurationField[centuries]");
    }

    @Test
    public void test10996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10996");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.centuryOfEra();
        java.lang.String str21 = dateTimeField19.getAsText(36059035L);
        boolean boolean22 = dateTimeField19.isLenient();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "19" + "'", str21, "19");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test10997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10997");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DurationField durationField20 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField26 = iSOChronology13.seconds();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test10998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10998");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField20 = iSOChronology13.months();
        org.joda.time.DurationField durationField21 = iSOChronology13.weeks();
        long long24 = durationField21.add(504000000L, (int) (byte) 0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 349200000 + "'", int6 == 349200000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 349200000 + "'", int8 == 349200000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+97:00" + "'", str9, "+97:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-349200000L) + "'", long12 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 504000000L + "'", long24 == 504000000L);
    }

    @Test
    public void test10999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10999");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.weekyear();
        org.joda.time.DurationField durationField16 = iSOChronology8.centuries();
        org.joda.time.DateTimeZone dateTimeZone17 = iSOChronology8.getZone();
        org.joda.time.DurationField durationField18 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology8.centuryOfEra();
        java.lang.String str20 = dateTimeField19.getName();
        org.joda.time.ReadablePartial readablePartial21 = null;
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.lang.String str25 = dateTimeZone24.toString();
        java.lang.String str27 = dateTimeZone24.getShortName(1L);
        int int29 = dateTimeZone24.getOffsetFromLocal((long) (byte) 0);
        int int31 = dateTimeZone24.getStandardOffset((long) (short) 0);
        java.lang.String str32 = dateTimeZone24.getID();
        long long35 = dateTimeZone24.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField37 = iSOChronology36.months();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology36.secondOfDay();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology36.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology36.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology36.minuteOfDay();
        org.joda.time.DurationField durationField43 = iSOChronology36.months();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology36.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology36.hourOfHalfday();
        java.util.Locale locale47 = null;
        java.lang.String str48 = dateTimeField45.getAsShortText((int) (short) -1, locale47);
        org.joda.time.ReadablePartial readablePartial49 = null;
        int[] intArray53 = new int[] { '#', 12, 9 };
        int int54 = dateTimeField45.getMinimumValue(readablePartial49, intArray53);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray56 = dateTimeField19.addWrapField(readablePartial21, 335, intArray53, (-23507));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 335");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "centuryOfEra" + "'", str20, "centuryOfEra");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+97:00" + "'", str25, "+97:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+97:00" + "'", str27, "+97:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 349200000 + "'", int29 == 349200000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 349200000 + "'", int31 == 349200000);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+97:00" + "'", str32, "+97:00");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-349200000L) + "'", long35 == (-349200000L));
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-1" + "'", str48, "-1");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[35, 12, 9]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test11000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test11000");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+97:00" + "'", str4, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }
}

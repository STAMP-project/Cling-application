import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest19 {

    public static boolean debug = false;

    @Test
    public void test09501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09501");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) 'a');
        java.lang.String str2 = dateTimeZone1.getID();
        long long4 = dateTimeZone1.nextTransition((long) ' ');
        long long7 = dateTimeZone1.adjustOffset(19536420409200000L, true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 19536420409200000L + "'", long7 == 19536420409200000L);
    }

    @Test
    public void test09502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09502");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.era();
        java.lang.String str11 = iSOChronology8.toString();
        org.joda.time.DurationField durationField12 = iSOChronology8.years();
        org.joda.time.DurationField durationField13 = iSOChronology8.days();
        org.joda.time.DurationField durationField14 = iSOChronology8.days();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+52:00]" + "'", str11, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test09503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09503");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.era();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.clockhourOfDay();
        org.joda.time.DurationField durationField16 = iSOChronology8.minutes();
        org.joda.time.Chronology chronology17 = iSOChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.clockhourOfDay();
        org.joda.time.Chronology chronology19 = iSOChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology8.yearOfCentury();
        org.joda.time.DurationField durationField21 = iSOChronology8.hours();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology8.yearOfCentury();
        int int24 = dateTimeField22.get((-157939199900L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 65 + "'", int24 == 65);
    }

    @Test
    public void test09504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09504");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DurationField durationField20 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.minuteOfHour();
        int int24 = dateTimeField22.get(31196952000L);
        java.lang.String str25 = dateTimeField22.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 49 + "'", int24 == 49);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "minuteOfHour" + "'", str25, "minuteOfHour");
    }

    @Test
    public void test09505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09505");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.Chronology chronology18 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField22 = iSOChronology13.seconds();
        int int25 = durationField22.getValue((long) (-479), (long) (-2878));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test09506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09506");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField12 = iSOChronology8.years();
        org.joda.time.DurationField durationField13 = iSOChronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.year();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = dateTimeField15.set(1579751424000000L, "");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test09507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09507");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DurationField durationField16 = iSOChronology13.days();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.secondOfMinute();
        long long25 = dateTimeField22.add((-517877692560000000L), 25227992);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = dateTimeField22.getType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-517877667332008000L) + "'", long25 == (-517877667332008000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
    }

    @Test
    public void test09508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09508");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.LocalDateTime localDateTime5 = null;
        boolean boolean6 = dateTimeZone1.isLocalDateTimeGap(localDateTime5);
        java.lang.String str7 = dateTimeZone1.getID();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.millis();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray14 = iSOChronology8.get(readablePeriod12, 435455999999L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+52:00" + "'", str7, "+52:00");
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test09509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09509");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DurationField durationField21 = iSOChronology13.hours();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray24 = iSOChronology13.get(readablePeriod22, 442468800000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test09510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09510");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.dayOfMonth();
        org.joda.time.DurationField durationField13 = iSOChronology8.halfdays();
        org.joda.time.DurationField durationField14 = iSOChronology8.centuries();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test09511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09511");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) 'a');
        java.lang.String str2 = dateTimeZone1.getID();
        java.lang.String str4 = dateTimeZone1.getNameKey(187200100L);
        java.lang.String str6 = dateTimeZone1.getNameKey(298800000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test09512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09512");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DurationField durationField10 = iSOChronology8.halfdays();
        org.joda.time.DurationField durationField11 = iSOChronology8.weeks();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test09513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09513");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(50400000);
        boolean boolean2 = dateTimeZone1.isFixed();
        java.lang.String str4 = dateTimeZone1.getNameKey(80870400000L);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getShortName(1900800000L, locale6);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+14:00" + "'", str7, "+14:00");
    }

    @Test
    public void test09514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09514");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test09515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09515");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.year();
        org.joda.time.Chronology chronology14 = iSOChronology8.withUTC();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test09516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09516");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfDay();
        java.lang.String str19 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.millisOfSecond();
        org.joda.time.Chronology chronology21 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+52:00]" + "'", str19, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test09517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09517");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField10 = iSOChronology8.millis();
        org.joda.time.DurationField durationField11 = iSOChronology8.hours();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.era();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test09518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09518");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.weekOfWeekyear();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str17 = dateTimeZone16.toString();
        java.lang.String str19 = dateTimeZone16.getShortName(1L);
        int int21 = dateTimeZone16.getOffsetFromLocal((long) (byte) 0);
        int int23 = dateTimeZone16.getStandardOffset((long) (short) 0);
        java.lang.String str24 = dateTimeZone16.getID();
        long long27 = dateTimeZone16.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField29 = iSOChronology28.months();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology28.secondOfDay();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology28.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology28.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology28.centuryOfEra();
        org.joda.time.DurationField durationField35 = iSOChronology28.weekyears();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        java.lang.String str38 = dateTimeZone37.toString();
        java.lang.String str40 = dateTimeZone37.getShortName(1L);
        int int42 = dateTimeZone37.getOffsetFromLocal((long) (byte) 0);
        int int44 = dateTimeZone37.getStandardOffset((long) (short) 0);
        java.lang.String str45 = dateTimeZone37.getID();
        long long48 = dateTimeZone37.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology49 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone37);
        org.joda.time.DurationField durationField50 = iSOChronology49.months();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology49.secondOfDay();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology49.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology49.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology49.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology49.halfdayOfDay();
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        java.lang.String str58 = dateTimeZone57.toString();
        java.lang.String str60 = dateTimeZone57.getShortName(1L);
        int int62 = dateTimeZone57.getOffsetFromLocal((long) (byte) 0);
        int int64 = dateTimeZone57.getStandardOffset((long) (short) 0);
        java.lang.String str65 = dateTimeZone57.getID();
        long long68 = dateTimeZone57.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology69 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone57);
        org.joda.time.DurationField durationField70 = iSOChronology69.months();
        org.joda.time.DateTimeZone dateTimeZone71 = iSOChronology69.getZone();
        java.util.TimeZone timeZone72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        java.lang.String str74 = dateTimeZone73.toString();
        java.lang.String str76 = dateTimeZone73.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone73);
        int int79 = dateTimeZone73.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology80 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone73);
        org.joda.time.DurationField durationField81 = iSOChronology80.minutes();
        org.joda.time.DateTimeField dateTimeField82 = iSOChronology80.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField83 = iSOChronology80.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField84 = iSOChronology80.minuteOfDay();
        org.joda.time.DurationField durationField85 = iSOChronology80.seconds();
        org.joda.time.DurationField durationField86 = iSOChronology80.millis();
        boolean boolean87 = dateTimeZone71.equals((java.lang.Object) iSOChronology80);
        org.joda.time.Chronology chronology88 = iSOChronology49.withZone(dateTimeZone71);
        org.joda.time.Chronology chronology89 = iSOChronology28.withZone(dateTimeZone71);
        org.joda.time.Chronology chronology90 = iSOChronology8.withZone(dateTimeZone71);
        org.joda.time.DateTimeField dateTimeField91 = iSOChronology8.dayOfMonth();
        org.joda.time.ReadablePartial readablePartial92 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int93 = dateTimeField91.getMaximumValue(readablePartial92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+52:00" + "'", str17, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+52:00" + "'", str19, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 187200000 + "'", int21 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 187200000 + "'", int23 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+52:00" + "'", str24, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-187200000L) + "'", long27 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+52:00" + "'", str38, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+52:00" + "'", str40, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 187200000 + "'", int42 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 187200000 + "'", int44 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+52:00" + "'", str45, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-187200000L) + "'", long48 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+52:00" + "'", str58, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+52:00" + "'", str60, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 187200000 + "'", int62 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 187200000 + "'", int64 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+52:00" + "'", str65, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-187200000L) + "'", long68 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTimeZone73);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+52:00" + "'", str74, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+52:00" + "'", str76, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 187200000 + "'", int79 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTimeField91);
    }

    @Test
    public void test09519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09519");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test09520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09520");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DurationField durationField22 = iSOChronology13.millis();
        org.joda.time.DurationField durationField23 = iSOChronology13.weeks();
        long long26 = durationField23.getValueAsLong(31336161353L, 136641600000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 51L + "'", long26 == 51L);
    }

    @Test
    public void test09521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09521");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.centuryOfEra();
        java.util.Locale locale26 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long27 = dateTimeField23.set(946687037041L, "-292275054", locale26);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test09522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09522");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        org.joda.time.Chronology chronology20 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone22 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone22.getName((long) (short) 10);
        long long26 = dateTimeZone22.convertUTCToLocal(10L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+52:00" + "'", str24, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 187200010L + "'", long26 == 187200010L);
    }

    @Test
    public void test09523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09523");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long23 = iSOChronology13.getDateTimeMillis(259200100L, 11, (int) (byte) 10, (int) (short) 10, (int) ' ');
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.era();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.clockhourOfDay();
        org.joda.time.DurationField durationField27 = iSOChronology13.millis();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology13.era();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 285010032L + "'", long23 == 285010032L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test09524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09524");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(52);
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology2.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test09525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09525");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DurationField durationField20 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.yearOfCentury();
        boolean boolean24 = dateTimeField23.isSupported();
        long long26 = dateTimeField23.roundHalfCeiling(311025124800000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 311025124800000L + "'", long26 == 311025124800000L);
    }

    @Test
    public void test09526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09526");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField19 = iSOChronology13.millis();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.year();
        long long25 = iSOChronology13.add((long) (short) 0, (long) 3, 187200000);
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.yearOfCentury();
        java.lang.String str28 = dateTimeField26.getAsText((-349199990L));
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        java.lang.String str33 = dateTimeZone32.toString();
        java.lang.String str35 = dateTimeZone32.getShortName(1L);
        int int37 = dateTimeZone32.getOffsetFromLocal((long) (byte) 0);
        int int39 = dateTimeZone32.getStandardOffset((long) (short) 0);
        java.lang.String str40 = dateTimeZone32.getID();
        long long43 = dateTimeZone32.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology44 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone32);
        org.joda.time.DurationField durationField45 = iSOChronology44.months();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology44.secondOfDay();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology44.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology44.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology44.clockhourOfHalfday();
        org.joda.time.DurationField durationField50 = iSOChronology44.centuries();
        org.joda.time.DurationField durationField51 = iSOChronology44.years();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology44.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology44.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology44.dayOfYear();
        org.joda.time.ReadablePartial readablePartial55 = null;
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        java.lang.String str58 = dateTimeZone57.toString();
        java.lang.String str60 = dateTimeZone57.getShortName(1L);
        int int62 = dateTimeZone57.getOffsetFromLocal((long) (byte) 0);
        int int64 = dateTimeZone57.getStandardOffset((long) (short) 0);
        java.lang.String str65 = dateTimeZone57.getID();
        long long68 = dateTimeZone57.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology69 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField70 = iSOChronology69.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField71 = iSOChronology69.secondOfDay();
        org.joda.time.DateTimeField dateTimeField72 = iSOChronology69.minuteOfDay();
        int int74 = dateTimeField72.getMaximumValue((-59099587199997L));
        org.joda.time.ReadablePartial readablePartial75 = null;
        int[] intArray81 = new int[] { 28664880, (-1), 43200000, 349200000 };
        int[] intArray83 = dateTimeField72.addWrapPartial(readablePartial75, 863999, intArray81, (int) (byte) 0);
        int int84 = dateTimeField54.getMinimumValue(readablePartial55, intArray81);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray86 = dateTimeField26.set(readablePartial29, 3925000, intArray81, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3925000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 561600000L + "'", long25 == 561600000L);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "69" + "'", str28, "69");
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+52:00" + "'", str33, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+52:00" + "'", str35, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 187200000 + "'", int37 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 187200000 + "'", int39 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+52:00" + "'", str40, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-187200000L) + "'", long43 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+52:00" + "'", str58, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+52:00" + "'", str60, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 187200000 + "'", int62 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 187200000 + "'", int64 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+52:00" + "'", str65, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-187200000L) + "'", long68 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1439 + "'", int74 == 1439);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[28664880, -1, 43200000, 349200000]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[28664880, -1, 43200000, 349200000]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
    }

    @Test
    public void test09527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09527");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        org.joda.time.Chronology chronology20 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray26 = iSOChronology13.get(readablePeriod24, 11761134L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
    }

    @Test
    public void test09528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09528");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        long long8 = dateTimeZone1.convertLocalToUTC((long) (byte) 0, true, (long) 100);
        long long10 = dateTimeZone1.previousTransition((-2940001L));
        long long12 = dateTimeZone1.previousTransition((long) 1);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.lang.String str15 = dateTimeZone14.toString();
        java.lang.String str17 = dateTimeZone14.getShortName(1L);
        int int19 = dateTimeZone14.getOffsetFromLocal((long) (byte) 0);
        int int21 = dateTimeZone14.getStandardOffset((long) (short) 0);
        java.lang.String str22 = dateTimeZone14.getID();
        long long25 = dateTimeZone14.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField27 = iSOChronology26.months();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology26.secondOfDay();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology26.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology26.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology26.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology26.yearOfEra();
        org.joda.time.Chronology chronology33 = iSOChronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone35 = iSOChronology26.getZone();
        long long37 = dateTimeZone35.nextTransition((long) (byte) 100);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        boolean boolean39 = dateTimeZone1.equals((java.lang.Object) dateTimeZone35);
        org.joda.time.ReadableInstant readableInstant40 = null;
        int int41 = dateTimeZone35.getOffset(readableInstant40);
        org.joda.time.LocalDateTime localDateTime42 = null;
        boolean boolean43 = dateTimeZone35.isLocalDateTimeGap(localDateTime42);
        long long45 = dateTimeZone35.nextTransition(942829320001L);
        long long47 = dateTimeZone35.nextTransition((-1015876799910L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-187200000L) + "'", long8 == (-187200000L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-2940001L) + "'", long10 == (-2940001L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+52:00" + "'", str15, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+52:00" + "'", str17, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 187200000 + "'", int19 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 187200000 + "'", int21 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+52:00" + "'", str22, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-187200000L) + "'", long25 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L + "'", long37 == 100L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 187200000 + "'", int41 == 187200000);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 942829320001L + "'", long45 == 942829320001L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1015876799910L) + "'", long47 == (-1015876799910L));
    }

    @Test
    public void test09529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09529");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.months();
        long long25 = iSOChronology13.getDateTimeMillis((long) ' ', (int) (byte) 1, (int) ' ', (int) (short) 10, (int) '#');
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = iSOChronology13.add(readablePeriod26, 46658764800000L, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField31 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology13.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-8869965L) + "'", long25 == (-8869965L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 46658764800000L + "'", long29 == 46658764800000L);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test09530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09530");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.weekyear();
        org.joda.time.ReadablePartial readablePartial20 = null;
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeField19.getAsShortText(readablePartial20, 84840000, locale22);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "84840000" + "'", str23, "84840000");
    }

    @Test
    public void test09531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09531");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forID("+00:00");
        int int18 = dateTimeZone16.getOffsetFromLocal((long) 10);
        int int20 = dateTimeZone16.getOffset((long) 349200000);
        java.util.TimeZone timeZone21 = dateTimeZone16.toTimeZone();
        org.joda.time.Chronology chronology22 = iSOChronology8.withZone(dateTimeZone16);
        java.lang.String str24 = dateTimeZone16.getNameKey((-59099590800000L));
        long long26 = dateTimeZone16.previousTransition(946602148665L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 946602148665L + "'", long26 == 946602148665L);
    }

    @Test
    public void test09532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09532");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.minuteOfHour();
        org.joda.time.DurationField durationField17 = dateTimeField16.getRangeDurationField();
        long long19 = dateTimeField16.remainder((-18253L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 41747L + "'", long19 == 41747L);
    }

    @Test
    public void test09533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09533");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.dayOfMonth();
        org.joda.time.DurationField durationField13 = iSOChronology8.halfdays();
        long long16 = durationField13.subtract((-500940000L), (long) (-223199999));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 9642239455860000L + "'", long16 == 9642239455860000L);
    }

    @Test
    public void test09534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09534");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField20 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.yearOfCentury();
        org.joda.time.DurationField durationField23 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.clockhourOfHalfday();
        java.lang.String str26 = iSOChronology13.toString();
        org.joda.time.DurationField durationField27 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.weekOfWeekyear();
        java.lang.String str30 = dateTimeField28.getAsText((-98449343999547997L));
        long long32 = dateTimeField28.roundHalfCeiling((-7043511686745600000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[+52:00]" + "'", str26, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "26" + "'", str30, "26");
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-7043511686846400000L) + "'", long32 == (-7043511686846400000L));
    }

    @Test
    public void test09535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09535");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.centuryOfEra();
        java.lang.String str14 = dateTimeField13.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = dateTimeField13.set((-62513939477111L), "-00:00:02.878");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"-00:00:02.878\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DateTimeField[centuryOfEra]" + "'", str14, "DateTimeField[centuryOfEra]");
    }

    @Test
    public void test09536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09536");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.millisOfSecond();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField20 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test09537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09537");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.dayOfYear();
        long long17 = iSOChronology8.getDateTimeMillis(0L, (int) (short) 10, (int) (short) 0, 59, (int) '#');
        org.joda.time.DurationField durationField18 = iSOChronology8.days();
        org.joda.time.Chronology chronology19 = iSOChronology8.withUTC();
        java.lang.String str20 = iSOChronology8.toString();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology8.year();
        org.joda.time.DateTimeZone dateTimeZone22 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology8.yearOfCentury();
        org.joda.time.DurationField durationField24 = iSOChronology8.seconds();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology8.weekyear();
        java.lang.String str26 = dateTimeField25.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 21659035L + "'", long17 == 21659035L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(chronology19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+52:00]" + "'", str20, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DateTimeField[weekyear]" + "'", str26, "DateTimeField[weekyear]");
    }

    @Test
    public void test09538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09538");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DurationField durationField10 = iSOChronology8.weekyears();
        org.joda.time.Chronology chronology11 = iSOChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test09539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09539");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.dayOfWeek();
        java.lang.String str15 = iSOChronology8.toString();
        org.joda.time.DurationField durationField16 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.clockhourOfDay();
        org.joda.time.DurationField durationField18 = iSOChronology8.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[+52:00]" + "'", str15, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test09540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09540");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.monthOfYear();
        org.joda.time.DurationField durationField17 = iSOChronology13.months();
        org.joda.time.DurationField durationField18 = iSOChronology13.hours();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str21 = dateTimeZone20.toString();
        java.lang.String str23 = dateTimeZone20.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        int int26 = dateTimeZone20.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField28 = iSOChronology27.minutes();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology27.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology27.minuteOfHour();
        org.joda.time.DurationField durationField31 = iSOChronology27.minutes();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology27.era();
        org.joda.time.DurationField durationField33 = iSOChronology27.weeks();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology27.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology27.weekyear();
        org.joda.time.DateTimeZone dateTimeZone36 = iSOChronology27.getZone();
        org.joda.time.Chronology chronology37 = iSOChronology13.withZone(dateTimeZone36);
        org.joda.time.DurationField durationField38 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology13.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+52:00" + "'", str21, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+52:00" + "'", str23, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 187200000 + "'", int26 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test09541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09541");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.weekyear();
        java.lang.String str16 = iSOChronology13.toString();
        org.joda.time.DurationField durationField17 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.hourOfDay();
        org.joda.time.Chronology chronology20 = iSOChronology13.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long28 = iSOChronology13.getDateTimeMillis(5819, 24804921, (-19), (-56031041), 17531, (-1037), (-1513681918));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -56031041 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[+52:00]" + "'", str16, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test09542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09542");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.dayOfMonth();
        org.joda.time.DurationField durationField13 = iSOChronology8.halfdays();
        org.joda.time.DurationField durationField14 = iSOChronology8.hours();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test09543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09543");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField16 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.millisOfDay();
        org.joda.time.DurationField durationField18 = iSOChronology13.halfdays();
        org.joda.time.ReadablePartial readablePartial19 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long21 = iSOChronology13.set(readablePartial19, (-162000000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test09544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09544");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology13.getZone();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str18 = dateTimeZone17.toString();
        java.lang.String str20 = dateTimeZone17.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        int int23 = dateTimeZone17.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField25 = iSOChronology24.minutes();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology24.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology24.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology24.minuteOfDay();
        org.joda.time.DurationField durationField29 = iSOChronology24.seconds();
        org.joda.time.DurationField durationField30 = iSOChronology24.millis();
        boolean boolean31 = dateTimeZone15.equals((java.lang.Object) iSOChronology24);
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology24.centuryOfEra();
        org.joda.time.DurationField durationField33 = iSOChronology24.years();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology24.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology24.yearOfCentury();
        java.lang.String str36 = iSOChronology24.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long41 = iSOChronology24.getDateTimeMillis(24806879, 4, (-1030), 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1030 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+52:00" + "'", str18, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+52:00" + "'", str20, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 187200000 + "'", int23 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ISOChronology[+52:00]" + "'", str36, "ISOChronology[+52:00]");
    }

    @Test
    public void test09545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09545");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField18 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.secondOfMinute();
        java.lang.String str22 = dateTimeField21.toString();
        boolean boolean23 = dateTimeField21.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DateTimeField[secondOfMinute]" + "'", str22, "DateTimeField[secondOfMinute]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test09546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09546");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.dayOfYear();
        long long17 = iSOChronology8.getDateTimeMillis(0L, (int) (short) 10, (int) (short) 0, 59, (int) '#');
        org.joda.time.DurationField durationField18 = iSOChronology8.days();
        org.joda.time.Chronology chronology19 = iSOChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology8.minuteOfDay();
        org.joda.time.DurationField durationField21 = iSOChronology8.millis();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology8.year();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray26 = iSOChronology8.get(readablePeriod24, 74207750403600032L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 21659035L + "'", long17 == 21659035L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test09547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09547");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.millisOfSecond();
        org.joda.time.DurationField durationField13 = dateTimeField12.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNull(durationField13);
    }

    @Test
    public void test09548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09548");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField3 = iSOChronology0.weeks();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
    }

    @Test
    public void test09549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09549");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField16 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.weekyear();
        org.joda.time.DurationField durationField20 = iSOChronology13.millis();
        org.joda.time.DurationField durationField21 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test09550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09550");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.millis();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        long long26 = iSOChronology13.getDateTimeMillis(946684800000L, (int) (short) 1, 2, 0, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology13.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 946674120001L + "'", long26 == 946674120001L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test09551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09551");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.monthOfYear();
        org.joda.time.DurationField durationField11 = iSOChronology8.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.era();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test09552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09552");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial19 = null;
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str22 = dateTimeZone21.toString();
        java.lang.String str24 = dateTimeZone21.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        int int27 = dateTimeZone21.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone21);
        org.joda.time.DurationField durationField29 = iSOChronology28.minutes();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology28.weekyear();
        java.lang.String str31 = dateTimeField30.toString();
        org.joda.time.ReadablePartial readablePartial32 = null;
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        java.lang.String str35 = dateTimeZone34.toString();
        java.lang.String str37 = dateTimeZone34.getShortName(1L);
        int int39 = dateTimeZone34.getOffsetFromLocal((long) (byte) 0);
        int int41 = dateTimeZone34.getStandardOffset((long) (short) 0);
        java.lang.String str42 = dateTimeZone34.getID();
        long long45 = dateTimeZone34.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology46.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology46.minuteOfHour();
        org.joda.time.ReadablePartial readablePartial49 = null;
        int[] intArray52 = new int[] { (short) -1, 0 };
        int int53 = dateTimeField48.getMinimumValue(readablePartial49, intArray52);
        int int54 = dateTimeField30.getMinimumValue(readablePartial32, intArray52);
        int int55 = dateTimeField18.getMinimumValue(readablePartial19, intArray52);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = dateTimeField18.getType();
        boolean boolean57 = dateTimeField18.isLenient();
        boolean boolean58 = dateTimeField18.isLenient();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+52:00" + "'", str22, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+52:00" + "'", str24, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 187200000 + "'", int27 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "DateTimeField[weekyear]" + "'", str31, "DateTimeField[weekyear]");
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+52:00" + "'", str35, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+52:00" + "'", str37, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 187200000 + "'", int39 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 187200000 + "'", int41 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+52:00" + "'", str42, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-187200000L) + "'", long45 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-292275054) + "'", int54 == (-292275054));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test09553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09553");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology13.getZone();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str18 = dateTimeZone17.toString();
        java.lang.String str20 = dateTimeZone17.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        int int23 = dateTimeZone17.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField25 = iSOChronology24.minutes();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology24.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology24.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology24.minuteOfDay();
        org.joda.time.DurationField durationField29 = iSOChronology24.seconds();
        org.joda.time.DurationField durationField30 = iSOChronology24.millis();
        boolean boolean31 = dateTimeZone15.equals((java.lang.Object) iSOChronology24);
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology24.centuryOfEra();
        org.joda.time.DurationField durationField33 = iSOChronology24.years();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology24.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology24.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long40 = iSOChronology24.getDateTimeMillis((-1), (-56031041), 50400000, (-1030));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1030 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+52:00" + "'", str18, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+52:00" + "'", str20, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 187200000 + "'", int23 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test09554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09554");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField19 = iSOChronology13.hours();
        long long22 = durationField19.subtract(8553600100L, 34);
        int int24 = durationField19.getValue(6156761641810232L);
        org.joda.time.DurationFieldType durationFieldType25 = durationField19.getType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 8431200100L + "'", long22 == 8431200100L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1710211567 + "'", int24 == 1710211567);
        org.junit.Assert.assertNotNull(durationFieldType25);
    }

    @Test
    public void test09555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09555");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.year();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = iSOChronology8.getDateTimeMillis(479, 37, 14955, 65);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test09556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09556");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test09557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09557");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfDay();
        org.joda.time.DurationField durationField18 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test09558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09558");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.halfdayOfDay();
        long long23 = dateTimeField20.getDifferenceAsLong((-347663073599968L), 757366838646L);
        boolean boolean25 = dateTimeField20.isLeap((-2728997264801459999L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-8065287L) + "'", long23 == (-8065287L));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test09559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09559");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.weekyear();
        org.joda.time.DurationField durationField16 = iSOChronology8.centuries();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.era();
        org.joda.time.DurationField durationField19 = iSOChronology8.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology8.secondOfMinute();
        int int22 = dateTimeField21.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test09560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09560");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.secondOfDay();
        org.joda.time.DurationField durationField13 = iSOChronology8.millis();
        org.joda.time.DurationField durationField14 = iSOChronology8.weekyears();
        org.joda.time.DurationField durationField15 = iSOChronology8.days();
        long long18 = durationField15.add(2677294906547770035L, 28411200000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 5132022586547770035L + "'", long18 == 5132022586547770035L);
    }

    @Test
    public void test09561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09561");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long23 = iSOChronology13.getDateTimeMillis(259200100L, 11, (int) (byte) 10, (int) (short) 10, (int) ' ');
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.era();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.dayOfMonth();
        java.lang.String str26 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.year();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 285010032L + "'", long23 == 285010032L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[+52:00]" + "'", str26, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test09562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09562");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField20 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.millisOfSecond();
        org.joda.time.DurationField durationField22 = iSOChronology13.months();
        java.lang.String str23 = durationField22.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "months" + "'", str23, "months");
    }

    @Test
    public void test09563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09563");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfDay();
        org.joda.time.DurationField durationField13 = iSOChronology8.seconds();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str16 = dateTimeZone15.toString();
        java.lang.String str18 = dateTimeZone15.getShortName(1L);
        int int20 = dateTimeZone15.getOffsetFromLocal((long) (byte) 0);
        int int22 = dateTimeZone15.getStandardOffset((long) (short) 0);
        java.lang.String str23 = dateTimeZone15.getID();
        long long26 = dateTimeZone15.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField28 = iSOChronology27.months();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology27.secondOfDay();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology27.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology27.clockhourOfHalfday();
        org.joda.time.DurationField durationField33 = iSOChronology27.centuries();
        org.joda.time.DateTimeZone dateTimeZone34 = iSOChronology27.getZone();
        org.joda.time.Chronology chronology35 = iSOChronology8.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology8.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+52:00" + "'", str16, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+52:00" + "'", str18, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 187200000 + "'", int20 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 187200000 + "'", int22 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+52:00" + "'", str23, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-187200000L) + "'", long26 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test09564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09564");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.weekyear();
        org.joda.time.DurationField durationField16 = iSOChronology13.minutes();
        org.joda.time.DurationField durationField17 = iSOChronology13.weeks();
        org.joda.time.DurationField durationField18 = iSOChronology13.millis();
        org.joda.time.DurationField durationField19 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test09565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09565");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.era();
        org.joda.time.DurationField durationField14 = iSOChronology8.weekyears();
        int int17 = durationField14.getDifference((-5745716209828800000L), 486032222L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-182074498) + "'", int17 == (-182074498));
    }

    @Test
    public void test09566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09566");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfDay();
        org.joda.time.DurationField durationField13 = iSOChronology8.seconds();
        org.joda.time.DurationField durationField14 = iSOChronology8.millis();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = iSOChronology8.add(readablePeriod17, (-12L), 48);
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology8.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-12L) + "'", long20 == (-12L));
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test09567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09567");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.secondOfDay();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.lang.String str15 = dateTimeZone14.toString();
        java.lang.String str17 = dateTimeZone14.getShortName(1L);
        int int19 = dateTimeZone14.getOffsetFromLocal((long) (byte) 0);
        int int21 = dateTimeZone14.getStandardOffset((long) (short) 0);
        java.lang.String str22 = dateTimeZone14.getID();
        long long25 = dateTimeZone14.adjustOffset(0L, true);
        org.joda.time.Chronology chronology26 = iSOChronology8.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone27 = chronology26.getZone();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str30 = dateTimeZone29.toString();
        java.lang.String str32 = dateTimeZone29.getShortName(1L);
        int int34 = dateTimeZone29.getOffsetFromLocal((long) (byte) 0);
        int int36 = dateTimeZone29.getStandardOffset((long) (short) 0);
        java.lang.String str37 = dateTimeZone29.getID();
        java.util.TimeZone timeZone38 = dateTimeZone29.toTimeZone();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.lang.String str41 = dateTimeZone40.toString();
        java.lang.String str43 = dateTimeZone40.getShortName(1L);
        int int45 = dateTimeZone40.getOffsetFromLocal((long) (byte) 0);
        int int47 = dateTimeZone40.getStandardOffset((long) (short) 0);
        java.lang.String str48 = dateTimeZone40.getID();
        long long51 = dateTimeZone40.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology52 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone40);
        org.joda.time.DurationField durationField53 = iSOChronology52.months();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology52.secondOfDay();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology52.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology52.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology52.clockhourOfHalfday();
        org.joda.time.DurationField durationField58 = iSOChronology52.months();
        org.joda.time.DateTimeField dateTimeField59 = iSOChronology52.year();
        org.joda.time.DurationField durationField60 = iSOChronology52.hours();
        boolean boolean61 = dateTimeZone29.equals((java.lang.Object) iSOChronology52);
        long long63 = dateTimeZone27.getMillisKeepLocal(dateTimeZone29, (-7043509577418576948L));
        org.joda.time.ReadableInstant readableInstant64 = null;
        int int65 = dateTimeZone29.getOffset(readableInstant64);
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        java.lang.String str68 = dateTimeZone67.toString();
        java.lang.String str70 = dateTimeZone67.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone67);
        int int73 = dateTimeZone67.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology74 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone67);
        org.joda.time.DurationField durationField75 = iSOChronology74.minutes();
        org.joda.time.DateTimeField dateTimeField76 = iSOChronology74.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField77 = iSOChronology74.secondOfDay();
        org.joda.time.DurationField durationField78 = iSOChronology74.months();
        org.joda.time.DateTimeField dateTimeField79 = iSOChronology74.minuteOfHour();
        boolean boolean80 = dateTimeZone29.equals((java.lang.Object) dateTimeField79);
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, (int) (short) 1);
        java.util.TimeZone timeZone84 = dateTimeZone83.toTimeZone();
        long long87 = dateTimeZone83.adjustOffset(285010032L, false);
        long long89 = dateTimeZone29.getMillisKeepLocal(dateTimeZone83, 5173217340480000000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+52:00" + "'", str15, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+52:00" + "'", str17, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 187200000 + "'", int19 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 187200000 + "'", int21 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+52:00" + "'", str22, "+52:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+52:00" + "'", str30, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+52:00" + "'", str32, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 187200000 + "'", int34 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 187200000 + "'", int36 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+52:00" + "'", str37, "+52:00");
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+52:00" + "'", str41, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+52:00" + "'", str43, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 187200000 + "'", int45 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 187200000 + "'", int47 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+52:00" + "'", str48, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-187200000L) + "'", long51 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-7043509577418576948L) + "'", long63 == (-7043509577418576948L));
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 187200000 + "'", int65 == 187200000);
        org.junit.Assert.assertNotNull(dateTimeZone67);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+52:00" + "'", str68, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+52:00" + "'", str70, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 187200000 + "'", int73 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(timeZone84);
        org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "GMT-01:01");
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 285010032L + "'", long87 == 285010032L);
// flaky:         org.junit.Assert.assertTrue("'" + long89 + "' != '" + 5173217340670860000L + "'", long89 == 5173217340670860000L);
    }

    @Test
    public void test09568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09568");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.hourOfDay();
        org.joda.time.DurationField durationField21 = iSOChronology13.millis();
        org.joda.time.DurationField durationField22 = iSOChronology13.hours();
        long long28 = iSOChronology13.getDateTimeMillis(5530035L, (int) (short) 0, 7, (int) ' ', 3);
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology13.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-13947997L) + "'", long28 == (-13947997L));
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test09569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09569");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField21 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        boolean boolean26 = dateTimeZone25.isFixed();
        long long28 = dateTimeZone23.getMillisKeepLocal(dateTimeZone25, (-1037340000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-850140010L) + "'", long28 == (-850140010L));
    }

    @Test
    public void test09570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09570");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(349200000, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09571");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.months();
        org.joda.time.DurationField durationField12 = iSOChronology8.hours();
        org.joda.time.DurationField durationField13 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField14 = iSOChronology8.halfdays();
        org.joda.time.Chronology chronology15 = iSOChronology8.withUTC();
        long long19 = iSOChronology8.add((-2726520619356648000L), (-273470301000L), (int) '#');
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-2726530190817183000L) + "'", long19 == (-2726530190817183000L));
    }

    @Test
    public void test09572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09572");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.months();
        org.joda.time.DurationField durationField12 = iSOChronology8.weekyears();
        org.joda.time.DurationField durationField13 = iSOChronology8.seconds();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = iSOChronology8.add(readablePeriod18, 1012L, 365);
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology8.clockhourOfHalfday();
        org.joda.time.ReadablePartial readablePartial23 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long25 = iSOChronology8.set(readablePartial23, 262828800000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1012L + "'", long21 == 1012L);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test09573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09573");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField20 = iSOChronology13.hours();
        java.lang.String str21 = iSOChronology13.toString();
        org.joda.time.DateTimeZone dateTimeZone22 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.hourOfHalfday();
        java.lang.String str25 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[+52:00]" + "'", str21, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[+52:00]" + "'", str25, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test09574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09574");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.weekyear();
        org.joda.time.DurationField durationField22 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test09575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09575");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DurationField durationField16 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.era();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test09576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09576");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = iSOChronology8.add(readablePeriod14, (long) 'a', (-1));
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.dayOfMonth();
        org.joda.time.DurationField durationField19 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology8.dayOfWeek();
        org.joda.time.DurationField durationField22 = iSOChronology8.hours();
        org.joda.time.DurationFieldType durationFieldType23 = durationField22.getType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 97L + "'", long17 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationFieldType23);
    }

    @Test
    public void test09577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09577");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology20 = iSOChronology13.withZone(dateTimeZone19);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = iSOChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology21.dayOfMonth();
        java.lang.String str26 = iSOChronology21.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[UTC]" + "'", str26, "ISOChronology[UTC]");
    }

    @Test
    public void test09578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09578");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField18 = iSOChronology13.halfdays();
        java.lang.String str19 = iSOChronology13.toString();
        org.joda.time.DurationField durationField20 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.era();
        org.joda.time.DurationField durationField22 = iSOChronology13.millis();
        long long25 = durationField22.subtract(5530035L, (-297682553));
        long long26 = durationField22.getUnitMillis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+52:00]" + "'", str19, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 303212588L + "'", long25 == 303212588L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
    }

    @Test
    public void test09579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09579");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology8.getZone();
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology8.getZone();
        java.lang.String str17 = dateTimeZone15.getNameKey((-2039781599L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test09580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09580");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.dayOfWeek();
        long long18 = dateTimeField15.getDifferenceAsLong((-16416553L), 216670032L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-2L) + "'", long18 == (-2L));
    }

    @Test
    public void test09581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09581");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology13.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.secondOfDay();
        org.joda.time.DurationField durationField19 = dateTimeField18.getDurationField();
        long long22 = durationField19.getValueAsLong(946674120001L, (-84865878L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 946674120L + "'", long22 == 946674120L);
    }

    @Test
    public void test09582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09582");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.centuryOfEra();
        java.lang.String str19 = iSOChronology13.toString();
        org.joda.time.DurationField durationField20 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+52:00]" + "'", str19, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test09583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09583");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.yearOfCentury();
        org.joda.time.DurationField durationField17 = iSOChronology13.seconds();
        org.joda.time.DurationField durationField18 = iSOChronology13.seconds();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DurationField durationField20 = iSOChronology13.years();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test09584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09584");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.weekyear();
        org.joda.time.DurationField durationField16 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.millisOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray23 = iSOChronology13.get(readablePeriod21, (-4175399L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test09585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09585");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.Chronology chronology18 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = iSOChronology13.add(readablePeriod21, 1000L, 31);
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField26 = dateTimeField25.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1000L + "'", long24 == 1000L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test09586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09586");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfYear();
        org.joda.time.DurationField durationField14 = iSOChronology8.millis();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.minuteOfDay();
        org.joda.time.DurationField durationField16 = iSOChronology8.months();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology8.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test09587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09587");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str3 = dateTimeZone1.getID();
        long long7 = dateTimeZone1.convertLocalToUTC(10L, false, (long) '4');
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str10 = dateTimeZone9.toString();
        java.lang.String str12 = dateTimeZone9.getShortName(1L);
        int int14 = dateTimeZone9.getOffsetFromLocal((long) (byte) 0);
        int int16 = dateTimeZone9.getStandardOffset((long) (short) 0);
        java.lang.String str17 = dateTimeZone9.getID();
        long long20 = dateTimeZone9.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField22 = iSOChronology21.months();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology21.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology21.centuryOfEra();
        boolean boolean28 = dateTimeZone1.equals((java.lang.Object) iSOChronology21);
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology21.year();
        org.joda.time.DurationField durationField30 = dateTimeField29.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+52:00" + "'", str3, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-187199990L) + "'", long7 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+52:00" + "'", str10, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+52:00" + "'", str12, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 187200000 + "'", int14 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 187200000 + "'", int16 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+52:00" + "'", str17, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-187200000L) + "'", long20 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test09588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09588");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.weekyearOfCentury();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str21 = dateTimeZone20.toString();
        java.lang.String str23 = dateTimeZone20.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        int int26 = dateTimeZone20.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField28 = iSOChronology27.minutes();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology27.minuteOfHour();
        org.joda.time.DurationField durationField30 = iSOChronology27.days();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology27.year();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology27.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology27.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology27.weekyear();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology27.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology27.weekOfWeekyear();
        boolean boolean37 = iSOChronology13.equals((java.lang.Object) iSOChronology27);
        org.joda.time.DurationField durationField38 = iSOChronology27.halfdays();
        long long40 = durationField38.getMillis((-635521862));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+52:00" + "'", str21, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+52:00" + "'", str23, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 187200000 + "'", int26 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-27454544438400000L) + "'", long40 == (-27454544438400000L));
    }

    @Test
    public void test09589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09589");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.millisOfSecond();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.hourOfDay();
        org.joda.time.Chronology chronology21 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.weekyear();
        long long25 = dateTimeField22.set((-46680965L), "29");
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-61251771480965L) + "'", long25 == (-61251771480965L));
    }

    @Test
    public void test09590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09590");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.millisOfSecond();
        java.lang.String str24 = dateTimeField22.getAsText((long) 29);
        boolean boolean26 = dateTimeField22.isLeap(5L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "29" + "'", str24, "29");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test09591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09591");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.era();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.clockhourOfDay();
        org.joda.time.DurationField durationField16 = iSOChronology8.minutes();
        org.joda.time.Chronology chronology17 = iSOChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.clockhourOfDay();
        org.joda.time.Chronology chronology19 = iSOChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology8.yearOfCentury();
        org.joda.time.DurationField durationField21 = iSOChronology8.hours();
        org.joda.time.ReadablePartial readablePartial22 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long24 = iSOChronology8.set(readablePartial22, 113605026861271447L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test09592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09592");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str3 = dateTimeZone1.getID();
        long long7 = dateTimeZone1.convertLocalToUTC(10L, false, (long) '4');
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str10 = dateTimeZone9.toString();
        java.lang.String str12 = dateTimeZone9.getShortName(1L);
        int int14 = dateTimeZone9.getOffsetFromLocal((long) (byte) 0);
        int int16 = dateTimeZone9.getStandardOffset((long) (short) 0);
        java.lang.String str17 = dateTimeZone9.getID();
        long long20 = dateTimeZone9.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField22 = iSOChronology21.months();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology21.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology21.centuryOfEra();
        boolean boolean28 = dateTimeZone1.equals((java.lang.Object) iSOChronology21);
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology21.year();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology21.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+52:00" + "'", str3, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-187199990L) + "'", long7 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+52:00" + "'", str10, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+52:00" + "'", str12, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 187200000 + "'", int14 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 187200000 + "'", int16 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+52:00" + "'", str17, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-187200000L) + "'", long20 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test09593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09593");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.monthOfYear();
        long long24 = dateTimeField22.remainder(181083187353600000L);
        int int26 = dateTimeField22.getMaximumValue(121638015L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 964800000L + "'", long24 == 964800000L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
    }

    @Test
    public void test09594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09594");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField18 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.monthOfYear();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.lang.String str23 = dateTimeZone22.toString();
        java.lang.String str25 = dateTimeZone22.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        int int28 = dateTimeZone22.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField30 = iSOChronology29.minutes();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology29.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology29.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology29.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology29.dayOfYear();
        org.joda.time.DurationField durationField35 = iSOChronology29.millis();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology29.minuteOfDay();
        boolean boolean37 = iSOChronology13.equals((java.lang.Object) dateTimeField36);
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField39 = iSOChronology13.centuries();
        org.joda.time.DurationField durationField40 = iSOChronology13.years();
        org.joda.time.DurationField durationField41 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology13.yearOfEra();
        org.joda.time.DurationField durationField43 = iSOChronology13.weekyears();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+52:00" + "'", str23, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+52:00" + "'", str25, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 187200000 + "'", int28 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
    }

    @Test
    public void test09595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09595");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.minutes();
        org.joda.time.DurationField durationField16 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.year();
        boolean boolean18 = dateTimeField17.isLenient();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test09596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09596");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField22 = iSOChronology13.seconds();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.weekyearOfCentury();
        int int26 = dateTimeField24.get(946684800000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test09597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09597");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology20 = iSOChronology13.withZone(dateTimeZone19);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone19.getName((-59079023999997L), locale22);
        int int25 = dateTimeZone19.getOffset(299410032L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.lang.String str28 = dateTimeZone27.toString();
        java.lang.String str30 = dateTimeZone27.getShortName(1L);
        int int32 = dateTimeZone27.getOffsetFromLocal((long) (byte) 0);
        int int34 = dateTimeZone27.getStandardOffset((long) (short) 0);
        java.lang.String str35 = dateTimeZone27.getID();
        long long38 = dateTimeZone27.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone27);
        org.joda.time.DurationField durationField40 = iSOChronology39.months();
        org.joda.time.DurationField durationField41 = iSOChronology39.weeks();
        org.joda.time.DateTimeZone dateTimeZone42 = iSOChronology39.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone42);
        long long45 = dateTimeZone42.nextTransition((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone42);
        long long48 = dateTimeZone19.getMillisKeepLocal(dateTimeZone42, (-86280001L));
        java.lang.String str50 = dateTimeZone19.getShortName((-2209003200000L));
        java.lang.String str52 = dateTimeZone19.getNameKey(3024000000L);
        org.joda.time.chrono.ISOChronology iSOChronology53 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone19);
        java.util.TimeZone timeZone54 = dateTimeZone19.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+52:00" + "'", str28, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+52:00" + "'", str30, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 187200000 + "'", int32 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 187200000 + "'", int34 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+52:00" + "'", str35, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-187200000L) + "'", long38 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(iSOChronology43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-273480001L) + "'", long48 == (-273480001L));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "UTC" + "'", str52, "UTC");
        org.junit.Assert.assertNotNull(iSOChronology53);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test09598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09598");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField13 = iSOChronology8.weeks();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        boolean boolean17 = dateTimeZone15.equals((java.lang.Object) true);
        long long19 = dateTimeZone15.previousTransition((long) 10);
        int int21 = dateTimeZone15.getStandardOffset((long) ' ');
        org.joda.time.Chronology chronology22 = iSOChronology8.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test09599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09599");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DurationField durationField16 = iSOChronology13.days();
        org.joda.time.DurationField durationField17 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = iSOChronology13.getDateTimeMillis((-63141120000000000L), 16516, 1800024, (-16410892), (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 16516 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test09600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09600");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField12 = iSOChronology8.years();
        org.joda.time.DurationField durationField13 = iSOChronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.year();
        org.joda.time.DurationField durationField15 = iSOChronology8.millis();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.weekOfWeekyear();
        org.joda.time.DurationField durationField18 = dateTimeField17.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNull(durationField18);
    }

    @Test
    public void test09601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09601");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.dayOfMonth();
        java.util.Locale locale21 = null;
        int int22 = dateTimeField20.getMaximumShortTextLength(locale21);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = dateTimeField20.getAsShortText(readablePartial23, locale24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
    }

    @Test
    public void test09602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09602");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long23 = iSOChronology13.getDateTimeMillis(259200100L, 11, (int) (byte) 10, (int) (short) 10, (int) ' ');
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.era();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.dayOfMonth();
        java.lang.String str26 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.dayOfYear();
        org.joda.time.Chronology chronology28 = iSOChronology13.withUTC();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 285010032L + "'", long23 == 285010032L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[+52:00]" + "'", str26, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
    }

    @Test
    public void test09603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09603");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.millisOfSecond();
        org.joda.time.DurationField durationField21 = iSOChronology13.seconds();
        long long23 = durationField21.getValueAsLong(164096046060000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 164096046060L + "'", long23 == 164096046060L);
    }

    @Test
    public void test09604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09604");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DurationField durationField17 = iSOChronology13.millis();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.era();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str24 = dateTimeZone23.toString();
        java.lang.String str26 = dateTimeZone23.getShortName(1L);
        int int28 = dateTimeZone23.getOffsetFromLocal((long) (byte) 0);
        int int30 = dateTimeZone23.getStandardOffset((long) (short) 0);
        java.lang.String str31 = dateTimeZone23.getID();
        long long34 = dateTimeZone23.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField36 = iSOChronology35.months();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology35.secondOfDay();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology35.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology35.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology35.clockhourOfHalfday();
        org.joda.time.DurationField durationField41 = iSOChronology35.months();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((int) 'a');
        org.joda.time.Chronology chronology44 = iSOChronology35.withZone(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone45 = iSOChronology35.getZone();
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        int int48 = dateTimeZone45.getStandardOffset((-59943092999997L));
        org.joda.time.Chronology chronology49 = iSOChronology13.withZone(dateTimeZone45);
        org.joda.time.ReadablePartial readablePartial50 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray52 = iSOChronology13.get(readablePartial50, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+52:00" + "'", str24, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+52:00" + "'", str26, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 187200000 + "'", int28 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 187200000 + "'", int30 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+52:00" + "'", str31, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-187200000L) + "'", long34 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 187200000 + "'", int48 == 187200000);
        org.junit.Assert.assertNotNull(chronology49);
    }

    @Test
    public void test09605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09605");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.era();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.weekOfWeekyear();
        long long17 = dateTimeField14.getDifferenceAsLong((-555096754198L), 33300L);
        java.util.Locale locale18 = null;
        int int19 = dateTimeField14.getMaximumTextLength(locale18);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-917L) + "'", long17 == (-917L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
    }

    @Test
    public void test09606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09606");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DurationField durationField20 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.yearOfCentury();
        org.joda.time.DurationField durationField24 = iSOChronology13.seconds();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = iSOChronology13.add(readablePeriod25, 378691200000L, 12);
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology13.halfdayOfDay();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        long long34 = iSOChronology13.add(readablePeriod31, 1176988489L, 5);
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology13.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 378691200000L + "'", long28 == 378691200000L);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1176988489L + "'", long34 == 1176988489L);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test09607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09607");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) (byte) 1);
        long long5 = dateTimeZone1.convertUTCToLocal(97L);
        java.lang.String str6 = dateTimeZone1.getID();
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone1.getOffset(readableInstant7);
        java.util.TimeZone timeZone9 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = dateTimeZone10.getOffset(readableInstant11);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 187200000 + "'", int3 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 187200097L + "'", long5 == 187200097L);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+52:00" + "'", str6, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test09608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09608");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.halfdayOfDay();
        org.joda.time.DurationField durationField21 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DurationField durationField23 = iSOChronology13.days();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test09609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09609");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.millisOfSecond();
        org.joda.time.DurationField durationField21 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.lang.String str27 = dateTimeZone26.toString();
        java.lang.String str29 = dateTimeZone26.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        int int32 = dateTimeZone26.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone26);
        org.joda.time.DurationField durationField34 = iSOChronology33.minutes();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology33.monthOfYear();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology33.centuryOfEra();
        org.joda.time.ReadablePartial readablePartial37 = null;
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        java.lang.String str40 = dateTimeZone39.toString();
        java.lang.String str42 = dateTimeZone39.getShortName(1L);
        int int44 = dateTimeZone39.getOffsetFromLocal((long) (byte) 0);
        int int46 = dateTimeZone39.getStandardOffset((long) (short) 0);
        java.lang.String str47 = dateTimeZone39.getID();
        long long50 = dateTimeZone39.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology51 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology51.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology51.dayOfYear();
        org.joda.time.DurationField durationField54 = iSOChronology51.weeks();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology51.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial56 = null;
        int[] intArray63 = new int[] { (short) 100, '4', (short) 1, (-292275054), 292278993 };
        int[] intArray65 = dateTimeField55.addWrapPartial(readablePartial56, 59, intArray63, (int) (short) 0);
        int int66 = dateTimeField36.getMinimumValue(readablePartial37, intArray63);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray68 = dateTimeField22.addWrapField(readablePartial23, (-2878), intArray63, (-28664));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -2878");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+52:00" + "'", str27, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+52:00" + "'", str29, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 187200000 + "'", int32 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+52:00" + "'", str40, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+52:00" + "'", str42, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 187200000 + "'", int44 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 187200000 + "'", int46 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+52:00" + "'", str47, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-187200000L) + "'", long50 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[100, 52, 1, -292275054, 292278993]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[100, 52, 1, -292275054, 292278993]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test09610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09610");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.weekyearOfCentury();
        long long18 = iSOChronology8.add(25256447827200100L, (-59079023999997L), 24);
        // The following exception was thrown during execution in test generation
        try {
            long long26 = iSOChronology8.getDateTimeMillis(29999935, 0, (int) (byte) 1, 41, (-102162), (-81945016), 99);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 41 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 23838551251200172L + "'", long18 == 23838551251200172L);
    }

    @Test
    public void test09611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09611");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone1.getOffset(readableInstant9);
        long long13 = dateTimeZone1.convertLocalToUTC(3155760000001L, false);
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str17 = dateTimeZone16.toString();
        java.lang.String str19 = dateTimeZone16.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        long long22 = dateTimeZone16.convertUTCToLocal((long) (byte) 10);
        long long25 = dateTimeZone16.convertLocalToUTC((long) 292278993, false);
        long long27 = dateTimeZone16.nextTransition((-62167406399968L));
        long long29 = dateTimeZone16.nextTransition((long) 23);
        org.joda.time.Chronology chronology30 = iSOChronology14.withZone(dateTimeZone16);
        long long34 = iSOChronology14.add((long) (-349203), (-1132185596880L), 0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 187200000 + "'", int10 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 3155572800001L + "'", long13 == 3155572800001L);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+52:00" + "'", str17, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+52:00" + "'", str19, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 187200010L + "'", long22 == 187200010L);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 105078993L + "'", long25 == 105078993L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-62167406399968L) + "'", long27 == (-62167406399968L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 23L + "'", long29 == 23L);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-349203L) + "'", long34 == (-349203L));
    }

    @Test
    public void test09612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09612");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.secondOfDay();
        long long23 = dateTimeField21.roundHalfEven((long) (-3660000));
        org.joda.time.ReadablePartial readablePartial24 = null;
        java.util.Locale locale25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = dateTimeField21.getAsShortText(readablePartial24, locale25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3660000L) + "'", long23 == (-3660000L));
    }

    @Test
    public void test09613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09613");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone18 = iSOChronology13.getZone();
        long long20 = dateTimeZone18.previousTransition(0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test09614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09614");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        java.lang.String str18 = iSOChronology13.toString();
        org.joda.time.DurationField durationField19 = iSOChronology13.millis();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.hourOfDay();
        org.joda.time.DurationField durationField21 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.yearOfEra();
        long long24 = dateTimeField22.roundCeiling((-7043511686745600000L));
        long long26 = dateTimeField22.remainder((-201480001L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+52:00]" + "'", str18, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-7043511686587200000L) + "'", long24 == (-7043511686587200000L));
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 31521719999L + "'", long26 == 31521719999L);
    }

    @Test
    public void test09615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09615");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        org.joda.time.Chronology chronology20 = iSOChronology13.withUTC();
        org.joda.time.DurationField durationField21 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField24 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test09616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09616");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField21 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.minuteOfHour();
        long long26 = iSOChronology13.add(298800100L, 187200002L, 1);
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.era();
        org.joda.time.DurationField durationField28 = iSOChronology13.minutes();
        long long31 = durationField28.getMillis((-297682553L), 6232080201699120000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 486000102L + "'", long26 == 486000102L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-17860953180000L) + "'", long31 == (-17860953180000L));
    }

    @Test
    public void test09617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09617");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.weekyearOfCentury();
        long long22 = iSOChronology13.add((long) (short) 100, 0L, 3);
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L + "'", long22 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test09618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09618");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DurationField durationField16 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.millisOfDay();
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeField18.getAsShortText((-7127358L), locale20);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "7272642" + "'", str21, "7272642");
    }

    @Test
    public void test09619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09619");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.hours();
        org.joda.time.Chronology chronology19 = iSOChronology13.withUTC();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test09620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09620");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.hourOfHalfday();
        org.joda.time.DurationField durationField13 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField14 = iSOChronology8.weeks();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test09621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09621");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.secondOfMinute();
        org.joda.time.Chronology chronology14 = iSOChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.dayOfWeek();
        int int16 = dateTimeField15.getMaximumValue();
        org.joda.time.DurationField durationField17 = dateTimeField15.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7 + "'", int16 == 7);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test09622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09622");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.clockhourOfDay();
        org.joda.time.DurationField durationField14 = iSOChronology8.halfdays();
        org.joda.time.DurationFieldType durationFieldType15 = durationField14.getType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationFieldType15);
    }

    @Test
    public void test09623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09623");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.monthOfYear();
        long long17 = dateTimeField15.roundHalfCeiling(363659996L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-187200000L) + "'", long17 == (-187200000L));
    }

    @Test
    public void test09624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09624");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.clockhourOfHalfday();
        org.joda.time.DurationField durationField13 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField14 = iSOChronology8.millis();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test09625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09625");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long23 = iSOChronology13.getDateTimeMillis(259200100L, 11, (int) (byte) 10, (int) (short) 10, (int) ' ');
        org.joda.time.DurationField durationField24 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.minuteOfHour();
        org.joda.time.DurationField durationField28 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology13.hourOfHalfday();
        org.joda.time.DurationField durationField30 = iSOChronology13.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 285010032L + "'", long23 == 285010032L);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test09626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09626");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.months();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forID("+00:00");
        int int16 = dateTimeZone14.getOffsetFromLocal((long) 10);
        int int18 = dateTimeZone14.getOffset((long) 349200000);
        org.joda.time.Chronology chronology19 = iSOChronology8.withZone(dateTimeZone14);
        long long23 = dateTimeZone14.convertLocalToUTC(113605027200000029L, false, (long) 4);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone14.getName((-273470301000L), locale25);
        int int28 = dateTimeZone14.getOffset((-62135784000000L));
        java.lang.String str30 = dateTimeZone14.getShortName((-7953616799859660000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 113605027200000029L + "'", long23 == 113605027200000029L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
    }

    @Test
    public void test09627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09627");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.era();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = dateTimeField14.set((-67721007L), (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 10 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test09628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09628");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.monthOfYear();
        org.joda.time.ReadablePartial readablePartial17 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str21 = dateTimeZone20.toString();
        java.lang.String str23 = dateTimeZone20.getShortName(1L);
        int int25 = dateTimeZone20.getOffsetFromLocal((long) (byte) 0);
        int int27 = dateTimeZone20.getStandardOffset((long) (short) 0);
        java.lang.String str28 = dateTimeZone20.getID();
        long long31 = dateTimeZone20.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField33 = iSOChronology32.months();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology32.secondOfDay();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology32.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology32.clockhourOfHalfday();
        org.joda.time.Chronology chronology37 = iSOChronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology32.secondOfDay();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology32.secondOfDay();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology32.yearOfEra();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology32.secondOfMinute();
        org.joda.time.ReadablePartial readablePartial42 = null;
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        java.lang.String str45 = dateTimeZone44.toString();
        java.lang.String str47 = dateTimeZone44.getShortName(1L);
        int int49 = dateTimeZone44.getOffsetFromLocal((long) (byte) 0);
        int int51 = dateTimeZone44.getStandardOffset((long) (short) 0);
        java.lang.String str52 = dateTimeZone44.getID();
        long long55 = dateTimeZone44.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology56 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone44);
        org.joda.time.DurationField durationField57 = iSOChronology56.months();
        org.joda.time.DateTimeZone dateTimeZone58 = iSOChronology56.getZone();
        org.joda.time.DateTimeField dateTimeField59 = iSOChronology56.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone60 = iSOChronology56.getZone();
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology56.yearOfEra();
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology56.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology56.dayOfWeek();
        org.joda.time.ReadablePartial readablePartial64 = null;
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        java.lang.String str67 = dateTimeZone66.toString();
        java.lang.String str69 = dateTimeZone66.getShortName(1L);
        int int71 = dateTimeZone66.getOffsetFromLocal((long) (byte) 0);
        int int73 = dateTimeZone66.getStandardOffset((long) (short) 0);
        java.lang.String str74 = dateTimeZone66.getID();
        long long77 = dateTimeZone66.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology78 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField79 = iSOChronology78.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField80 = iSOChronology78.dayOfYear();
        org.joda.time.DurationField durationField81 = iSOChronology78.weeks();
        org.joda.time.DateTimeField dateTimeField82 = iSOChronology78.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial83 = null;
        int[] intArray90 = new int[] { (short) 100, '4', (short) 1, (-292275054), 292278993 };
        int[] intArray92 = dateTimeField82.addWrapPartial(readablePartial83, 59, intArray90, (int) (short) 0);
        int int93 = dateTimeField63.getMinimumValue(readablePartial64, intArray92);
        int int94 = dateTimeField41.getMinimumValue(readablePartial42, intArray92);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray96 = dateTimeField16.set(readablePartial17, (-297682553), intArray92, (-1958));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1958 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+52:00" + "'", str21, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+52:00" + "'", str23, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 187200000 + "'", int25 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 187200000 + "'", int27 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+52:00" + "'", str28, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-187200000L) + "'", long31 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+52:00" + "'", str45, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+52:00" + "'", str47, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 187200000 + "'", int49 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 187200000 + "'", int51 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+52:00" + "'", str52, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-187200000L) + "'", long55 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+52:00" + "'", str67, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+52:00" + "'", str69, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 187200000 + "'", int71 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 187200000 + "'", int73 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+52:00" + "'", str74, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-187200000L) + "'", long77 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[100, 52, 1, -292275054, 292278993]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[100, 52, 1, -292275054, 292278993]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test09629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09629");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfDay();
        org.joda.time.DurationField durationField18 = iSOChronology13.seconds();
        org.joda.time.DurationField durationField19 = iSOChronology13.seconds();
        long long21 = durationField19.getMillis(360000000);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = durationField19.getDifference(32024862864000000L, 2491200002L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 32024860372799");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 360000000000L + "'", long21 == 360000000000L);
    }

    @Test
    public void test09630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09630");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DurationField durationField12 = iSOChronology8.millis();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.weekyear();
        org.joda.time.Chronology chronology14 = iSOChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.yearOfEra();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str18 = dateTimeZone17.toString();
        java.lang.String str20 = dateTimeZone17.getShortName(1L);
        int int22 = dateTimeZone17.getOffsetFromLocal((long) (byte) 0);
        int int24 = dateTimeZone17.getStandardOffset((long) (short) 0);
        java.lang.String str25 = dateTimeZone17.getID();
        long long28 = dateTimeZone17.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology29.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology29.minuteOfHour();
        org.joda.time.DurationField durationField32 = iSOChronology29.days();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology29.hourOfHalfday();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.lang.String str37 = dateTimeZone35.getNameKey(10L);
        long long39 = dateTimeZone35.previousTransition(0L);
        org.joda.time.Chronology chronology40 = iSOChronology29.withZone(dateTimeZone35);
        boolean boolean42 = dateTimeZone35.isStandardOffset((long) 11);
        java.lang.String str44 = dateTimeZone35.getName(3155695200000L);
        boolean boolean45 = iSOChronology8.equals((java.lang.Object) str44);
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField47 = iSOChronology8.centuries();
        int int50 = durationField47.getDifference((-2722733819006400000L), (-187199900L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+52:00" + "'", str18, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+52:00" + "'", str20, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 187200000 + "'", int22 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 187200000 + "'", int24 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+52:00" + "'", str25, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-187200000L) + "'", long28 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+52:00" + "'", str44, "+52:00");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-862800) + "'", int50 == (-862800));
    }

    @Test
    public void test09631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09631");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField13 = iSOChronology8.seconds();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test09632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09632");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.millisOfSecond();
        org.joda.time.DurationField durationField21 = iSOChronology13.seconds();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        long long25 = iSOChronology13.add(readablePeriod22, (long) 8904, 24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = iSOChronology13.add(readablePeriod26, 3110402224560000L, 8);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 8904L + "'", long25 == 8904L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3110402224560000L + "'", long29 == 3110402224560000L);
    }

    @Test
    public void test09633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09633");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.weekyearOfCentury();
        int int24 = dateTimeField21.getDifference(169859999L, (long) 5819);
        java.lang.String str26 = dateTimeField21.getAsText((-113218560000000000L));
        int int28 = dateTimeField21.getLeapAmount((long) (-10360800));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "84" + "'", str26, "84");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test09634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09634");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology13.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField18 = iSOChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology17.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology17.yearOfCentury();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str24 = dateTimeZone23.toString();
        java.lang.String str26 = dateTimeZone23.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        int int29 = dateTimeZone23.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone31 = iSOChronology30.getZone();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology30.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology30.year();
        long long38 = iSOChronology30.getDateTimeMillis((int) 'a', 11, (int) (byte) 10, 3);
        org.joda.time.DurationField durationField39 = iSOChronology30.weekyears();
        org.joda.time.DateTimeZone dateTimeZone40 = iSOChronology30.getZone();
        long long42 = dateTimeZone40.convertUTCToLocal((-540897593L));
        org.joda.time.Chronology chronology43 = iSOChronology17.withZone(dateTimeZone40);
        long long46 = dateTimeZone40.adjustOffset(119869808500296000L, true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+52:00" + "'", str24, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+52:00" + "'", str26, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 187200000 + "'", int29 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-59079211199997L) + "'", long38 == (-59079211199997L));
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-353697593L) + "'", long42 == (-353697593L));
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 119869808500296000L + "'", long46 == 119869808500296000L);
    }

    @Test
    public void test09635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09635");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = iSOChronology13.getDateTimeMillis(192719996L, (-483), (-56031041), 148830006, (-4200000));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -483 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test09636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09636");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField16 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.millisOfDay();
        org.joda.time.DurationField durationField18 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.millisOfDay();
        org.joda.time.DurationField durationField20 = dateTimeField19.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNull(durationField20);
    }

    @Test
    public void test09637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09637");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField20 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.yearOfEra();
        boolean boolean27 = dateTimeField25.isLeap((-1884406191170861L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test09638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09638");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfDay();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.lang.String str20 = dateTimeZone19.toString();
        java.lang.String str22 = dateTimeZone19.getShortName(1L);
        int int24 = dateTimeZone19.getOffsetFromLocal((long) (byte) 0);
        int int26 = dateTimeZone19.getStandardOffset((long) (short) 0);
        java.lang.String str27 = dateTimeZone19.getID();
        long long30 = dateTimeZone19.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField32 = iSOChronology31.months();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology31.secondOfDay();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology31.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology31.secondOfMinute();
        org.joda.time.DurationField durationField36 = iSOChronology31.weeks();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology38 = iSOChronology31.withZone(dateTimeZone37);
        org.joda.time.Chronology chronology39 = iSOChronology13.withZone(dateTimeZone37);
        org.joda.time.DurationField durationField40 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology13.clockhourOfDay();
        org.joda.time.DurationField durationField42 = iSOChronology13.years();
        org.joda.time.DurationField durationField43 = iSOChronology13.centuries();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+52:00" + "'", str20, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+52:00" + "'", str22, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 187200000 + "'", int24 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 187200000 + "'", int26 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+52:00" + "'", str27, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-187200000L) + "'", long30 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
    }

    @Test
    public void test09639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09639");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long23 = iSOChronology13.getDateTimeMillis(259200100L, 11, (int) (byte) 10, (int) (short) 10, (int) ' ');
        org.joda.time.DurationField durationField24 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.hourOfDay();
        org.joda.time.DurationField durationField26 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 285010032L + "'", long23 == 285010032L);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test09640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09640");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        int int11 = dateTimeZone1.getOffset(46658764800000L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        java.lang.String str16 = dateTimeZone13.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        int int19 = dateTimeZone13.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField21 = iSOChronology20.minutes();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology20.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology20.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology20.year();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology20.weekyear();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology20.centuryOfEra();
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.lang.String str29 = dateTimeZone28.toString();
        java.lang.String str31 = dateTimeZone28.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        long long34 = dateTimeZone28.convertUTCToLocal((long) (byte) 10);
        long long37 = dateTimeZone28.convertLocalToUTC((long) 292278993, false);
        org.joda.time.Chronology chronology38 = iSOChronology20.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology20.hourOfHalfday();
        boolean boolean40 = dateTimeZone1.equals((java.lang.Object) iSOChronology20);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray44 = iSOChronology20.get(readablePeriod41, 673920219600000L, (-176359680000000000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 187200000 + "'", int11 == 187200000);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+52:00" + "'", str14, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+52:00" + "'", str16, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 187200000 + "'", int19 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+52:00" + "'", str29, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+52:00" + "'", str31, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 187200010L + "'", long34 == 187200010L);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 105078993L + "'", long37 == 105078993L);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test09641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09641");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone1.getOffset(readableInstant6);
        boolean boolean9 = dateTimeZone1.isStandardOffset((long) (short) 1);
        boolean boolean10 = dateTimeZone1.isFixed();
        boolean boolean11 = dateTimeZone1.isFixed();
        org.joda.time.ReadableInstant readableInstant12 = null;
        int int13 = dateTimeZone1.getOffset(readableInstant12);
        int int15 = dateTimeZone1.getOffsetFromLocal(321569805600000L);
        int int17 = dateTimeZone1.getOffset(298800000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 187200000 + "'", int13 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 187200000 + "'", int15 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 187200000 + "'", int17 == 187200000);
    }

    @Test
    public void test09642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09642");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField13 = iSOChronology8.seconds();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.hourOfHalfday();
        org.joda.time.DurationField durationField16 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.year();
        org.joda.time.DurationField durationField18 = iSOChronology8.weeks();
        long long21 = durationField18.add((-322237440000000000L), 0);
        long long24 = durationField18.getValueAsLong((-7043511681738000000L), (-36059035L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-322237440000000000L) + "'", long21 == (-322237440000000000L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-11646017992L) + "'", long24 == (-11646017992L));
    }

    @Test
    public void test09643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09643");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((-800));
        java.lang.String str3 = dateTimeZone1.getNameKey((-31827600000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test09644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09644");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        long long20 = dateTimeField18.roundFloor((long) (byte) -1);
        long long23 = dateTimeField18.addWrapField((-2208571200000L), 863999);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeField18.getAsText((int) (short) 0, locale25);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-3600000L) + "'", long20 == (-3600000L));
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-2208531600000L) + "'", long23 == (-2208531600000L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
    }

    @Test
    public void test09645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09645");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test09646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09646");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField16 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DurationField durationField18 = iSOChronology13.months();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str21 = dateTimeZone20.toString();
        java.lang.String str23 = dateTimeZone20.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        int int26 = dateTimeZone20.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone28 = iSOChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology27.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology27.year();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology27.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology27.era();
        org.joda.time.DurationField durationField34 = iSOChronology27.seconds();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.lang.String str37 = dateTimeZone36.toString();
        java.lang.String str39 = dateTimeZone36.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        int int42 = dateTimeZone36.getOffsetFromLocal((long) (short) -1);
        java.util.Locale locale44 = null;
        java.lang.String str45 = dateTimeZone36.getShortName(86400000L, locale44);
        org.joda.time.Chronology chronology46 = iSOChronology27.withZone(dateTimeZone36);
        org.joda.time.Chronology chronology47 = iSOChronology13.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology13.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+52:00" + "'", str21, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+52:00" + "'", str23, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 187200000 + "'", int26 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+52:00" + "'", str37, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+52:00" + "'", str39, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 187200000 + "'", int42 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+52:00" + "'", str45, "+52:00");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test09647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09647");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField18 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.halfdayOfDay();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray26 = iSOChronology13.get(readablePeriod24, (-181610101L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test09648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09648");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.clockhourOfDay();
        org.joda.time.DurationField durationField14 = iSOChronology8.hours();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.year();
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology8.getZone();
        boolean boolean17 = dateTimeZone16.isFixed();
        boolean boolean19 = dateTimeZone16.isStandardOffset(198073939960291390L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test09649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09649");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DurationField durationField16 = iSOChronology13.days();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.monthOfYear();
        org.joda.time.DurationField durationField21 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.secondOfDay();
        org.joda.time.DurationField durationField23 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.weekOfWeekyear();
        java.util.Locale locale25 = null;
        int int26 = dateTimeField24.getMaximumShortTextLength(locale25);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
    }

    @Test
    public void test09650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09650");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField22 = iSOChronology13.seconds();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test09651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09651");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = iSOChronology8.getDateTimeMillis(479, 1974887, 987033600, (-17340001));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -17340001 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test09652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09652");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10957, (-3652));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: -3652");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09653");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.millisOfSecond();
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeField14.getAsText(599961600000L, locale16);
        boolean boolean18 = dateTimeField14.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test09654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09654");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long23 = iSOChronology13.getDateTimeMillis(259200100L, 11, (int) (byte) 10, (int) (short) 10, (int) ' ');
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.era();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone26 = iSOChronology13.getZone();
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.lang.String str29 = dateTimeZone28.toString();
        java.lang.String str31 = dateTimeZone28.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        int int34 = dateTimeZone28.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone28);
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone28);
        org.joda.time.ReadableInstant readableInstant37 = null;
        int int38 = dateTimeZone28.getOffset(readableInstant37);
        long long40 = dateTimeZone28.convertUTCToLocal(0L);
        long long42 = dateTimeZone26.getMillisKeepLocal(dateTimeZone28, (-59106254400000L));
        java.lang.String str44 = dateTimeZone26.getNameKey(24806879L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 285010032L + "'", long23 == 285010032L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+52:00" + "'", str29, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+52:00" + "'", str31, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 187200000 + "'", int34 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(iSOChronology36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 187200000 + "'", int38 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 187200000L + "'", long40 == 187200000L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-59106254400000L) + "'", long42 == (-59106254400000L));
// flaky:         org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test09655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09655");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) 'a');
        java.lang.String str2 = dateTimeZone1.getID();
        long long4 = dateTimeZone1.nextTransition((long) ' ');
        java.lang.String str5 = dateTimeZone1.toString();
        int int7 = dateTimeZone1.getOffsetFromLocal(172374067353660000L);
        long long9 = dateTimeZone1.convertUTCToLocal((-158288399900L));
        long long11 = dateTimeZone1.previousTransition(947682L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone1.getName(176770334962740000L, locale13);
        boolean boolean15 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+97:00" + "'", str5, "+97:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 349200000 + "'", int7 == 349200000);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-157939199900L) + "'", long9 == (-157939199900L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 947682L + "'", long11 == 947682L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+97:00" + "'", str14, "+97:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test09656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09656");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone22 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test09657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09657");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.minutes();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray23 = iSOChronology13.get(readablePeriod20, 63113977052L, 202026774657600000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test09658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09658");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField20 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.year();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = dateTimeField21.add(3858840345599999L, (-62025080391096L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -62025080391096");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test09659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09659");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology20 = iSOChronology13.withZone(dateTimeZone19);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology21.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long29 = iSOChronology21.getDateTimeMillis(31536000000L, 2277360, (-36969), 5462316, 41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2277360 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test09660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09660");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long23 = iSOChronology13.getDateTimeMillis(259200100L, 11, (int) (byte) 10, (int) (short) 10, (int) ' ');
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.era();
        org.joda.time.DurationField durationField25 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.millisOfSecond();
        org.joda.time.DurationField durationField27 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 285010032L + "'", long23 == 285010032L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test09661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09661");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.Chronology chronology18 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfYear();
        long long25 = iSOChronology13.add(197821440000000000L, 25249996029139L, 10);
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.clockhourOfDay();
        boolean boolean28 = dateTimeField26.isLeap((-361753080519600000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 198073939960291390L + "'", long25 == 198073939960291390L);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test09662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09662");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField20 = iSOChronology13.hours();
        org.joda.time.DurationField durationField21 = iSOChronology13.hours();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str24 = dateTimeZone23.toString();
        java.lang.String str26 = dateTimeZone23.getShortName(1L);
        int int28 = dateTimeZone23.getOffsetFromLocal((long) (byte) 0);
        int int30 = dateTimeZone23.getStandardOffset((long) (short) 0);
        java.lang.String str31 = dateTimeZone23.getID();
        long long34 = dateTimeZone23.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField36 = iSOChronology35.months();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology35.secondOfDay();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology35.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology35.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology35.minuteOfDay();
        org.joda.time.DurationField durationField41 = iSOChronology35.weekyears();
        org.joda.time.DurationField durationField42 = iSOChronology35.hours();
        java.lang.String str43 = iSOChronology35.toString();
        org.joda.time.DateTimeZone dateTimeZone44 = iSOChronology35.getZone();
        org.joda.time.Chronology chronology45 = iSOChronology13.withZone(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology13.millisOfSecond();
        org.joda.time.DurationField durationField47 = iSOChronology13.weeks();
        long long49 = durationField47.getValueAsLong((-36000000L));
        org.joda.time.DurationFieldType durationFieldType50 = durationField47.getType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+52:00" + "'", str24, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+52:00" + "'", str26, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 187200000 + "'", int28 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 187200000 + "'", int30 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+52:00" + "'", str31, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-187200000L) + "'", long34 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ISOChronology[+52:00]" + "'", str43, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType50);
    }

    @Test
    public void test09663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09663");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.millisOfDay();
        org.joda.time.DurationField durationField20 = iSOChronology13.halfdays();
        org.joda.time.DurationField durationField21 = iSOChronology13.years();
        org.joda.time.DurationField durationField22 = iSOChronology13.months();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test09664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09664");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        long long4 = dateTimeZone2.previousTransition(262802880030L);
        long long6 = dateTimeZone2.convertUTCToLocal((-23L));
        boolean boolean8 = dateTimeZone2.isStandardOffset((-62167593599968L));
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 262802880030L + "'", long4 == 262802880030L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 349199977L + "'", long6 == 349199977L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(iSOChronology9);
    }

    @Test
    public void test09665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09665");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DurationField durationField16 = iSOChronology13.days();
        org.joda.time.DurationField durationField17 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test09666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09666");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = iSOChronology8.add(readablePeriod14, (long) 'a', (-1));
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.dayOfMonth();
        org.joda.time.DurationField durationField19 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology8.millisOfDay();
        java.lang.String str21 = iSOChronology8.toString();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology8.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 97L + "'", long17 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[+52:00]" + "'", str21, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test09667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09667");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test09668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09668");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.secondOfDay();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField13 = iSOChronology8.hours();
        org.joda.time.DurationField durationField14 = iSOChronology8.hours();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.centuryOfEra();
        long long18 = dateTimeField16.roundHalfFloor((-61788110399989L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-62167406400000L) + "'", long18 == (-62167406400000L));
    }

    @Test
    public void test09669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09669");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long7 = dateTimeZone1.convertUTCToLocal((long) (byte) 10);
        long long10 = dateTimeZone1.convertLocalToUTC((long) 292278993, false);
        long long12 = dateTimeZone1.nextTransition((-62167406399968L));
        long long14 = dateTimeZone1.nextTransition((long) 23);
        java.lang.String str16 = dateTimeZone1.getName(1051793064000000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 187200010L + "'", long7 == 187200010L);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 105078993L + "'", long10 == 105078993L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-62167406399968L) + "'", long12 == (-62167406399968L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 23L + "'", long14 == 23L);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+52:00" + "'", str16, "+52:00");
    }

    @Test
    public void test09670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09670");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-52));
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test09671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09671");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.weekyear();
        org.joda.time.DurationField durationField16 = iSOChronology8.centuries();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.minuteOfHour();
        java.lang.String str19 = iSOChronology8.toString();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology8.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = dateTimeField20.getType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+52:00]" + "'", str19, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
    }

    @Test
    public void test09672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09672");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.year();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test09673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09673");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.millisOfDay();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        java.lang.String str16 = dateTimeZone13.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        int int19 = dateTimeZone13.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField21 = iSOChronology20.minutes();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology20.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology20.minuteOfHour();
        boolean boolean24 = iSOChronology8.equals((java.lang.Object) iSOChronology20);
        java.lang.String str25 = iSOChronology20.toString();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology20.millisOfSecond();
        org.joda.time.DurationField durationField27 = iSOChronology20.weeks();
        // The following exception was thrown during execution in test generation
        try {
            long long32 = iSOChronology20.getDateTimeMillis(100, (-52), (-56031041), (-349203));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -349203 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+52:00" + "'", str14, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+52:00" + "'", str16, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 187200000 + "'", int19 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[+52:00]" + "'", str25, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test09674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09674");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.era();
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology8.getZone();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str17 = dateTimeZone16.toString();
        boolean boolean18 = dateTimeZone16.isFixed();
        org.joda.time.Chronology chronology19 = iSOChronology8.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology8.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+52:00" + "'", str17, "+52:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test09675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09675");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DurationField durationField10 = iSOChronology8.months();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test09676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09676");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00:00.001");
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test09677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09677");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField16 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DurationField durationField18 = iSOChronology13.months();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str21 = dateTimeZone20.toString();
        java.lang.String str23 = dateTimeZone20.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        int int26 = dateTimeZone20.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone28 = iSOChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology27.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology27.year();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology27.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology27.era();
        org.joda.time.DurationField durationField34 = iSOChronology27.seconds();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.lang.String str37 = dateTimeZone36.toString();
        java.lang.String str39 = dateTimeZone36.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        int int42 = dateTimeZone36.getOffsetFromLocal((long) (short) -1);
        java.util.Locale locale44 = null;
        java.lang.String str45 = dateTimeZone36.getShortName(86400000L, locale44);
        org.joda.time.Chronology chronology46 = iSOChronology27.withZone(dateTimeZone36);
        org.joda.time.Chronology chronology47 = iSOChronology13.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology13.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+52:00" + "'", str21, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+52:00" + "'", str23, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 187200000 + "'", int26 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+52:00" + "'", str37, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+52:00" + "'", str39, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 187200000 + "'", int42 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+52:00" + "'", str45, "+52:00");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test09678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09678");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test09679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09679");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = iSOChronology8.getDateTimeMillis((int) '4', (-23), 262968, 4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -23 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test09680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09680");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DurationField durationField10 = iSOChronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.dayOfYear();
        long long14 = dateTimeField12.roundHalfFloor(5284800096L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 5256000000L + "'", long14 == 5256000000L);
    }

    @Test
    public void test09681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09681");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfWeek();
        long long21 = dateTimeField19.roundFloor(806400035L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 763200000L + "'", long21 == 763200000L);
    }

    @Test
    public void test09682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09682");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = iSOChronology13.add(readablePeriod20, 115200000L, (-479));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 115200000L + "'", long23 == 115200000L);
    }

    @Test
    public void test09683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09683");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test09684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09684");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = dateTimeField18.getType();
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeField18.getAsShortText((-3120), locale21);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeField18.getAsText(7, locale24);
        org.joda.time.DurationField durationField26 = dateTimeField18.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-3120" + "'", str22, "-3120");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "7" + "'", str25, "7");
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test09685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09685");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str3 = dateTimeZone1.getID();
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        java.lang.String str6 = dateTimeZone1.getShortName((-158535120L));
        java.lang.String str8 = dateTimeZone1.getShortName(555096986981179L);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone1.isLocalDateTimeGap(localDateTime9);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone1.isLocalDateTimeGap(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+52:00" + "'", str3, "+52:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+52:00" + "'", str6, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+52:00" + "'", str8, "+52:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09686");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField21 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.minuteOfDay();
        boolean boolean27 = dateTimeField26.isSupported();
        int int30 = dateTimeField26.getDifference((-349199990L), (-28749540965L));
        int int32 = dateTimeField26.getMinimumValue(88002000000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 473339 + "'", int30 == 473339);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test09687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09687");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.weekyearOfCentury();
        long long22 = iSOChronology13.add((long) (short) 100, 0L, 3);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        org.joda.time.Chronology chronology24 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.halfdayOfDay();
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.lang.String str28 = dateTimeZone27.toString();
        java.lang.String str30 = dateTimeZone27.getShortName(1L);
        int int32 = dateTimeZone27.getOffsetFromLocal((long) (byte) 0);
        int int34 = dateTimeZone27.getStandardOffset((long) (short) 0);
        java.lang.String str35 = dateTimeZone27.getID();
        long long38 = dateTimeZone27.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime40 = null;
        boolean boolean41 = dateTimeZone27.isLocalDateTimeGap(localDateTime40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        int int43 = dateTimeZone27.getOffset(readableInstant42);
        boolean boolean44 = iSOChronology13.equals((java.lang.Object) dateTimeZone27);
        java.util.Locale locale46 = null;
        java.lang.String str47 = dateTimeZone27.getName((-104400000L), locale46);
        int int49 = dateTimeZone27.getOffsetFromLocal(32260512L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L + "'", long22 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+52:00" + "'", str28, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+52:00" + "'", str30, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 187200000 + "'", int32 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 187200000 + "'", int34 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+52:00" + "'", str35, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-187200000L) + "'", long38 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 187200000 + "'", int43 == 187200000);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+52:00" + "'", str47, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 187200000 + "'", int49 == 187200000);
    }

    @Test
    public void test09688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09688");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfYear();
        long long20 = dateTimeField17.add(102021120000000000L, (long) (-22));
        java.lang.String str21 = dateTimeField17.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 102021118099200000L + "'", long20 == 102021118099200000L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "dayOfYear" + "'", str21, "dayOfYear");
    }

    @Test
    public void test09689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09689");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DurationField durationField17 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test09690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09690");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.millisOfDay();
        org.joda.time.DurationField durationField20 = iSOChronology13.millis();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long27 = iSOChronology13.getDateTimeMillis(26, 17268595, 0, (-11760));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -11760 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test09691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09691");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField10 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.millisOfSecond();
        org.joda.time.DurationField durationField13 = iSOChronology8.halfdays();
        org.joda.time.DurationField durationField14 = iSOChronology8.months();
        long long18 = iSOChronology8.add((-352140001L), (long) (-8), 1800024);
        org.joda.time.ReadablePartial readablePartial19 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray21 = iSOChronology8.get(readablePartial19, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-366540193L) + "'", long18 == (-366540193L));
    }

    @Test
    public void test09692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09692");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DurationField durationField16 = iSOChronology13.days();
        org.joda.time.DurationField durationField17 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.era();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.millisOfSecond();
        org.joda.time.DurationField durationField21 = iSOChronology13.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test09693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09693");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((-604799999));
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test09694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09694");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        org.joda.time.DurationField durationField20 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.dayOfYear();
        boolean boolean24 = dateTimeField23.isLenient();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test09695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09695");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long22 = iSOChronology13.getDateTimeMillis(12, (int) (byte) 1, (int) (short) 10, 11);
        long long27 = iSOChronology13.getDateTimeMillis((int) (byte) 0, (int) (short) 1, 1, (int) ' ');
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField29 = iSOChronology13.centuries();
        org.joda.time.DurationField durationField30 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology13.millisOfDay();
        org.joda.time.DurationField durationField32 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology13.era();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology13.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-61787937599989L) + "'", long22 == (-61787937599989L));
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-62167406399968L) + "'", long27 == (-62167406399968L));
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test09696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09696");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.secondOfDay();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.lang.String str15 = dateTimeZone14.toString();
        java.lang.String str17 = dateTimeZone14.getShortName(1L);
        int int19 = dateTimeZone14.getOffsetFromLocal((long) (byte) 0);
        int int21 = dateTimeZone14.getStandardOffset((long) (short) 0);
        java.lang.String str22 = dateTimeZone14.getID();
        long long25 = dateTimeZone14.adjustOffset(0L, true);
        org.joda.time.Chronology chronology26 = iSOChronology8.withZone(dateTimeZone14);
        boolean boolean27 = dateTimeZone14.isFixed();
        int int29 = dateTimeZone14.getOffset((long) 0);
        java.lang.String str30 = dateTimeZone14.getID();
        long long32 = dateTimeZone14.previousTransition(0L);
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone14.getShortName(254876400000L, locale34);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        java.lang.String str38 = dateTimeZone37.toString();
        java.lang.String str40 = dateTimeZone37.getShortName(1L);
        int int42 = dateTimeZone37.getOffsetFromLocal((long) (byte) 0);
        int int44 = dateTimeZone37.getStandardOffset((long) (short) 0);
        java.lang.String str45 = dateTimeZone37.getID();
        long long48 = dateTimeZone37.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology49 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone37);
        org.joda.time.DurationField durationField50 = iSOChronology49.months();
        org.joda.time.DurationField durationField51 = iSOChronology49.weeks();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology49.year();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology49.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology49.hourOfDay();
        java.lang.String str55 = iSOChronology49.toString();
        org.joda.time.DurationField durationField56 = iSOChronology49.hours();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology49.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology49.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField59 = iSOChronology49.dayOfYear();
        boolean boolean60 = dateTimeZone14.equals((java.lang.Object) dateTimeField59);
        int int62 = dateTimeField59.getLeapAmount((-7042359961273776583L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+52:00" + "'", str15, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+52:00" + "'", str17, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 187200000 + "'", int19 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 187200000 + "'", int21 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+52:00" + "'", str22, "+52:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 187200000 + "'", int29 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+52:00" + "'", str30, "+52:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+52:00" + "'", str35, "+52:00");
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+52:00" + "'", str38, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+52:00" + "'", str40, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 187200000 + "'", int42 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 187200000 + "'", int44 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+52:00" + "'", str45, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-187200000L) + "'", long48 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ISOChronology[+52:00]" + "'", str55, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test09697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09697");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfYear();
        org.joda.time.DurationField durationField14 = iSOChronology8.millis();
        long long17 = durationField14.add((long) (byte) -1, (long) (byte) 0);
        boolean boolean18 = durationField14.isSupported();
        long long20 = durationField14.getMillis(6270681);
        long long22 = durationField14.getValueAsLong(80870400000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 6270681L + "'", long20 == 6270681L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 80870400000L + "'", long22 == 80870400000L);
    }

    @Test
    public void test09698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09698");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField20 = iSOChronology13.hours();
        org.joda.time.DurationField durationField21 = iSOChronology13.millis();
        org.joda.time.DurationField durationField22 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test09699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09699");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test09700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09700");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) 'a');
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str4 = dateTimeZone3.toString();
        java.lang.String str6 = dateTimeZone3.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        int int9 = dateTimeZone3.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone3);
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = dateTimeZone3.getOffset(readableInstant11);
        long long14 = dateTimeZone3.previousTransition((long) ' ');
        boolean boolean15 = dateTimeZone1.equals((java.lang.Object) dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone1.isLocalDateTimeGap(localDateTime16);
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        boolean boolean19 = dateTimeZone1.isFixed();
        long long22 = dateTimeZone1.convertLocalToUTC(5850970463548800100L, false);
        int int24 = dateTimeZone1.getOffset(872L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+52:00" + "'", str6, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 187200000 + "'", int9 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 187200000 + "'", int12 == 187200000);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 5850970463199600100L + "'", long22 == 5850970463199600100L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 349200000 + "'", int24 == 349200000);
    }

    @Test
    public void test09701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09701");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str3 = dateTimeZone1.getID();
        long long7 = dateTimeZone1.convertLocalToUTC(10L, false, (long) '4');
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str10 = dateTimeZone9.toString();
        java.lang.String str12 = dateTimeZone9.getShortName(1L);
        int int14 = dateTimeZone9.getOffsetFromLocal((long) (byte) 0);
        int int16 = dateTimeZone9.getStandardOffset((long) (short) 0);
        java.lang.String str17 = dateTimeZone9.getID();
        long long20 = dateTimeZone9.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField22 = iSOChronology21.months();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology21.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology21.centuryOfEra();
        boolean boolean28 = dateTimeZone1.equals((java.lang.Object) iSOChronology21);
        org.joda.time.DurationField durationField29 = iSOChronology21.weekyears();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology21.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+52:00" + "'", str3, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-187199990L) + "'", long7 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+52:00" + "'", str10, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+52:00" + "'", str12, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 187200000 + "'", int14 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 187200000 + "'", int16 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+52:00" + "'", str17, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-187200000L) + "'", long20 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test09702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09702");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField21 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.clockhourOfDay();
        long long25 = dateTimeField22.add((-113218560187200000L), 9000L);
        long long27 = dateTimeField22.roundFloor(59083257600691L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-113218527787200000L) + "'", long25 == (-113218527787200000L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 59083257600000L + "'", long27 == 59083257600000L);
    }

    @Test
    public void test09703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09703");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long23 = iSOChronology13.getDateTimeMillis(259200100L, 11, (int) (byte) 10, (int) (short) 10, (int) ' ');
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.era();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 285010032L + "'", long23 == 285010032L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test09704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09704");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.monthOfYear();
        boolean boolean12 = dateTimeField11.isLenient();
        long long14 = dateTimeField11.roundHalfCeiling((-1036799988L));
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeField11.getAsText((long) 613, locale16);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-187200000L) + "'", long14 == (-187200000L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "January" + "'", str17, "January");
    }

    @Test
    public void test09705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09705");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.weekyear();
        org.joda.time.DurationField durationField16 = iSOChronology8.centuries();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.era();
        org.joda.time.DurationField durationField19 = iSOChronology8.weekyears();
        org.joda.time.DurationField durationField20 = iSOChronology8.days();
        org.joda.time.DurationField durationField21 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology8.clockhourOfHalfday();
        org.joda.time.DurationField durationField24 = iSOChronology8.days();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test09706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09706");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        java.lang.String str10 = dateTimeZone1.toString();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.lang.String str13 = dateTimeZone12.toString();
        java.lang.String str15 = dateTimeZone12.getShortName(1L);
        int int17 = dateTimeZone12.getOffsetFromLocal((long) (byte) 0);
        int int19 = dateTimeZone12.getStandardOffset((long) (short) 0);
        java.lang.String str20 = dateTimeZone12.getID();
        long long23 = dateTimeZone12.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology24.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology24.dayOfYear();
        org.joda.time.DurationField durationField27 = iSOChronology24.weeks();
        boolean boolean28 = dateTimeZone1.equals((java.lang.Object) iSOChronology24);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str31 = dateTimeZone30.toString();
        java.lang.String str33 = dateTimeZone30.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone30);
        int int36 = dateTimeZone30.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone38 = iSOChronology37.getZone();
        long long40 = dateTimeZone38.convertUTCToLocal((long) '4');
        org.joda.time.Chronology chronology41 = iSOChronology24.withZone(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology24.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology24.weekyearOfCentury();
        long long45 = dateTimeField43.roundHalfCeiling(37324756800000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+52:00" + "'", str10, "+52:00");
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+52:00" + "'", str13, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+52:00" + "'", str15, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 187200000 + "'", int17 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 187200000 + "'", int19 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+52:00" + "'", str20, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-187200000L) + "'", long23 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+52:00" + "'", str31, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+52:00" + "'", str33, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 187200000 + "'", int36 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 187200052L + "'", long40 == 187200052L);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 37331697600000L + "'", long45 == 37331697600000L);
    }

    @Test
    public void test09707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09707");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.year();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
    }

    @Test
    public void test09708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09708");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.clockhourOfDay();
        org.joda.time.DurationField durationField16 = iSOChronology8.centuries();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test09709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09709");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.hourOfDay();
        org.joda.time.ReadablePartial readablePartial24 = null;
        java.util.Locale locale25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = dateTimeField23.getAsShortText(readablePartial24, locale25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test09710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09710");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.minutes();
        org.joda.time.DurationField durationField20 = iSOChronology13.seconds();
        java.lang.String str21 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DurationField durationField23 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[+52:00]" + "'", str21, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test09711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09711");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DurationField durationField16 = iSOChronology13.days();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.era();
        org.joda.time.DateTimeZone dateTimeZone24 = iSOChronology13.getZone();
        java.lang.String str26 = dateTimeZone24.getShortName(285000000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+52:00" + "'", str26, "+52:00");
    }

    @Test
    public void test09712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09712");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.weekOfWeekyear();
        org.joda.time.Chronology chronology19 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.yearOfCentury();
        org.joda.time.DurationField durationField21 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField24 = iSOChronology13.millis();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.era();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test09713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09713");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField17 = iSOChronology13.eras();
        org.joda.time.Chronology chronology18 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test09714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09714");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long23 = iSOChronology13.getDateTimeMillis(259200100L, 11, (int) (byte) 10, (int) (short) 10, (int) ' ');
        org.joda.time.DurationField durationField24 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.minuteOfHour();
        org.joda.time.DurationField durationField27 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.era();
        org.joda.time.DurationField durationField29 = iSOChronology13.months();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray32 = iSOChronology13.get(readablePeriod30, 43200000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 285010032L + "'", long23 == 285010032L);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test09715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09715");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfDay();
        java.lang.String str19 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.millisOfSecond();
        org.joda.time.Chronology chronology21 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+52:00]" + "'", str19, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test09716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09716");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        org.joda.time.DurationField durationField20 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = iSOChronology13.add(readablePeriod23, (-190140001L), (-18253));
        org.joda.time.DurationField durationField27 = iSOChronology13.millis();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str30 = dateTimeZone29.toString();
        java.lang.String str32 = dateTimeZone29.getShortName(1L);
        int int34 = dateTimeZone29.getOffsetFromLocal((long) (byte) 0);
        int int36 = dateTimeZone29.getStandardOffset((long) (short) 0);
        java.lang.String str37 = dateTimeZone29.getID();
        long long40 = dateTimeZone29.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField42 = iSOChronology41.months();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology41.secondOfDay();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology41.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology41.secondOfMinute();
        org.joda.time.DurationField durationField46 = iSOChronology41.weeks();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology48 = iSOChronology41.withZone(dateTimeZone47);
        java.util.Locale locale50 = null;
        java.lang.String str51 = dateTimeZone47.getName((-59079023999997L), locale50);
        int int53 = dateTimeZone47.getOffset(299410032L);
        org.joda.time.Chronology chronology54 = iSOChronology13.withZone(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-190140001L) + "'", long26 == (-190140001L));
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+52:00" + "'", str30, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+52:00" + "'", str32, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 187200000 + "'", int34 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 187200000 + "'", int36 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+52:00" + "'", str37, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-187200000L) + "'", long40 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(chronology54);
    }

    @Test
    public void test09717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09717");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfDay();
        org.joda.time.DurationField durationField13 = iSOChronology8.seconds();
        org.joda.time.DurationField durationField14 = iSOChronology8.millis();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.yearOfEra();
        org.joda.time.DurationField durationField16 = iSOChronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.halfdayOfDay();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray22 = iSOChronology8.get(readablePeriod19, (-7127358L), 181083187353600000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test09718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09718");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        int int10 = dateTimeZone1.getOffsetFromLocal(5520000L);
        int int12 = dateTimeZone1.getStandardOffset((long) 100);
        int int14 = dateTimeZone1.getStandardOffset(3212L);
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        long long18 = dateTimeZone1.adjustOffset(5173217340480000000L, true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 187200000 + "'", int10 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 187200000 + "'", int12 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 187200000 + "'", int14 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 5173217340480000000L + "'", long18 == 5173217340480000000L);
    }

    @Test
    public void test09719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09719");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.yearOfEra();
        java.lang.String str21 = iSOChronology13.toString();
        org.joda.time.DurationField durationField22 = iSOChronology13.weeks();
        // The following exception was thrown during execution in test generation
        try {
            long long30 = iSOChronology13.getDateTimeMillis((-722551), 177, 240, 8765, (-22650), (-23507), (-10360800));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 8765 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[+52:00]" + "'", str21, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test09720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09720");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.era();
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology8.getZone();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str17 = dateTimeZone16.toString();
        boolean boolean18 = dateTimeZone16.isFixed();
        org.joda.time.Chronology chronology19 = iSOChronology8.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology8.dayOfMonth();
        org.joda.time.DurationField durationField23 = iSOChronology8.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            long long31 = iSOChronology8.getDateTimeMillis((int) (short) 0, 14, 69, 37, (-58), 1439, 59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+52:00" + "'", str17, "+52:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test09721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09721");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.weekOfWeekyear();
        org.joda.time.Chronology chronology19 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.centuryOfEra();
        java.lang.String str23 = iSOChronology13.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[+52:00]" + "'", str23, "ISOChronology[+52:00]");
    }

    @Test
    public void test09722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09722");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfDay();
        long long21 = iSOChronology13.add(0L, (-2678400000L), (-292275054));
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 782829504633600000L + "'", long21 == 782829504633600000L);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test09723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09723");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        long long24 = iSOChronology13.add(86400000L, (-30844800000L), (int) ' ');
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.monthOfYear();
        org.joda.time.DurationField durationField26 = iSOChronology13.days();
        org.joda.time.DurationField durationField27 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.year();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-986947200000L) + "'", long24 == (-986947200000L));
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test09724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09724");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DurationField durationField20 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField24 = iSOChronology13.seconds();
        org.joda.time.DurationField durationField25 = iSOChronology13.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test09725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09725");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        org.joda.time.DurationField durationField20 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.millisOfDay();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str24 = dateTimeZone23.toString();
        java.lang.String str26 = dateTimeZone23.getShortName(1L);
        int int28 = dateTimeZone23.getOffsetFromLocal((long) (byte) 0);
        int int30 = dateTimeZone23.getStandardOffset((long) (short) 0);
        java.lang.String str31 = dateTimeZone23.getID();
        long long34 = dateTimeZone23.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField36 = iSOChronology35.months();
        org.joda.time.DateTimeZone dateTimeZone37 = iSOChronology35.getZone();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology35.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone39 = iSOChronology35.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology40 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone39);
        java.lang.String str42 = dateTimeZone39.getShortName((-14398030L));
        java.lang.String str44 = dateTimeZone39.getName(0L);
        long long47 = dateTimeZone39.adjustOffset((-2678400000L), true);
        org.joda.time.Chronology chronology48 = iSOChronology13.withZone(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+52:00" + "'", str24, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+52:00" + "'", str26, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 187200000 + "'", int28 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 187200000 + "'", int30 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+52:00" + "'", str31, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-187200000L) + "'", long34 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(iSOChronology40);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+52:00" + "'", str42, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+52:00" + "'", str44, "+52:00");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-2678400000L) + "'", long47 == (-2678400000L));
        org.junit.Assert.assertNotNull(chronology48);
    }

    @Test
    public void test09726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09726");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long23 = iSOChronology13.getDateTimeMillis(259200100L, 11, (int) (byte) 10, (int) (short) 10, (int) ' ');
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.era();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone26 = iSOChronology13.getZone();
        java.lang.String str28 = dateTimeZone26.getNameKey((long) 292278993);
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 285010032L + "'", long23 == 285010032L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(iSOChronology29);
    }

    @Test
    public void test09727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09727");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.secondOfMinute();
        org.joda.time.Chronology chronology14 = iSOChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.minuteOfDay();
        org.joda.time.DurationField durationField17 = iSOChronology8.weekyears();
        long long19 = durationField17.getValueAsLong(18720000005L);
        long long22 = durationField17.subtract((-540000000L), 12);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-379144800000L) + "'", long22 == (-379144800000L));
    }

    @Test
    public void test09728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09728");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str3 = dateTimeZone1.getID();
        long long7 = dateTimeZone1.convertLocalToUTC(10L, false, (long) '4');
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str10 = dateTimeZone9.toString();
        java.lang.String str12 = dateTimeZone9.getShortName(1L);
        int int14 = dateTimeZone9.getOffsetFromLocal((long) (byte) 0);
        int int16 = dateTimeZone9.getStandardOffset((long) (short) 0);
        java.lang.String str17 = dateTimeZone9.getID();
        long long20 = dateTimeZone9.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField22 = iSOChronology21.months();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology21.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology21.centuryOfEra();
        boolean boolean28 = dateTimeZone1.equals((java.lang.Object) iSOChronology21);
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology21.year();
        org.joda.time.DurationField durationField30 = iSOChronology21.seconds();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        java.lang.String str33 = dateTimeZone32.toString();
        java.lang.String str35 = dateTimeZone32.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        int int38 = dateTimeZone32.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone32);
        org.joda.time.DurationField durationField40 = iSOChronology39.minutes();
        org.joda.time.DurationField durationField41 = iSOChronology39.minutes();
        org.joda.time.DurationField durationField42 = iSOChronology39.months();
        boolean boolean43 = iSOChronology21.equals((java.lang.Object) durationField42);
        int int46 = durationField42.getDifference((-22821327708660L), 37324756800000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+52:00" + "'", str3, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-187199990L) + "'", long7 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+52:00" + "'", str10, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+52:00" + "'", str12, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 187200000 + "'", int14 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 187200000 + "'", int16 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+52:00" + "'", str17, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-187200000L) + "'", long20 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+52:00" + "'", str33, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+52:00" + "'", str35, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 187200000 + "'", int38 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-22871) + "'", int46 == (-22871));
    }

    @Test
    public void test09729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09729");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.millisOfSecond();
        long long26 = dateTimeField23.add((-3234818324301L), (-198714038399999L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-201948856724300L) + "'", long26 == (-201948856724300L));
    }

    @Test
    public void test09730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09730");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long23 = iSOChronology13.getDateTimeMillis(259200100L, 11, (int) (byte) 10, (int) (short) 10, (int) ' ');
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.era();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone26 = iSOChronology13.getZone();
        java.lang.String str28 = dateTimeZone26.getNameKey((long) 292278993);
        long long32 = dateTimeZone26.convertLocalToUTC(169859999L, true, (long) 75224542);
        org.joda.time.ReadableInstant readableInstant33 = null;
        int int34 = dateTimeZone26.getOffset(readableInstant33);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 285010032L + "'", long23 == 285010032L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertNull(str28);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-17340001L) + "'", long32 == (-17340001L));
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 187200000 + "'", int34 == 187200000);
    }

    @Test
    public void test09731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09731");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.era();
        org.joda.time.DateTimeZone dateTimeZone11 = iSOChronology8.getZone();
        org.joda.time.DurationField durationField12 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfYear();
        org.joda.time.DurationField durationField14 = iSOChronology8.weekyears();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test09732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09732");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DurationField durationField16 = iSOChronology13.days();
        org.joda.time.DurationField durationField17 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = dateTimeField18.getType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
    }

    @Test
    public void test09733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09733");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology13.getZone();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str18 = dateTimeZone17.toString();
        java.lang.String str20 = dateTimeZone17.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        int int23 = dateTimeZone17.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField25 = iSOChronology24.minutes();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology24.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology24.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology24.minuteOfDay();
        org.joda.time.DurationField durationField29 = iSOChronology24.seconds();
        org.joda.time.DurationField durationField30 = iSOChronology24.millis();
        boolean boolean31 = dateTimeZone15.equals((java.lang.Object) iSOChronology24);
        org.joda.time.DurationField durationField32 = iSOChronology24.days();
        long long33 = durationField32.getUnitMillis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+52:00" + "'", str18, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+52:00" + "'", str20, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 187200000 + "'", int23 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 86400000L + "'", long33 == 86400000L);
    }

    @Test
    public void test09734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09734");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) 'a');
        java.lang.String str2 = dateTimeZone1.getID();
        long long4 = dateTimeZone1.nextTransition((long) ' ');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        java.lang.String str7 = dateTimeZone6.toString();
        java.lang.String str9 = dateTimeZone6.getShortName(1L);
        int int11 = dateTimeZone6.getOffsetFromLocal((long) (byte) 0);
        int int13 = dateTimeZone6.getStandardOffset((long) (short) 0);
        java.lang.String str14 = dateTimeZone6.getID();
        long long17 = dateTimeZone6.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone6);
        org.joda.time.DurationField durationField19 = iSOChronology18.months();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology18.yearOfEra();
        boolean boolean22 = dateTimeZone1.equals((java.lang.Object) iSOChronology18);
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField24 = iSOChronology23.millis();
        java.lang.String str25 = iSOChronology23.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+97:00" + "'", str2, "+97:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+52:00" + "'", str7, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 187200000 + "'", int11 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 187200000 + "'", int13 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+52:00" + "'", str14, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-187200000L) + "'", long17 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[+97:00]" + "'", str25, "ISOChronology[+97:00]");
    }

    @Test
    public void test09735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09735");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        org.joda.time.DurationField durationField20 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.weekOfWeekyear();
        long long25 = iSOChronology13.add((long) 28664880, 782829504633600000L, (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.hourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray30 = iSOChronology13.get(readablePeriod27, 4319999900L, 28800000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-782829504604935120L) + "'", long25 == (-782829504604935120L));
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test09736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09736");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfDay();
        org.joda.time.DurationField durationField13 = iSOChronology8.seconds();
        org.joda.time.DurationField durationField14 = iSOChronology8.millis();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.secondOfMinute();
        org.joda.time.Chronology chronology17 = iSOChronology8.withUTC();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test09737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09737");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField21 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.minuteOfHour();
        long long26 = iSOChronology13.add(298800100L, 187200002L, 1);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.lang.String str29 = dateTimeZone28.toString();
        java.lang.String str31 = dateTimeZone28.getShortName(1L);
        int int33 = dateTimeZone28.getOffsetFromLocal((long) (byte) 0);
        int int35 = dateTimeZone28.getStandardOffset((long) (short) 0);
        java.lang.String str36 = dateTimeZone28.getID();
        long long39 = dateTimeZone28.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology40 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone28);
        org.joda.time.DurationField durationField41 = iSOChronology40.months();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology40.secondOfDay();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology40.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology40.clockhourOfHalfday();
        org.joda.time.DurationField durationField46 = iSOChronology40.months();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((int) 'a');
        org.joda.time.Chronology chronology49 = iSOChronology40.withZone(dateTimeZone48);
        org.joda.time.Chronology chronology50 = iSOChronology13.withZone(dateTimeZone48);
        java.lang.String str51 = dateTimeZone48.getID();
        java.lang.String str53 = dateTimeZone48.getShortName(0L);
        org.joda.time.ReadableInstant readableInstant54 = null;
        int int55 = dateTimeZone48.getOffset(readableInstant54);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 486000102L + "'", long26 == 486000102L);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+52:00" + "'", str29, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+52:00" + "'", str31, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 187200000 + "'", int33 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 187200000 + "'", int35 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+52:00" + "'", str36, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-187200000L) + "'", long39 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+97:00" + "'", str51, "+97:00");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+97:00" + "'", str53, "+97:00");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 349200000 + "'", int55 == 349200000);
    }

    @Test
    public void test09738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09738");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.hourOfHalfday();
        org.joda.time.Chronology chronology13 = iSOChronology8.withUTC();
        org.joda.time.DurationField durationField14 = iSOChronology8.weeks();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.weekOfWeekyear();
        org.joda.time.DurationField durationField17 = iSOChronology8.years();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.minuteOfHour();
        long long20 = dateTimeField18.roundHalfFloor((-850140010L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-850140000L) + "'", long20 == (-850140000L));
    }

    @Test
    public void test09739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09739");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.millisOfDay();
        long long21 = dateTimeField19.roundCeiling((-349200004L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-349200004L) + "'", long21 == (-349200004L));
    }

    @Test
    public void test09740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09740");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DurationField durationField16 = iSOChronology13.seconds();
        org.joda.time.Chronology chronology17 = iSOChronology13.withUTC();
        java.lang.String str18 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.era();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+52:00]" + "'", str18, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test09741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09741");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.era();
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology8.getZone();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str17 = dateTimeZone16.toString();
        boolean boolean18 = dateTimeZone16.isFixed();
        org.joda.time.Chronology chronology19 = iSOChronology8.withZone(dateTimeZone16);
        boolean boolean21 = dateTimeZone16.isStandardOffset(0L);
        java.lang.String str23 = dateTimeZone16.getName(374399999L);
        long long25 = dateTimeZone16.previousTransition((-18L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+52:00" + "'", str17, "+52:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+52:00" + "'", str23, "+52:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-18L) + "'", long25 == (-18L));
    }

    @Test
    public void test09742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09742");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField18 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) 'a');
        java.lang.String str22 = dateTimeZone21.getID();
        org.joda.time.Chronology chronology23 = iSOChronology13.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long28 = dateTimeField25.set((-1893185827200000L), (-8));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -8 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+97:00" + "'", str22, "+97:00");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test09743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09743");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfDay();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.lang.String str20 = dateTimeZone19.toString();
        java.lang.String str22 = dateTimeZone19.getShortName(1L);
        int int24 = dateTimeZone19.getOffsetFromLocal((long) (byte) 0);
        int int26 = dateTimeZone19.getStandardOffset((long) (short) 0);
        java.lang.String str27 = dateTimeZone19.getID();
        long long30 = dateTimeZone19.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField32 = iSOChronology31.months();
        org.joda.time.DurationField durationField33 = iSOChronology31.weeks();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology31.year();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology31.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology31.hourOfDay();
        java.lang.String str37 = iSOChronology31.toString();
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        java.lang.String str40 = dateTimeZone39.toString();
        java.lang.String str41 = dateTimeZone39.getID();
        int int43 = dateTimeZone39.getOffsetFromLocal(36059035L);
        org.joda.time.Chronology chronology44 = iSOChronology31.withZone(dateTimeZone39);
        org.joda.time.Chronology chronology45 = iSOChronology13.withZone(dateTimeZone39);
        int int47 = dateTimeZone39.getOffsetFromLocal((-28749540965L));
        long long50 = dateTimeZone39.convertLocalToUTC(1050935998447756L, false);
        long long53 = dateTimeZone39.convertLocalToUTC((long) 22, true);
        org.joda.time.chrono.ISOChronology iSOChronology54 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+52:00" + "'", str20, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+52:00" + "'", str22, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 187200000 + "'", int24 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 187200000 + "'", int26 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+52:00" + "'", str27, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-187200000L) + "'", long30 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[+52:00]" + "'", str37, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+52:00" + "'", str40, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+52:00" + "'", str41, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 187200000 + "'", int43 == 187200000);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology45);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 187200000 + "'", int47 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1050935811247756L + "'", long50 == 1050935811247756L);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-187199978L) + "'", long53 == (-187199978L));
        org.junit.Assert.assertNotNull(iSOChronology54);
    }

    @Test
    public void test09744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09744");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long23 = iSOChronology13.getDateTimeMillis(259200100L, 11, (int) (byte) 10, (int) (short) 10, (int) ' ');
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.era();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.hourOfHalfday();
        org.joda.time.DurationField durationField29 = iSOChronology13.millis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 285010032L + "'", long23 == 285010032L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test09745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09745");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        org.joda.time.DurationField durationField20 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.hourOfDay();
        org.joda.time.DurationField durationField22 = dateTimeField21.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test09746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09746");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.hourOfDay();
        int int19 = dateTimeField16.getDifference(97L, 86400000L);
        java.util.Locale locale20 = null;
        int int21 = dateTimeField16.getMaximumTextLength(locale20);
        org.joda.time.ReadablePartial readablePartial22 = null;
        int int23 = dateTimeField16.getMaximumValue(readablePartial22);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-23) + "'", int19 == (-23));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 23 + "'", int23 == 23);
    }

    @Test
    public void test09747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09747");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.days();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = iSOChronology13.add(readablePeriod19, (long) 100, (int) (short) 10);
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.weekyearOfCentury();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.lang.String str27 = dateTimeZone26.toString();
        java.lang.String str29 = dateTimeZone26.getShortName(1L);
        int int31 = dateTimeZone26.getOffsetFromLocal((long) (byte) 0);
        int int33 = dateTimeZone26.getStandardOffset((long) (short) 0);
        java.lang.String str34 = dateTimeZone26.getID();
        java.lang.String str36 = dateTimeZone26.getNameKey((long) (byte) -1);
        java.lang.String str37 = dateTimeZone26.getID();
        org.joda.time.Chronology chronology38 = iSOChronology13.withZone(dateTimeZone26);
        java.util.Locale locale40 = null;
        java.lang.String str41 = dateTimeZone26.getName(4052003L, locale40);
        org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L + "'", long22 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+52:00" + "'", str27, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+52:00" + "'", str29, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 187200000 + "'", int31 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 187200000 + "'", int33 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+52:00" + "'", str34, "+52:00");
// flaky:         org.junit.Assert.assertNull(str36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+52:00" + "'", str37, "+52:00");
        org.junit.Assert.assertNotNull(chronology38);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+52:00" + "'", str41, "+52:00");
        org.junit.Assert.assertNotNull(iSOChronology42);
    }

    @Test
    public void test09748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09748");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfDay();
        java.lang.String str19 = iSOChronology13.toString();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str22 = dateTimeZone21.toString();
        java.lang.String str23 = dateTimeZone21.getID();
        int int25 = dateTimeZone21.getOffsetFromLocal(36059035L);
        org.joda.time.Chronology chronology26 = iSOChronology13.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.hourOfDay();
        long long32 = iSOChronology13.add(946684800000L, (-1482960L), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology13.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+52:00]" + "'", str19, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+52:00" + "'", str22, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+52:00" + "'", str23, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 187200000 + "'", int25 == 187200000);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 946686282960L + "'", long32 == 946686282960L);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test09749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09749");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long22 = iSOChronology13.getDateTimeMillis(12, (int) (byte) 1, (int) (short) 10, 11);
        long long27 = iSOChronology13.getDateTimeMillis((int) (byte) 0, (int) (short) 1, 1, (int) ' ');
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.secondOfMinute();
        java.lang.String str29 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DurationField durationField31 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology13.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-61787937599989L) + "'", long22 == (-61787937599989L));
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-62167406399968L) + "'", long27 == (-62167406399968L));
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISOChronology[+52:00]" + "'", str29, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test09750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09750");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long22 = iSOChronology13.getDateTimeMillis(12, (int) (byte) 1, (int) (short) 10, 11);
        long long27 = iSOChronology13.getDateTimeMillis((int) (byte) 0, (int) (short) 1, 1, (int) ' ');
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField29 = iSOChronology13.centuries();
        org.joda.time.DurationField durationField30 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology13.millisOfDay();
        int int33 = dateTimeField31.getMaximumValue(1328353L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-61787937599989L) + "'", long22 == (-61787937599989L));
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-62167406399968L) + "'", long27 == (-62167406399968L));
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 86399999 + "'", int33 == 86399999);
    }

    @Test
    public void test09751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09751");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        // The following exception was thrown during execution in test generation
        try {
            long long23 = iSOChronology13.getDateTimeMillis((-6297), 6944000, 99, (-6297), (-11757), (-52), 999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -6297 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test09752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09752");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(11, 6);
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone2);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.lang.String str6 = dateTimeZone5.toString();
        java.lang.String str8 = dateTimeZone5.getShortName(1L);
        int int10 = dateTimeZone5.getOffsetFromLocal((long) (byte) 0);
        int int12 = dateTimeZone5.getStandardOffset((long) (short) 0);
        java.lang.String str13 = dateTimeZone5.getID();
        long long16 = dateTimeZone5.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField18 = iSOChronology17.months();
        org.joda.time.DurationField durationField19 = iSOChronology17.weeks();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology17.year();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology17.yearOfCentury();
        long long26 = iSOChronology17.getDateTimeMillis(12, (int) (byte) 1, (int) (short) 10, 11);
        long long31 = iSOChronology17.getDateTimeMillis((int) (byte) 0, (int) (short) 1, 1, (int) ' ');
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology17.secondOfMinute();
        org.joda.time.DurationField durationField33 = iSOChronology17.centuries();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology17.minuteOfHour();
        boolean boolean35 = dateTimeZone2.equals((java.lang.Object) iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+52:00" + "'", str6, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+52:00" + "'", str8, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 187200000 + "'", int10 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 187200000 + "'", int12 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+52:00" + "'", str13, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-187200000L) + "'", long16 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-61787937599989L) + "'", long26 == (-61787937599989L));
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-62167406399968L) + "'", long31 == (-62167406399968L));
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test09753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09753");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.secondOfDay();
        long long17 = dateTimeField14.getDifferenceAsLong((-321479900L), (-1915199988L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1593720L + "'", long17 == 1593720L);
    }

    @Test
    public void test09754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09754");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.days();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = iSOChronology13.add(readablePeriod19, (long) 100, (int) (short) 10);
        org.joda.time.DurationField durationField23 = iSOChronology13.days();
        java.lang.String str24 = durationField23.toString();
        int int26 = durationField23.getValue(1482960L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L + "'", long22 == 100L);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DurationField[days]" + "'", str24, "DurationField[days]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test09755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09755");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology13.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField18 = iSOChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology17.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology17.yearOfCentury();
        org.joda.time.DurationField durationField22 = iSOChronology17.millis();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology17.dayOfMonth();
        org.joda.time.DurationField durationField24 = iSOChronology17.hours();
        // The following exception was thrown during execution in test generation
        try {
            int int27 = durationField24.getValue(1136050272003798523L, 360000010L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 315569520001");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test09756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09756");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.hourOfDay();
        int int22 = dateTimeField20.getLeapAmount(25256447827200100L);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.lang.String str27 = dateTimeZone26.toString();
        java.lang.String str29 = dateTimeZone26.getShortName(1L);
        int int31 = dateTimeZone26.getOffsetFromLocal((long) (byte) 0);
        int int33 = dateTimeZone26.getStandardOffset((long) (short) 0);
        java.lang.String str34 = dateTimeZone26.getID();
        long long37 = dateTimeZone26.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone26);
        org.joda.time.DurationField durationField39 = iSOChronology38.months();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology38.secondOfDay();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology38.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology38.clockhourOfHalfday();
        org.joda.time.DurationField durationField44 = iSOChronology38.centuries();
        org.joda.time.DurationField durationField45 = iSOChronology38.years();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology38.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology38.halfdayOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = dateTimeField47.getType();
        org.joda.time.ReadablePartial readablePartial49 = null;
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.lang.String str52 = dateTimeZone51.toString();
        java.lang.String str54 = dateTimeZone51.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone51);
        int int57 = dateTimeZone51.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology58 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone51);
        org.joda.time.DurationField durationField59 = iSOChronology58.minutes();
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology58.minuteOfHour();
        org.joda.time.DurationField durationField61 = iSOChronology58.days();
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology58.year();
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology58.hourOfHalfday();
        org.joda.time.DurationField durationField64 = iSOChronology58.centuries();
        org.joda.time.DateTimeField dateTimeField65 = iSOChronology58.hourOfHalfday();
        org.joda.time.ReadablePartial readablePartial66 = null;
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        java.lang.String str69 = dateTimeZone68.toString();
        java.lang.String str71 = dateTimeZone68.getShortName(1L);
        int int73 = dateTimeZone68.getOffsetFromLocal((long) (byte) 0);
        int int75 = dateTimeZone68.getStandardOffset((long) (short) 0);
        java.lang.String str76 = dateTimeZone68.getID();
        long long79 = dateTimeZone68.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology80 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone68);
        org.joda.time.DateTimeField dateTimeField81 = iSOChronology80.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField82 = iSOChronology80.secondOfDay();
        org.joda.time.DateTimeField dateTimeField83 = iSOChronology80.minuteOfDay();
        int int85 = dateTimeField83.getMaximumValue((-59099587199997L));
        org.joda.time.ReadablePartial readablePartial86 = null;
        int[] intArray92 = new int[] { 28664880, (-1), 43200000, 349200000 };
        int[] intArray94 = dateTimeField83.addWrapPartial(readablePartial86, 863999, intArray92, (int) (byte) 0);
        int int95 = dateTimeField65.getMaximumValue(readablePartial66, intArray92);
        int int96 = dateTimeField47.getMaximumValue(readablePartial49, intArray92);
        java.util.Locale locale98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray99 = dateTimeField20.set(readablePartial23, (-102162), intArray92, "Monday", locale98);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Monday\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+52:00" + "'", str27, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+52:00" + "'", str29, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 187200000 + "'", int31 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 187200000 + "'", int33 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+52:00" + "'", str34, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-187200000L) + "'", long37 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+52:00" + "'", str52, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+52:00" + "'", str54, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 187200000 + "'", int57 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeZone68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+52:00" + "'", str69, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+52:00" + "'", str71, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 187200000 + "'", int73 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 187200000 + "'", int75 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+52:00" + "'", str76, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-187200000L) + "'", long79 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1439 + "'", int85 == 1439);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[28664880, -1, 43200000, 349200000]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[28664880, -1, 43200000, 349200000]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 11 + "'", int95 == 11);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
    }

    @Test
    public void test09757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09757");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.weekyearOfCentury();
        long long22 = iSOChronology13.add((long) (short) 100, 0L, 3);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        org.joda.time.Chronology chronology24 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.halfdayOfDay();
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.lang.String str28 = dateTimeZone27.toString();
        java.lang.String str30 = dateTimeZone27.getShortName(1L);
        int int32 = dateTimeZone27.getOffsetFromLocal((long) (byte) 0);
        int int34 = dateTimeZone27.getStandardOffset((long) (short) 0);
        java.lang.String str35 = dateTimeZone27.getID();
        long long38 = dateTimeZone27.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime40 = null;
        boolean boolean41 = dateTimeZone27.isLocalDateTimeGap(localDateTime40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        int int43 = dateTimeZone27.getOffset(readableInstant42);
        boolean boolean44 = iSOChronology13.equals((java.lang.Object) dateTimeZone27);
        org.joda.time.DurationField durationField45 = iSOChronology13.centuries();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L + "'", long22 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+52:00" + "'", str28, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+52:00" + "'", str30, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 187200000 + "'", int32 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 187200000 + "'", int34 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+52:00" + "'", str35, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-187200000L) + "'", long38 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 187200000 + "'", int43 == 187200000);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(durationField45);
    }

    @Test
    public void test09758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09758");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.centuries();
        long long18 = durationField15.getValueAsLong(223107651979200000L, 349199999L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 70700L + "'", long18 == 70700L);
    }

    @Test
    public void test09759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09759");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.era();
        java.lang.String str11 = iSOChronology8.toString();
        org.joda.time.DurationField durationField12 = iSOChronology8.years();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = iSOChronology8.getDateTimeMillis(407514000L, (int) (byte) -1, (-862800), (-1036813485), (-207199502));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+52:00]" + "'", str11, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test09760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09760");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        org.joda.time.DurationField durationField20 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.yearOfCentury();
        int int24 = dateTimeField21.getDifference((-2592000000L), 1514733696000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-48) + "'", int24 == (-48));
    }

    @Test
    public void test09761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09761");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField20 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.yearOfCentury();
        long long27 = iSOChronology13.add((-7015818282L), (-28567L), 4839);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-7154053995L) + "'", long27 == (-7154053995L));
    }

    @Test
    public void test09762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09762");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField13 = iSOChronology8.seconds();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.hourOfHalfday();
        org.joda.time.DurationField durationField16 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.yearOfCentury();
        java.lang.String str19 = iSOChronology8.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+52:00]" + "'", str19, "ISOChronology[+52:00]");
    }

    @Test
    public void test09763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09763");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.year();
        org.joda.time.DurationField durationField14 = iSOChronology8.seconds();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test09764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09764");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.yearOfEra();
        org.joda.time.DurationField durationField9 = iSOChronology7.seconds();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology7.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology7.era();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology7.millisOfSecond();
        org.joda.time.ReadablePartial readablePartial13 = null;
        int int14 = dateTimeField12.getMaximumValue(readablePartial13);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 999 + "'", int14 == 999);
    }

    @Test
    public void test09765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09765");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DurationField durationField10 = iSOChronology8.months();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.secondOfDay();
        org.joda.time.DurationField durationField15 = iSOChronology8.millis();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.millisOfDay();
        long long19 = dateTimeField17.roundHalfEven((-7043511686550576947L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-7043511686550576947L) + "'", long19 == (-7043511686550576947L));
    }

    @Test
    public void test09766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09766");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DurationField durationField16 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long19 = dateTimeField17.roundHalfEven(53L);
        boolean boolean20 = dateTimeField17.isLenient();
        java.lang.String str21 = dateTimeField17.toString();
        org.joda.time.ReadablePartial readablePartial22 = null;
        int int23 = dateTimeField17.getMinimumValue(readablePartial22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = dateTimeField17.getType();
        org.joda.time.ReadablePartial readablePartial25 = null;
        java.util.Locale locale26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = dateTimeField17.getAsShortText(readablePartial25, locale26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-187200000L) + "'", long19 == (-187200000L));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DateTimeField[yearOfCentury]" + "'", str21, "DateTimeField[yearOfCentury]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
    }

    @Test
    public void test09767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09767");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(8904);
        long long5 = dateTimeZone1.convertLocalToUTC((long) (-10360800), false, (-757726839390L));
        long long7 = dateTimeZone1.convertUTCToLocal(43230989L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-10369704L) + "'", long5 == (-10369704L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 43239893L + "'", long7 == 43239893L);
    }

    @Test
    public void test09768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09768");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField19 = iSOChronology13.millis();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.year();
        long long25 = iSOChronology13.add((long) (short) 0, (long) 3, 187200000);
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.yearOfCentury();
        org.joda.time.DurationField durationField27 = iSOChronology13.hours();
        java.lang.String str28 = durationField27.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 561600000L + "'", long25 == 561600000L);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hours" + "'", str28, "hours");
    }

    @Test
    public void test09769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09769");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = iSOChronology13.add(readablePeriod20, 3155760000053L, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.ReadablePartial readablePartial26 = null;
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str30 = dateTimeZone29.toString();
        java.lang.String str32 = dateTimeZone29.getShortName(1L);
        int int34 = dateTimeZone29.getOffsetFromLocal((long) (byte) 0);
        int int36 = dateTimeZone29.getStandardOffset((long) (short) 0);
        java.lang.String str37 = dateTimeZone29.getID();
        long long40 = dateTimeZone29.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField42 = iSOChronology41.months();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology41.secondOfDay();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology41.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology41.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology41.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology41.minuteOfDay();
        org.joda.time.DurationField durationField48 = iSOChronology41.months();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology41.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology41.hourOfHalfday();
        java.util.Locale locale52 = null;
        java.lang.String str53 = dateTimeField50.getAsShortText((int) (short) -1, locale52);
        org.joda.time.ReadablePartial readablePartial54 = null;
        int[] intArray58 = new int[] { '#', 12, 9 };
        int int59 = dateTimeField50.getMinimumValue(readablePartial54, intArray58);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray61 = dateTimeField25.addWrapPartial(readablePartial26, 1965, intArray58, 75224542);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1965");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3155760000053L + "'", long23 == 3155760000053L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+52:00" + "'", str30, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+52:00" + "'", str32, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 187200000 + "'", int34 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 187200000 + "'", int36 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+52:00" + "'", str37, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-187200000L) + "'", long40 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1" + "'", str53, "-1");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[35, 12, 9]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test09770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09770");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.clockhourOfDay();
        org.joda.time.DurationField durationField14 = iSOChronology8.hours();
        org.joda.time.Chronology chronology15 = iSOChronology8.withUTC();
        org.joda.time.DurationField durationField16 = iSOChronology8.hours();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        java.lang.String str21 = dateTimeZone18.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        int int24 = dateTimeZone18.getOffsetFromLocal((long) (short) -1);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone18.getShortName(86400000L, locale26);
        java.lang.String str28 = dateTimeZone18.getID();
        long long30 = dateTimeZone18.convertUTCToLocal(187201439L);
        org.joda.time.Chronology chronology31 = iSOChronology8.withZone(dateTimeZone18);
        org.joda.time.ReadableInstant readableInstant32 = null;
        int int33 = dateTimeZone18.getOffset(readableInstant32);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone18.getShortName((long) 102737, locale35);
        org.joda.time.LocalDateTime localDateTime37 = null;
        boolean boolean38 = dateTimeZone18.isLocalDateTimeGap(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+52:00" + "'", str19, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+52:00" + "'", str21, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 187200000 + "'", int24 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+52:00" + "'", str27, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+52:00" + "'", str28, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 374401439L + "'", long30 == 374401439L);
        org.junit.Assert.assertNotNull(chronology31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 187200000 + "'", int33 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+52:00" + "'", str36, "+52:00");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test09771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09771");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.yearOfEra();
        org.joda.time.DurationField durationField23 = iSOChronology13.minutes();
        org.joda.time.DurationField durationField24 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            long long31 = iSOChronology13.getDateTimeMillis(699140716817736045L, 29, 36000000, (-11757), 255211);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 29 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test09772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09772");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField20 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.yearOfCentury();
        org.joda.time.DurationField durationField23 = iSOChronology13.minutes();
        long long26 = durationField23.getValueAsLong((long) 6944000, 0L);
        long long29 = durationField23.getMillis((-56031041), 101L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 115L + "'", long26 == 115L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-3361862460000L) + "'", long29 == (-3361862460000L));
    }

    @Test
    public void test09773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09773");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.minuteOfDay();
        org.joda.time.DurationField durationField15 = iSOChronology8.weeks();
        org.joda.time.DurationField durationField16 = iSOChronology8.centuries();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test09774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09774");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField18 = iSOChronology13.days();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfCentury();
        org.joda.time.DurationField durationField20 = iSOChronology13.weekyears();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test09775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09775");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.centuryOfEra();
        org.joda.time.DurationField durationField15 = iSOChronology8.months();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology8.weekyear();
        org.joda.time.DurationField durationField21 = iSOChronology8.days();
        int int24 = durationField21.getValue((long) 89324946, (-2039781599L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test09776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09776");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DurationField durationField10 = iSOChronology8.months();
        java.lang.String str11 = iSOChronology8.toString();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.hourOfDay();
        org.joda.time.DurationField durationField13 = dateTimeField12.getDurationField();
        long long14 = durationField13.getUnitMillis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+52:00]" + "'", str11, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 3600000L + "'", long14 == 3600000L);
    }

    @Test
    public void test09777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09777");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.minutes();
        org.joda.time.DurationField durationField16 = iSOChronology13.weeks();
        org.joda.time.DurationField durationField17 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.yearOfCentury();
        org.joda.time.DurationField durationField22 = iSOChronology13.halfdays();
        int int25 = durationField22.getDifference((-3540020385600000L), 4320000000L);
        long long28 = durationField22.subtract(3798533L, (-1030));
        int int30 = durationField22.getValue(31359600000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-81945016) + "'", int25 == (-81945016));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 44499798533L + "'", long28 == 44499798533L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 725 + "'", int30 == 725);
    }

    @Test
    public void test09778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09778");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.millisOfDay();
        org.joda.time.DurationField durationField14 = dateTimeField13.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = durationField14.getValue(41918772412800052L, (-56921007L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 41918772412800052");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test09779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09779");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.clockhourOfDay();
        org.joda.time.DurationField durationField13 = iSOChronology8.hours();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test09780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09780");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.days();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test09781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09781");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.year();
        org.joda.time.DurationField durationField18 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test09782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09782");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = dateTimeField13.getType();
        long long17 = dateTimeField13.set(7776000000L, (-292275054));
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeField13.getAsText((-14), locale19);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-9223372009267200000L) + "'", long17 == (-9223372009267200000L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-14" + "'", str20, "-14");
    }

    @Test
    public void test09783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09783");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.dayOfYear();
        java.util.Locale locale28 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long29 = dateTimeField25.set((long) 14, "", locale28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test09784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09784");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.dayOfYear();
        long long17 = iSOChronology8.getDateTimeMillis(0L, (int) (short) 10, (int) (short) 0, 59, (int) '#');
        org.joda.time.DurationField durationField18 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology8.dayOfYear();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.lang.String str23 = dateTimeZone22.toString();
        java.lang.String str25 = dateTimeZone22.getShortName(1L);
        int int27 = dateTimeZone22.getOffsetFromLocal((long) (byte) 0);
        int int29 = dateTimeZone22.getStandardOffset((long) (short) 0);
        java.lang.String str30 = dateTimeZone22.getID();
        long long33 = dateTimeZone22.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField35 = iSOChronology34.months();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology34.secondOfDay();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology34.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology34.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology34.minuteOfDay();
        org.joda.time.DurationField durationField40 = iSOChronology34.weekyears();
        org.joda.time.DurationField durationField41 = iSOChronology34.hours();
        org.joda.time.DurationField durationField42 = iSOChronology34.hours();
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        java.lang.String str45 = dateTimeZone44.toString();
        java.lang.String str47 = dateTimeZone44.getShortName(1L);
        int int49 = dateTimeZone44.getOffsetFromLocal((long) (byte) 0);
        int int51 = dateTimeZone44.getStandardOffset((long) (short) 0);
        java.lang.String str52 = dateTimeZone44.getID();
        long long55 = dateTimeZone44.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology56 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone44);
        org.joda.time.DurationField durationField57 = iSOChronology56.months();
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology56.secondOfDay();
        org.joda.time.DateTimeField dateTimeField59 = iSOChronology56.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology56.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology56.minuteOfDay();
        org.joda.time.DurationField durationField62 = iSOChronology56.weekyears();
        org.joda.time.DurationField durationField63 = iSOChronology56.hours();
        java.lang.String str64 = iSOChronology56.toString();
        org.joda.time.DateTimeZone dateTimeZone65 = iSOChronology56.getZone();
        org.joda.time.Chronology chronology66 = iSOChronology34.withZone(dateTimeZone65);
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        long long70 = dateTimeZone68.previousTransition((long) 'a');
        long long72 = dateTimeZone65.getMillisKeepLocal(dateTimeZone68, (long) (byte) 1);
        java.util.TimeZone timeZone73 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone73);
        java.lang.String str75 = dateTimeZone74.toString();
        java.lang.String str77 = dateTimeZone74.getShortName(1L);
        int int79 = dateTimeZone74.getOffsetFromLocal((long) (byte) 0);
        int int81 = dateTimeZone74.getStandardOffset((long) (short) 0);
        java.lang.String str82 = dateTimeZone74.getID();
        long long85 = dateTimeZone74.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology86 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone74);
        org.joda.time.DurationField durationField87 = iSOChronology86.months();
        org.joda.time.DateTimeField dateTimeField88 = iSOChronology86.secondOfDay();
        org.joda.time.DateTimeField dateTimeField89 = iSOChronology86.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField90 = iSOChronology86.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField91 = iSOChronology86.minuteOfDay();
        org.joda.time.DurationField durationField92 = iSOChronology86.weekyears();
        org.joda.time.DateTimeField dateTimeField93 = iSOChronology86.clockhourOfDay();
        boolean boolean94 = dateTimeZone68.equals((java.lang.Object) iSOChronology86);
        long long96 = dateTimeZone68.convertUTCToLocal((-37110975296399900L));
        org.joda.time.Chronology chronology97 = iSOChronology8.withZone(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 21659035L + "'", long17 == 21659035L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+52:00" + "'", str23, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+52:00" + "'", str25, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 187200000 + "'", int27 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 187200000 + "'", int29 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+52:00" + "'", str30, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-187200000L) + "'", long33 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+52:00" + "'", str45, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+52:00" + "'", str47, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 187200000 + "'", int49 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 187200000 + "'", int51 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+52:00" + "'", str52, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-187200000L) + "'", long55 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ISOChronology[+52:00]" + "'", str64, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 97L + "'", long70 == 97L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone74);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+52:00" + "'", str75, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+52:00" + "'", str77, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 187200000 + "'", int79 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 187200000 + "'", int81 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+52:00" + "'", str82, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-187200000L) + "'", long85 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long96 + "' != '" + (-37110975109199900L) + "'", long96 == (-37110975109199900L));
        org.junit.Assert.assertNotNull(chronology97);
    }

    @Test
    public void test09785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09785");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField21 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.halfdayOfDay();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray29 = iSOChronology13.get(readablePeriod26, 4658400000L, (-3294545784570000000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test09786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09786");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test09787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09787");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.hourOfHalfday();
        org.joda.time.DurationField durationField16 = iSOChronology8.weekyears();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test09788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09788");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField18 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.millisOfSecond();
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeField22.getAsText((-524L), locale24);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "476" + "'", str25, "476");
    }

    @Test
    public void test09789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09789");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.months();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forID("+00:00");
        int int16 = dateTimeZone14.getOffsetFromLocal((long) 10);
        int int18 = dateTimeZone14.getOffset((long) 349200000);
        org.joda.time.Chronology chronology19 = iSOChronology8.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology8.clockhourOfHalfday();
        org.joda.time.ReadablePartial readablePartial21 = null;
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.lang.String str25 = dateTimeZone24.toString();
        java.lang.String str27 = dateTimeZone24.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        int int30 = dateTimeZone24.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField32 = iSOChronology31.minutes();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology31.minuteOfHour();
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeField33.getAsText((long) (short) -1, locale35);
        org.joda.time.ReadablePartial readablePartial37 = null;
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        java.lang.String str40 = dateTimeZone39.toString();
        java.lang.String str42 = dateTimeZone39.getShortName(1L);
        int int44 = dateTimeZone39.getOffsetFromLocal((long) (byte) 0);
        int int46 = dateTimeZone39.getStandardOffset((long) (short) 0);
        java.lang.String str47 = dateTimeZone39.getID();
        long long50 = dateTimeZone39.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology51 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology51.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology51.minuteOfHour();
        org.joda.time.DurationField durationField54 = dateTimeField53.getLeapDurationField();
        org.joda.time.ReadablePartial readablePartial55 = null;
        int int56 = dateTimeField53.getMaximumValue(readablePartial55);
        org.joda.time.ReadablePartial readablePartial57 = null;
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        java.lang.String str60 = dateTimeZone59.toString();
        java.lang.String str62 = dateTimeZone59.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone59);
        int int65 = dateTimeZone59.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology66 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone59);
        org.joda.time.DurationField durationField67 = iSOChronology66.minutes();
        org.joda.time.DateTimeField dateTimeField68 = iSOChronology66.weekyear();
        java.lang.String str69 = dateTimeField68.toString();
        org.joda.time.ReadablePartial readablePartial70 = null;
        java.util.TimeZone timeZone71 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        java.lang.String str73 = dateTimeZone72.toString();
        java.lang.String str75 = dateTimeZone72.getShortName(1L);
        int int77 = dateTimeZone72.getOffsetFromLocal((long) (byte) 0);
        int int79 = dateTimeZone72.getStandardOffset((long) (short) 0);
        java.lang.String str80 = dateTimeZone72.getID();
        long long83 = dateTimeZone72.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology84 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone72);
        org.joda.time.DateTimeField dateTimeField85 = iSOChronology84.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField86 = iSOChronology84.minuteOfHour();
        org.joda.time.ReadablePartial readablePartial87 = null;
        int[] intArray90 = new int[] { (short) -1, 0 };
        int int91 = dateTimeField86.getMinimumValue(readablePartial87, intArray90);
        int int92 = dateTimeField68.getMinimumValue(readablePartial70, intArray90);
        int int93 = dateTimeField53.getMinimumValue(readablePartial57, intArray90);
        int int94 = dateTimeField33.getMinimumValue(readablePartial37, intArray90);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray96 = dateTimeField20.set(readablePartial21, (-14), intArray90, 148830006);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 148830006 for clockhourOfHalfday must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+52:00" + "'", str25, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+52:00" + "'", str27, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 187200000 + "'", int30 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "59" + "'", str36, "59");
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+52:00" + "'", str40, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+52:00" + "'", str42, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 187200000 + "'", int44 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 187200000 + "'", int46 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+52:00" + "'", str47, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-187200000L) + "'", long50 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNull(durationField54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 59 + "'", int56 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+52:00" + "'", str60, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+52:00" + "'", str62, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 187200000 + "'", int65 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "DateTimeField[weekyear]" + "'", str69, "DateTimeField[weekyear]");
        org.junit.Assert.assertNotNull(dateTimeZone72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+52:00" + "'", str73, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+52:00" + "'", str75, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 187200000 + "'", int77 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 187200000 + "'", int79 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+52:00" + "'", str80, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-187200000L) + "'", long83 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 0]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-292275054) + "'", int92 == (-292275054));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test09790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09790");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.hourOfDay();
        org.joda.time.DurationField durationField24 = iSOChronology13.halfdays();
        long long28 = iSOChronology13.add((long) 177, 193200000L, (-52));
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology13.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray32 = iSOChronology13.get(readablePeriod30, 170783449L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-10046399823L) + "'", long28 == (-10046399823L));
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test09791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09791");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(366, 34537691);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 34537691");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09792");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DurationField durationField10 = iSOChronology8.months();
        java.lang.String str11 = iSOChronology8.toString();
        org.joda.time.DurationField durationField12 = iSOChronology8.years();
        org.joda.time.DurationField durationField13 = iSOChronology8.seconds();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.era();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = dateTimeField15.set((-158535120L), 86401870);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86401870 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+52:00]" + "'", str11, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test09793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09793");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DurationField durationField16 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test09794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09794");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = iSOChronology8.withZone(dateTimeZone14);
        org.joda.time.DurationField durationField16 = chronology15.centuries();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test09795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09795");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.secondOfDay();
        org.joda.time.DurationField durationField13 = iSOChronology8.millis();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.dayOfYear();
        org.joda.time.DurationField durationField16 = dateTimeField15.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNull(durationField16);
    }

    @Test
    public void test09796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09796");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.millisOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        long long22 = durationField19.add(3540100L, (-1370879));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-43260762783659900L) + "'", long22 == (-43260762783659900L));
    }

    @Test
    public void test09797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09797");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.era();
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology8.getZone();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str17 = dateTimeZone16.toString();
        boolean boolean18 = dateTimeZone16.isFixed();
        org.joda.time.Chronology chronology19 = iSOChronology8.withZone(dateTimeZone16);
        java.lang.String str20 = iSOChronology8.toString();
        org.joda.time.DurationField durationField21 = iSOChronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology8.year();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray26 = iSOChronology8.get(readablePeriod23, (-403335120L), 25249967395L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+52:00" + "'", str17, "+52:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+52:00]" + "'", str20, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test09798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09798");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.dayOfYear();
        long long17 = iSOChronology8.getDateTimeMillis(0L, (int) (short) 10, (int) (short) 0, 59, (int) '#');
        org.joda.time.DurationField durationField18 = iSOChronology8.days();
        org.joda.time.Chronology chronology19 = iSOChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology8.minuteOfDay();
        org.joda.time.DurationField durationField21 = iSOChronology8.millis();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology8.millisOfDay();
        org.joda.time.DurationField durationField23 = iSOChronology8.minutes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 21659035L + "'", long17 == 21659035L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test09799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09799");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.era();
        org.joda.time.DurationField durationField14 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test09800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09800");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.yearOfEra();
        org.joda.time.DurationField durationField9 = iSOChronology7.halfdays();
        java.lang.String str10 = durationField9.getName();
        int int13 = durationField9.getValue((-49654023863955L), 360000097L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "halfdays" + "'", str10, "halfdays");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1149398) + "'", int13 == (-1149398));
    }

    @Test
    public void test09801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09801");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.centuryOfEra();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.secondOfDay();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str24 = dateTimeZone23.toString();
        java.lang.String str26 = dateTimeZone23.getShortName(1L);
        boolean boolean27 = dateTimeZone23.isFixed();
        org.joda.time.Chronology chronology28 = iSOChronology13.withZone(dateTimeZone23);
        org.joda.time.DurationField durationField29 = iSOChronology13.hours();
        int int31 = durationField29.getValue((long) 81);
        org.joda.time.DurationFieldType durationFieldType32 = durationField29.getType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+52:00" + "'", str24, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+52:00" + "'", str26, "+52:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(durationFieldType32);
    }

    @Test
    public void test09802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09802");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField20 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DurationField durationField26 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.weekyear();
        long long31 = iSOChronology13.add((-63345599635L), (long) 187200053, 293642057);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 54969745287829386L + "'", long31 == 54969745287829386L);
    }

    @Test
    public void test09803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09803");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.hourOfDay();
        org.joda.time.DurationField durationField21 = iSOChronology13.millis();
        org.joda.time.DurationField durationField22 = iSOChronology13.hours();
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField24 = iSOChronology13.weekyears();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int28 = dateTimeZone26.getOffsetFromLocal((long) (byte) 1);
        long long30 = dateTimeZone26.convertUTCToLocal(97L);
        java.lang.String str31 = dateTimeZone26.getID();
        long long35 = dateTimeZone26.convertLocalToUTC((long) 2, false, (long) 11);
        org.joda.time.Chronology chronology36 = iSOChronology13.withZone(dateTimeZone26);
        org.joda.time.Chronology chronology37 = iSOChronology13.withUTC();
        org.joda.time.DateTimeZone dateTimeZone38 = iSOChronology13.getZone();
        java.lang.String str40 = dateTimeZone38.getNameKey(363659996L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 187200000 + "'", int28 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 187200097L + "'", long30 == 187200097L);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+52:00" + "'", str31, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-187199998L) + "'", long35 == (-187199998L));
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test09804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09804");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.weekOfWeekyear();
        int int13 = dateTimeField11.getLeapAmount(349200097L);
        org.joda.time.ReadablePartial readablePartial14 = null;
        int[] intArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int16 = dateTimeField11.getMaximumValue(readablePartial14, intArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test09805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09805");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.weekyearOfCentury();
        org.joda.time.Chronology chronology28 = iSOChronology13.withUTC();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
    }

    @Test
    public void test09806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09806");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField20 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.secondOfDay();
        long long27 = dateTimeField24.addWrapField(1012L, 10);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeField24.getAsText((-2077199988L), locale29);
        org.joda.time.ReadablePartial readablePartial31 = null;
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeField24.getAsText(readablePartial31, 349200000, locale33);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 11012L + "'", long27 == 11012L);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10800" + "'", str30, "10800");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "349200000" + "'", str34, "349200000");
    }

    @Test
    public void test09807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09807");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DurationField durationField16 = iSOChronology13.millis();
        org.joda.time.DurationField durationField17 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.millisOfDay();
        org.joda.time.DurationField durationField20 = iSOChronology13.months();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test09808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09808");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray17 = iSOChronology8.get(readablePeriod15, (-701340001L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test09809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09809");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone2);
        org.joda.time.DurationField durationField4 = iSOChronology3.weeks();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology3.year();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test09810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09810");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DurationField durationField21 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.secondOfDay();
        org.joda.time.DurationField durationField23 = iSOChronology13.seconds();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.era();
        org.joda.time.DurationField durationField25 = iSOChronology13.centuries();
        org.joda.time.DurationField durationField26 = iSOChronology13.weekyears();
        long long29 = durationField26.getValueAsLong((long) 11, (-404334693955584000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test09811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09811");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DurationField durationField16 = dateTimeField15.getLeapDurationField();
        int int18 = dateTimeField15.getMinimumValue((long) (short) 0);
        java.util.Locale locale19 = null;
        int int20 = dateTimeField15.getMaximumShortTextLength(locale19);
        int int21 = dateTimeField15.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNull(durationField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
    }

    @Test
    public void test09812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09812");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test09813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09813");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology20 = iSOChronology13.withZone(dateTimeZone19);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone19.getName((-59079023999997L), locale22);
        int int25 = dateTimeZone19.getOffset(299410032L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.lang.String str28 = dateTimeZone27.toString();
        java.lang.String str30 = dateTimeZone27.getShortName(1L);
        int int32 = dateTimeZone27.getOffsetFromLocal((long) (byte) 0);
        int int34 = dateTimeZone27.getStandardOffset((long) (short) 0);
        java.lang.String str35 = dateTimeZone27.getID();
        long long38 = dateTimeZone27.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone27);
        org.joda.time.DurationField durationField40 = iSOChronology39.months();
        org.joda.time.DurationField durationField41 = iSOChronology39.weeks();
        org.joda.time.DateTimeZone dateTimeZone42 = iSOChronology39.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone42);
        long long45 = dateTimeZone42.nextTransition((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone42);
        long long48 = dateTimeZone19.getMillisKeepLocal(dateTimeZone42, (-86280001L));
        java.util.Locale locale50 = null;
        java.lang.String str51 = dateTimeZone42.getShortName((-7043511686175720000L), locale50);
        org.joda.time.LocalDateTime localDateTime52 = null;
        boolean boolean53 = dateTimeZone42.isLocalDateTimeGap(localDateTime52);
        org.joda.time.chrono.ISOChronology iSOChronology54 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone42);
        java.lang.String str55 = dateTimeZone42.getID();
        org.joda.time.chrono.ISOChronology iSOChronology56 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology56.weekOfWeekyear();
        java.lang.String str58 = dateTimeField57.getName();
        java.util.Locale locale61 = null;
        long long62 = dateTimeField57.set((-1401164659L), "35", locale61);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+52:00" + "'", str28, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+52:00" + "'", str30, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 187200000 + "'", int32 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 187200000 + "'", int34 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+52:00" + "'", str35, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-187200000L) + "'", long38 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(iSOChronology43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-273480001L) + "'", long48 == (-273480001L));
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+52:00" + "'", str51, "+52:00");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(iSOChronology54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+52:00" + "'", str55, "+52:00");
        org.junit.Assert.assertNotNull(iSOChronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "weekOfWeekyear" + "'", str58, "weekOfWeekyear");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-11077964659L) + "'", long62 == (-11077964659L));
    }

    @Test
    public void test09814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09814");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(68400000, 253685);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 253685");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09815");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfDay();
        java.lang.String str19 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.hourOfDay();
        org.joda.time.ReadablePartial readablePartial22 = null;
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.lang.String str25 = dateTimeZone24.toString();
        java.lang.String str27 = dateTimeZone24.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        int int30 = dateTimeZone24.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField32 = iSOChronology31.minutes();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology31.weekyear();
        java.lang.String str34 = dateTimeField33.toString();
        org.joda.time.ReadablePartial readablePartial35 = null;
        int int36 = dateTimeField33.getMaximumValue(readablePartial35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = dateTimeField33.getType();
        org.joda.time.ReadablePartial readablePartial38 = null;
        int int39 = dateTimeField33.getMaximumValue(readablePartial38);
        org.joda.time.ReadablePartial readablePartial40 = null;
        int[] intArray44 = new int[] { 84840000, 257181, 64019 };
        int int45 = dateTimeField33.getMinimumValue(readablePartial40, intArray44);
        // The following exception was thrown during execution in test generation
        try {
            iSOChronology13.validate(readablePartial22, intArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+52:00]" + "'", str19, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+52:00" + "'", str25, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+52:00" + "'", str27, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 187200000 + "'", int30 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "DateTimeField[weekyear]" + "'", str34, "DateTimeField[weekyear]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 292278993 + "'", int36 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 292278993 + "'", int39 == 292278993);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[84840000, 257181, 64019]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-292275054) + "'", int45 == (-292275054));
    }

    @Test
    public void test09816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09816");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology20 = iSOChronology13.withZone(dateTimeZone19);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology21.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours(100);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str30 = dateTimeZone29.toString();
        java.lang.String str32 = dateTimeZone29.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        int int35 = dateTimeZone29.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField37 = iSOChronology36.minutes();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology36.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology36.secondOfDay();
        org.joda.time.DurationField durationField40 = iSOChronology36.minutes();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.lang.String str43 = dateTimeZone42.toString();
        java.lang.String str45 = dateTimeZone42.getShortName(1L);
        int int47 = dateTimeZone42.getOffsetFromLocal((long) (byte) 0);
        int int49 = dateTimeZone42.getStandardOffset((long) (short) 0);
        java.lang.String str50 = dateTimeZone42.getID();
        long long53 = dateTimeZone42.adjustOffset(0L, true);
        org.joda.time.Chronology chronology54 = iSOChronology36.withZone(dateTimeZone42);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        java.lang.String str57 = dateTimeZone56.toString();
        java.lang.String str58 = dateTimeZone56.getID();
        long long62 = dateTimeZone56.convertLocalToUTC(10L, false, (long) '4');
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        java.lang.String str65 = dateTimeZone64.toString();
        java.lang.String str67 = dateTimeZone64.getShortName(1L);
        int int69 = dateTimeZone64.getOffsetFromLocal((long) (byte) 0);
        int int71 = dateTimeZone64.getStandardOffset((long) (short) 0);
        java.lang.String str72 = dateTimeZone64.getID();
        long long75 = dateTimeZone64.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology76 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone64);
        org.joda.time.DurationField durationField77 = iSOChronology76.months();
        org.joda.time.DateTimeField dateTimeField78 = iSOChronology76.secondOfDay();
        org.joda.time.DateTimeField dateTimeField79 = iSOChronology76.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField80 = iSOChronology76.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField81 = iSOChronology76.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField82 = iSOChronology76.centuryOfEra();
        boolean boolean83 = dateTimeZone56.equals((java.lang.Object) iSOChronology76);
        long long85 = dateTimeZone56.previousTransition((long) 100);
        boolean boolean87 = dateTimeZone56.isStandardOffset(97L);
        long long89 = dateTimeZone42.getMillisKeepLocal(dateTimeZone56, (long) 'a');
        long long91 = dateTimeZone27.getMillisKeepLocal(dateTimeZone42, 82800000L);
        org.joda.time.Chronology chronology92 = iSOChronology21.withZone(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField93 = chronology92.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField94 = chronology92.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+52:00" + "'", str30, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+52:00" + "'", str32, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 187200000 + "'", int35 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+52:00" + "'", str43, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+52:00" + "'", str45, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 187200000 + "'", int47 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 187200000 + "'", int49 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+52:00" + "'", str50, "+52:00");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+52:00" + "'", str57, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+52:00" + "'", str58, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-187199990L) + "'", long62 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTimeZone64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+52:00" + "'", str65, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+52:00" + "'", str67, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 187200000 + "'", int69 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 187200000 + "'", int71 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+52:00" + "'", str72, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-187200000L) + "'", long75 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 100L + "'", long85 == 100L);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 97L + "'", long89 == 97L);
// flaky:         org.junit.Assert.assertTrue("'" + long91 + "' != '" + 255600000L + "'", long91 == 255600000L);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
    }

    @Test
    public void test09817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09817");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test09818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09818");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField15 = iSOChronology13.eras();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.yearOfCentury();
        long long20 = iSOChronology13.add((long) 12177930, (long) (byte) 0, (-28664));
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.halfdayOfDay();
        java.lang.String str22 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial25 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long27 = iSOChronology13.set(readablePartial25, 2397581L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 12177930L + "'", long20 == 12177930L);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[+52:00]" + "'", str22, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test09819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09819");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long23 = iSOChronology13.getDateTimeMillis(259200100L, 11, (int) (byte) 10, (int) (short) 10, (int) ' ');
        org.joda.time.DurationField durationField24 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField26 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 285010032L + "'", long23 == 285010032L);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test09820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09820");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.millisOfSecond();
        long long22 = iSOChronology13.add((long) 19, (long) 45582212, 12177930);
        org.joda.time.DurationField durationField23 = iSOChronology13.centuries();
        org.joda.time.DurationField durationField24 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 555096986981179L + "'", long22 == 555096986981179L);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test09821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09821");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField13 = iSOChronology8.millis();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.year();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test09822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09822");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DurationField durationField20 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        int int25 = dateTimeZone23.getOffsetFromLocal((long) (-22650));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 187200000 + "'", int25 == 187200000);
    }

    @Test
    public void test09823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09823");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField16 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.halfdayOfDay();
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeField17.getAsShortText(5907399247584000100L, locale19);
        org.joda.time.DurationField durationField21 = dateTimeField17.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PM" + "'", str20, "PM");
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test09824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09824");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        org.joda.time.DurationField durationField20 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.yearOfEra();
        org.joda.time.DurationField durationField22 = iSOChronology13.hours();
        org.joda.time.Chronology chronology23 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone25 = iSOChronology13.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
    }

    @Test
    public void test09825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09825");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = iSOChronology8.getDateTimeMillis((-1472400000L), 34537691, 3925000, 24804921, (-349203));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34537691 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test09826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09826");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long23 = iSOChronology13.getDateTimeMillis(259200100L, 11, (int) (byte) 10, (int) (short) 10, (int) ' ');
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = dateTimeField26.getType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 285010032L + "'", long23 == 285010032L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
    }

    @Test
    public void test09827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09827");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long22 = iSOChronology13.getDateTimeMillis(12, (int) (byte) 1, (int) (short) 10, 11);
        long long27 = iSOChronology13.getDateTimeMillis((int) (byte) 0, (int) (short) 1, 1, (int) ' ');
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology13.halfdayOfDay();
        org.joda.time.DurationField durationField30 = iSOChronology13.centuries();
        org.joda.time.DurationField durationField31 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology13.hourOfHalfday();
        org.joda.time.ReadablePartial readablePartial33 = null;
        int int34 = dateTimeField32.getMaximumValue(readablePartial33);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-61787937599989L) + "'", long22 == (-61787937599989L));
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-62167406399968L) + "'", long27 == (-62167406399968L));
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
    }

    @Test
    public void test09828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09828");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test09829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09829");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DurationField durationField10 = iSOChronology8.months();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.weekOfWeekyear();
        org.joda.time.ReadablePartial readablePartial12 = null;
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeField11.getAsShortText(readablePartial12, 1710211567, locale14);
        org.joda.time.ReadablePartial readablePartial16 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int17 = dateTimeField11.getMaximumValue(readablePartial16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1710211567" + "'", str15, "1710211567");
    }

    @Test
    public void test09830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09830");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DurationField durationField16 = iSOChronology13.days();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.dayOfWeek();
        org.joda.time.Chronology chronology19 = iSOChronology13.withUTC();
        org.joda.time.DurationField durationField20 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.year();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test09831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09831");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DurationField durationField10 = iSOChronology8.halfdays();
        org.joda.time.DurationField durationField11 = iSOChronology8.weeks();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test09832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09832");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.hourOfHalfday();
        long long15 = iSOChronology8.add(0L, 31556952000L, 43200000);
        org.joda.time.DurationField durationField16 = iSOChronology8.centuries();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.dayOfMonth();
        org.joda.time.DurationField durationField19 = iSOChronology8.eras();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1363260326400000000L + "'", long15 == 1363260326400000000L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test09833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09833");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DurationField durationField10 = iSOChronology8.months();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.secondOfDay();
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeField14.getAsText((-297682553), locale16);
        boolean boolean18 = dateTimeField14.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-297682553" + "'", str17, "-297682553");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test09834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09834");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = iSOChronology8.add(readablePeriod17, 172374067353660000L, 6);
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology8.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 172374067353660000L + "'", long20 == 172374067353660000L);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test09835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09835");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test09836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09836");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DurationField durationField16 = iSOChronology13.days();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.monthOfYear();
        org.joda.time.DurationField durationField21 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test09837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09837");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField12 = iSOChronology8.years();
        org.joda.time.DurationField durationField13 = iSOChronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.era();
        long long16 = dateTimeField14.roundFloor(8431200100L);
        java.lang.String str17 = dateTimeField14.getName();
        long long19 = dateTimeField14.roundHalfFloor((long) (-17340001));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-62135784000000L) + "'", long16 == (-62135784000000L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "era" + "'", str17, "era");
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-62135784000000L) + "'", long19 == (-62135784000000L));
    }

    @Test
    public void test09838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09838");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) 'a');
        org.joda.time.Chronology chronology22 = iSOChronology13.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField23 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.weekyear();
        long long26 = dateTimeField24.roundHalfCeiling((-19286400631921007L));
        int int29 = dateTimeField24.getDifference(526086576000000L, (-7427056395686399990L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-19286410190400000L) + "'", long26 == (-19286410190400000L));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 235370719 + "'", int29 == 235370719);
    }

    @Test
    public void test09839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09839");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(13888);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09840");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        int int20 = dateTimeField18.getMaximumValue((-1L));
        boolean boolean22 = dateTimeField18.isLeap(0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test09841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09841");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.yearOfEra();
        org.joda.time.DurationField durationField9 = iSOChronology7.days();
        org.joda.time.DurationField durationField10 = iSOChronology7.weeks();
        long long13 = durationField10.subtract(160103229L, 1071900095);
        long long16 = durationField10.add(369728559L, (-1149398));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-648285177295896771L) + "'", long13 == (-648285177295896771L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-695155540671441L) + "'", long16 == (-695155540671441L));
    }

    @Test
    public void test09842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09842");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DurationField durationField10 = iSOChronology8.months();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.clockhourOfDay();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str16 = dateTimeZone15.toString();
        java.lang.String str18 = dateTimeZone15.getShortName(1L);
        int int20 = dateTimeZone15.getOffsetFromLocal((long) (byte) 0);
        int int22 = dateTimeZone15.getStandardOffset((long) (short) 0);
        java.lang.String str23 = dateTimeZone15.getID();
        java.util.TimeZone timeZone24 = dateTimeZone15.toTimeZone();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.lang.String str27 = dateTimeZone26.toString();
        java.lang.String str29 = dateTimeZone26.getShortName(1L);
        int int31 = dateTimeZone26.getOffsetFromLocal((long) (byte) 0);
        int int33 = dateTimeZone26.getStandardOffset((long) (short) 0);
        java.lang.String str34 = dateTimeZone26.getID();
        long long37 = dateTimeZone26.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone26);
        org.joda.time.DurationField durationField39 = iSOChronology38.months();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology38.secondOfDay();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology38.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology38.clockhourOfHalfday();
        org.joda.time.DurationField durationField44 = iSOChronology38.months();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology38.year();
        org.joda.time.DurationField durationField46 = iSOChronology38.hours();
        boolean boolean47 = dateTimeZone15.equals((java.lang.Object) iSOChronology38);
        org.joda.time.LocalDateTime localDateTime48 = null;
        boolean boolean49 = dateTimeZone15.isLocalDateTimeGap(localDateTime48);
        java.util.TimeZone timeZone50 = dateTimeZone15.toTimeZone();
        long long52 = dateTimeZone15.convertUTCToLocal(757366838459L);
        org.joda.time.Chronology chronology53 = iSOChronology8.withZone(dateTimeZone15);
        int int55 = dateTimeZone15.getOffset((-5999L));
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        java.lang.String str58 = dateTimeZone57.toString();
        java.lang.String str60 = dateTimeZone57.getShortName(1L);
        int int62 = dateTimeZone57.getOffsetFromLocal((long) (byte) 0);
        int int64 = dateTimeZone57.getStandardOffset((long) (short) 0);
        java.lang.String str65 = dateTimeZone57.getID();
        long long68 = dateTimeZone57.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology69 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone57);
        org.joda.time.DurationField durationField70 = iSOChronology69.months();
        org.joda.time.DateTimeField dateTimeField71 = iSOChronology69.secondOfDay();
        org.joda.time.DateTimeField dateTimeField72 = iSOChronology69.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField73 = iSOChronology69.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField74 = iSOChronology69.minuteOfDay();
        org.joda.time.DurationField durationField75 = iSOChronology69.weekyears();
        org.joda.time.DurationField durationField76 = iSOChronology69.hours();
        org.joda.time.DurationField durationField77 = iSOChronology69.hours();
        org.joda.time.DateTimeField dateTimeField78 = iSOChronology69.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField79 = iSOChronology69.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone80 = iSOChronology69.getZone();
        long long82 = dateTimeZone80.convertUTCToLocal(999000L);
        boolean boolean83 = dateTimeZone15.equals((java.lang.Object) long82);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+52:00" + "'", str16, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+52:00" + "'", str18, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 187200000 + "'", int20 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 187200000 + "'", int22 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+52:00" + "'", str23, "+52:00");
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+52:00" + "'", str27, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+52:00" + "'", str29, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 187200000 + "'", int31 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 187200000 + "'", int33 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+52:00" + "'", str34, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-187200000L) + "'", long37 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 757554038459L + "'", long52 == 757554038459L);
        org.junit.Assert.assertNotNull(chronology53);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 187200000 + "'", int55 == 187200000);
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+52:00" + "'", str58, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+52:00" + "'", str60, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 187200000 + "'", int62 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 187200000 + "'", int64 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+52:00" + "'", str65, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-187200000L) + "'", long68 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
// flaky:         org.junit.Assert.assertTrue("'" + long82 + "' != '" + 188199000L + "'", long82 == 188199000L);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test09843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09843");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.monthOfYear();
        org.joda.time.DurationField durationField21 = iSOChronology13.halfdays();
        java.lang.Object obj22 = null;
        boolean boolean23 = iSOChronology13.equals(obj22);
        org.joda.time.DurationField durationField24 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.era();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test09844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09844");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.clockhourOfHalfday();
        org.joda.time.DurationField durationField16 = iSOChronology8.years();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test09845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09845");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.yearOfEra();
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeField20.getAsText(0, locale22);
        long long26 = dateTimeField20.addWrapField((-2209338000000L), 262968);
        long long29 = dateTimeField20.getDifferenceAsLong(28749540965097L, (-269982720000000000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0" + "'", str23, "0");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 8296259238000000L + "'", long26 == 8296259238000000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 8556322L + "'", long29 == 8556322L);
    }

    @Test
    public void test09846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09846");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.millisOfSecond();
        java.lang.String str12 = iSOChronology8.toString();
        org.joda.time.DurationField durationField13 = iSOChronology8.millis();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[+52:00]" + "'", str12, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test09847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09847");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField21 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.hourOfDay();
        org.joda.time.DurationField durationField23 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test09848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09848");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = iSOChronology13.add(readablePeriod16, (long) (-297682553), 863999);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int23 = dateTimeZone21.getOffsetFromLocal((long) (byte) 1);
        long long25 = dateTimeZone21.convertUTCToLocal(97L);
        java.lang.String str26 = dateTimeZone21.getID();
        int int28 = dateTimeZone21.getOffset(86460000L);
        org.joda.time.Chronology chronology29 = iSOChronology13.withZone(dateTimeZone21);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        java.lang.String str32 = dateTimeZone31.toString();
        java.lang.String str34 = dateTimeZone31.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        long long37 = dateTimeZone31.previousTransition((long) 10);
        long long39 = dateTimeZone21.getMillisKeepLocal(dateTimeZone31, (-62025278391096L));
        int int41 = dateTimeZone21.getStandardOffset((long) (-800));
        long long43 = dateTimeZone21.previousTransition((-133002690042L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-297682553L) + "'", long19 == (-297682553L));
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 187200000 + "'", int23 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 187200097L + "'", long25 == 187200097L);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+52:00" + "'", str26, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 187200000 + "'", int28 == 187200000);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+52:00" + "'", str32, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+52:00" + "'", str34, "+52:00");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10L + "'", long37 == 10L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-62025278391096L) + "'", long39 == (-62025278391096L));
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 187200000 + "'", int41 == 187200000);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-133002690042L) + "'", long43 == (-133002690042L));
    }

    @Test
    public void test09849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09849");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        int int17 = dateTimeField15.get((long) 86399);
        java.util.Locale locale18 = null;
        int int19 = dateTimeField15.getMaximumShortTextLength(locale18);
        java.util.Locale locale20 = null;
        int int21 = dateTimeField15.getMaximumTextLength(locale20);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
    }

    @Test
    public void test09850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09850");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.weekyearOfCentury();
        org.joda.time.Chronology chronology19 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField21 = iSOChronology13.weeks();
        boolean boolean22 = durationField21.isPrecise();
        int int25 = durationField21.getDifference((-321479900L), 110727072L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test09851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09851");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        long long19 = dateTimeField16.getDifferenceAsLong((long) (byte) -1, (long) (byte) -1);
        boolean boolean20 = dateTimeField16.isLenient();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09852");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long23 = iSOChronology13.getDateTimeMillis(259200100L, 11, (int) (byte) 10, (int) (short) 10, (int) ' ');
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.era();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField29 = iSOChronology13.years();
        long long32 = durationField29.subtract((-536400000L), (long) 34537691);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 285010032L + "'", long23 == 285010032L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1089904257608400000L) + "'", long32 == (-1089904257608400000L));
    }

    @Test
    public void test09853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09853");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.yearOfCentury();
        org.joda.time.DurationField durationField17 = iSOChronology13.halfdays();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.lang.String str20 = dateTimeZone19.toString();
        java.lang.String str22 = dateTimeZone19.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        int int25 = dateTimeZone19.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField27 = iSOChronology26.minutes();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology26.monthOfYear();
        org.joda.time.DurationField durationField29 = iSOChronology26.weekyears();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology26.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology26.millisOfDay();
        org.joda.time.DurationField durationField32 = iSOChronology26.millis();
        int int33 = durationField17.compareTo(durationField32);
        long long35 = durationField32.getMillis(169860000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+52:00" + "'", str20, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+52:00" + "'", str22, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 187200000 + "'", int25 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 169860000L + "'", long35 == 169860000L);
    }

    @Test
    public void test09854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09854");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.hourOfDay();
        org.joda.time.DurationField durationField14 = iSOChronology8.months();
        long long17 = durationField14.getMillis((long) 12177930, 5956047808898400000L);
        long long20 = durationField14.getMillis(0L, (-2726520618809448000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 32024862864000000L + "'", long17 == 32024862864000000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test09855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09855");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.dayOfMonth();
        org.joda.time.DurationField durationField25 = iSOChronology13.weeks();
        org.joda.time.Chronology chronology26 = iSOChronology13.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long32 = chronology26.getDateTimeMillis(4338678993L, 17562, (-23507), 8765, 8765);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 17562 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(chronology26);
    }

    @Test
    public void test09856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09856");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DurationField durationField12 = iSOChronology8.months();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.minuteOfDay();
        long long17 = iSOChronology8.add(3120L, (-640800000L), (int) '#');
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = dateTimeField18.add((long) 604800000, 365783071556988526L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 365783071556988526 * 3600000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-22427996880L) + "'", long17 == (-22427996880L));
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test09857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09857");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = iSOChronology8.add(readablePeriod14, (long) 'a', (-1));
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.dayOfMonth();
        org.joda.time.DurationField durationField19 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology8.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = iSOChronology8.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 97L + "'", long17 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test09858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09858");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField25 = dateTimeField24.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test09859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09859");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.secondOfDay();
        org.joda.time.DurationField durationField13 = iSOChronology8.millis();
        org.joda.time.DurationField durationField14 = iSOChronology8.weekyears();
        org.joda.time.DurationField durationField15 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test09860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09860");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.clockhourOfHalfday();
        org.joda.time.DurationField durationField13 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField14 = iSOChronology8.millis();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.hourOfDay();
        org.joda.time.DurationField durationField16 = iSOChronology8.hours();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField18 = iSOChronology8.centuries();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test09861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09861");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.centuryOfEra();
        int int17 = dateTimeField14.getDifference(0L, (-1200L));
        long long20 = dateTimeField14.add(0L, (long) (-139));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-438641568000000L) + "'", long20 == (-438641568000000L));
    }

    @Test
    public void test09862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09862");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfDay();
        java.lang.String str19 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone21 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.secondOfDay();
        org.joda.time.DurationField durationField24 = dateTimeField23.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+52:00]" + "'", str19, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test09863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09863");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField21 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.year();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test09864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09864");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DurationField durationField10 = iSOChronology8.months();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.millisOfDay();
        java.lang.String str12 = iSOChronology8.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[+52:00]" + "'", str12, "ISOChronology[+52:00]");
    }

    @Test
    public void test09865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09865");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.clockhourOfHalfday();
        java.lang.String str21 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[+52:00]" + "'", str21, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test09866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09866");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField21 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.minuteOfHour();
        long long26 = iSOChronology13.add(298800100L, 187200002L, 1);
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.monthOfYear();
        org.joda.time.DurationField durationField28 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology13.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 486000102L + "'", long26 == 486000102L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test09867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09867");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DurationField durationField16 = iSOChronology13.millis();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test09868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09868");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.monthOfYear();
        org.joda.time.DurationField durationField11 = iSOChronology8.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.era();
        org.joda.time.DurationField durationField16 = iSOChronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test09869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09869");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        int int12 = dateTimeField10.getMinimumValue(3155760000002L);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = dateTimeField10.getType();
        int int14 = dateTimeField10.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test09870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09870");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        long long12 = dateTimeZone9.adjustOffset(757366848000L, true);
        int int14 = dateTimeZone9.getStandardOffset(5057858440173600000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 757366848000L + "'", long12 == 757366848000L);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 187200000 + "'", int14 == 187200000);
    }

    @Test
    public void test09871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09871");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology20 = iSOChronology13.withZone(dateTimeZone19);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = iSOChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology21.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology21.millisOfDay();
        org.joda.time.ReadablePartial readablePartial26 = null;
        java.util.Locale locale27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = dateTimeField25.getAsText(readablePartial26, locale27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test09872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09872");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.year();
        org.joda.time.DurationField durationField14 = iSOChronology8.centuries();
        org.joda.time.DurationField durationField15 = iSOChronology8.minutes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test09873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09873");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.dayOfYear();
        long long17 = iSOChronology8.getDateTimeMillis(0L, (int) (short) 10, (int) (short) 0, 59, (int) '#');
        org.joda.time.DurationField durationField18 = iSOChronology8.days();
        org.joda.time.Chronology chronology19 = iSOChronology8.withUTC();
        org.joda.time.DurationField durationField20 = iSOChronology8.minutes();
        org.joda.time.DateTimeZone dateTimeZone21 = iSOChronology8.getZone();
        java.lang.String str22 = iSOChronology8.toString();
        org.joda.time.DurationField durationField23 = iSOChronology8.seconds();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 21659035L + "'", long17 == 21659035L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[+52:00]" + "'", str22, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test09874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09874");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str3 = dateTimeZone1.getID();
        long long7 = dateTimeZone1.convertLocalToUTC(10L, false, (long) '4');
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str10 = dateTimeZone9.toString();
        java.lang.String str12 = dateTimeZone9.getShortName(1L);
        int int14 = dateTimeZone9.getOffsetFromLocal((long) (byte) 0);
        int int16 = dateTimeZone9.getStandardOffset((long) (short) 0);
        java.lang.String str17 = dateTimeZone9.getID();
        long long20 = dateTimeZone9.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField22 = iSOChronology21.months();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology21.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology21.centuryOfEra();
        boolean boolean28 = dateTimeZone1.equals((java.lang.Object) iSOChronology21);
        org.joda.time.DurationField durationField29 = iSOChronology21.weekyears();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        long long33 = iSOChronology21.add(readablePeriod30, (long) 0, (-333));
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology21.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology21.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+52:00" + "'", str3, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-187199990L) + "'", long7 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+52:00" + "'", str10, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+52:00" + "'", str12, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 187200000 + "'", int14 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 187200000 + "'", int16 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+52:00" + "'", str17, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-187200000L) + "'", long20 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test09875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09875");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField21 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.hourOfDay();
        org.joda.time.DurationField durationField23 = iSOChronology13.minutes();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = iSOChronology13.add(readablePeriod24, 31536000000L, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.weekyear();
        org.joda.time.DurationField durationField29 = dateTimeField28.getLeapDurationField();
        boolean boolean31 = dateTimeField28.isLeap((-94348799903L));
        long long33 = dateTimeField28.remainder(360000035L);
        int int35 = dateTimeField28.getMaximumValue(288480470L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 31536000000L + "'", long27 == 31536000000L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 806400035L + "'", long33 == 806400035L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 292278993 + "'", int35 == 292278993);
    }

    @Test
    public void test09876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09876");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.era();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.era();
        org.joda.time.DurationField durationField26 = iSOChronology13.weekyears();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test09877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09877");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test09878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09878");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField20 = iSOChronology13.hours();
        org.joda.time.DurationField durationField21 = iSOChronology13.hours();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str24 = dateTimeZone23.toString();
        java.lang.String str26 = dateTimeZone23.getShortName(1L);
        int int28 = dateTimeZone23.getOffsetFromLocal((long) (byte) 0);
        int int30 = dateTimeZone23.getStandardOffset((long) (short) 0);
        java.lang.String str31 = dateTimeZone23.getID();
        long long34 = dateTimeZone23.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField36 = iSOChronology35.months();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology35.secondOfDay();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology35.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology35.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology35.minuteOfDay();
        org.joda.time.DurationField durationField41 = iSOChronology35.weekyears();
        org.joda.time.DurationField durationField42 = iSOChronology35.hours();
        java.lang.String str43 = iSOChronology35.toString();
        org.joda.time.DateTimeZone dateTimeZone44 = iSOChronology35.getZone();
        org.joda.time.Chronology chronology45 = iSOChronology13.withZone(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology13.era();
        org.joda.time.DateTimeZone dateTimeZone48 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField49 = iSOChronology13.hours();
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.lang.String str52 = dateTimeZone51.toString();
        java.lang.String str54 = dateTimeZone51.getShortName(1L);
        int int56 = dateTimeZone51.getOffsetFromLocal((long) (byte) 0);
        int int58 = dateTimeZone51.getStandardOffset((long) (short) 0);
        java.lang.String str59 = dateTimeZone51.getID();
        long long62 = dateTimeZone51.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology63 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone51);
        org.joda.time.DurationField durationField64 = iSOChronology63.months();
        org.joda.time.DateTimeField dateTimeField65 = iSOChronology63.secondOfDay();
        org.joda.time.DateTimeField dateTimeField66 = iSOChronology63.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField67 = iSOChronology63.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField68 = iSOChronology63.weekOfWeekyear();
        org.joda.time.Chronology chronology69 = iSOChronology63.withUTC();
        org.joda.time.DateTimeField dateTimeField70 = iSOChronology63.yearOfCentury();
        org.joda.time.DurationField durationField71 = iSOChronology63.weeks();
        int int72 = durationField49.compareTo(durationField71);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+52:00" + "'", str24, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+52:00" + "'", str26, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 187200000 + "'", int28 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 187200000 + "'", int30 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+52:00" + "'", str31, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-187200000L) + "'", long34 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ISOChronology[+52:00]" + "'", str43, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+52:00" + "'", str52, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+52:00" + "'", str54, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 187200000 + "'", int56 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 187200000 + "'", int58 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+52:00" + "'", str59, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-187200000L) + "'", long62 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
    }

    @Test
    public void test09879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09879");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.hourOfHalfday();
        java.lang.String str12 = iSOChronology8.toString();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[+52:00]" + "'", str12, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test09880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09880");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.Chronology chronology18 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField22 = iSOChronology13.years();
        java.lang.String str23 = durationField22.toString();
        java.lang.String str24 = durationField22.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DurationField[years]" + "'", str23, "DurationField[years]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DurationField[years]" + "'", str24, "DurationField[years]");
    }

    @Test
    public void test09881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09881");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.era();
        org.joda.time.DurationField durationField15 = dateTimeField14.getLeapDurationField();
        org.joda.time.ReadablePartial readablePartial16 = null;
        int int17 = dateTimeField14.getMaximumValue(readablePartial16);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNull(durationField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test09882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09882");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.dayOfYear();
        long long17 = iSOChronology8.getDateTimeMillis(0L, (int) (short) 10, (int) (short) 0, 59, (int) '#');
        org.joda.time.DurationField durationField18 = iSOChronology8.days();
        org.joda.time.Chronology chronology19 = iSOChronology8.withUTC();
        org.joda.time.DurationField durationField20 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology8.minuteOfDay();
        int int24 = dateTimeField22.getLeapAmount((long) 1970);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 21659035L + "'", long17 == 21659035L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test09883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09883");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField10 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField11 = iSOChronology8.months();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.hourOfHalfday();
        org.joda.time.DurationField durationField15 = iSOChronology8.seconds();
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology8.getZone();
        org.joda.time.DurationField durationField17 = iSOChronology8.weekyears();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test09884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09884");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DurationField durationField21 = iSOChronology13.minutes();
        org.joda.time.DurationField durationField22 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = iSOChronology13.withZone(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test09885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09885");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.secondOfMinute();
        org.joda.time.Chronology chronology14 = iSOChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.minuteOfDay();
        org.joda.time.DurationField durationField17 = iSOChronology8.weekyears();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.secondOfMinute();
        org.joda.time.DurationField durationField19 = iSOChronology8.hours();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test09886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09886");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField20 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            long long31 = iSOChronology13.getDateTimeMillis((-1438328L), 1965, (-407513), 1, 725);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1965 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test09887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09887");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        org.joda.time.Chronology chronology20 = iSOChronology13.withUTC();
        org.joda.time.DurationField durationField21 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.yearOfEra();
        java.lang.String str23 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.minuteOfDay();
        java.util.Locale locale25 = null;
        int int26 = dateTimeField24.getMaximumShortTextLength(locale25);
        java.util.Locale locale29 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long30 = dateTimeField24.set(46658764800000L, "248088", locale29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 248088 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[+52:00]" + "'", str23, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
    }

    @Test
    public void test09888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09888");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfDay();
        java.lang.String str19 = iSOChronology13.toString();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str22 = dateTimeZone21.toString();
        java.lang.String str23 = dateTimeZone21.getID();
        int int25 = dateTimeZone21.getOffsetFromLocal(36059035L);
        org.joda.time.Chronology chronology26 = iSOChronology13.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.weekyear();
        org.joda.time.DurationField durationField28 = iSOChronology13.hours();
        org.joda.time.DurationField durationField29 = iSOChronology13.seconds();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+52:00]" + "'", str19, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+52:00" + "'", str22, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+52:00" + "'", str23, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 187200000 + "'", int25 == 187200000);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test09889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09889");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.dayOfYear();
        long long17 = iSOChronology8.getDateTimeMillis(0L, (int) (short) 10, (int) (short) 0, 59, (int) '#');
        org.joda.time.DurationField durationField18 = iSOChronology8.days();
        org.joda.time.Chronology chronology19 = iSOChronology8.withUTC();
        java.lang.String str20 = iSOChronology8.toString();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology8.year();
        org.joda.time.DurationField durationField22 = iSOChronology8.millis();
        long long25 = durationField22.getDifferenceAsLong(84840000L, (-2726520619169448000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 21659035L + "'", long17 == 21659035L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(chronology19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+52:00]" + "'", str20, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2726520619254288000L + "'", long25 == 2726520619254288000L);
    }

    @Test
    public void test09890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09890");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.era();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = dateTimeField22.add((-2726520590077200000L), 693792000000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test09891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09891");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.year();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = iSOChronology13.add(readablePeriod24, 5907399247962000100L, 984650340);
        org.joda.time.DurationField durationField28 = iSOChronology13.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 5907399247962000100L + "'", long27 == 5907399247962000100L);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test09892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09892");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.millisOfDay();
        org.joda.time.DurationField durationField20 = iSOChronology13.halfdays();
        org.joda.time.DurationField durationField21 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test09893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09893");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfDay();
        java.lang.String str19 = iSOChronology13.toString();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str22 = dateTimeZone21.toString();
        java.lang.String str23 = dateTimeZone21.getID();
        int int25 = dateTimeZone21.getOffsetFromLocal(36059035L);
        org.joda.time.Chronology chronology26 = iSOChronology13.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField30 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField32 = iSOChronology13.months();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+52:00]" + "'", str19, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+52:00" + "'", str22, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+52:00" + "'", str23, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 187200000 + "'", int25 == 187200000);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test09894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09894");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField20 = iSOChronology13.hours();
        java.lang.String str21 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.centuryOfEra();
        long long24 = dateTimeField22.roundFloor(32400000L);
        long long26 = dateTimeField22.roundCeiling((-273470301L));
        org.joda.time.DurationField durationField27 = dateTimeField22.getRangeDurationField();
        long long30 = dateTimeField22.add(8445360107L, 725);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[+52:00]" + "'", str21, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-2209176000000L) + "'", long24 == (-2209176000000L));
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 946497600000L + "'", long26 == 946497600000L);
        org.junit.Assert.assertNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 2287887530160107L + "'", long30 == 2287887530160107L);
    }

    @Test
    public void test09895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09895");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfYear();
        java.lang.String str18 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.millisOfDay();
        org.joda.time.DurationField durationField20 = iSOChronology13.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+52:00]" + "'", str18, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test09896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09896");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField13 = iSOChronology8.halfdays();
        org.joda.time.DurationField durationField14 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test09897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09897");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.secondOfDay();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.lang.String str15 = dateTimeZone14.toString();
        java.lang.String str17 = dateTimeZone14.getShortName(1L);
        int int19 = dateTimeZone14.getOffsetFromLocal((long) (byte) 0);
        int int21 = dateTimeZone14.getStandardOffset((long) (short) 0);
        java.lang.String str22 = dateTimeZone14.getID();
        long long25 = dateTimeZone14.adjustOffset(0L, true);
        org.joda.time.Chronology chronology26 = iSOChronology8.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.Chronology chronology28 = iSOChronology8.withZone(dateTimeZone27);
        org.joda.time.DurationField durationField29 = iSOChronology8.halfdays();
        org.joda.time.DurationField durationField30 = iSOChronology8.days();
        org.joda.time.DurationField durationField31 = iSOChronology8.hours();
        org.joda.time.DurationField durationField32 = iSOChronology8.years();
        org.joda.time.DurationField durationField33 = iSOChronology8.years();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+52:00" + "'", str15, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+52:00" + "'", str17, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 187200000 + "'", int19 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 187200000 + "'", int21 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+52:00" + "'", str22, "+52:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test09898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09898");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfDay();
        java.lang.String str18 = iSOChronology13.toString();
        org.joda.time.DurationField durationField19 = iSOChronology13.millis();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+52:00]" + "'", str18, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test09899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09899");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfYear();
        java.util.Locale locale18 = null;
        int int19 = dateTimeField17.getMaximumTextLength(locale18);
        long long21 = dateTimeField17.roundHalfFloor((long) (short) 1);
        java.util.Locale locale22 = null;
        int int23 = dateTimeField17.getMaximumTextLength(locale22);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeField17.getAsText((-59099590800000L), locale25);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-14400000L) + "'", long21 == (-14400000L));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "78" + "'", str26, "78");
    }

    @Test
    public void test09900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09900");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField18 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) 'a');
        java.lang.String str22 = dateTimeZone21.getID();
        org.joda.time.Chronology chronology23 = iSOChronology13.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField24 = iSOChronology13.seconds();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DurationField durationField26 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.minuteOfDay();
        long long30 = dateTimeField27.add((-51011434018800000L), (-407513));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+97:00" + "'", str22, "+97:00");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-51011458469580000L) + "'", long30 == (-51011458469580000L));
    }

    @Test
    public void test09901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09901");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.yearOfCentury();
        org.joda.time.Chronology chronology14 = iSOChronology8.withUTC();
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology8.getZone();
        org.joda.time.Chronology chronology16 = iSOChronology8.withUTC();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test09902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09902");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology20 = iSOChronology13.withZone(dateTimeZone19);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = iSOChronology21.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        long long25 = dateTimeZone22.getMillisKeepLocal(dateTimeZone23, (-7043511686399999997L));
        long long28 = dateTimeZone22.adjustOffset(292278993L, true);
        java.lang.String str29 = dateTimeZone22.getID();
        long long31 = dateTimeZone22.convertUTCToLocal((-31513123264L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-7043511686587199997L) + "'", long25 == (-7043511686587199997L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 292278993L + "'", long28 == 292278993L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-31513123264L) + "'", long31 == (-31513123264L));
    }

    @Test
    public void test09903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09903");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.Chronology chronology18 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test09904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09904");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField12 = iSOChronology8.hours();
        org.joda.time.DurationField durationField13 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(23, 34);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone18.getName((long) 187200000, locale20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        int int23 = dateTimeZone18.getOffset(readableInstant22);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone18.getName((-3020810640000L), locale25);
        java.lang.String str28 = dateTimeZone18.getShortName(31536000000L);
        org.joda.time.Chronology chronology29 = iSOChronology8.withZone(dateTimeZone18);
        org.joda.time.DurationField durationField30 = chronology29.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+23:34" + "'", str21, "+23:34");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 84840000 + "'", int23 == 84840000);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+23:34" + "'", str26, "+23:34");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+23:34" + "'", str28, "+23:34");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test09905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09905");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long23 = iSOChronology13.getDateTimeMillis(259200100L, 11, (int) (byte) 10, (int) (short) 10, (int) ' ');
        org.joda.time.DurationField durationField24 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.hourOfDay();
        org.joda.time.DurationField durationField26 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.hourOfDay();
        org.joda.time.DurationField durationField28 = iSOChronology13.weekyears();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 285010032L + "'", long23 == 285010032L);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test09906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09906");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField16 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.millisOfDay();
        long long20 = dateTimeField18.roundHalfFloor((long) 97);
        long long23 = dateTimeField18.add((-1965L), (long) 6944000);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 97L + "'", long20 == 97L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 6942035L + "'", long23 == 6942035L);
    }

    @Test
    public void test09907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09907");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.hourOfHalfday();
        org.joda.time.DurationField durationField17 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.era();
        org.joda.time.DurationField durationField19 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.weekyearOfCentury();
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeField20.getAsText(8, locale22);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "8" + "'", str23, "8");
    }

    @Test
    public void test09908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09908");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DurationField durationField13 = iSOChronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test09909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09909");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfYear();
        java.lang.String str18 = iSOChronology13.toString();
        org.joda.time.DurationField durationField19 = iSOChronology13.hours();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+52:00]" + "'", str18, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test09910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09910");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DurationField durationField16 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.yearOfEra();
        boolean boolean20 = dateTimeField18.isLeap((-62167219199969L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09911");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField18 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test09912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09912");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology20 = iSOChronology13.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.millisOfDay();
        org.joda.time.DurationField durationField22 = iSOChronology13.years();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test09913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09913");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.minuteOfHour();
        org.joda.time.ReadablePartial readablePartial21 = null;
        java.util.Locale locale22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = dateTimeField20.getAsText(readablePartial21, locale22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test09914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09914");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.minuteOfHour();
        org.joda.time.DurationField durationField21 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.weekyearOfCentury();
        long long24 = dateTimeField22.roundCeiling((-16558786120998L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-16536024000000L) + "'", long24 == (-16536024000000L));
    }

    @Test
    public void test09915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09915");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = iSOChronology8.add(readablePeriod14, (long) 'a', (-1));
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology8.clockhourOfDay();
        org.joda.time.DurationField durationField20 = iSOChronology8.seconds();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 97L + "'", long17 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test09916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09916");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long22 = iSOChronology13.getDateTimeMillis(12, (int) (byte) 1, (int) (short) 10, 11);
        long long27 = iSOChronology13.getDateTimeMillis((int) (byte) 0, (int) (short) 1, 1, (int) ' ');
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField29 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology13.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-61787937599989L) + "'", long22 == (-61787937599989L));
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-62167406399968L) + "'", long27 == (-62167406399968L));
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test09917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09917");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long26 = iSOChronology13.getDateTimeMillis((-722551), (-1252), 1800024, 13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1252 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test09918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09918");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField10 = iSOChronology8.months();
        long long13 = durationField10.getMillis(17268595, 872L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 45412018502400000L + "'", long13 == 45412018502400000L);
    }

    @Test
    public void test09919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09919");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.days();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test09920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09920");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField18 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.monthOfYear();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.lang.String str23 = dateTimeZone22.toString();
        java.lang.String str25 = dateTimeZone22.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        int int28 = dateTimeZone22.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField30 = iSOChronology29.minutes();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology29.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology29.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology29.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology29.dayOfYear();
        org.joda.time.DurationField durationField35 = iSOChronology29.millis();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology29.minuteOfDay();
        boolean boolean37 = iSOChronology13.equals((java.lang.Object) dateTimeField36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = dateTimeField36.getType();
        java.util.Locale locale39 = null;
        int int40 = dateTimeField36.getMaximumTextLength(locale39);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+52:00" + "'", str23, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+52:00" + "'", str25, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 187200000 + "'", int28 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
    }

    @Test
    public void test09921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09921");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.dayOfWeek();
        java.lang.String str15 = iSOChronology8.toString();
        org.joda.time.DurationField durationField16 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField17 = iSOChronology8.years();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.lang.String str20 = dateTimeZone19.toString();
        java.lang.String str22 = dateTimeZone19.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        int int25 = dateTimeZone19.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        int int30 = dateTimeZone28.getOffset(2924946L);
        java.lang.String str31 = dateTimeZone28.getID();
        long long33 = dateTimeZone19.getMillisKeepLocal(dateTimeZone28, 5520000L);
        long long35 = dateTimeZone28.convertUTCToLocal((long) (byte) 0);
        org.joda.time.Chronology chronology36 = iSOChronology8.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology8.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[+52:00]" + "'", str15, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+52:00" + "'", str20, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+52:00" + "'", str22, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 187200000 + "'", int25 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 192720000L + "'", long33 == 192720000L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test09922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09922");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.clockhourOfHalfday();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str17 = dateTimeZone16.toString();
        java.lang.String str19 = dateTimeZone16.getShortName(1L);
        int int21 = dateTimeZone16.getOffsetFromLocal((long) (byte) 0);
        int int23 = dateTimeZone16.getStandardOffset((long) (short) 0);
        boolean boolean24 = iSOChronology13.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.dayOfYear();
        long long29 = dateTimeField26.getDifferenceAsLong((-62167568399968L), 25252819200002L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+52:00" + "'", str17, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+52:00" + "'", str19, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 187200000 + "'", int21 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 187200000 + "'", int23 == 187200000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1011810L) + "'", long29 == (-1011810L));
    }

    @Test
    public void test09923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09923");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField20 = iSOChronology13.months();
        org.joda.time.DurationField durationField21 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.yearOfEra();
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = dateTimeField22.getAsText(readablePartial23, locale24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test09924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09924");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.millisOfDay();
        org.joda.time.DurationField durationField13 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField14 = iSOChronology8.hours();
        org.joda.time.DurationField durationField15 = iSOChronology8.halfdays();
        int int18 = durationField15.getDifference((long) 77, (-2194080L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test09925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09925");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        long long23 = iSOChronology13.getDateTimeMillis(259200100L, 11, (int) (byte) 10, (int) (short) 10, (int) ' ');
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.era();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology13.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 285010032L + "'", long23 == 285010032L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test09926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09926");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField12 = iSOChronology8.years();
        org.joda.time.DurationField durationField13 = iSOChronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology8.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = iSOChronology8.add(readablePeriod18, (long) 405544, 725);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        long long25 = iSOChronology8.add(readablePeriod22, (-4413398400000L), 863999);
        org.joda.time.DurationField durationField26 = iSOChronology8.days();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 405544L + "'", long21 == 405544L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-4413398400000L) + "'", long25 == (-4413398400000L));
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test09927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09927");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.era();
        org.joda.time.DurationField durationField25 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test09928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09928");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField12 = iSOChronology8.hours();
        org.joda.time.DurationField durationField13 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test09929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09929");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str3 = dateTimeZone1.getID();
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getStandardOffset(0L);
        int int9 = dateTimeZone1.getStandardOffset((long) (byte) 10);
        java.lang.String str10 = dateTimeZone1.toString();
        long long12 = dateTimeZone1.previousTransition((long) 28664880);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.lang.String str15 = dateTimeZone14.toString();
        java.lang.String str17 = dateTimeZone14.getShortName(1L);
        int int19 = dateTimeZone14.getOffsetFromLocal((long) (byte) 0);
        int int21 = dateTimeZone14.getStandardOffset((long) (short) 0);
        java.lang.String str22 = dateTimeZone14.getID();
        long long25 = dateTimeZone14.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField27 = iSOChronology26.months();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology26.secondOfDay();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology26.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology26.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology26.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology26.dayOfWeek();
        java.lang.String str34 = iSOChronology26.toString();
        org.joda.time.DurationField durationField35 = iSOChronology26.halfdays();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology26.dayOfYear();
        boolean boolean37 = dateTimeZone1.equals((java.lang.Object) dateTimeField36);
        boolean boolean38 = dateTimeZone1.isFixed();
        int int40 = dateTimeZone1.getStandardOffset(8004L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+52:00" + "'", str3, "+52:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 187200000 + "'", int9 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+52:00" + "'", str10, "+52:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 28664880L + "'", long12 == 28664880L);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+52:00" + "'", str15, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+52:00" + "'", str17, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 187200000 + "'", int19 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 187200000 + "'", int21 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+52:00" + "'", str22, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-187200000L) + "'", long25 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ISOChronology[+52:00]" + "'", str34, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 187200000 + "'", int40 == 187200000);
    }

    @Test
    public void test09930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09930");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField23 = iSOChronology13.halfdays();
        org.joda.time.DurationField durationField24 = iSOChronology13.minutes();
        org.joda.time.DurationField durationField25 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField26 = iSOChronology13.weekyears();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test09931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09931");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.weekyear();
        java.lang.String str17 = iSOChronology13.toString();
        org.joda.time.DurationField durationField18 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[+52:00]" + "'", str17, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test09932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09932");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField20 = iSOChronology13.centuries();
        org.joda.time.Chronology chronology21 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray25 = iSOChronology13.get(readablePeriod23, 255600000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test09933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09933");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField18 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) 'a');
        java.lang.String str22 = dateTimeZone21.getID();
        org.joda.time.Chronology chronology23 = iSOChronology13.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField24 = iSOChronology13.seconds();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DurationField durationField26 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+97:00" + "'", str22, "+97:00");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test09934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09934");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.millisOfSecond();
        org.joda.time.DurationField durationField21 = iSOChronology13.months();
        org.joda.time.DurationField durationField22 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test09935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09935");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField20 = iSOChronology13.centuries();
        org.joda.time.Chronology chronology21 = iSOChronology13.withUTC();
        java.lang.String str22 = iSOChronology13.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(chronology21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[+52:00]" + "'", str22, "ISOChronology[+52:00]");
    }

    @Test
    public void test09936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09936");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.year();
        org.joda.time.DurationField durationField18 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.dayOfMonth();
        java.lang.String str21 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.dayOfWeek();
        java.lang.String str23 = iSOChronology13.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[+52:00]" + "'", str21, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[+52:00]" + "'", str23, "ISOChronology[+52:00]");
    }

    @Test
    public void test09937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09937");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField21 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.clockhourOfDay();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.lang.String str27 = dateTimeZone26.toString();
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone26.getName(97L, locale29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        int int32 = dateTimeZone26.getOffset(readableInstant31);
        org.joda.time.Chronology chronology33 = iSOChronology13.withZone(dateTimeZone26);
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone26);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone26.getName(37L, locale36);
        int int39 = dateTimeZone26.getStandardOffset((long) 33300);
        int int41 = dateTimeZone26.getOffsetFromLocal(946708560000000000L);
        java.lang.String str42 = dateTimeZone26.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+52:00" + "'", str27, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+52:00" + "'", str30, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 187200000 + "'", int32 == 187200000);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(iSOChronology34);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+52:00" + "'", str37, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 187200000 + "'", int39 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 187200000 + "'", int41 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+52:00" + "'", str42, "+52:00");
    }

    @Test
    public void test09938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09938");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField18 = iSOChronology13.halfdays();
        java.lang.String str19 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.halfdayOfDay();
        org.joda.time.DurationField durationField21 = iSOChronology13.millis();
        org.joda.time.DurationField durationField22 = iSOChronology13.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+52:00]" + "'", str19, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test09939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09939");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField19 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField20 = iSOChronology13.hours();
        org.joda.time.DurationField durationField21 = iSOChronology13.millis();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str24 = dateTimeZone23.toString();
        java.lang.String str26 = dateTimeZone23.getShortName(1L);
        int int28 = dateTimeZone23.getOffsetFromLocal((long) (byte) 0);
        int int30 = dateTimeZone23.getStandardOffset((long) (short) 0);
        java.lang.String str31 = dateTimeZone23.getID();
        long long34 = dateTimeZone23.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField36 = iSOChronology35.months();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology35.secondOfDay();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology35.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology35.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology35.minuteOfDay();
        org.joda.time.DurationField durationField41 = iSOChronology35.weekyears();
        org.joda.time.DurationField durationField42 = iSOChronology35.hours();
        org.joda.time.DurationField durationField43 = iSOChronology35.hours();
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str46 = dateTimeZone45.toString();
        java.lang.String str48 = dateTimeZone45.getShortName(1L);
        int int50 = dateTimeZone45.getOffsetFromLocal((long) (byte) 0);
        int int52 = dateTimeZone45.getStandardOffset((long) (short) 0);
        java.lang.String str53 = dateTimeZone45.getID();
        long long56 = dateTimeZone45.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology57 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone45);
        org.joda.time.DurationField durationField58 = iSOChronology57.months();
        org.joda.time.DateTimeField dateTimeField59 = iSOChronology57.secondOfDay();
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology57.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology57.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology57.minuteOfDay();
        org.joda.time.DurationField durationField63 = iSOChronology57.weekyears();
        org.joda.time.DurationField durationField64 = iSOChronology57.hours();
        java.lang.String str65 = iSOChronology57.toString();
        org.joda.time.DateTimeZone dateTimeZone66 = iSOChronology57.getZone();
        org.joda.time.Chronology chronology67 = iSOChronology35.withZone(dateTimeZone66);
        java.util.TimeZone timeZone68 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone68);
        long long71 = dateTimeZone69.previousTransition((long) 'a');
        long long73 = dateTimeZone66.getMillisKeepLocal(dateTimeZone69, (long) (byte) 1);
        boolean boolean75 = dateTimeZone69.equals((java.lang.Object) (-14280001L));
        org.joda.time.Chronology chronology76 = iSOChronology13.withZone(dateTimeZone69);
        org.joda.time.DateTimeField dateTimeField77 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField78 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.Chronology chronology79 = iSOChronology13.withUTC();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+52:00" + "'", str24, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+52:00" + "'", str26, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 187200000 + "'", int28 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 187200000 + "'", int30 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+52:00" + "'", str31, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-187200000L) + "'", long34 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+52:00" + "'", str46, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+52:00" + "'", str48, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 187200000 + "'", int50 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 187200000 + "'", int52 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+52:00" + "'", str53, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-187200000L) + "'", long56 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(durationField64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ISOChronology[+52:00]" + "'", str65, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 97L + "'", long71 == 97L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(chronology79);
    }

    @Test
    public void test09940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09940");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.clockhourOfHalfday();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str17 = dateTimeZone16.toString();
        java.lang.String str19 = dateTimeZone16.getShortName(1L);
        int int21 = dateTimeZone16.getOffsetFromLocal((long) (byte) 0);
        int int23 = dateTimeZone16.getStandardOffset((long) (short) 0);
        boolean boolean24 = iSOChronology13.equals((java.lang.Object) dateTimeZone16);
        long long27 = dateTimeZone16.adjustOffset(25252904995200000L, false);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str30 = dateTimeZone29.toString();
        java.lang.String str32 = dateTimeZone29.getShortName(1L);
        int int34 = dateTimeZone29.getOffsetFromLocal((long) (byte) 0);
        int int36 = dateTimeZone29.getStandardOffset((long) (short) 0);
        java.lang.String str37 = dateTimeZone29.getID();
        long long40 = dateTimeZone29.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField42 = iSOChronology41.months();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology41.secondOfDay();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology41.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology41.secondOfMinute();
        org.joda.time.DurationField durationField46 = iSOChronology41.weeks();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology41.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology41.year();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology41.hourOfHalfday();
        boolean boolean50 = dateTimeZone16.equals((java.lang.Object) iSOChronology41);
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology41.centuryOfEra();
        java.lang.String str53 = dateTimeField51.getAsText(120000L);
        int int56 = dateTimeField51.getDifference(295938993L, 17562L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+52:00" + "'", str17, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+52:00" + "'", str19, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 187200000 + "'", int21 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 187200000 + "'", int23 == 187200000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 25252904995200000L + "'", long27 == 25252904995200000L);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+52:00" + "'", str30, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+52:00" + "'", str32, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 187200000 + "'", int34 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 187200000 + "'", int36 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+52:00" + "'", str37, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-187200000L) + "'", long40 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "19" + "'", str53, "19");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test09941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09941");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = iSOChronology2.halfdays();
        org.joda.time.DurationField durationField4 = iSOChronology2.millis();
        long long7 = durationField4.getMillis(0, 0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test09942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09942");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        int int12 = dateTimeZone10.getOffset(2924946L);
        java.lang.String str13 = dateTimeZone10.getID();
        long long15 = dateTimeZone1.getMillisKeepLocal(dateTimeZone10, 5520000L);
        int int17 = dateTimeZone1.getStandardOffset(297682553L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone1.getShortName(0L, locale20);
        long long24 = dateTimeZone1.adjustOffset(62135535600010L, false);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.lang.String str27 = dateTimeZone26.toString();
        java.lang.String str29 = dateTimeZone26.getShortName(1L);
        int int31 = dateTimeZone26.getOffsetFromLocal((long) (byte) 0);
        int int33 = dateTimeZone26.getStandardOffset((long) (short) 0);
        java.lang.String str34 = dateTimeZone26.getID();
        long long37 = dateTimeZone26.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone26);
        org.joda.time.DurationField durationField39 = iSOChronology38.months();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology38.secondOfDay();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology38.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology38.weekyearOfCentury();
        long long47 = iSOChronology38.add((long) (short) 100, 0L, 3);
        org.joda.time.DateTimeZone dateTimeZone48 = iSOChronology38.getZone();
        org.joda.time.Chronology chronology49 = iSOChronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology38.halfdayOfDay();
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        java.lang.String str53 = dateTimeZone52.toString();
        java.lang.String str55 = dateTimeZone52.getShortName(1L);
        int int57 = dateTimeZone52.getOffsetFromLocal((long) (byte) 0);
        int int59 = dateTimeZone52.getStandardOffset((long) (short) 0);
        java.lang.String str60 = dateTimeZone52.getID();
        long long63 = dateTimeZone52.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology64 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime65 = null;
        boolean boolean66 = dateTimeZone52.isLocalDateTimeGap(localDateTime65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        int int68 = dateTimeZone52.getOffset(readableInstant67);
        boolean boolean69 = iSOChronology38.equals((java.lang.Object) dateTimeZone52);
        long long71 = dateTimeZone1.getMillisKeepLocal(dateTimeZone52, 107293663589108L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 192720000L + "'", long15 == 192720000L);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 187200000 + "'", int17 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+52:00" + "'", str21, "+52:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 62135535600010L + "'", long24 == 62135535600010L);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+52:00" + "'", str27, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+52:00" + "'", str29, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 187200000 + "'", int31 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 187200000 + "'", int33 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+52:00" + "'", str34, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-187200000L) + "'", long37 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L + "'", long47 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+52:00" + "'", str53, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+52:00" + "'", str55, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 187200000 + "'", int57 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 187200000 + "'", int59 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+52:00" + "'", str60, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-187200000L) + "'", long63 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 187200000 + "'", int68 == 187200000);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 107293663589108L + "'", long71 == 107293663589108L);
    }

    @Test
    public void test09943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09943");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test09944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09944");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.hourOfHalfday();
        org.joda.time.DurationField durationField17 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.era();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.era();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test09945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09945");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.minutes();
        org.joda.time.DurationField durationField16 = iSOChronology13.weeks();
        org.joda.time.DurationField durationField17 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.centuryOfEra();
        org.joda.time.DurationField durationField20 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfMonth();
        java.lang.String str22 = iSOChronology13.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187200000L) + "'", long12 == (-187200000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[+52:00]" + "'", str22, "ISOChronology[+52:00]");
    }

    @Test
    public void test09946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09946");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.hourOfDay();
        long long18 = iSOChronology8.add(28425600000L, 28664880L, 84840000);
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology8.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+52:00" + "'", str2, "+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2431956844800000L + "'", long18 == 2431956844800000L);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test09947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09947");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str4 = dateTimeZone1.getName(31608000000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
    }

    @Test
    public void test09948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09948");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DurationField durationField16 = iSOChronology13.days();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DurationField durationField20 = iSOChronology13.days();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test09949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09949");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField18 = iSOChronology13.halfdays();
        org.joda.time.DurationField durationField19 = iSOChronology13.millis();
        org.joda.time.DurationField durationField20 = iSOChronology13.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = iSOChronology13.add(198073939960291390L, (-3755183842968L), 17268595);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -3755183842968 * 17268595");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test09950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09950");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 52);
        java.lang.String str3 = dateTimeZone2.getID();
        java.util.TimeZone timeZone4 = dateTimeZone2.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:52" + "'", str3, "-01:52");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT-01:52");
    }

    @Test
    public void test09951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09951");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.centuryOfEra();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str17 = dateTimeZone16.toString();
        java.lang.String str19 = dateTimeZone16.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        long long22 = dateTimeZone16.convertUTCToLocal((long) (byte) 10);
        long long25 = dateTimeZone16.convertLocalToUTC((long) 292278993, false);
        org.joda.time.Chronology chronology26 = iSOChronology8.withZone(dateTimeZone16);
        org.joda.time.DurationField durationField27 = iSOChronology8.centuries();
        org.joda.time.DurationField durationField28 = iSOChronology8.seconds();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology8.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 36000000 + "'", int7 == 36000000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+10:00" + "'", str17, "+10:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 36000010L + "'", long22 == 36000010L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 256278993L + "'", long25 == 256278993L);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test09952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09952");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.weekyearOfCentury();
        long long22 = iSOChronology13.add((long) (short) 100, 0L, 3);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField24 = iSOChronology13.halfdays();
        org.joda.time.Chronology chronology25 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.minuteOfDay();
        org.joda.time.DurationField durationField29 = iSOChronology13.weekyears();
        java.lang.Class<?> wildcardClass30 = iSOChronology13.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L + "'", long22 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test09953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09953");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.era();
        org.joda.time.DurationField durationField15 = iSOChronology8.seconds();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.dayOfWeek();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        int int20 = dateTimeZone18.getOffsetFromLocal((long) (byte) 1);
        org.joda.time.Chronology chronology21 = iSOChronology8.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology8.minuteOfDay();
        org.joda.time.DurationField durationField24 = iSOChronology8.minutes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 36000000 + "'", int7 == 36000000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 36000000 + "'", int20 == 36000000);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test09954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09954");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        int int12 = dateTimeZone10.getOffset(2924946L);
        java.lang.String str13 = dateTimeZone10.getID();
        long long15 = dateTimeZone1.getMillisKeepLocal(dateTimeZone10, 5520000L);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone10.getName(172374075201600000L, locale17);
        long long21 = dateTimeZone10.convertLocalToUTC((-288498046L), false);
        long long25 = dateTimeZone10.convertLocalToUTC(66866322L, false, 187200002L);
        java.lang.String str27 = dateTimeZone10.getNameKey((long) 62317);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 36000000 + "'", int7 == 36000000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 41520000L + "'", long15 == 41520000L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-288498046L) + "'", long21 == (-288498046L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 66866322L + "'", long25 == 66866322L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
    }

    @Test
    public void test09955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09955");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        java.lang.String str10 = dateTimeZone1.getID();
        boolean boolean12 = dateTimeZone1.equals((java.lang.Object) 1439100L);
        java.lang.String str13 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+10:00" + "'", str10, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
    }

    @Test
    public void test09956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09956");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfDay();
        java.lang.String str19 = iSOChronology13.toString();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str22 = dateTimeZone21.toString();
        java.lang.String str23 = dateTimeZone21.getID();
        int int25 = dateTimeZone21.getOffsetFromLocal(36059035L);
        org.joda.time.Chronology chronology26 = iSOChronology13.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology13.dayOfMonth();
        org.joda.time.DurationField durationField33 = iSOChronology13.months();
        int int36 = durationField33.getValue(189333191314800000L, 405544L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+10:00]" + "'", str19, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:00" + "'", str22, "+10:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+10:00" + "'", str23, "+10:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 36000000 + "'", int25 == 36000000);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 71996759 + "'", int36 == 71996759);
    }

    @Test
    public void test09957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09957");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = iSOChronology8.add(readablePeriod14, (long) 'a', (-1));
        org.joda.time.DurationField durationField18 = iSOChronology8.days();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology8.millisOfSecond();
        org.joda.time.DurationField durationField23 = iSOChronology8.days();
        boolean boolean24 = durationField23.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 36000000 + "'", int7 == 36000000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 97L + "'", long17 == 97L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test09958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09958");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DurationField durationField17 = iSOChronology13.minutes();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.lang.String str20 = dateTimeZone19.toString();
        java.lang.String str21 = dateTimeZone19.getID();
        int int23 = dateTimeZone19.getOffsetFromLocal(36059035L);
        int int25 = dateTimeZone19.getStandardOffset((long) '#');
        java.lang.String str27 = dateTimeZone19.getName((-28852080000L));
        org.joda.time.Chronology chronology28 = iSOChronology13.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology13.monthOfYear();
        org.joda.time.DurationField durationField30 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology13.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 36000000 + "'", int23 == 36000000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 36000000 + "'", int25 == 36000000);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+10:00" + "'", str27, "+10:00");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test09959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09959");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str3 = dateTimeZone1.getID();
        int int5 = dateTimeZone1.getOffsetFromLocal(36059035L);
        int int7 = dateTimeZone1.getStandardOffset((long) '#');
        java.lang.String str9 = dateTimeZone1.getName((-28852080000L));
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.lang.String str13 = dateTimeZone12.toString();
        java.lang.String str15 = dateTimeZone12.getShortName(1L);
        int int17 = dateTimeZone12.getOffsetFromLocal((long) (byte) 0);
        int int19 = dateTimeZone12.getStandardOffset((long) (short) 0);
        java.lang.String str20 = dateTimeZone12.getID();
        long long23 = dateTimeZone12.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField25 = iSOChronology24.months();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology24.secondOfDay();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology24.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology24.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology24.weekOfWeekyear();
        org.joda.time.Chronology chronology30 = iSOChronology24.withUTC();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology24.yearOfCentury();
        org.joda.time.Chronology chronology32 = iSOChronology24.withUTC();
        org.joda.time.DateTimeZone dateTimeZone33 = iSOChronology24.getZone();
        boolean boolean34 = dateTimeZone1.equals((java.lang.Object) iSOChronology24);
        long long36 = dateTimeZone1.convertUTCToLocal(129383481600000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+10:00" + "'", str3, "+10:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 36000000 + "'", int5 == 36000000);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 36000000 + "'", int7 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 36000000 + "'", int19 == 36000000);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-36000000L) + "'", long23 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 129383517600000L + "'", long36 == 129383517600000L);
    }

    @Test
    public void test09960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09960");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.Chronology chronology16 = iSOChronology13.withUTC();
        java.lang.String str17 = iSOChronology13.toString();
        org.joda.time.DurationField durationField18 = iSOChronology13.millis();
        org.joda.time.DurationField durationField19 = iSOChronology13.seconds();
        org.joda.time.DurationField durationField20 = iSOChronology13.days();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[+10:00]" + "'", str17, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test09961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09961");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.year();
        org.joda.time.DurationField durationField22 = iSOChronology13.hours();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.era();
        org.joda.time.DurationField durationField24 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.dayOfWeek();
        long long27 = dateTimeField25.remainder((-21274847510400000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 36000000L + "'", long27 == 36000000L);
    }

    @Test
    public void test09962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09962");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.weekyear();
        org.joda.time.DurationField durationField16 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.hourOfDay();
        org.joda.time.DurationField durationField22 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test09963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09963");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField21 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.weekOfWeekyear();
        java.lang.String str24 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone26 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.era();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[+10:00]" + "'", str24, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test09964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09964");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology13.getZone();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str18 = dateTimeZone17.toString();
        java.lang.String str20 = dateTimeZone17.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        int int23 = dateTimeZone17.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField25 = iSOChronology24.minutes();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology24.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology24.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology24.minuteOfDay();
        org.joda.time.DurationField durationField29 = iSOChronology24.seconds();
        org.joda.time.DurationField durationField30 = iSOChronology24.millis();
        boolean boolean31 = dateTimeZone15.equals((java.lang.Object) iSOChronology24);
        org.joda.time.DurationField durationField32 = iSOChronology24.days();
        org.joda.time.DurationField durationField33 = iSOChronology24.months();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray36 = iSOChronology24.get(readablePeriod34, (-11113799587L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 36000000 + "'", int23 == 36000000);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test09965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09965");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.year();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test09966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09966");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DurationField durationField12 = iSOChronology8.halfdays();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.lang.String str15 = dateTimeZone14.toString();
        java.lang.String str17 = dateTimeZone14.getShortName(1L);
        int int19 = dateTimeZone14.getOffsetFromLocal((long) (byte) 0);
        int int21 = dateTimeZone14.getStandardOffset((long) (short) 0);
        java.lang.String str22 = dateTimeZone14.getID();
        long long25 = dateTimeZone14.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField27 = iSOChronology26.months();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology26.secondOfDay();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology26.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology26.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology26.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology26.centuryOfEra();
        org.joda.time.DurationField durationField33 = iSOChronology26.weekyears();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.lang.String str36 = dateTimeZone35.toString();
        java.lang.String str38 = dateTimeZone35.getShortName(1L);
        int int40 = dateTimeZone35.getOffsetFromLocal((long) (byte) 0);
        int int42 = dateTimeZone35.getStandardOffset((long) (short) 0);
        java.lang.String str43 = dateTimeZone35.getID();
        long long46 = dateTimeZone35.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology47 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone35);
        org.joda.time.DurationField durationField48 = iSOChronology47.months();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology47.secondOfDay();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology47.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology47.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology47.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology47.halfdayOfDay();
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        java.lang.String str56 = dateTimeZone55.toString();
        java.lang.String str58 = dateTimeZone55.getShortName(1L);
        int int60 = dateTimeZone55.getOffsetFromLocal((long) (byte) 0);
        int int62 = dateTimeZone55.getStandardOffset((long) (short) 0);
        java.lang.String str63 = dateTimeZone55.getID();
        long long66 = dateTimeZone55.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology67 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone55);
        org.joda.time.DurationField durationField68 = iSOChronology67.months();
        org.joda.time.DateTimeZone dateTimeZone69 = iSOChronology67.getZone();
        java.util.TimeZone timeZone70 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        java.lang.String str72 = dateTimeZone71.toString();
        java.lang.String str74 = dateTimeZone71.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone71);
        int int77 = dateTimeZone71.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology78 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone71);
        org.joda.time.DurationField durationField79 = iSOChronology78.minutes();
        org.joda.time.DateTimeField dateTimeField80 = iSOChronology78.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField81 = iSOChronology78.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField82 = iSOChronology78.minuteOfDay();
        org.joda.time.DurationField durationField83 = iSOChronology78.seconds();
        org.joda.time.DurationField durationField84 = iSOChronology78.millis();
        boolean boolean85 = dateTimeZone69.equals((java.lang.Object) iSOChronology78);
        org.joda.time.Chronology chronology86 = iSOChronology47.withZone(dateTimeZone69);
        org.joda.time.Chronology chronology87 = iSOChronology26.withZone(dateTimeZone69);
        org.joda.time.Chronology chronology88 = iSOChronology8.withZone(dateTimeZone69);
        org.joda.time.DateTimeField dateTimeField89 = iSOChronology8.era();
        int int90 = dateTimeField89.getMaximumValue();
        org.joda.time.DurationField durationField91 = dateTimeField89.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 36000000 + "'", int7 == 36000000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+10:00" + "'", str17, "+10:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 36000000 + "'", int19 == 36000000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:00" + "'", str22, "+10:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-36000000L) + "'", long25 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+10:00" + "'", str38, "+10:00");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 36000000 + "'", int40 == 36000000);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 36000000 + "'", int42 == 36000000);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+10:00" + "'", str43, "+10:00");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-36000000L) + "'", long46 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+10:00" + "'", str56, "+10:00");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+10:00" + "'", str58, "+10:00");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 36000000 + "'", int60 == 36000000);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 36000000 + "'", int62 == 36000000);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+10:00" + "'", str63, "+10:00");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-36000000L) + "'", long66 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+10:00" + "'", str72, "+10:00");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+10:00" + "'", str74, "+10:00");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 36000000 + "'", int77 == 36000000);
        org.junit.Assert.assertNotNull(iSOChronology78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNull(durationField91);
    }

    @Test
    public void test09967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09967");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DurationField durationField12 = iSOChronology8.years();
        org.joda.time.DurationField durationField13 = iSOChronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.year();
        org.joda.time.DurationField durationField15 = iSOChronology8.millis();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology8.millisOfDay();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        java.lang.String str21 = dateTimeZone18.getShortName(1L);
        int int23 = dateTimeZone18.getOffsetFromLocal((long) (byte) 0);
        int int25 = dateTimeZone18.getStandardOffset((long) (short) 0);
        java.lang.String str26 = dateTimeZone18.getID();
        long long29 = dateTimeZone18.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone18);
        org.joda.time.DurationField durationField31 = iSOChronology30.months();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology30.hourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology30.yearOfEra();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology30.clockhourOfDay();
        org.joda.time.DurationField durationField35 = iSOChronology30.millis();
        boolean boolean36 = iSOChronology8.equals((java.lang.Object) iSOChronology30);
        org.joda.time.DurationField durationField37 = iSOChronology8.years();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology8.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 36000000 + "'", int7 == 36000000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 36000000 + "'", int23 == 36000000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 36000000 + "'", int25 == 36000000);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-36000000L) + "'", long29 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test09968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09968");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.year();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField13 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.weekyear();
        org.joda.time.DurationField durationField15 = iSOChronology8.weekyears();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = iSOChronology8.add(readablePeriod16, (-52L), 86400000);
        org.joda.time.DurationField durationField20 = iSOChronology8.centuries();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 36000000 + "'", int7 == 36000000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-52L) + "'", long19 == (-52L));
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test09969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09969");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.dayOfYear();
        int int16 = dateTimeField13.getDifference((-3600000L), (long) (short) 0);
        java.lang.String str17 = dateTimeField13.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = dateTimeField13.set(25258308126480000L, "57600");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 57600 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 36000000 + "'", int7 == 36000000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DateTimeField[dayOfYear]" + "'", str17, "DateTimeField[dayOfYear]");
    }

    @Test
    public void test09970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09970");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField18 = iSOChronology13.halfdays();
        java.lang.String str19 = iSOChronology13.toString();
        org.joda.time.DurationField durationField20 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.era();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-1), 0);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.lang.String str27 = dateTimeZone26.toString();
        java.lang.String str29 = dateTimeZone26.getShortName(1L);
        int int31 = dateTimeZone26.getOffsetFromLocal((long) (byte) 0);
        long long34 = dateTimeZone26.convertLocalToUTC(0L, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        long long37 = dateTimeZone24.getMillisKeepLocal(dateTimeZone26, 0L);
        org.joda.time.Chronology chronology38 = iSOChronology13.withZone(dateTimeZone24);
        // The following exception was thrown during execution in test generation
        try {
            long long44 = iSOChronology13.getDateTimeMillis(53L, (-182074498), (-1370879), 34536, 86400100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -182074498 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+10:00]" + "'", str19, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+10:00" + "'", str27, "+10:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+10:00" + "'", str29, "+10:00");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-36000000L) + "'", long34 == (-36000000L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-39600000L) + "'", long37 == (-39600000L));
        org.junit.Assert.assertNotNull(chronology38);
    }

    @Test
    public void test09971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09971");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.clockhourOfHalfday();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str17 = dateTimeZone16.toString();
        java.lang.String str19 = dateTimeZone16.getShortName(1L);
        int int21 = dateTimeZone16.getOffsetFromLocal((long) (byte) 0);
        int int23 = dateTimeZone16.getStandardOffset((long) (short) 0);
        boolean boolean24 = iSOChronology13.equals((java.lang.Object) dateTimeZone16);
        long long27 = dateTimeZone16.adjustOffset(25252904995200000L, false);
        int int29 = dateTimeZone16.getOffsetFromLocal(4579200000L);
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology30.dayOfWeek();
        org.joda.time.DurationField durationField32 = iSOChronology30.hours();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology30.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+10:00" + "'", str17, "+10:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 36000000 + "'", int23 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 25252904995200000L + "'", long27 == 25252904995200000L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 36000000 + "'", int29 == 36000000);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test09972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09972");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.monthOfYear();
        org.joda.time.DurationField durationField12 = iSOChronology8.eras();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 36000000 + "'", int7 == 36000000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test09973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09973");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology13.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField18 = iSOChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology17.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology17.yearOfCentury();
        org.joda.time.DurationField durationField22 = iSOChronology17.millis();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology17.dayOfMonth();
        org.joda.time.DurationField durationField24 = iSOChronology17.hours();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology17.secondOfMinute();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = dateTimeField26.getAsShortText(readablePartial27, locale28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test09974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09974");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.secondOfDay();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.lang.String str15 = dateTimeZone14.toString();
        java.lang.String str17 = dateTimeZone14.getShortName(1L);
        int int19 = dateTimeZone14.getOffsetFromLocal((long) (byte) 0);
        int int21 = dateTimeZone14.getStandardOffset((long) (short) 0);
        java.lang.String str22 = dateTimeZone14.getID();
        long long25 = dateTimeZone14.adjustOffset(0L, true);
        org.joda.time.Chronology chronology26 = iSOChronology8.withZone(dateTimeZone14);
        boolean boolean27 = dateTimeZone14.isFixed();
        int int29 = dateTimeZone14.getOffset((long) 0);
        java.lang.String str30 = dateTimeZone14.getID();
        long long32 = dateTimeZone14.previousTransition(0L);
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone14.getShortName(254876400000L, locale34);
        long long39 = dateTimeZone14.convertLocalToUTC(7L, true, (-640800000L));
        java.lang.String str41 = dateTimeZone14.getName(8005537177714827L);
        long long44 = dateTimeZone14.adjustOffset(3212L, true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 36000000 + "'", int7 == 36000000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+10:00" + "'", str17, "+10:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 36000000 + "'", int19 == 36000000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:00" + "'", str22, "+10:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 36000000 + "'", int29 == 36000000);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:00" + "'", str30, "+10:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-35999993L) + "'", long39 == (-35999993L));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+10:00" + "'", str41, "+10:00");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3212L + "'", long44 == 3212L);
    }

    @Test
    public void test09975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09975");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.Chronology chronology18 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.secondOfDay();
        long long23 = iSOChronology13.add(0L, (-2L), (-102162));
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.era();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.secondOfMinute();
        org.joda.time.ReadablePartial readablePartial26 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray28 = iSOChronology13.get(readablePartial26, 316087010232L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 204324L + "'", long23 == 204324L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test09976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09976");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.secondOfDay();
        org.joda.time.DurationField durationField12 = iSOChronology8.minutes();
        org.joda.time.DurationField durationField13 = iSOChronology8.years();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.dayOfYear();
        org.joda.time.DurationField durationField15 = iSOChronology8.centuries();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray19 = iSOChronology8.get(readablePeriod16, (-62167219199999L), (-1022400000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 36000000 + "'", int7 == 36000000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test09977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09977");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = iSOChronology13.getZone();
        java.lang.String str18 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.monthOfYear();
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeField19.getAsShortText((-61788110399989L), locale21);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+10:00]" + "'", str18, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Jan" + "'", str22, "Jan");
    }

    @Test
    public void test09978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09978");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.hourOfDay();
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeField19.getAsShortText(2678399999L, locale21);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeField19.getAsText((long) 240, locale24);
        long long28 = dateTimeField19.add((-2726520590077200000L), 187200000);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "9" + "'", str22, "9");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "10" + "'", str25, "10");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-2725846670077200000L) + "'", long28 == (-2725846670077200000L));
    }

    @Test
    public void test09979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09979");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.weekyearOfCentury();
        long long22 = iSOChronology13.add((long) (short) 100, 0L, 3);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField24 = iSOChronology13.halfdays();
        org.joda.time.Chronology chronology25 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L + "'", long22 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test09980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09980");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.year();
        org.joda.time.DurationField durationField21 = iSOChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.weekyear();
        java.lang.String str26 = dateTimeField24.getAsText(38814840000000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "3199" + "'", str26, "3199");
    }

    @Test
    public void test09981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09981");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology20 = iSOChronology13.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.millisOfSecond();
        org.joda.time.DurationField durationField22 = iSOChronology13.minutes();
        org.joda.time.DurationField durationField23 = iSOChronology13.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test09982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09982");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.year();
        org.joda.time.DurationField durationField16 = iSOChronology13.weekyears();
        org.joda.time.DurationField durationField17 = iSOChronology13.days();
        org.joda.time.ReadablePartial readablePartial18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray20 = iSOChronology13.get(readablePartial18, 4380073380691200000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test09983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09983");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField20 = iSOChronology13.centuries();
        org.joda.time.Chronology chronology21 = iSOChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.dayOfYear();
        org.joda.time.ReadablePartial readablePartial23 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long25 = iSOChronology13.set(readablePartial23, (-59042995200000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test09984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09984");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray21 = iSOChronology13.get(readablePeriod19, 5256000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test09985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09985");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.clockhourOfHalfday();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str17 = dateTimeZone16.toString();
        java.lang.String str19 = dateTimeZone16.getShortName(1L);
        int int21 = dateTimeZone16.getOffsetFromLocal((long) (byte) 0);
        int int23 = dateTimeZone16.getStandardOffset((long) (short) 0);
        boolean boolean24 = iSOChronology13.equals((java.lang.Object) dateTimeZone16);
        long long27 = dateTimeZone16.adjustOffset(25252904995200000L, false);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str30 = dateTimeZone29.toString();
        java.lang.String str32 = dateTimeZone29.getShortName(1L);
        int int34 = dateTimeZone29.getOffsetFromLocal((long) (byte) 0);
        int int36 = dateTimeZone29.getStandardOffset((long) (short) 0);
        java.lang.String str37 = dateTimeZone29.getID();
        long long40 = dateTimeZone29.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField42 = iSOChronology41.months();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology41.secondOfDay();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology41.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology41.secondOfMinute();
        org.joda.time.DurationField durationField46 = iSOChronology41.weeks();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology41.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology41.year();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology41.hourOfHalfday();
        boolean boolean50 = dateTimeZone16.equals((java.lang.Object) iSOChronology41);
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology41.centuryOfEra();
        java.lang.String str52 = iSOChronology41.toString();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology41.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology41.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+10:00" + "'", str17, "+10:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 36000000 + "'", int23 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 25252904995200000L + "'", long27 == 25252904995200000L);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:00" + "'", str30, "+10:00");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+10:00" + "'", str32, "+10:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 36000000 + "'", int34 == 36000000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 36000000 + "'", int36 == 36000000);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+10:00" + "'", str37, "+10:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-36000000L) + "'", long40 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[+10:00]" + "'", str52, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test09986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09986");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str3 = dateTimeZone1.getID();
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField6 = iSOChronology5.minutes();
        long long9 = durationField6.subtract(5530035L, 374399999L);
        int int12 = durationField6.getValue((-2208988800000L), 3798575L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+10:00" + "'", str3, "+10:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-22463994409965L) + "'", long9 == (-22463994409965L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-36816480) + "'", int12 == (-36816480));
    }

    @Test
    public void test09987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09987");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology13.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField18 = iSOChronology17.halfdays();
        org.joda.time.DurationField durationField19 = iSOChronology17.hours();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology17.hourOfDay();
        org.joda.time.DurationField durationField21 = iSOChronology17.weekyears();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology17.minuteOfDay();
        org.joda.time.DurationField durationField24 = iSOChronology17.hours();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test09988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09988");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfMonth();
        long long19 = iSOChronology13.add(172374075201600000L, (-273470301L), 2922789);
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.weekOfWeekyear();
        org.joda.time.ReadablePartial readablePartial21 = null;
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.lang.String str25 = dateTimeZone24.toString();
        java.lang.String str27 = dateTimeZone24.getShortName(1L);
        int int29 = dateTimeZone24.getOffsetFromLocal((long) (byte) 0);
        int int31 = dateTimeZone24.getStandardOffset((long) (short) 0);
        java.lang.String str32 = dateTimeZone24.getID();
        long long35 = dateTimeZone24.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology36.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology36.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology36.era();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology36.hourOfHalfday();
        java.lang.String str41 = dateTimeField40.toString();
        org.joda.time.ReadablePartial readablePartial42 = null;
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        java.lang.String str45 = dateTimeZone44.toString();
        java.lang.String str47 = dateTimeZone44.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        int int50 = dateTimeZone44.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology51 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone44);
        org.joda.time.DurationField durationField52 = iSOChronology51.minutes();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology51.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology51.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology51.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology51.dayOfYear();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology51.hourOfDay();
        org.joda.time.ReadablePartial readablePartial58 = null;
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        java.lang.String str61 = dateTimeZone60.toString();
        java.lang.String str63 = dateTimeZone60.getShortName(1L);
        int int65 = dateTimeZone60.getOffsetFromLocal((long) (byte) 0);
        int int67 = dateTimeZone60.getStandardOffset((long) (short) 0);
        java.lang.String str68 = dateTimeZone60.getID();
        long long71 = dateTimeZone60.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology72 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone60);
        org.joda.time.DateTimeField dateTimeField73 = iSOChronology72.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField74 = iSOChronology72.minuteOfHour();
        org.joda.time.ReadablePartial readablePartial75 = null;
        int[] intArray78 = new int[] { (short) -1, 0 };
        int int79 = dateTimeField74.getMinimumValue(readablePartial75, intArray78);
        int int80 = dateTimeField57.getMinimumValue(readablePartial58, intArray78);
        int int81 = dateTimeField40.getMinimumValue(readablePartial42, intArray78);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray83 = dateTimeField20.add(readablePartial21, 53, intArray78, 71996759);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 171574779214010511L + "'", long19 == 171574779214010511L);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+10:00" + "'", str27, "+10:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 36000000 + "'", int29 == 36000000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+10:00" + "'", str32, "+10:00");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-36000000L) + "'", long35 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "DateTimeField[hourOfHalfday]" + "'", str41, "DateTimeField[hourOfHalfday]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+10:00" + "'", str45, "+10:00");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+10:00" + "'", str47, "+10:00");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 36000000 + "'", int50 == 36000000);
        org.junit.Assert.assertNotNull(iSOChronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+10:00" + "'", str61, "+10:00");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+10:00" + "'", str63, "+10:00");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 36000000 + "'", int65 == 36000000);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 36000000 + "'", int67 == 36000000);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+10:00" + "'", str68, "+10:00");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-36000000L) + "'", long71 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test09989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09989");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DurationField durationField20 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.yearOfCentury();
        org.joda.time.DurationField durationField24 = iSOChronology13.years();
        // The following exception was thrown during execution in test generation
        try {
            long long29 = iSOChronology13.getDateTimeMillis(0, (-1573), (-297682553), 35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1573 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test09990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09990");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField21 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = iSOChronology13.add(readablePeriod24, (-378683424000L), 2507);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-378683424000L) + "'", long27 == (-378683424000L));
    }

    @Test
    public void test09991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09991");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) 'a');
        org.joda.time.Chronology chronology22 = iSOChronology13.withZone(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        java.lang.String str26 = dateTimeZone23.getName((-986947200000L));
        long long29 = dateTimeZone23.convertLocalToUTC((-7043511686587200000L), false);
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField31 = iSOChronology30.centuries();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-7043511686623200000L) + "'", long29 == (-7043511686623200000L));
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test09992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09992");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.millisOfDay();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        java.lang.String str16 = dateTimeZone13.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        int int19 = dateTimeZone13.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField21 = iSOChronology20.minutes();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology20.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology20.minuteOfHour();
        boolean boolean24 = iSOChronology8.equals((java.lang.Object) iSOChronology20);
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology20.millisOfSecond();
        org.joda.time.ReadablePartial readablePartial26 = null;
        int int27 = dateTimeField25.getMaximumValue(readablePartial26);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 36000000 + "'", int7 == 36000000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+10:00" + "'", str16, "+10:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 36000000 + "'", int19 == 36000000);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 999 + "'", int27 == 999);
    }

    @Test
    public void test09993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09993");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = iSOChronology13.getZone();
        java.lang.String str18 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField21 = iSOChronology13.years();
        // The following exception was thrown during execution in test generation
        try {
            long long26 = iSOChronology13.getDateTimeMillis(864001, (-1), 187200000, 29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+10:00]" + "'", str18, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test09994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09994");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        java.lang.String str19 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+10:00]" + "'", str19, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test09995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09995");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = iSOChronology13.centuries();
        org.joda.time.DurationField durationField20 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test09996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09996");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology8.getZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
        org.joda.time.Chronology chronology18 = iSOChronology8.withZone(dateTimeZone16);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str21 = dateTimeZone20.toString();
        java.lang.String str23 = dateTimeZone20.getShortName(1L);
        int int25 = dateTimeZone20.getOffsetFromLocal((long) (byte) 0);
        int int27 = dateTimeZone20.getStandardOffset((long) (short) 0);
        java.lang.String str28 = dateTimeZone20.getID();
        long long31 = dateTimeZone20.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField33 = iSOChronology32.months();
        org.joda.time.DurationField durationField34 = iSOChronology32.weeks();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology32.year();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology32.yearOfCentury();
        long long42 = iSOChronology32.getDateTimeMillis(259200100L, 11, (int) (byte) 10, (int) (short) 10, (int) ' ');
        org.joda.time.DurationField durationField43 = iSOChronology32.weeks();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology32.hourOfDay();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology32.minuteOfHour();
        org.joda.time.DurationField durationField46 = iSOChronology32.hours();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology32.era();
        org.joda.time.DateTimeZone dateTimeZone48 = iSOChronology32.getZone();
        org.joda.time.Chronology chronology49 = iSOChronology8.withZone(dateTimeZone48);
        long long52 = dateTimeZone48.adjustOffset((long) 17562, true);
        boolean boolean54 = dateTimeZone48.isStandardOffset(0L);
        int int56 = dateTimeZone48.getOffsetFromLocal(170783449L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 36000000 + "'", int7 == 36000000);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+10:00" + "'", str23, "+10:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 36000000 + "'", int25 == 36000000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+10:00" + "'", str28, "+10:00");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-36000000L) + "'", long31 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 263410032L + "'", long42 == 263410032L);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 17562L + "'", long52 == 17562L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 36000000 + "'", int56 == 36000000);
    }

    @Test
    public void test09997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09997");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.monthOfYear();
        org.joda.time.DurationField durationField17 = iSOChronology13.months();
        org.joda.time.DurationField durationField18 = iSOChronology13.hours();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey(10L);
        long long24 = dateTimeZone20.previousTransition(0L);
        java.lang.String str26 = dateTimeZone20.getNameKey((-12859899912000000L));
        org.joda.time.Chronology chronology27 = iSOChronology13.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone28 = iSOChronology13.getZone();
        long long32 = dateTimeZone28.convertLocalToUTC(26127360000000000L, true, 4338678993L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 26127359964000000L + "'", long32 == 26127359964000000L);
    }

    @Test
    public void test09998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09998");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField14 = iSOChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.dayOfWeek();
        org.joda.time.DurationField durationField17 = iSOChronology13.centuries();
        long long21 = iSOChronology13.add(101L, 25249967395200L, 0);
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology13.centuryOfEra();
        int int24 = dateTimeField22.getLeapAmount(9223372036667575807L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 101L + "'", long21 == 101L);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test09999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09999");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) (byte) 1);
        long long5 = dateTimeZone1.convertUTCToLocal(97L);
        java.lang.String str6 = dateTimeZone1.getID();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str9 = dateTimeZone8.toString();
        java.lang.String str11 = dateTimeZone8.getShortName(1L);
        int int13 = dateTimeZone8.getOffsetFromLocal((long) (byte) 0);
        int int15 = dateTimeZone8.getStandardOffset((long) (short) 0);
        java.lang.String str16 = dateTimeZone8.getID();
        long long19 = dateTimeZone8.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField21 = iSOChronology20.months();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology20.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology20.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology20.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology20.minuteOfDay();
        org.joda.time.DurationField durationField26 = iSOChronology20.weekyears();
        org.joda.time.DurationField durationField27 = iSOChronology20.hours();
        org.joda.time.DurationField durationField28 = iSOChronology20.hours();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology20.year();
        boolean boolean30 = dateTimeZone1.equals((java.lang.Object) iSOChronology20);
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology20.hourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology20.hourOfDay();
        org.joda.time.ReadablePartial readablePartial33 = null;
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.lang.String str37 = dateTimeZone36.toString();
        java.lang.String str39 = dateTimeZone36.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        int int42 = dateTimeZone36.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone36);
        org.joda.time.DurationField durationField44 = iSOChronology43.minutes();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology43.monthOfYear();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology43.centuryOfEra();
        org.joda.time.ReadablePartial readablePartial47 = null;
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        java.lang.String str50 = dateTimeZone49.toString();
        java.lang.String str52 = dateTimeZone49.getShortName(1L);
        int int54 = dateTimeZone49.getOffsetFromLocal((long) (byte) 0);
        int int56 = dateTimeZone49.getStandardOffset((long) (short) 0);
        java.lang.String str57 = dateTimeZone49.getID();
        long long60 = dateTimeZone49.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology61 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology61.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology61.dayOfYear();
        org.joda.time.DurationField durationField64 = iSOChronology61.weeks();
        org.joda.time.DateTimeField dateTimeField65 = iSOChronology61.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial66 = null;
        int[] intArray73 = new int[] { (short) 100, '4', (short) 1, (-292275054), 292278993 };
        int[] intArray75 = dateTimeField65.addWrapPartial(readablePartial66, 59, intArray73, (int) (short) 0);
        int int76 = dateTimeField46.getMinimumValue(readablePartial47, intArray73);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray78 = dateTimeField32.addWrapPartial(readablePartial33, 0, intArray73, (-722551));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 36000097L + "'", long5 == 36000097L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 36000000 + "'", int15 == 36000000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+10:00" + "'", str16, "+10:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-36000000L) + "'", long19 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+10:00" + "'", str37, "+10:00");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+10:00" + "'", str39, "+10:00");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 36000000 + "'", int42 == 36000000);
        org.junit.Assert.assertNotNull(iSOChronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+10:00" + "'", str50, "+10:00");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+10:00" + "'", str52, "+10:00");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 36000000 + "'", int54 == 36000000);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 36000000 + "'", int56 == 36000000);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+10:00" + "'", str57, "+10:00");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-36000000L) + "'", long60 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[21, 52, 1, -292275054, 292278993]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[21, 52, 1, -292275054, 292278993]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test10000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test10000");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName(1L);
        int int6 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) 0);
        java.lang.String str9 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.monthOfYear();
        org.joda.time.DurationField durationField17 = iSOChronology13.months();
        org.joda.time.DurationField durationField18 = iSOChronology13.hours();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str21 = dateTimeZone20.toString();
        java.lang.String str23 = dateTimeZone20.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        int int26 = dateTimeZone20.getOffsetFromLocal((long) (short) -1);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField28 = iSOChronology27.minutes();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology27.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology27.minuteOfHour();
        org.joda.time.DurationField durationField31 = iSOChronology27.minutes();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology27.era();
        org.joda.time.DurationField durationField33 = iSOChronology27.weeks();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology27.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology27.weekyear();
        org.joda.time.DateTimeZone dateTimeZone36 = iSOChronology27.getZone();
        org.joda.time.Chronology chronology37 = iSOChronology13.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology13.era();
        org.joda.time.DurationField durationField39 = iSOChronology13.weekyears();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000000L) + "'", long12 == (-36000000L));
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+10:00" + "'", str23, "+10:00");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 36000000 + "'", int26 == 36000000);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
    }
}
